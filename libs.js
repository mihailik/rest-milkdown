(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b4) => {
    for (var prop in b4 || (b4 = {}))
      if (__hasOwnProp.call(b4, prop))
        __defNormalProp(a2, prop, b4[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b4)) {
        if (__propIsEnum.call(b4, prop))
          __defNormalProp(a2, prop, b4[prop]);
      }
    return a2;
  };
  var __spreadProps = (a2, b4) => __defProps(a2, __getOwnPropDescs(b4));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all2) => {
    for (var name2 in all2)
      __defProp(target, name2, { get: all2[name2], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e3) {
          reject(e3);
        }
      };
      var step = (x7) => x7.done ? resolve(x7.value) : Promise.resolve(x7.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // node_modules/extend/index.js
  var require_extend = __commonJS({
    "node_modules/extend/index.js"(exports2, module) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject2 = function isPlainObject3(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      var setProperty = function setProperty2(target, options) {
        if (defineProperty && options.name === "__proto__") {
          defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
          });
        } else {
          target[options.name] = options.newValue;
        }
      };
      var getProperty = function getProperty2(obj, name2) {
        if (name2 === "__proto__") {
          if (!hasOwn.call(obj, name2)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name2).value;
          }
        }
        return obj[name2];
      };
      module.exports = function extend3() {
        var options, name2, src, copy2, copyIsArray, clone;
        var target = arguments[0];
        var i3 = 1;
        var length = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i3 = 2;
        }
        if (target == null || typeof target !== "object" && typeof target !== "function") {
          target = {};
        }
        for (; i3 < length; ++i3) {
          options = arguments[i3];
          if (options != null) {
            for (name2 in options) {
              src = getProperty(target, name2);
              copy2 = getProperty(options, name2);
              if (target !== copy2) {
                if (deep && copy2 && (isPlainObject2(copy2) || (copyIsArray = isArray(copy2)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject2(src) ? src : {};
                  }
                  setProperty(target, { name: name2, newValue: extend3(deep, clone, copy2) });
                } else if (typeof copy2 !== "undefined") {
                  setProperty(target, { name: name2, newValue: copy2 });
                }
              }
            }
          }
        }
        return target;
      };
    }
  });

  // node_modules/@codemirror/autocomplete/dist/index.js
  var dist_exports4 = {};
  __export(dist_exports4, {
    CompletionContext: () => CompletionContext,
    acceptCompletion: () => acceptCompletion,
    autocompletion: () => autocompletion,
    clearSnippet: () => clearSnippet,
    closeBrackets: () => closeBrackets,
    closeBracketsKeymap: () => closeBracketsKeymap,
    closeCompletion: () => closeCompletion,
    completeAnyWord: () => completeAnyWord,
    completeFromList: () => completeFromList,
    completionKeymap: () => completionKeymap,
    completionStatus: () => completionStatus,
    currentCompletions: () => currentCompletions,
    deleteBracketPair: () => deleteBracketPair,
    hasNextSnippetField: () => hasNextSnippetField,
    hasPrevSnippetField: () => hasPrevSnippetField,
    ifIn: () => ifIn,
    ifNotIn: () => ifNotIn,
    insertBracket: () => insertBracket,
    insertCompletionText: () => insertCompletionText,
    moveCompletionSelection: () => moveCompletionSelection,
    nextSnippetField: () => nextSnippetField,
    pickedCompletion: () => pickedCompletion,
    prevSnippetField: () => prevSnippetField,
    selectedCompletion: () => selectedCompletion,
    selectedCompletionIndex: () => selectedCompletionIndex,
    setSelectedCompletion: () => setSelectedCompletion,
    snippet: () => snippet,
    snippetCompletion: () => snippetCompletion,
    snippetKeymap: () => snippetKeymap,
    startCompletion: () => startCompletion
  });

  // node_modules/@codemirror/state/dist/index.js
  var dist_exports = {};
  __export(dist_exports, {
    Annotation: () => Annotation,
    AnnotationType: () => AnnotationType,
    ChangeDesc: () => ChangeDesc,
    ChangeSet: () => ChangeSet,
    CharCategory: () => CharCategory,
    Compartment: () => Compartment,
    EditorSelection: () => EditorSelection,
    EditorState: () => EditorState,
    Facet: () => Facet,
    Line: () => Line,
    MapMode: () => MapMode,
    Prec: () => Prec,
    Range: () => Range,
    RangeSet: () => RangeSet,
    RangeSetBuilder: () => RangeSetBuilder,
    RangeValue: () => RangeValue,
    SelectionRange: () => SelectionRange,
    StateEffect: () => StateEffect,
    StateEffectType: () => StateEffectType,
    StateField: () => StateField,
    Text: () => Text2,
    Transaction: () => Transaction,
    codePointAt: () => codePointAt,
    codePointSize: () => codePointSize,
    combineConfig: () => combineConfig,
    countColumn: () => countColumn,
    findClusterBreak: () => findClusterBreak,
    findColumn: () => findColumn,
    fromCodePoint: () => fromCodePoint
  });
  var Text2 = class _Text {
    /**
    Get the line description around the given position.
    */
    lineAt(pos) {
      if (pos < 0 || pos > this.length)
        throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
    line(n5) {
      if (n5 < 1 || n5 > this.lines)
        throw new RangeError(`Invalid line number ${n5} in ${this.lines}-line document`);
      return this.lineInner(n5, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
    replace(from2, to, text5) {
      [from2, to] = clip(this, from2, to);
      let parts = [];
      this.decompose(
        0,
        from2,
        parts,
        2
        /* Open.To */
      );
      if (text5.length)
        text5.decompose(
          0,
          text5.length,
          parts,
          1 | 2
          /* Open.To */
        );
      this.decompose(
        to,
        this.length,
        parts,
        1
        /* Open.From */
      );
      return TextNode.from(parts, this.length - (to - from2) + text5.length);
    }
    /**
    Append another document to this one.
    */
    append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
    slice(from2, to = this.length) {
      [from2, to] = clip(this, from2, to);
      let parts = [];
      this.decompose(from2, to, parts, 0);
      return TextNode.from(parts, to - from2);
    }
    /**
    Test whether this text is equal to another instance.
    */
    eq(other) {
      if (other == this)
        return true;
      if (other.length != this.length || other.lines != this.lines)
        return false;
      let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
      let a2 = new RawTextCursor(this), b4 = new RawTextCursor(other);
      for (let skip = start, pos = start; ; ) {
        a2.next(skip);
        b4.next(skip);
        skip = 0;
        if (a2.lineBreak != b4.lineBreak || a2.done != b4.done || a2.value != b4.value)
          return false;
        pos += a2.value.length;
        if (a2.done || pos >= end)
          return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings.
    */
    iter(dir = 1) {
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
    iterRange(from2, to = this.length) {
      return new PartialTextCursor(this, from2, to);
    }
    /**
    Return a cursor that iterates over the given range of lines,
    _without_ returning the line breaks between, and yielding empty
    strings for empty lines.
    
    When `from` and `to` are given, they should be 1-based line numbers.
    */
    iterLines(from2, to) {
      let inner;
      if (from2 == null) {
        inner = this.iter();
      } else {
        if (to == null)
          to = this.lines + 1;
        let start = this.line(from2).from;
        inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
      }
      return new LineCursor(inner);
    }
    /**
    Return the document as a string, using newline characters to
    separate lines.
    */
    toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
    */
    toJSON() {
      let lines = [];
      this.flatten(lines);
      return lines;
    }
    /**
    @internal
    */
    constructor() {
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
    static of(text5) {
      if (text5.length == 0)
        throw new RangeError("A document must have at least one line");
      if (text5.length == 1 && !text5[0])
        return _Text.empty;
      return text5.length <= 32 ? new TextLeaf(text5) : TextNode.from(TextLeaf.split(text5, []));
    }
  };
  var TextLeaf = class _TextLeaf extends Text2 {
    constructor(text5, length = textLength(text5)) {
      super();
      this.text = text5;
      this.length = length;
    }
    get lines() {
      return this.text.length;
    }
    get children() {
      return null;
    }
    lineInner(target, isLine, line, offset) {
      for (let i3 = 0; ; i3++) {
        let string4 = this.text[i3], end = offset + string4.length;
        if ((isLine ? line : end) >= target)
          return new Line(offset, end, line, string4);
        offset = end + 1;
        line++;
      }
    }
    decompose(from2, to, target, open) {
      let text5 = from2 <= 0 && to >= this.length ? this : new _TextLeaf(sliceText(this.text, from2, to), Math.min(to, this.length) - Math.max(0, from2));
      if (open & 1) {
        let prev = target.pop();
        let joined = appendText(text5.text, prev.text.slice(), 0, text5.length);
        if (joined.length <= 32) {
          target.push(new _TextLeaf(joined, prev.length + text5.length));
        } else {
          let mid = joined.length >> 1;
          target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text5);
      }
    }
    replace(from2, to, text5) {
      if (!(text5 instanceof _TextLeaf))
        return super.replace(from2, to, text5);
      [from2, to] = clip(this, from2, to);
      let lines = appendText(this.text, appendText(text5.text, sliceText(this.text, 0, from2)), to);
      let newLen = this.length + text5.length - (to - from2);
      if (lines.length <= 32)
        return new _TextLeaf(lines, newLen);
      return TextNode.from(_TextLeaf.split(lines, []), newLen);
    }
    sliceString(from2, to = this.length, lineSep = "\n") {
      [from2, to] = clip(this, from2, to);
      let result = "";
      for (let pos = 0, i3 = 0; pos <= to && i3 < this.text.length; i3++) {
        let line = this.text[i3], end = pos + line.length;
        if (pos > from2 && i3)
          result += lineSep;
        if (from2 < end && to > pos)
          result += line.slice(Math.max(0, from2 - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let line of this.text)
        target.push(line);
    }
    scanIdentical() {
      return 0;
    }
    static split(text5, target) {
      let part = [], len = -1;
      for (let line of text5) {
        part.push(line);
        len += line.length + 1;
        if (part.length == 32) {
          target.push(new _TextLeaf(part, len));
          part = [];
          len = -1;
        }
      }
      if (len > -1)
        target.push(new _TextLeaf(part, len));
      return target;
    }
  };
  var TextNode = class _TextNode extends Text2 {
    constructor(children, length) {
      super();
      this.children = children;
      this.length = length;
      this.lines = 0;
      for (let child of children)
        this.lines += child.lines;
    }
    lineInner(target, isLine, line, offset) {
      for (let i3 = 0; ; i3++) {
        let child = this.children[i3], end = offset + child.length, endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target)
          return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
    decompose(from2, to, target, open) {
      for (let i3 = 0, pos = 0; pos <= to && i3 < this.children.length; i3++) {
        let child = this.children[i3], end = pos + child.length;
        if (from2 <= end && to >= pos) {
          let childOpen = open & ((pos <= from2 ? 1 : 0) | (end >= to ? 2 : 0));
          if (pos >= from2 && end <= to && !childOpen)
            target.push(child);
          else
            child.decompose(from2 - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
    replace(from2, to, text5) {
      [from2, to] = clip(this, from2, to);
      if (text5.lines < this.lines)
        for (let i3 = 0, pos = 0; i3 < this.children.length; i3++) {
          let child = this.children[i3], end = pos + child.length;
          if (from2 >= pos && to <= end) {
            let updated = child.replace(from2 - pos, to - pos, text5);
            let totalLines = this.lines - child.lines + updated.lines;
            if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
              let copy2 = this.children.slice();
              copy2[i3] = updated;
              return new _TextNode(copy2, this.length - (to - from2) + text5.length);
            }
            return super.replace(pos, end, updated);
          }
          pos = end + 1;
        }
      return super.replace(from2, to, text5);
    }
    sliceString(from2, to = this.length, lineSep = "\n") {
      [from2, to] = clip(this, from2, to);
      let result = "";
      for (let i3 = 0, pos = 0; i3 < this.children.length && pos <= to; i3++) {
        let child = this.children[i3], end = pos + child.length;
        if (pos > from2 && i3)
          result += lineSep;
        if (from2 < end && to > pos)
          result += child.sliceString(from2 - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
    flatten(target) {
      for (let child of this.children)
        child.flatten(target);
    }
    scanIdentical(other, dir) {
      if (!(other instanceof _TextNode))
        return 0;
      let length = 0;
      let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
      for (; ; iA += dir, iB += dir) {
        if (iA == eA || iB == eB)
          return length;
        let chA = this.children[iA], chB = other.children[iB];
        if (chA != chB)
          return length + chA.scanIdentical(chB, dir);
        length += chA.length + 1;
      }
    }
    static from(children, length = children.reduce((l5, ch) => l5 + ch.length + 1, -1)) {
      let lines = 0;
      for (let ch of children)
        lines += ch.lines;
      if (lines < 32) {
        let flat = [];
        for (let ch of children)
          ch.flatten(flat);
        return new TextLeaf(flat, length);
      }
      let chunk = Math.max(
        32,
        lines >> 5
        /* Tree.BranchShift */
      ), maxChunk = chunk << 1, minChunk = chunk >> 1;
      let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
      function add2(child) {
        let last;
        if (child.lines > maxChunk && child instanceof _TextNode) {
          for (let node2 of child.children)
            add2(node2);
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk)
            flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      function flush() {
        if (currentLines == 0)
          return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      for (let child of children)
        add2(child);
      flush();
      return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length);
    }
  };
  Text2.empty = /* @__PURE__ */ new TextLeaf([""], 0);
  function textLength(text5) {
    let length = -1;
    for (let line of text5)
      length += line.length + 1;
    return length;
  }
  function appendText(text5, target, from2 = 0, to = 1e9) {
    for (let pos = 0, i3 = 0, first = true; i3 < text5.length && pos <= to; i3++) {
      let line = text5[i3], end = pos + line.length;
      if (end >= from2) {
        if (end > to)
          line = line.slice(0, to - pos);
        if (pos < from2)
          line = line.slice(from2 - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else
          target.push(line);
      }
      pos = end + 1;
    }
    return target;
  }
  function sliceText(text5, from2, to) {
    return appendText(text5, [""], from2, to);
  }
  var RawTextCursor = class {
    constructor(text5, dir = 1) {
      this.dir = dir;
      this.done = false;
      this.lineBreak = false;
      this.value = "";
      this.nodes = [text5];
      this.offsets = [dir > 0 ? 1 : (text5 instanceof TextLeaf ? text5.text.length : text5.children.length) << 1];
    }
    nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (; ; ) {
        let last = this.nodes.length - 1;
        let top2 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
        let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0)
            this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top2 instanceof TextLeaf) {
          let next = top2.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          let next = top2.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > next.length) {
            skip -= next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0)
              this.offsets[last]--;
            this.nodes.push(next);
            this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
          }
        }
      }
    }
    next(skip = 0) {
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  };
  var PartialTextCursor = class {
    constructor(text5, start, end) {
      this.value = "";
      this.done = false;
      this.cursor = new RawTextCursor(text5, start > end ? -1 : 1);
      this.pos = start > end ? text5.length : 0;
      this.from = Math.min(start, end);
      this.to = Math.max(start, end);
    }
    nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit)
        skip = limit;
      limit -= skip;
      let { value } = this.cursor.next(skip);
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      this.done = !this.value;
      return this;
    }
    next(skip = 0) {
      if (skip < 0)
        skip = Math.max(skip, this.from - this.pos);
      else if (skip > 0)
        skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
    get lineBreak() {
      return this.cursor.lineBreak && this.value != "";
    }
  };
  var LineCursor = class {
    constructor(inner) {
      this.inner = inner;
      this.afterBreak = true;
      this.value = "";
      this.done = false;
    }
    next(skip = 0) {
      let { done, lineBreak, value } = this.inner.next(skip);
      if (done && this.afterBreak) {
        this.value = "";
        this.afterBreak = false;
      } else if (done) {
        this.done = true;
        this.value = "";
      } else if (lineBreak) {
        if (this.afterBreak) {
          this.value = "";
        } else {
          this.afterBreak = true;
          this.next();
        }
      } else {
        this.value = value;
        this.afterBreak = false;
      }
      return this;
    }
    get lineBreak() {
      return false;
    }
  };
  if (typeof Symbol != "undefined") {
    Text2.prototype[Symbol.iterator] = function() {
      return this.iter();
    };
    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  }
  var Line = class {
    /**
    @internal
    */
    constructor(from2, to, number2, text5) {
      this.from = from2;
      this.to = to;
      this.number = number2;
      this.text = text5;
    }
    /**
    The length of the line (not including any line break after it).
    */
    get length() {
      return this.to - this.from;
    }
  };
  function clip(text5, from2, to) {
    from2 = Math.max(0, Math.min(text5.length, from2));
    return [from2, Math.max(from2, Math.min(text5.length, to))];
  }
  var extend = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s4) => s4 ? parseInt(s4, 36) : 1);
  for (let i3 = 1; i3 < extend.length; i3++)
    extend[i3] += extend[i3 - 1];
  function isExtendingChar(code3) {
    for (let i3 = 1; i3 < extend.length; i3 += 2)
      if (extend[i3] > code3)
        return extend[i3 - 1] <= code3;
    return false;
  }
  function isRegionalIndicator(code3) {
    return code3 >= 127462 && code3 <= 127487;
  }
  var ZWJ = 8205;
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length)
      return pos;
    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
      pos--;
    let prev = codePointAt(str, pos);
    pos += codePointSize(prev);
    while (pos < str.length) {
      let next = codePointAt(str, pos);
      if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
        pos += codePointSize(next);
        prev = next;
      } else if (isRegionalIndicator(next)) {
        let countBefore = 0, i3 = pos - 2;
        while (i3 >= 0 && isRegionalIndicator(codePointAt(str, i3))) {
          countBefore++;
          i3 -= 2;
        }
        if (countBefore % 2 == 0)
          break;
        else
          pos += 2;
      } else {
        break;
      }
    }
    return pos;
  }
  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found2 = nextClusterBreak(str, pos - 2, includeExtending);
      if (found2 < pos)
        return found2;
      pos--;
    }
    return 0;
  }
  function surrogateLow(ch) {
    return ch >= 56320 && ch < 57344;
  }
  function surrogateHigh(ch) {
    return ch >= 55296 && ch < 56320;
  }
  function codePointAt(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length)
      return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1))
      return code0;
    return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
  }
  function fromCodePoint(code3) {
    if (code3 <= 65535)
      return String.fromCharCode(code3);
    code3 -= 65536;
    return String.fromCharCode((code3 >> 10) + 55296, (code3 & 1023) + 56320);
  }
  function codePointSize(code3) {
    return code3 < 65536 ? 1 : 2;
  }
  var DefaultSplit = /\r\n?|\n/;
  var MapMode = /* @__PURE__ */ function(MapMode2) {
    MapMode2[MapMode2["Simple"] = 0] = "Simple";
    MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
    MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
    MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
    return MapMode2;
  }(MapMode || (MapMode = {}));
  var ChangeDesc = class _ChangeDesc {
    // Sections are encoded as pairs of integers. The first is the
    // length in the current document, and the second is -1 for
    // unaffected sections, and the length of the replacement content
    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
    // 0), and a replacement two positive numbers.
    /**
    @internal
    */
    constructor(sections) {
      this.sections = sections;
    }
    /**
    The length of the document before the change.
    */
    get length() {
      let result = 0;
      for (let i3 = 0; i3 < this.sections.length; i3 += 2)
        result += this.sections[i3];
      return result;
    }
    /**
    The length of the document after the change.
    */
    get newLength() {
      let result = 0;
      for (let i3 = 0; i3 < this.sections.length; i3 += 2) {
        let ins = this.sections[i3 + 1];
        result += ins < 0 ? this.sections[i3] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
    get empty() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes. `posA`
    provides the position of the range in the old document, `posB`
    the new position in the changed document.
    */
    iterGaps(f3) {
      for (let i3 = 0, posA = 0, posB = 0; i3 < this.sections.length; ) {
        let len = this.sections[i3++], ins = this.sections[i3++];
        if (ins < 0) {
          f3(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    `fromA`/`toA` provides the extent of the change in the starting
    document, `fromB`/`toB` the extent of the replacement in the
    changed document.
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
    iterChangedRanges(f3, individual = false) {
      iterChanges(this, f3, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
    get invertedDesc() {
      let sections = [];
      for (let i3 = 0; i3 < this.sections.length; ) {
        let len = this.sections[i3++], ins = this.sections[i3++];
        if (ins < 0)
          sections.push(len, ins);
        else
          sections.push(ins, len);
      }
      return new _ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
    composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `other` happened before the ones in `this`.
    */
    mapDesc(other, before = false) {
      return other.empty ? this : mapSet(this, other, before);
    }
    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
      let posA = 0, posB = 0;
      for (let i3 = 0; i3 < this.sections.length; ) {
        let len = this.sections[i3++], ins = this.sections[i3++], endA = posA + len;
        if (ins < 0) {
          if (endA > pos)
            return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
            return null;
          if (endA > pos || endA == pos && assoc < 0 && !len)
            return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA)
        throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
    touchesRange(from2, to = from2) {
      for (let i3 = 0, pos = 0; i3 < this.sections.length && pos <= to; ) {
        let len = this.sections[i3++], ins = this.sections[i3++], end = pos + len;
        if (ins >= 0 && pos <= to && end >= from2)
          return pos < from2 && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
    toString() {
      let result = "";
      for (let i3 = 0; i3 < this.sections.length; ) {
        let len = this.sections[i3++], ins = this.sections[i3++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
    toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some((a2) => typeof a2 != "number"))
        throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new _ChangeDesc(json);
    }
    /**
    @internal
    */
    static create(sections) {
      return new _ChangeDesc(sections);
    }
  };
  var ChangeSet = class _ChangeSet extends ChangeDesc {
    constructor(sections, inserted) {
      super(sections);
      this.inserted = inserted;
    }
    /**
    Apply the changes to a document, returning the modified
    document.
    */
    apply(doc5) {
      if (this.length != doc5.length)
        throw new RangeError("Applying change set to a document with the wrong length");
      iterChanges(this, (fromA, toA, fromB, _toB, text5) => doc5 = doc5.replace(fromB, fromB + (toA - fromA), text5), false);
      return doc5;
    }
    mapDesc(other, before = false) {
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
    invert(doc5) {
      let sections = this.sections.slice(), inserted = [];
      for (let i3 = 0, pos = 0; i3 < sections.length; i3 += 2) {
        let len = sections[i3], ins = sections[i3 + 1];
        if (ins >= 0) {
          sections[i3] = ins;
          sections[i3 + 1] = len;
          let index2 = i3 >> 1;
          while (inserted.length < index2)
            inserted.push(Text2.empty);
          inserted.push(len ? doc5.slice(pos, pos + len) : Text2.empty);
        }
        pos += len;
      }
      return new _ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
    compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
    map(other, before = false) {
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each, with the range in the original document (`fromA`-`toA`)
    and the range that replaces it in the new document
    (`fromB`-`toB`).
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
    iterChanges(f3, individual = false) {
      iterChanges(this, f3, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
    get desc() {
      return ChangeDesc.create(this.sections);
    }
    /**
    @internal
    */
    filter(ranges) {
      let resultSections = [], resultInserted = [], filteredSections = [];
      let iter = new SectionIter(this);
      done:
        for (let i3 = 0, pos = 0; ; ) {
          let next = i3 == ranges.length ? 1e9 : ranges[i3++];
          while (pos < next || pos == next && iter.len == 0) {
            if (iter.done)
              break done;
            let len = Math.min(iter.len, next - pos);
            addSection(filteredSections, len, -1);
            let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
            addSection(resultSections, len, ins);
            if (ins > 0)
              addInsert(resultInserted, resultSections, iter.text);
            iter.forward(len);
            pos += len;
          }
          let end = ranges[i3++];
          while (pos < end) {
            if (iter.done)
              break done;
            let len = Math.min(iter.len, end - pos);
            addSection(resultSections, len, -1);
            addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
            iter.forward(len);
            pos += len;
          }
        }
      return {
        changes: new _ChangeSet(resultSections, resultInserted),
        filtered: ChangeDesc.create(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
    toJSON() {
      let parts = [];
      for (let i3 = 0; i3 < this.sections.length; i3 += 2) {
        let len = this.sections[i3], ins = this.sections[i3 + 1];
        if (ins < 0)
          parts.push(len);
        else if (ins == 0)
          parts.push([len]);
        else
          parts.push([len].concat(this.inserted[i3 >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
    static of(changes, length, lineSep) {
      let sections = [], inserted = [], pos = 0;
      let total = null;
      function flush(force = false) {
        if (!force && !sections.length)
          return;
        if (pos < length)
          addSection(sections, length - pos, -1);
        let set = new _ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      function process2(spec) {
        if (Array.isArray(spec)) {
          for (let sub of spec)
            process2(sub);
        } else if (spec instanceof _ChangeSet) {
          if (spec.length != length)
            throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          let { from: from2, to = from2, insert: insert2 } = spec;
          if (from2 > to || from2 < 0 || to > length)
            throw new RangeError(`Invalid change range ${from2} to ${to} (in doc of length ${length})`);
          let insText = !insert2 ? Text2.empty : typeof insert2 == "string" ? Text2.of(insert2.split(lineSep || DefaultSplit)) : insert2;
          let insLen = insText.length;
          if (from2 == to && insLen == 0)
            return;
          if (from2 < pos)
            flush();
          if (from2 > pos)
            addSection(sections, from2 - pos, -1);
          addSection(sections, to - from2, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      process2(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
    static empty(length) {
      return new _ChangeSet(length ? [length, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
    static fromJSON(json) {
      if (!Array.isArray(json))
        throw new RangeError("Invalid JSON representation of ChangeSet");
      let sections = [], inserted = [];
      for (let i3 = 0; i3 < json.length; i3++) {
        let part = json[i3];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e3, i4) => i4 && typeof e3 != "string")) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < i3)
            inserted.push(Text2.empty);
          inserted[i3] = Text2.of(part.slice(1));
          sections.push(part[0], inserted[i3].length);
        }
      }
      return new _ChangeSet(sections, inserted);
    }
    /**
    @internal
    */
    static createSet(sections, inserted) {
      return new _ChangeSet(sections, inserted);
    }
  };
  function addSection(sections, len, ins, forceJoin = false) {
    if (len == 0 && ins <= 0)
      return;
    let last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
      sections[last] += len;
    else if (len == 0 && sections[last] == 0)
      sections[last + 1] += ins;
    else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else
      sections.push(len, ins);
  }
  function addInsert(values, sections, value) {
    if (value.length == 0)
      return;
    let index2 = sections.length - 2 >> 1;
    if (index2 < values.length) {
      values[values.length - 1] = values[values.length - 1].append(value);
    } else {
      while (values.length < index2)
        values.push(Text2.empty);
      values.push(value);
    }
  }
  function iterChanges(desc, f3, individual) {
    let inserted = desc.inserted;
    for (let posA = 0, posB = 0, i3 = 0; i3 < desc.sections.length; ) {
      let len = desc.sections[i3++], ins = desc.sections[i3++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        let endA = posA, endB = posB, text5 = Text2.empty;
        for (; ; ) {
          endA += len;
          endB += ins;
          if (ins && inserted)
            text5 = text5.append(inserted[i3 - 2 >> 1]);
          if (individual || i3 == desc.sections.length || desc.sections[i3 + 1] < 0)
            break;
          len = desc.sections[i3++];
          ins = desc.sections[i3++];
        }
        f3(posA, endA, posB, endB, text5);
        posA = endA;
        posB = endB;
      }
    }
  }
  function mapSet(setA, setB, before, mkSet = false) {
    let sections = [], insert2 = mkSet ? [] : null;
    let a2 = new SectionIter(setA), b4 = new SectionIter(setB);
    for (let inserted = -1; ; ) {
      if (a2.ins == -1 && b4.ins == -1) {
        let len = Math.min(a2.len, b4.len);
        addSection(sections, len, -1);
        a2.forward(len);
        b4.forward(len);
      } else if (b4.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b4.len < a2.len || b4.len == a2.len && !before))) {
        let len = b4.len;
        addSection(sections, b4.ins, -1);
        while (len) {
          let piece = Math.min(a2.len, len);
          if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
            addSection(sections, 0, a2.ins);
            if (insert2)
              addInsert(insert2, sections, a2.text);
            inserted = a2.i;
          }
          a2.forward(piece);
          len -= piece;
        }
        b4.next();
      } else if (a2.ins >= 0) {
        let len = 0, left = a2.len;
        while (left) {
          if (b4.ins == -1) {
            let piece = Math.min(left, b4.len);
            len += piece;
            left -= piece;
            b4.forward(piece);
          } else if (b4.ins == 0 && b4.len < left) {
            left -= b4.len;
            b4.next();
          } else {
            break;
          }
        }
        addSection(sections, len, inserted < a2.i ? a2.ins : 0);
        if (insert2 && inserted < a2.i)
          addInsert(insert2, sections, a2.text);
        inserted = a2.i;
        a2.forward(a2.len - left);
      } else if (a2.done && b4.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  function composeSets(setA, setB, mkSet = false) {
    let sections = [];
    let insert2 = mkSet ? [] : null;
    let a2 = new SectionIter(setA), b4 = new SectionIter(setB);
    for (let open = false; ; ) {
      if (a2.done && b4.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else if (a2.ins == 0) {
        addSection(sections, a2.len, 0, open);
        a2.next();
      } else if (b4.len == 0 && !b4.done) {
        addSection(sections, 0, b4.ins, open);
        if (insert2)
          addInsert(insert2, sections, b4.text);
        b4.next();
      } else if (a2.done || b4.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        let len = Math.min(a2.len2, b4.len), sectionLen = sections.length;
        if (a2.ins == -1) {
          let insB = b4.ins == -1 ? -1 : b4.off ? 0 : b4.ins;
          addSection(sections, len, insB, open);
          if (insert2 && insB)
            addInsert(insert2, sections, b4.text);
        } else if (b4.ins == -1) {
          addSection(sections, a2.off ? 0 : a2.len, len, open);
          if (insert2)
            addInsert(insert2, sections, a2.textBit(len));
        } else {
          addSection(sections, a2.off ? 0 : a2.len, b4.off ? 0 : b4.ins, open);
          if (insert2 && !b4.off)
            addInsert(insert2, sections, b4.text);
        }
        open = (a2.ins > len || b4.ins >= 0 && b4.len > len) && (open || sections.length > sectionLen);
        a2.forward2(len);
        b4.forward(len);
      }
    }
  }
  var SectionIter = class {
    constructor(set) {
      this.set = set;
      this.i = 0;
      this.next();
    }
    next() {
      let { sections } = this.set;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
    get done() {
      return this.ins == -2;
    }
    get len2() {
      return this.ins < 0 ? this.len : this.ins;
    }
    get text() {
      let { inserted } = this.set, index2 = this.i - 2 >> 1;
      return index2 >= inserted.length ? Text2.empty : inserted[index2];
    }
    textBit(len) {
      let { inserted } = this.set, index2 = this.i - 2 >> 1;
      return index2 >= inserted.length && !len ? Text2.empty : inserted[index2].slice(this.off, len == null ? void 0 : this.off + len);
    }
    forward(len) {
      if (len == this.len)
        this.next();
      else {
        this.len -= len;
        this.off += len;
      }
    }
    forward2(len) {
      if (this.ins == -1)
        this.forward(len);
      else if (len == this.ins)
        this.next();
      else {
        this.ins -= len;
        this.off += len;
      }
    }
  };
  var SelectionRange = class _SelectionRange {
    constructor(from2, to, flags) {
      this.from = from2;
      this.to = to;
      this.flags = flags;
    }
    /**
    The anchor of the range—the side that doesn't move when you
    extend it.
    */
    get anchor() {
      return this.flags & 32 ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
    get head() {
      return this.flags & 32 ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
    get empty() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
    get assoc() {
      return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
    get bidiLevel() {
      let level = this.flags & 7;
      return level == 7 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
    get goalColumn() {
      let value = this.flags >> 6;
      return value == 16777215 ? void 0 : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
    map(change, assoc = -1) {
      let from2, to;
      if (this.empty) {
        from2 = to = change.mapPos(this.from, assoc);
      } else {
        from2 = change.mapPos(this.from, 1);
        to = change.mapPos(this.to, -1);
      }
      return from2 == this.from && to == this.to ? this : new _SelectionRange(from2, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
    extend(from2, to = from2) {
      if (from2 <= this.anchor && to >= this.anchor)
        return EditorSelection.range(from2, to);
      let head = Math.abs(from2 - this.anchor) > Math.abs(to - this.anchor) ? from2 : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
    eq(other, includeAssoc = false) {
      return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
    }
    /**
    Return a JSON-serializable object representing the range.
    */
    toJSON() {
      return { anchor: this.anchor, head: this.head };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
    static fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number")
        throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
    /**
    @internal
    */
    static create(from2, to, flags) {
      return new _SelectionRange(from2, to, flags);
    }
  };
  var EditorSelection = class _EditorSelection {
    constructor(ranges, mainIndex) {
      this.ranges = ranges;
      this.mainIndex = mainIndex;
    }
    /**
    Map a selection through a change. Used to adjust the selection
    position for changes.
    */
    map(change, assoc = -1) {
      if (change.empty)
        return this;
      return _EditorSelection.create(this.ranges.map((r4) => r4.map(change, assoc)), this.mainIndex);
    }
    /**
    Compare this selection to another selection. By default, ranges
    are compared only by position. When `includeAssoc` is true,
    cursor ranges must also have the same
    [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
    */
    eq(other, includeAssoc = false) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
        return false;
      for (let i3 = 0; i3 < this.ranges.length; i3++)
        if (!this.ranges[i3].eq(other.ranges[i3], includeAssoc))
          return false;
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
    get main() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
    asSingle() {
      return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
    }
    /**
    Extend this selection with an extra range.
    */
    addRange(range, main = true) {
      return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
    replaceRange(range, which = this.mainIndex) {
      let ranges = this.ranges.slice();
      ranges[which] = range;
      return _EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
    toJSON() {
      return { ranges: this.ranges.map((r4) => r4.toJSON()), main: this.mainIndex };
    }
    /**
    Create a selection from a JSON representation.
    */
    static fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
        throw new RangeError("Invalid JSON representation for EditorSelection");
      return new _EditorSelection(json.ranges.map((r4) => SelectionRange.fromJSON(r4)), json.main);
    }
    /**
    Create a selection holding a single range.
    */
    static single(anchor, head = anchor) {
      return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
    static create(ranges, mainIndex = 0) {
      if (ranges.length == 0)
        throw new RangeError("A selection needs at least one range");
      for (let pos = 0, i3 = 0; i3 < ranges.length; i3++) {
        let range = ranges[i3];
        if (range.empty ? range.from <= pos : range.from < pos)
          return _EditorSelection.normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new _EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
      return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
    }
    /**
    Create a selection range.
    */
    static range(anchor, head, goalColumn, bidiLevel) {
      let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
      return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
    }
    /**
    @internal
    */
    static normalized(ranges, mainIndex = 0) {
      let main = ranges[mainIndex];
      ranges.sort((a2, b4) => a2.from - b4.from);
      mainIndex = ranges.indexOf(main);
      for (let i3 = 1; i3 < ranges.length; i3++) {
        let range = ranges[i3], prev = ranges[i3 - 1];
        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
          let from2 = prev.from, to = Math.max(range.to, prev.to);
          if (i3 <= mainIndex)
            mainIndex--;
          ranges.splice(--i3, 2, range.anchor > range.head ? _EditorSelection.range(to, from2) : _EditorSelection.range(from2, to));
        }
      }
      return new _EditorSelection(ranges, mainIndex);
    }
  };
  function checkSelection(selection, docLength) {
    for (let range of selection.ranges)
      if (range.to > docLength)
        throw new RangeError("Selection points outside of document");
  }
  var nextID = 0;
  var Facet = class _Facet {
    constructor(combine, compareInput, compare2, isStatic, enables) {
      this.combine = combine;
      this.compareInput = compareInput;
      this.compare = compare2;
      this.isStatic = isStatic;
      this.id = nextID++;
      this.default = combine([]);
      this.extensions = typeof enables == "function" ? enables(this) : enables;
    }
    /**
    Returns a facet reader for this facet, which can be used to
    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
    */
    get reader() {
      return this;
    }
    /**
    Define a new facet.
    */
    static define(config2 = {}) {
      return new _Facet(config2.combine || ((a2) => a2), config2.compareInput || ((a2, b4) => a2 === b4), config2.compare || (!config2.combine ? sameArray : (a2, b4) => a2 === b4), !!config2.static, config2.enables);
    }
    /**
    Returns an extension that adds the given value to this facet.
    */
    of(value) {
      return new FacetProvider([], this, 0, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In cases where your value depends only on a single field, you'll
    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
    */
    compute(deps, get2) {
      if (this.isStatic)
        throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1, get2);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
    computeN(deps, get2) {
      if (this.isStatic)
        throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2, get2);
    }
    from(field, get2) {
      if (!get2)
        get2 = (x7) => x7;
      return this.compute([field], (state) => get2(state.field(field)));
    }
  };
  function sameArray(a2, b4) {
    return a2 == b4 || a2.length == b4.length && a2.every((e3, i3) => e3 === b4[i3]);
  }
  var FacetProvider = class {
    constructor(dependencies2, facet, type, value) {
      this.dependencies = dependencies2;
      this.facet = facet;
      this.type = type;
      this.value = value;
      this.id = nextID++;
    }
    dynamicSlot(addresses) {
      var _a2;
      let getter = this.value;
      let compare2 = this.facet.compareInput;
      let id2 = this.id, idx = addresses[id2] >> 1, multi = this.type == 2;
      let depDoc = false, depSel = false, depAddrs = [];
      for (let dep of this.dependencies) {
        if (dep == "doc")
          depDoc = true;
        else if (dep == "selection")
          depSel = true;
        else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
          depAddrs.push(addresses[dep.id]);
      }
      return {
        create(state) {
          state.values[idx] = getter(state);
          return 1;
        },
        update(state, tr) {
          if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
            let newVal = getter(state);
            if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
              state.values[idx] = newVal;
              return 1;
            }
          }
          return 0;
        },
        reconfigure: (state, oldState) => {
          let newVal, oldAddr = oldState.config.address[id2];
          if (oldAddr != null) {
            let oldVal = getAddr(oldState, oldAddr);
            if (this.dependencies.every((dep) => {
              return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
            }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
              state.values[idx] = oldVal;
              return 0;
            }
          } else {
            newVal = getter(state);
          }
          state.values[idx] = newVal;
          return 1;
        }
      };
    }
  };
  function compareArray(a2, b4, compare2) {
    if (a2.length != b4.length)
      return false;
    for (let i3 = 0; i3 < a2.length; i3++)
      if (!compare2(a2[i3], b4[i3]))
        return false;
    return true;
  }
  function ensureAll(state, addrs) {
    let changed = false;
    for (let addr of addrs)
      if (ensureAddr(state, addr) & 1)
        changed = true;
    return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
    let providerAddrs = providers.map((p6) => addresses[p6.id]);
    let providerTypes = providers.map((p6) => p6.type);
    let dynamic = providerAddrs.filter((p6) => !(p6 & 1));
    let idx = addresses[facet.id] >> 1;
    function get2(state) {
      let values = [];
      for (let i3 = 0; i3 < providerAddrs.length; i3++) {
        let value = getAddr(state, providerAddrs[i3]);
        if (providerTypes[i3] == 2)
          for (let val of value)
            values.push(val);
        else
          values.push(value);
      }
      return facet.combine(values);
    }
    return {
      create(state) {
        for (let addr of providerAddrs)
          ensureAddr(state, addr);
        state.values[idx] = get2(state);
        return 1;
      },
      update(state, tr) {
        if (!ensureAll(state, dynamic))
          return 0;
        let value = get2(state);
        if (facet.compare(value, state.values[idx]))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure(state, oldState) {
        let depChanged = ensureAll(state, providerAddrs);
        let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
        if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        let value = get2(state);
        if (facet.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1;
      }
    };
  }
  var initField = /* @__PURE__ */ Facet.define({ static: true });
  var StateField = class _StateField {
    constructor(id2, createF, updateF, compareF, spec) {
      this.id = id2;
      this.createF = createF;
      this.updateF = updateF;
      this.compareF = compareF;
      this.spec = spec;
      this.provides = void 0;
    }
    /**
    Define a state field.
    */
    static define(config2) {
      let field = new _StateField(nextID++, config2.create, config2.update, config2.compare || ((a2, b4) => a2 === b4), config2);
      if (config2.provide)
        field.provides = config2.provide(field);
      return field;
    }
    create(state) {
      let init = state.facet(initField).find((i3) => i3.field == this);
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
    slot(addresses) {
      let idx = addresses[this.id] >> 1;
      return {
        create: (state) => {
          state.values[idx] = this.create(state);
          return 1;
        },
        update: (state, tr) => {
          let oldVal = state.values[idx];
          let value = this.updateF(oldVal, tr);
          if (this.compareF(oldVal, value))
            return 0;
          state.values[idx] = value;
          return 1;
        },
        reconfigure: (state, oldState) => {
          if (oldState.config.address[this.id] != null) {
            state.values[idx] = oldState.field(this);
            return 0;
          }
          state.values[idx] = this.create(state);
          return 1;
        }
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
    init(create) {
      return [this, initField.of({ field: this, create })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
    get extension() {
      return this;
    }
  };
  var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
  function prec(value) {
    return (ext) => new PrecExtension(ext, value);
  }
  var Prec = {
    /**
    The highest precedence level, for extensions that should end up
    near the start of the precedence ordering.
    */
    highest: /* @__PURE__ */ prec(Prec_.highest),
    /**
    A higher-than-default precedence, for extensions that should
    come before those with default precedence.
    */
    high: /* @__PURE__ */ prec(Prec_.high),
    /**
    The default precedence, which is also used for extensions
    without an explicit precedence.
    */
    default: /* @__PURE__ */ prec(Prec_.default),
    /**
    A lower-than-default precedence.
    */
    low: /* @__PURE__ */ prec(Prec_.low),
    /**
    The lowest precedence level. Meant for things that should end up
    near the end of the extension order.
    */
    lowest: /* @__PURE__ */ prec(Prec_.lowest)
  };
  var PrecExtension = class {
    constructor(inner, prec2) {
      this.inner = inner;
      this.prec = prec2;
    }
  };
  var Compartment = class _Compartment {
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
    reconfigure(content4) {
      return _Compartment.reconfigure.of({ compartment: this, extension: content4 });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
    get(state) {
      return state.config.compartments.get(this);
    }
  };
  var CompartmentInstance = class {
    constructor(compartment, inner) {
      this.compartment = compartment;
      this.inner = inner;
    }
  };
  var Configuration = class _Configuration {
    constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
      this.base = base2;
      this.compartments = compartments;
      this.dynamicSlots = dynamicSlots;
      this.address = address;
      this.staticValues = staticValues;
      this.facets = facets;
      this.statusTemplate = [];
      while (this.statusTemplate.length < dynamicSlots.length)
        this.statusTemplate.push(
          0
          /* SlotStatus.Unresolved */
        );
    }
    staticFacet(facet) {
      let addr = this.address[facet.id];
      return addr == null ? facet.default : this.staticValues[addr >> 1];
    }
    static resolve(base2, compartments, oldState) {
      let fields = [];
      let facets = /* @__PURE__ */ Object.create(null);
      let newCompartments = /* @__PURE__ */ new Map();
      for (let ext of flatten(base2, compartments, newCompartments)) {
        if (ext instanceof StateField)
          fields.push(ext);
        else
          (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
      }
      let address = /* @__PURE__ */ Object.create(null);
      let staticValues = [];
      let dynamicSlots = [];
      for (let field of fields) {
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push((a2) => field.slot(a2));
      }
      let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
      for (let id2 in facets) {
        let providers = facets[id2], facet = providers[0].facet;
        let oldProviders = oldFacets && oldFacets[id2] || [];
        if (providers.every(
          (p6) => p6.type == 0
          /* Provider.Static */
        )) {
          address[facet.id] = staticValues.length << 1 | 1;
          if (sameArray(oldProviders, providers)) {
            staticValues.push(oldState.facet(facet));
          } else {
            let value = facet.combine(providers.map((p6) => p6.value));
            staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
          }
        } else {
          for (let p6 of providers) {
            if (p6.type == 0) {
              address[p6.id] = staticValues.length << 1 | 1;
              staticValues.push(p6.value);
            } else {
              address[p6.id] = dynamicSlots.length << 1;
              dynamicSlots.push((a2) => p6.dynamicSlot(a2));
            }
          }
          address[facet.id] = dynamicSlots.length << 1;
          dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet, providers));
        }
      }
      let dynamic = dynamicSlots.map((f3) => f3(address));
      return new _Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
    }
  };
  function flatten(extension2, compartments, newCompartments) {
    let result = [[], [], [], [], []];
    let seen = /* @__PURE__ */ new Map();
    function inner(ext, prec2) {
      let known = seen.get(ext);
      if (known != null) {
        if (known <= prec2)
          return;
        let found2 = result[known].indexOf(ext);
        if (found2 > -1)
          result[known].splice(found2, 1);
        if (ext instanceof CompartmentInstance)
          newCompartments.delete(ext.compartment);
      }
      seen.set(ext, prec2);
      if (Array.isArray(ext)) {
        for (let e3 of ext)
          inner(e3, prec2);
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment))
          throw new RangeError(`Duplicate use of compartment in extensions`);
        let content4 = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, content4);
        inner(content4, prec2);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec2].push(ext);
        if (ext.provides)
          inner(ext.provides, prec2);
      } else if (ext instanceof FacetProvider) {
        result[prec2].push(ext);
        if (ext.facet.extensions)
          inner(ext.facet.extensions, Prec_.default);
      } else {
        let content4 = ext.extension;
        if (!content4)
          throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
        inner(content4, prec2);
      }
    }
    inner(extension2, Prec_.default);
    return result.reduce((a2, b4) => a2.concat(b4));
  }
  function ensureAddr(state, addr) {
    if (addr & 1)
      return 2;
    let idx = addr >> 1;
    let status = state.status[idx];
    if (status == 4)
      throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2)
      return status;
    state.status[idx] = 4;
    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 | changed;
  }
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  var languageData = /* @__PURE__ */ Facet.define();
  var allowMultipleSelections = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((v4) => v4),
    static: true
  });
  var lineSeparator = /* @__PURE__ */ Facet.define({
    combine: (values) => values.length ? values[0] : void 0,
    static: true
  });
  var changeFilter = /* @__PURE__ */ Facet.define();
  var transactionFilter = /* @__PURE__ */ Facet.define();
  var transactionExtender = /* @__PURE__ */ Facet.define();
  var readOnly = /* @__PURE__ */ Facet.define({
    combine: (values) => values.length ? values[0] : false
  });
  var Annotation = class {
    /**
    @internal
    */
    constructor(type, value) {
      this.type = type;
      this.value = value;
    }
    /**
    Define a new type of annotation.
    */
    static define() {
      return new AnnotationType();
    }
  };
  var AnnotationType = class {
    /**
    Create an instance of this annotation.
    */
    of(value) {
      return new Annotation(this, value);
    }
  };
  var StateEffectType = class {
    /**
    @internal
    */
    constructor(map6) {
      this.map = map6;
    }
    /**
    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
    type.
    */
    of(value) {
      return new StateEffect(this, value);
    }
  };
  var StateEffect = class _StateEffect {
    /**
    @internal
    */
    constructor(type, value) {
      this.type = type;
      this.value = value;
    }
    /**
    Map this effect through a position mapping. Will return
    `undefined` when that ends up deleting the effect.
    */
    map(mapping) {
      let mapped = this.type.map(this.value, mapping);
      return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
    is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds. It should be a type that
    doesn't include `undefined`, since that is used in
    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
    removed.
    */
    static define(spec = {}) {
      return new StateEffectType(spec.map || ((v4) => v4));
    }
    /**
    Map an array of effects through a change set.
    */
    static mapEffects(effects, mapping) {
      if (!effects.length)
        return effects;
      let result = [];
      for (let effect of effects) {
        let mapped = effect.map(mapping);
        if (mapped)
          result.push(mapped);
      }
      return result;
    }
  };
  StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
  StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
  var Transaction = class _Transaction {
    constructor(startState, changes, selection, effects, annotations, scrollIntoView3) {
      this.startState = startState;
      this.changes = changes;
      this.selection = selection;
      this.effects = effects;
      this.annotations = annotations;
      this.scrollIntoView = scrollIntoView3;
      this._doc = null;
      this._state = null;
      if (selection)
        checkSelection(selection, changes.newLength);
      if (!annotations.some((a2) => a2.type == _Transaction.time))
        this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
    }
    /**
    @internal
    */
    static create(startState, changes, selection, effects, annotations, scrollIntoView3) {
      return new _Transaction(startState, changes, selection, effects, annotations, scrollIntoView3);
    }
    /**
    The new document produced by the transaction. Contrary to
    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
    force the entire new state to be computed right away, so it is
    recommended that [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
    when they need to look at the new document.
    */
    get newDoc() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
    get newSelection() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so it is recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
    get state() {
      if (!this._state)
        this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
    annotation(type) {
      for (let ann of this.annotations)
        if (ann.type == type)
          return ann.value;
      return void 0;
    }
    /**
    Indicates whether the transaction changed the document.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
    get reconfigured() {
      return this.startState.config != this.state.config;
    }
    /**
    Returns true if the transaction has a [user
    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
    or more specific than `event`. For example, if the transaction
    has `"select.pointer"` as user event, `"select"` and
    `"select.pointer"` will match it.
    */
    isUserEvent(event) {
      let e3 = this.annotation(_Transaction.userEvent);
      return !!(e3 && (e3 == event || e3.length > event.length && e3.slice(0, event.length) == event && e3[event.length] == "."));
    }
  };
  Transaction.time = /* @__PURE__ */ Annotation.define();
  Transaction.userEvent = /* @__PURE__ */ Annotation.define();
  Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
  Transaction.remote = /* @__PURE__ */ Annotation.define();
  function joinRanges(a2, b4) {
    let result = [];
    for (let iA = 0, iB = 0; ; ) {
      let from2, to;
      if (iA < a2.length && (iB == b4.length || b4[iB] >= a2[iA])) {
        from2 = a2[iA++];
        to = a2[iA++];
      } else if (iB < b4.length) {
        from2 = b4[iB++];
        to = b4[iB++];
      } else
        return result;
      if (!result.length || result[result.length - 1] < from2)
        result.push(from2, to);
      else if (result[result.length - 1] < to)
        result[result.length - 1] = to;
    }
  }
  function mergeTransaction(a2, b4, sequential) {
    var _a2;
    let mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b4.changes;
      mapForB = ChangeSet.empty(b4.changes.length);
      changes = a2.changes.compose(b4.changes);
    } else {
      mapForA = b4.changes.map(a2.changes);
      mapForB = a2.changes.mapDesc(b4.changes, true);
      changes = a2.changes.compose(mapForA);
    }
    return {
      changes,
      selection: b4.selection ? b4.selection.map(mapForB) : (_a2 = a2.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
      effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b4.effects, mapForB)),
      annotations: a2.annotations.length ? a2.annotations.concat(b4.annotations) : b4.annotations,
      scrollIntoView: a2.scrollIntoView || b4.scrollIntoView
    };
  }
  function resolveTransactionInner(state, spec, docSize) {
    let sel = spec.selection, annotations = asArray(spec.annotations);
    if (spec.userEvent)
      annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray(spec.effects),
      annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  function resolveTransaction(state, specs, filter) {
    let s4 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false)
      filter = false;
    for (let i3 = 1; i3 < specs.length; i3++) {
      if (specs[i3].filter === false)
        filter = false;
      let seq = !!specs[i3].sequential;
      s4 = mergeTransaction(s4, resolveTransactionInner(state, specs[i3], seq ? s4.changes.newLength : state.doc.length), seq);
    }
    let tr = Transaction.create(state, s4.changes, s4.selection, s4.effects, s4.annotations, s4.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  function filterTransaction(tr) {
    let state = tr.startState;
    let result = true;
    for (let filter of state.facet(changeFilter)) {
      let value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value))
        result = result === true ? value : joinRanges(result, value);
    }
    if (result !== true) {
      let changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        let filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    let filters = state.facet(transactionFilter);
    for (let i3 = filters.length - 1; i3 >= 0; i3--) {
      let filtered = filters[i3](tr);
      if (filtered instanceof Transaction)
        tr = filtered;
      else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
        tr = filtered[0];
      else
        tr = resolveTransaction(state, asArray(filtered), false);
    }
    return tr;
  }
  function extendTransaction(tr) {
    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
    for (let i3 = extenders.length - 1; i3 >= 0; i3--) {
      let extension2 = extenders[i3](tr);
      if (extension2 && Object.keys(extension2).length)
        spec = mergeTransaction(spec, resolveTransactionInner(state, extension2, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  var none = [];
  function asArray(value) {
    return value == null ? none : Array.isArray(value) ? value : [value];
  }
  var CharCategory = /* @__PURE__ */ function(CharCategory2) {
    CharCategory2[CharCategory2["Word"] = 0] = "Word";
    CharCategory2[CharCategory2["Space"] = 1] = "Space";
    CharCategory2[CharCategory2["Other"] = 2] = "Other";
    return CharCategory2;
  }(CharCategory || (CharCategory = {}));
  var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
  var wordChar;
  try {
    wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
  } catch (_3) {
  }
  function hasWordChar(str) {
    if (wordChar)
      return wordChar.test(str);
    for (let i3 = 0; i3 < str.length; i3++) {
      let ch = str[i3];
      if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
        return true;
    }
    return false;
  }
  function makeCategorizer(wordChars) {
    return (char) => {
      if (!/\S/.test(char))
        return CharCategory.Space;
      if (hasWordChar(char))
        return CharCategory.Word;
      for (let i3 = 0; i3 < wordChars.length; i3++)
        if (char.indexOf(wordChars[i3]) > -1)
          return CharCategory.Word;
      return CharCategory.Other;
    };
  }
  var EditorState = class _EditorState {
    constructor(config2, doc5, selection, values, computeSlot, tr) {
      this.config = config2;
      this.doc = doc5;
      this.selection = selection;
      this.values = values;
      this.status = config2.statusTemplate.slice();
      this.computeSlot = computeSlot;
      if (tr)
        tr._state = this;
      for (let i3 = 0; i3 < this.config.dynamicSlots.length; i3++)
        ensureAddr(this, i3 << 1);
      this.computeSlot = null;
    }
    field(field, require2 = true) {
      let addr = this.config.address[field.id];
      if (addr == null) {
        if (require2)
          throw new RangeError("Field is not present in this state");
        return void 0;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
    update(...specs) {
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
    applyTransaction(tr) {
      let conf = this.config, { base: base2, compartments } = conf;
      for (let effect of tr.effects) {
        if (effect.is(Compartment.reconfigure)) {
          if (conf) {
            compartments = /* @__PURE__ */ new Map();
            conf.compartments.forEach((val, key) => compartments.set(key, val));
            conf = null;
          }
          compartments.set(effect.value.compartment, effect.value.extension);
        } else if (effect.is(StateEffect.reconfigure)) {
          conf = null;
          base2 = effect.value;
        } else if (effect.is(StateEffect.appendConfig)) {
          conf = null;
          base2 = asArray(base2).concat(effect.value);
        }
      }
      let startValues;
      if (!conf) {
        conf = Configuration.resolve(base2, compartments, this);
        let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
        startValues = intermediateState.values;
      } else {
        startValues = tr.startState.values.slice();
      }
      let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
      new _EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
    replaceSelection(text5) {
      if (typeof text5 == "string")
        text5 = this.toText(text5);
      return this.changeByRange((range) => ({
        changes: { from: range.from, to: range.to, insert: text5 },
        range: EditorSelection.cursor(range.from + text5.length)
      }));
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
    changeByRange(f3) {
      let sel = this.selection;
      let result1 = f3(sel.ranges[0]);
      let changes = this.changes(result1.changes), ranges = [result1.range];
      let effects = asArray(result1.effects);
      for (let i3 = 1; i3 < sel.ranges.length; i3++) {
        let result = f3(sel.ranges[i3]);
        let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
        for (let j6 = 0; j6 < i3; j6++)
          ranges[j6] = ranges[j6].map(newMapped);
        let mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
      }
      return {
        changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
    changes(spec = []) {
      if (spec instanceof ChangeSet)
        return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
    */
    toText(string4) {
      return Text2.of(string4.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
    sliceDoc(from2 = 0, to = this.doc.length) {
      return this.doc.sliceString(from2, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
    facet(facet) {
      let addr = this.config.address[facet.id];
      if (addr == null)
        return facet.default;
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
    toJSON(fields) {
      let result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields)
        for (let prop in fields) {
          let value = fields[prop];
          if (value instanceof StateField && this.config.address[value.id] != null)
            result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
        }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
    static fromJSON(json, config2 = {}, fields) {
      if (!json || typeof json.doc != "string")
        throw new RangeError("Invalid JSON representation for EditorState");
      let fieldInit = [];
      if (fields)
        for (let prop in fields) {
          if (Object.prototype.hasOwnProperty.call(json, prop)) {
            let field = fields[prop], value = json[prop];
            fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
          }
        }
      return _EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
    static create(config2 = {}) {
      let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
      let doc5 = config2.doc instanceof Text2 ? config2.doc : Text2.of((config2.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
      let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
      checkSelection(selection, doc5.length);
      if (!configuration.staticFacet(allowMultipleSelections))
        selection = selection.asSingle();
      return new _EditorState(configuration, doc5, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
    }
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    get tabSize() {
      return this.facet(_EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
    get lineBreak() {
      return this.facet(_EditorState.lineSeparator) || "\n";
    }
    /**
    Returns true when the editor is
    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
    */
    get readOnly() {
      return this.facet(readOnly);
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    
    If additional arguments are passed, they will be inserted in
    place of markers like `$1` (for the first value) and `$2`, etc.
    A single `$` is equivalent to `$1`, and `$$` will produce a
    literal dollar sign.
    */
    phrase(phrase2, ...insert2) {
      for (let map6 of this.facet(_EditorState.phrases))
        if (Object.prototype.hasOwnProperty.call(map6, phrase2)) {
          phrase2 = map6[phrase2];
          break;
        }
      if (insert2.length)
        phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m4, i3) => {
          if (i3 == "$")
            return "$";
          let n5 = +(i3 || 1);
          return !n5 || n5 > insert2.length ? m4 : insert2[n5 - 1];
        });
      return phrase2;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    
    Examples of language data fields are...
    
    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
      comment syntax.
    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
      for providing language-specific completion sources.
    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
      characters that should be considered part of words in this
      language.
    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
      bracket closing behavior.
    */
    languageDataAt(name2, pos, side = -1) {
      let values = [];
      for (let provider of this.facet(languageData)) {
        for (let result of provider(this, pos, side)) {
          if (Object.prototype.hasOwnProperty.call(result, name2))
            values.push(result[name2]);
        }
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
    charCategorizer(at4) {
      return makeCategorizer(this.languageDataAt("wordChars", at4).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
    wordAt(pos) {
      let { text: text5, from: from2, length } = this.doc.lineAt(pos);
      let cat = this.charCategorizer(pos);
      let start = pos - from2, end = pos - from2;
      while (start > 0) {
        let prev = findClusterBreak(text5, start, false);
        if (cat(text5.slice(prev, start)) != CharCategory.Word)
          break;
        start = prev;
      }
      while (end < length) {
        let next = findClusterBreak(text5, end);
        if (cat(text5.slice(end, next)) != CharCategory.Word)
          break;
        end = next;
      }
      return start == end ? null : EditorSelection.range(start + from2, end + from2);
    }
  };
  EditorState.allowMultipleSelections = allowMultipleSelections;
  EditorState.tabSize = /* @__PURE__ */ Facet.define({
    combine: (values) => values.length ? values[0] : 4
  });
  EditorState.lineSeparator = lineSeparator;
  EditorState.readOnly = readOnly;
  EditorState.phrases = /* @__PURE__ */ Facet.define({
    compare(a2, b4) {
      let kA = Object.keys(a2), kB = Object.keys(b4);
      return kA.length == kB.length && kA.every((k4) => a2[k4] == b4[k4]);
    }
  });
  EditorState.languageData = languageData;
  EditorState.changeFilter = changeFilter;
  EditorState.transactionFilter = transactionFilter;
  EditorState.transactionExtender = transactionExtender;
  Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
  function combineConfig(configs, defaults3, combine = {}) {
    let result = {};
    for (let config2 of configs)
      for (let key of Object.keys(config2)) {
        let value = config2[key], current = result[key];
        if (current === void 0)
          result[key] = value;
        else if (current === value || value === void 0)
          ;
        else if (Object.hasOwnProperty.call(combine, key))
          result[key] = combine[key](current, value);
        else
          throw new Error("Config merge conflict for field " + key);
      }
    for (let key in defaults3)
      if (result[key] === void 0)
        result[key] = defaults3[key];
    return result;
  }
  var RangeValue = class {
    /**
    Compare this value with another value. Used when comparing
    rangesets. The default implementation compares by identity.
    Unless you are only creating a fixed number of unique instances
    of your value type, it is a good idea to implement this
    properly.
    */
    eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
    */
    range(from2, to = from2) {
      return Range.create(from2, to, this);
    }
  };
  RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
  RangeValue.prototype.point = false;
  RangeValue.prototype.mapMode = MapMode.TrackDel;
  var Range = class _Range {
    constructor(from2, to, value) {
      this.from = from2;
      this.to = to;
      this.value = value;
    }
    /**
    @internal
    */
    static create(from2, to, value) {
      return new _Range(from2, to, value);
    }
  };
  function cmpRange(a2, b4) {
    return a2.from - b4.from || a2.value.startSide - b4.value.startSide;
  }
  var Chunk = class _Chunk {
    constructor(from2, to, value, maxPoint) {
      this.from = from2;
      this.to = to;
      this.value = value;
      this.maxPoint = maxPoint;
    }
    get length() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
    findIndex(pos, side, end, startAt = 0) {
      let arr = end ? this.to : this.from;
      for (let lo = startAt, hi = arr.length; ; ) {
        if (lo == hi)
          return lo;
        let mid = lo + hi >> 1;
        let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo)
          return diff >= 0 ? lo : hi;
        if (diff >= 0)
          hi = mid;
        else
          lo = mid + 1;
      }
    }
    between(offset, from2, to, f3) {
      for (let i3 = this.findIndex(from2, -1e9, true), e3 = this.findIndex(to, 1e9, false, i3); i3 < e3; i3++)
        if (f3(this.from[i3] + offset, this.to[i3] + offset, this.value[i3]) === false)
          return false;
    }
    map(offset, changes) {
      let value = [], from2 = [], to = [], newPos = -1, maxPoint = -1;
      for (let i3 = 0; i3 < this.value.length; i3++) {
        let val = this.value[i3], curFrom = this.from[i3] + offset, curTo = this.to[i3] + offset, newFrom, newTo;
        if (curFrom == curTo) {
          let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null)
            continue;
          newFrom = newTo = mapped;
          if (val.startSide != val.endSide) {
            newTo = changes.mapPos(curFrom, val.endSide);
            if (newTo < newFrom)
              continue;
          }
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
            continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0)
          continue;
        if (newPos < 0)
          newPos = newFrom;
        if (val.point)
          maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from2.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return { mapped: value.length ? new _Chunk(from2, to, value, maxPoint) : null, pos: newPos };
    }
  };
  var RangeSet = class _RangeSet {
    constructor(chunkPos, chunk, nextLayer, maxPoint) {
      this.chunkPos = chunkPos;
      this.chunk = chunk;
      this.nextLayer = nextLayer;
      this.maxPoint = maxPoint;
    }
    /**
    @internal
    */
    static create(chunkPos, chunk, nextLayer, maxPoint) {
      return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
    }
    /**
    @internal
    */
    get length() {
      let last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
    get size() {
      if (this.isEmpty)
        return 0;
      let size = this.nextLayer.size;
      for (let chunk of this.chunk)
        size += chunk.value.length;
      return size;
    }
    /**
    @internal
    */
    chunkEnd(index2) {
      return this.chunkPos[index2] + this.chunk[index2].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (Note: The type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
    update(updateSpec) {
      let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
      let filter = updateSpec.filter;
      if (add2.length == 0 && !filter)
        return this;
      if (sort)
        add2 = add2.slice().sort(cmpRange);
      if (this.isEmpty)
        return add2.length ? _RangeSet.of(add2) : this;
      let cur2 = new LayerCursor(this, null, -1).goto(0), i3 = 0, spill = [];
      let builder = new RangeSetBuilder();
      while (cur2.value || i3 < add2.length) {
        if (i3 < add2.length && (cur2.from - add2[i3].from || cur2.startSide - add2[i3].value.startSide) >= 0) {
          let range = add2[i3++];
          if (!builder.addInner(range.from, range.to, range.value))
            spill.push(range);
        } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i3 == add2.length || this.chunkEnd(cur2.chunkIndex) < add2[i3].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
          cur2.nextChunk();
        } else {
          if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
            if (!builder.addInner(cur2.from, cur2.to, cur2.value))
              spill.push(Range.create(cur2.from, cur2.to, cur2.value));
          }
          cur2.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
    map(changes) {
      if (changes.empty || this.isEmpty)
        return this;
      let chunks = [], chunkPos = [], maxPoint = -1;
      for (let i3 = 0; i3 < this.chunk.length; i3++) {
        let start = this.chunkPos[i3], chunk = this.chunk[i3];
        let touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          let { mapped, pos } = chunk.map(start, changes);
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      let next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new _RangeSet(chunkPos, chunks, next || _RangeSet.empty, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
    between(from2, to, f3) {
      if (this.isEmpty)
        return;
      for (let i3 = 0; i3 < this.chunk.length; i3++) {
        let start = this.chunkPos[i3], chunk = this.chunk[i3];
        if (to >= start && from2 <= start + chunk.length && chunk.between(start, from2 - start, to - start, f3) === false)
          return;
      }
      this.nextLayer.between(from2, to, f3);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
    iter(from2 = 0) {
      return HeapCursor.from([this]).goto(from2);
    }
    /**
    @internal
    */
    get isEmpty() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
    static iter(sets, from2 = 0) {
      return HeapCursor.from(sets).goto(from2);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
    static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
      let a2 = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let b4 = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
      let sharedChunks = findSharedChunks(a2, b4, textDiff);
      let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
      let sideB = new SpanCursor(b4, sharedChunks, minPointSize);
      textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
      if (textDiff.empty && textDiff.length == 0)
        compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
    static eq(oldSets, newSets, from2 = 0, to) {
      if (to == null)
        to = 1e9 - 1;
      let a2 = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
      let b4 = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
      if (a2.length != b4.length)
        return false;
      if (!a2.length)
        return true;
      let sharedChunks = findSharedChunks(a2, b4);
      let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from2), sideB = new SpanCursor(b4, sharedChunks, 0).goto(from2);
      for (; ; ) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
          return false;
        if (sideA.to > to)
          return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
    of the iteration.
    */
    static spans(sets, from2, to, iterator, minPointSize = -1) {
      let cursor = new SpanCursor(sets, null, minPointSize).goto(from2), pos = from2;
      let openRanges = cursor.openStart;
      for (; ; ) {
        let curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          let active = cursor.activeForPoint(cursor.to);
          let openCount = cursor.pointFrom < from2 ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
          iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
          openRanges = Math.min(cursor.openEnd(curTo), active.length);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, openRanges);
          openRanges = cursor.openEnd(curTo);
        }
        if (cursor.to > to)
          return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
        pos = cursor.to;
        cursor.next();
      }
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
    static of(ranges, sort = false) {
      let build = new RangeSetBuilder();
      for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
        build.add(range.from, range.to, range.value);
      return build.finish();
    }
    /**
    Join an array of range sets into a single set.
    */
    static join(sets) {
      if (!sets.length)
        return _RangeSet.empty;
      let result = sets[sets.length - 1];
      for (let i3 = sets.length - 2; i3 >= 0; i3--) {
        for (let layer2 = sets[i3]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
          result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
      }
      return result;
    }
  };
  RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
  function lazySort(ranges) {
    if (ranges.length > 1)
      for (let prev = ranges[0], i3 = 1; i3 < ranges.length; i3++) {
        let cur2 = ranges[i3];
        if (cmpRange(prev, cur2) > 0)
          return ranges.slice().sort(cmpRange);
        prev = cur2;
      }
    return ranges;
  }
  RangeSet.empty.nextLayer = RangeSet.empty;
  var RangeSetBuilder = class _RangeSetBuilder {
    finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
    /**
    Create an empty builder.
    */
    constructor() {
      this.chunks = [];
      this.chunkPos = [];
      this.chunkStart = -1;
      this.last = null;
      this.lastFrom = -1e9;
      this.lastTo = -1e9;
      this.from = [];
      this.to = [];
      this.value = [];
      this.maxPoint = -1;
      this.setMaxPoint = -1;
      this.nextLayer = null;
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
    add(from2, to, value) {
      if (!this.addInner(from2, to, value))
        (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from2, to, value);
    }
    /**
    @internal
    */
    addInner(from2, to, value) {
      let diff = from2 - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from2 - this.lastFrom || value.startSide - this.last.startSide) < 0)
        throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0)
        return false;
      if (this.from.length == 250)
        this.finishChunk(true);
      if (this.chunkStart < 0)
        this.chunkStart = from2;
      this.from.push(from2 - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from2;
      this.lastTo = to;
      this.value.push(value);
      if (value.point)
        this.maxPoint = Math.max(this.maxPoint, to - from2);
      return true;
    }
    /**
    @internal
    */
    addChunk(from2, chunk) {
      if ((from2 - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
        return false;
      if (this.from.length)
        this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from2);
      let last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from2;
      this.lastTo = chunk.to[last] + from2;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
    finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
    finishInner(next) {
      if (this.from.length)
        this.finishChunk(false);
      if (this.chunks.length == 0)
        return next;
      let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null;
      return result;
    }
  };
  function findSharedChunks(a2, b4, textDiff) {
    let inA = /* @__PURE__ */ new Map();
    for (let set of a2)
      for (let i3 = 0; i3 < set.chunk.length; i3++)
        if (set.chunk[i3].maxPoint <= 0)
          inA.set(set.chunk[i3], set.chunkPos[i3]);
    let shared = /* @__PURE__ */ new Set();
    for (let set of b4)
      for (let i3 = 0; i3 < set.chunk.length; i3++) {
        let known = inA.get(set.chunk[i3]);
        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i3] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i3].length)))
          shared.add(set.chunk[i3]);
      }
    return shared;
  }
  var LayerCursor = class {
    constructor(layer2, skip, minPoint, rank = 0) {
      this.layer = layer2;
      this.skip = skip;
      this.minPoint = minPoint;
      this.rank = rank;
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    get endSide() {
      return this.value ? this.value.endSide : 0;
    }
    goto(pos, side = -1e9) {
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
    gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        let next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
          break;
        this.chunkIndex++;
        forward = false;
      }
      if (this.chunkIndex < this.layer.chunk.length) {
        let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
        if (!forward || this.rangeIndex < rangeIndex)
          this.setRangeIndex(rangeIndex);
      }
      this.next();
    }
    forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0)
        this.gotoInner(pos, side, true);
    }
    next() {
      for (; ; ) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1e9;
          this.value = null;
          break;
        } else {
          let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
          let from2 = chunkPos + chunk.from[this.rangeIndex];
          this.from = from2;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          this.setRangeIndex(this.rangeIndex + 1);
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
            break;
        }
      }
    }
    setRangeIndex(index2) {
      if (index2 == this.layer.chunk[this.chunkIndex].value.length) {
        this.chunkIndex++;
        if (this.skip) {
          while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
            this.chunkIndex++;
        }
        this.rangeIndex = 0;
      } else {
        this.rangeIndex = index2;
      }
    }
    nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
    compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
    }
  };
  var HeapCursor = class _HeapCursor {
    constructor(heap) {
      this.heap = heap;
    }
    static from(sets, skip = null, minPoint = -1) {
      let heap = [];
      for (let i3 = 0; i3 < sets.length; i3++) {
        for (let cur2 = sets[i3]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
          if (cur2.maxPoint >= minPoint)
            heap.push(new LayerCursor(cur2, skip, minPoint, i3));
        }
      }
      return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
    }
    get startSide() {
      return this.value ? this.value.startSide : 0;
    }
    goto(pos, side = -1e9) {
      for (let cur2 of this.heap)
        cur2.goto(pos, side);
      for (let i3 = this.heap.length >> 1; i3 >= 0; i3--)
        heapBubble(this.heap, i3);
      this.next();
      return this;
    }
    forward(pos, side) {
      for (let cur2 of this.heap)
        cur2.forward(pos, side);
      for (let i3 = this.heap.length >> 1; i3 >= 0; i3--)
        heapBubble(this.heap, i3);
      if ((this.to - pos || this.value.endSide - side) < 0)
        this.next();
    }
    next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1e9;
        this.value = null;
        this.rank = -1;
      } else {
        let top2 = this.heap[0];
        this.from = top2.from;
        this.to = top2.to;
        this.value = top2.value;
        this.rank = top2.rank;
        if (top2.value)
          top2.next();
        heapBubble(this.heap, 0);
      }
    }
  };
  function heapBubble(heap, index2) {
    for (let cur2 = heap[index2]; ; ) {
      let childIndex = (index2 << 1) + 1;
      if (childIndex >= heap.length)
        break;
      let child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (cur2.compare(child) < 0)
        break;
      heap[childIndex] = cur2;
      heap[index2] = child;
      index2 = childIndex;
    }
  }
  var SpanCursor = class {
    constructor(sets, skip, minPoint) {
      this.minPoint = minPoint;
      this.active = [];
      this.activeTo = [];
      this.activeRank = [];
      this.minActive = -1;
      this.point = null;
      this.pointFrom = 0;
      this.pointRank = 0;
      this.to = -1e9;
      this.endSide = 0;
      this.openStart = -1;
      this.cursor = HeapCursor.from(sets, skip, minPoint);
    }
    goto(pos, side = -1e9) {
      this.cursor.goto(pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
    forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
        this.removeActive(this.minActive);
      this.cursor.forward(pos, side);
    }
    removeActive(index2) {
      remove(this.active, index2);
      remove(this.activeTo, index2);
      remove(this.activeRank, index2);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    addActive(trackOpen) {
      let i3 = 0, { value, to, rank } = this.cursor;
      while (i3 < this.activeRank.length && (rank - this.activeRank[i3] || to - this.activeTo[i3]) > 0)
        i3++;
      insert(this.active, i3, value);
      insert(this.activeTo, i3, to);
      insert(this.activeRank, i3, rank);
      if (trackOpen)
        insert(trackOpen, i3, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
    next() {
      let from2 = this.to, wasPoint = this.point;
      this.point = null;
      let trackOpen = this.openStart < 0 ? [] : null;
      for (; ; ) {
        let a2 = this.minActive;
        if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a2] > from2) {
            this.to = this.activeTo[a2];
            this.endSide = this.active[a2].endSide;
            break;
          }
          this.removeActive(a2);
          if (trackOpen)
            remove(trackOpen, a2);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1e9;
          break;
        } else if (this.cursor.from > from2) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          let nextVal = this.cursor.value;
          if (!nextVal.point) {
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
            this.cursor.next();
          } else {
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            this.cursor.next();
            this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        this.openStart = 0;
        for (let i3 = trackOpen.length - 1; i3 >= 0 && trackOpen[i3] < from2; i3--)
          this.openStart++;
      }
    }
    activeForPoint(to) {
      if (!this.active.length)
        return this.active;
      let active = [];
      for (let i3 = this.active.length - 1; i3 >= 0; i3--) {
        if (this.activeRank[i3] < this.pointRank)
          break;
        if (this.activeTo[i3] > to || this.activeTo[i3] == to && this.active[i3].endSide >= this.point.endSide)
          active.push(this.active[i3]);
      }
      return active.reverse();
    }
    openEnd(to) {
      let open = 0;
      for (let i3 = this.activeTo.length - 1; i3 >= 0 && this.activeTo[i3] > to; i3--)
        open++;
      return open;
    }
  };
  function compare(a2, startA, b4, startB, length, comparator) {
    a2.goto(startA);
    b4.goto(startB);
    let endB = startB + length;
    let pos = startB, dPos = startB - startA;
    for (; ; ) {
      let diff = a2.to + dPos - b4.to || a2.endSide - b4.endSide;
      let end = diff < 0 ? a2.to + dPos : b4.to, clipEnd = Math.min(end, endB);
      if (a2.point || b4.point) {
        if (!(a2.point && b4.point && (a2.point == b4.point || a2.point.eq(b4.point)) && sameValues(a2.activeForPoint(a2.to), b4.activeForPoint(b4.to))))
          comparator.comparePoint(pos, clipEnd, a2.point, b4.point);
      } else {
        if (clipEnd > pos && !sameValues(a2.active, b4.active))
          comparator.compareRange(pos, clipEnd, a2.active, b4.active);
      }
      if (end > endB)
        break;
      pos = end;
      if (diff <= 0)
        a2.next();
      if (diff >= 0)
        b4.next();
    }
  }
  function sameValues(a2, b4) {
    if (a2.length != b4.length)
      return false;
    for (let i3 = 0; i3 < a2.length; i3++)
      if (a2[i3] != b4[i3] && !a2[i3].eq(b4[i3]))
        return false;
    return true;
  }
  function remove(array, index2) {
    for (let i3 = index2, e3 = array.length - 1; i3 < e3; i3++)
      array[i3] = array[i3 + 1];
    array.pop();
  }
  function insert(array, index2, value) {
    for (let i3 = array.length - 1; i3 >= index2; i3--)
      array[i3 + 1] = array[i3];
    array[index2] = value;
  }
  function findMinIndex(value, array) {
    let found2 = -1, foundPos = 1e9;
    for (let i3 = 0; i3 < array.length; i3++)
      if ((array[i3] - foundPos || value[i3].endSide - value[found2].endSide) < 0) {
        found2 = i3;
        foundPos = array[i3];
      }
    return found2;
  }
  function countColumn(string4, tabSize, to = string4.length) {
    let n5 = 0;
    for (let i3 = 0; i3 < to; ) {
      if (string4.charCodeAt(i3) == 9) {
        n5 += tabSize - n5 % tabSize;
        i3++;
      } else {
        n5++;
        i3 = findClusterBreak(string4, i3);
      }
    }
    return n5;
  }
  function findColumn(string4, col, tabSize, strict) {
    for (let i3 = 0, n5 = 0; ; ) {
      if (n5 >= col)
        return i3;
      if (i3 == string4.length)
        break;
      n5 += string4.charCodeAt(i3) == 9 ? tabSize - n5 % tabSize : 1;
      i3 = findClusterBreak(string4, i3);
    }
    return strict === true ? -1 : string4.length;
  }

  // node_modules/@codemirror/view/dist/index.js
  var dist_exports2 = {};
  __export(dist_exports2, {
    BidiSpan: () => BidiSpan,
    BlockInfo: () => BlockInfo,
    BlockType: () => BlockType,
    Decoration: () => Decoration,
    Direction: () => Direction,
    EditorView: () => EditorView,
    GutterMarker: () => GutterMarker,
    MatchDecorator: () => MatchDecorator,
    RectangleMarker: () => RectangleMarker,
    ViewPlugin: () => ViewPlugin,
    ViewUpdate: () => ViewUpdate,
    WidgetType: () => WidgetType,
    __test: () => __test,
    closeHoverTooltips: () => closeHoverTooltips,
    crosshairCursor: () => crosshairCursor,
    drawSelection: () => drawSelection,
    dropCursor: () => dropCursor,
    getDrawSelectionConfig: () => getDrawSelectionConfig,
    getPanel: () => getPanel,
    getTooltip: () => getTooltip,
    gutter: () => gutter,
    gutterLineClass: () => gutterLineClass,
    gutters: () => gutters,
    hasHoverTooltips: () => hasHoverTooltips,
    highlightActiveLine: () => highlightActiveLine,
    highlightActiveLineGutter: () => highlightActiveLineGutter,
    highlightSpecialChars: () => highlightSpecialChars,
    highlightTrailingWhitespace: () => highlightTrailingWhitespace,
    highlightWhitespace: () => highlightWhitespace,
    hoverTooltip: () => hoverTooltip,
    keymap: () => keymap,
    layer: () => layer,
    lineNumberMarkers: () => lineNumberMarkers,
    lineNumbers: () => lineNumbers,
    logException: () => logException,
    panels: () => panels,
    placeholder: () => placeholder,
    rectangularSelection: () => rectangularSelection,
    repositionTooltips: () => repositionTooltips,
    runScopeHandlers: () => runScopeHandlers,
    scrollPastEnd: () => scrollPastEnd,
    showPanel: () => showPanel,
    showTooltip: () => showTooltip,
    tooltips: () => tooltips
  });

  // node_modules/style-mod/src/style-mod.js
  var C = "\u037C";
  var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
  var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
  var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
  var StyleModule = class {
    // :: (Object<Style>, ?{finish: ?(string) → string})
    // Create a style module from the given spec.
    //
    // When `finish` is given, it is called on regular (non-`@`)
    // selectors (after `&` expansion) to compute the final selector.
    constructor(spec, options) {
      this.rules = [];
      let { finish } = options || {};
      function splitSelector(selector) {
        return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
      }
      function render(selectors, spec2, target, isKeyframes) {
        let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
        if (isAt && spec2 == null)
          return target.push(selectors[0] + ";");
        for (let prop in spec2) {
          let value = spec2[prop];
          if (/&/.test(prop)) {
            render(
              prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b4) => a2.concat(b4)),
              value,
              target
            );
          } else if (value && typeof value == "object") {
            if (!isAt)
              throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
            render(splitSelector(prop), value, local, keyframes);
          } else if (value != null) {
            local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l5) => "-" + l5.toLowerCase()) + ": " + value + ";");
          }
        }
        if (local.length || keyframes) {
          target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
        }
      }
      for (let prop in spec)
        render(splitSelector(prop), spec[prop], this.rules);
    }
    // :: () → string
    // Returns a string containing the module's CSS rules.
    getRules() {
      return this.rules.join("\n");
    }
    // :: () → string
    // Generate a new unique CSS class name.
    static newName() {
      let id2 = top[COUNT] || 1;
      top[COUNT] = id2 + 1;
      return C + id2.toString(36);
    }
    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
    //
    // If a Content Security Policy nonce is provided, it is added to
    // the `<style>` tag generated by the library.
    static mount(root2, modules, options) {
      let set = root2[SET], nonce = options && options.nonce;
      if (!set)
        set = new StyleSet(root2, nonce);
      else if (nonce)
        set.setNonce(nonce);
      set.mount(Array.isArray(modules) ? modules : [modules], root2);
    }
  };
  var adoptedSet = /* @__PURE__ */ new Map();
  var StyleSet = class {
    constructor(root2, nonce) {
      let doc5 = root2.ownerDocument || root2, win = doc5.defaultView;
      if (!root2.head && root2.adoptedStyleSheets && win.CSSStyleSheet) {
        let adopted = adoptedSet.get(doc5);
        if (adopted)
          return root2[SET] = adopted;
        this.sheet = new win.CSSStyleSheet();
        adoptedSet.set(doc5, this);
      } else {
        this.styleTag = doc5.createElement("style");
        if (nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
      this.modules = [];
      root2[SET] = this;
    }
    mount(modules, root2) {
      let sheet = this.sheet;
      let pos = 0, j6 = 0;
      for (let i3 = 0; i3 < modules.length; i3++) {
        let mod = modules[i3], index2 = this.modules.indexOf(mod);
        if (index2 < j6 && index2 > -1) {
          this.modules.splice(index2, 1);
          j6--;
          index2 = -1;
        }
        if (index2 == -1) {
          this.modules.splice(j6++, 0, mod);
          if (sheet)
            for (let k4 = 0; k4 < mod.rules.length; k4++)
              sheet.insertRule(mod.rules[k4], pos++);
        } else {
          while (j6 < index2)
            pos += this.modules[j6++].rules.length;
          pos += mod.rules.length;
          j6++;
        }
      }
      if (sheet) {
        if (root2.adoptedStyleSheets.indexOf(this.sheet) < 0)
          root2.adoptedStyleSheets = [this.sheet, ...root2.adoptedStyleSheets];
      } else {
        let text5 = "";
        for (let i3 = 0; i3 < this.modules.length; i3++)
          text5 += this.modules[i3].getRules() + "\n";
        this.styleTag.textContent = text5;
        let target = root2.head || root2;
        if (this.styleTag.parentNode != target)
          target.insertBefore(this.styleTag, target.firstChild);
      }
    }
    setNonce(nonce) {
      if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
        this.styleTag.setAttribute("nonce", nonce);
    }
  };

  // node_modules/w3c-keyname/index.js
  var base = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };
  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: '"'
  };
  var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
  for (i3 = 0; i3 < 10; i3++)
    base[48 + i3] = base[96 + i3] = String(i3);
  var i3;
  for (i3 = 1; i3 <= 24; i3++)
    base[i3 + 111] = "F" + i3;
  var i3;
  for (i3 = 65; i3 <= 90; i3++) {
    base[i3] = String.fromCharCode(i3 + 32);
    shift[i3] = String.fromCharCode(i3);
  }
  var i3;
  for (code3 in base)
    if (!shift.hasOwnProperty(code3))
      shift[code3] = base[code3];
  var code3;
  function keyName(event) {
    var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
    var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
    if (name2 == "Esc")
      name2 = "Escape";
    if (name2 == "Del")
      name2 = "Delete";
    if (name2 == "Left")
      name2 = "ArrowLeft";
    if (name2 == "Up")
      name2 = "ArrowUp";
    if (name2 == "Right")
      name2 = "ArrowRight";
    if (name2 == "Down")
      name2 = "ArrowDown";
    return name2;
  }

  // node_modules/@codemirror/view/dist/index.js
  function getSelection2(root2) {
    let target;
    if (root2.nodeType == 11) {
      target = root2.getSelection ? root2 : root2.ownerDocument;
    } else {
      target = root2;
    }
    return target.getSelection();
  }
  function contains(dom, node2) {
    return node2 ? dom == node2 || dom.contains(node2.nodeType != 1 ? node2.parentNode : node2) : false;
  }
  function deepActiveElement(doc5) {
    let elt = doc5.activeElement;
    while (elt && elt.shadowRoot)
      elt = elt.shadowRoot.activeElement;
    return elt;
  }
  function hasSelection(dom, selection) {
    if (!selection.anchorNode)
      return false;
    try {
      return contains(dom, selection.anchorNode);
    } catch (_3) {
      return false;
    }
  }
  function clientRectsFor(dom) {
    if (dom.nodeType == 3)
      return textRange(dom, 0, dom.nodeValue.length).getClientRects();
    else if (dom.nodeType == 1)
      return dom.getClientRects();
    else
      return [];
  }
  function isEquivalentPosition(node2, off, targetNode, targetOff) {
    return targetNode ? scanFor(node2, off, targetNode, targetOff, -1) || scanFor(node2, off, targetNode, targetOff, 1) : false;
  }
  function domIndex(node2) {
    for (var index2 = 0; ; index2++) {
      node2 = node2.previousSibling;
      if (!node2)
        return index2;
    }
  }
  function isBlockElement(node2) {
    return node2.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node2.nodeName);
  }
  function scanFor(node2, off, targetNode, targetOff, dir) {
    for (; ; ) {
      if (node2 == targetNode && off == targetOff)
        return true;
      if (off == (dir < 0 ? 0 : maxOffset(node2))) {
        if (node2.nodeName == "DIV")
          return false;
        let parent = node2.parentNode;
        if (!parent || parent.nodeType != 1)
          return false;
        off = domIndex(node2) + (dir < 0 ? 0 : 1);
        node2 = parent;
      } else if (node2.nodeType == 1) {
        node2 = node2.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node2.nodeType == 1 && node2.contentEditable == "false")
          return false;
        off = dir < 0 ? maxOffset(node2) : 0;
      } else {
        return false;
      }
    }
  }
  function maxOffset(node2) {
    return node2.nodeType == 3 ? node2.nodeValue.length : node2.childNodes.length;
  }
  function flattenRect(rect, left) {
    let x7 = left ? rect.left : rect.right;
    return { left: x7, right: x7, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
    let vp = win.visualViewport;
    if (vp)
      return {
        left: 0,
        right: vp.width,
        top: 0,
        bottom: vp.height
      };
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  function getScale(elt, rect) {
    let scaleX = rect.width / elt.offsetWidth;
    let scaleY = rect.height / elt.offsetHeight;
    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
      scaleX = 1;
    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
      scaleY = 1;
    return { scaleX, scaleY };
  }
  function scrollRectIntoView(dom, rect, side, x7, y4, xMargin, yMargin, ltr) {
    let doc5 = dom.ownerDocument, win = doc5.defaultView || window;
    for (let cur2 = dom, stop = false; cur2 && !stop; ) {
      if (cur2.nodeType == 1) {
        let bounding, top2 = cur2 == doc5.body;
        let scaleX = 1, scaleY = 1;
        if (top2) {
          bounding = windowRect(win);
        } else {
          if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
            stop = true;
          if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
            cur2 = cur2.assignedSlot || cur2.parentNode;
            continue;
          }
          let rect2 = cur2.getBoundingClientRect();
          ({ scaleX, scaleY } = getScale(cur2, rect2));
          bounding = {
            left: rect2.left,
            right: rect2.left + cur2.clientWidth * scaleX,
            top: rect2.top,
            bottom: rect2.top + cur2.clientHeight * scaleY
          };
        }
        let moveX = 0, moveY = 0;
        if (y4 == "nearest") {
          if (rect.top < bounding.top) {
            moveY = -(bounding.top - rect.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY)
              moveY = rect.bottom - bounding.bottom + moveY + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top)
              moveY = -(bounding.top + moveY - rect.top + yMargin);
          }
        } else {
          let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
          let targetTop = y4 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y4 == "start" || y4 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x7 == "nearest") {
          if (rect.left < bounding.left) {
            moveX = -(bounding.left - rect.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX)
              moveX = rect.right - bounding.right + moveX + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX)
              moveX = -(bounding.left + moveX - rect.left + xMargin);
          }
        } else {
          let targetLeft = x7 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x7 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (top2) {
            win.scrollBy(moveX, moveY);
          } else {
            let movedX = 0, movedY = 0;
            if (moveY) {
              let start = cur2.scrollTop;
              cur2.scrollTop += moveY / scaleY;
              movedY = (cur2.scrollTop - start) * scaleY;
            }
            if (moveX) {
              let start = cur2.scrollLeft;
              cur2.scrollLeft += moveX / scaleX;
              movedX = (cur2.scrollLeft - start) * scaleX;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1)
              x7 = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1)
              y4 = "nearest";
          }
        }
        if (top2)
          break;
        cur2 = cur2.assignedSlot || cur2.parentNode;
      } else if (cur2.nodeType == 11) {
        cur2 = cur2.host;
      } else {
        break;
      }
    }
  }
  function scrollableParent(dom) {
    let doc5 = dom.ownerDocument;
    for (let cur2 = dom.parentNode; cur2; ) {
      if (cur2 == doc5.body) {
        break;
      } else if (cur2.nodeType == 1) {
        if (cur2.scrollHeight > cur2.clientHeight || cur2.scrollWidth > cur2.clientWidth)
          return cur2;
        cur2 = cur2.assignedSlot || cur2.parentNode;
      } else if (cur2.nodeType == 11) {
        cur2 = cur2.host;
      } else {
        break;
      }
    }
    return null;
  }
  var DOMSelectionState = class {
    constructor() {
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
    setRange(range) {
      let { anchorNode, focusNode } = range;
      this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
    }
    set(anchorNode, anchorOffset, focusNode, focusOffset) {
      this.anchorNode = anchorNode;
      this.anchorOffset = anchorOffset;
      this.focusNode = focusNode;
      this.focusOffset = focusOffset;
    }
  };
  var preventScrollSupported = null;
  function focusPreventScroll(dom) {
    if (dom.setActive)
      return dom.setActive();
    if (preventScrollSupported)
      return dom.focus(preventScrollSupported);
    let stack = [];
    for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
      stack.push(cur2, cur2.scrollTop, cur2.scrollLeft);
      if (cur2 == cur2.ownerDocument)
        break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = { preventScroll: true };
        return true;
      }
    } : void 0);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (let i3 = 0; i3 < stack.length; ) {
        let elt = stack[i3++], top2 = stack[i3++], left = stack[i3++];
        if (elt.scrollTop != top2)
          elt.scrollTop = top2;
        if (elt.scrollLeft != left)
          elt.scrollLeft = left;
      }
    }
  }
  var scratchRange;
  function textRange(node2, from2, to = from2) {
    let range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node2, to);
    range.setStart(node2, from2);
    return range;
  }
  function dispatchKey(elt, name2, code3, mods) {
    let options = { key: name2, code: name2, keyCode: code3, which: code3, cancelable: true };
    if (mods)
      ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
    let down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt.dispatchEvent(down);
    let up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node2) {
    while (node2) {
      if (node2 && (node2.nodeType == 9 || node2.nodeType == 11 && node2.host))
        return node2;
      node2 = node2.assignedSlot || node2.parentNode;
    }
    return null;
  }
  function clearAttributes(node2) {
    while (node2.attributes.length)
      node2.removeAttributeNode(node2.attributes[0]);
  }
  function atElementStart(doc5, selection) {
    let node2 = selection.focusNode, offset = selection.focusOffset;
    if (!node2 || selection.anchorNode != node2 || selection.anchorOffset != offset)
      return false;
    offset = Math.min(offset, maxOffset(node2));
    for (; ; ) {
      if (offset) {
        if (node2.nodeType != 1)
          return false;
        let prev = node2.childNodes[offset - 1];
        if (prev.contentEditable == "false")
          offset--;
        else {
          node2 = prev;
          offset = maxOffset(node2);
        }
      } else if (node2 == doc5) {
        return true;
      } else {
        offset = domIndex(node2);
        node2 = node2.parentNode;
      }
    }
  }
  function isScrolledToBottom(elt) {
    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
  }
  function textNodeBefore(startNode, startOffset) {
    for (let node2 = startNode, offset = startOffset; ; ) {
      if (node2.nodeType == 3 && offset > 0) {
        return { node: node2, offset };
      } else if (node2.nodeType == 1 && offset > 0) {
        if (node2.contentEditable == "false")
          return null;
        node2 = node2.childNodes[offset - 1];
        offset = maxOffset(node2);
      } else if (node2.parentNode && !isBlockElement(node2)) {
        offset = domIndex(node2);
        node2 = node2.parentNode;
      } else {
        return null;
      }
    }
  }
  function textNodeAfter(startNode, startOffset) {
    for (let node2 = startNode, offset = startOffset; ; ) {
      if (node2.nodeType == 3 && offset < node2.nodeValue.length) {
        return { node: node2, offset };
      } else if (node2.nodeType == 1 && offset < node2.childNodes.length) {
        if (node2.contentEditable == "false")
          return null;
        node2 = node2.childNodes[offset];
        offset = 0;
      } else if (node2.parentNode && !isBlockElement(node2)) {
        offset = domIndex(node2) + 1;
        node2 = node2.parentNode;
      } else {
        return null;
      }
    }
  }
  var DOMPos = class _DOMPos {
    constructor(node2, offset, precise = true) {
      this.node = node2;
      this.offset = offset;
      this.precise = precise;
    }
    static before(dom, precise) {
      return new _DOMPos(dom.parentNode, domIndex(dom), precise);
    }
    static after(dom, precise) {
      return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  };
  var noChildren = [];
  var ContentView = class _ContentView {
    constructor() {
      this.parent = null;
      this.dom = null;
      this.flags = 2;
    }
    get overrideDOMText() {
      return null;
    }
    get posAtStart() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
    get posAtEnd() {
      return this.posAtStart + this.length;
    }
    posBefore(view) {
      let pos = this.posAtStart;
      for (let child of this.children) {
        if (child == view)
          return pos;
        pos += child.length + child.breakAfter;
      }
      throw new RangeError("Invalid child in posBefore");
    }
    posAfter(view) {
      return this.posBefore(view) + view.length;
    }
    sync(view, track2) {
      if (this.flags & 2) {
        let parent = this.dom;
        let prev = null, next;
        for (let child of this.children) {
          if (child.flags & 7) {
            if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
              let contentView = _ContentView.get(next);
              if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                child.reuseDOM(next);
            }
            child.sync(view, track2);
            child.flags &= ~7;
          }
          next = prev ? prev.nextSibling : parent.firstChild;
          if (track2 && !track2.written && track2.node == parent && next != child.dom)
            track2.written = true;
          if (child.dom.parentNode == parent) {
            while (next && next != child.dom)
              next = rm$1(next);
          } else {
            parent.insertBefore(child.dom, next);
          }
          prev = child.dom;
        }
        next = prev ? prev.nextSibling : parent.firstChild;
        if (next && track2 && track2.node == parent)
          track2.written = true;
        while (next)
          next = rm$1(next);
      } else if (this.flags & 1) {
        for (let child of this.children)
          if (child.flags & 7) {
            child.sync(view, track2);
            child.flags &= ~7;
          }
      }
    }
    reuseDOM(_dom) {
    }
    localPosFromDOM(node2, offset) {
      let after;
      if (node2 == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        let bias = maxOffset(node2) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (; ; ) {
          let parent = node2.parentNode;
          if (parent == this.dom)
            break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node2 == parent.firstChild)
              bias = -1;
            else
              bias = 1;
          }
          node2 = parent;
        }
        if (bias < 0)
          after = node2;
        else
          after = node2.nextSibling;
      }
      if (after == this.dom.firstChild)
        return 0;
      while (after && !_ContentView.get(after))
        after = after.nextSibling;
      if (!after)
        return this.length;
      for (let i3 = 0, pos = 0; ; i3++) {
        let child = this.children[i3];
        if (child.dom == after)
          return pos;
        pos += child.length + child.breakAfter;
      }
    }
    domBoundsAround(from2, to, offset = 0) {
      let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
      for (let i3 = 0, pos = offset, prevEnd = offset; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = pos + child.length;
        if (pos < from2 && end > to)
          return child.domBoundsAround(from2, to, pos);
        if (end >= from2 && fromI == -1) {
          fromI = i3;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i3;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
    markDirty(andParent = false) {
      this.flags |= 2;
      this.markParentsDirty(andParent);
    }
    markParentsDirty(childList) {
      for (let parent = this.parent; parent; parent = parent.parent) {
        if (childList)
          parent.flags |= 2;
        if (parent.flags & 1)
          return;
        parent.flags |= 1;
        childList = false;
      }
    }
    setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.flags & 7)
          this.markParentsDirty(true);
      }
    }
    setDOM(dom) {
      if (this.dom == dom)
        return;
      if (this.dom)
        this.dom.cmView = null;
      this.dom = dom;
      dom.cmView = this;
    }
    get rootView() {
      for (let v4 = this; ; ) {
        let parent = v4.parent;
        if (!parent)
          return v4;
        v4 = parent;
      }
    }
    replaceChildren(from2, to, children = noChildren) {
      this.markDirty();
      for (let i3 = from2; i3 < to; i3++) {
        let child = this.children[i3];
        if (child.parent == this && children.indexOf(child) < 0)
          child.destroy();
      }
      this.children.splice(from2, to - from2, ...children);
      for (let i3 = 0; i3 < children.length; i3++)
        children[i3].setParent(this);
    }
    ignoreMutation(_rec) {
      return false;
    }
    ignoreEvent(_event) {
      return false;
    }
    childCursor(pos = this.length) {
      return new ChildCursor(this.children, pos, this.children.length);
    }
    childPos(pos, bias = 1) {
      return this.childCursor().findPos(pos, bias);
    }
    toString() {
      let name2 = this.constructor.name.replace("View", "");
      return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
    static get(node2) {
      return node2.cmView;
    }
    get isEditable() {
      return true;
    }
    get isWidget() {
      return false;
    }
    get isHidden() {
      return false;
    }
    merge(from2, to, source, hasStart, openStart, openEnd) {
      return false;
    }
    become(other) {
      return false;
    }
    canReuseDOM(other) {
      return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
    }
    // When this is a zero-length view with a side, this should return a
    // number <= 0 to indicate it is before its position, or a
    // number > 0 when after its position.
    getSide() {
      return 0;
    }
    destroy() {
      for (let child of this.children)
        if (child.parent == this)
          child.destroy();
      this.parent = null;
    }
  };
  ContentView.prototype.breakAfter = 0;
  function rm$1(dom) {
    let next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  var ChildCursor = class {
    constructor(children, pos, i3) {
      this.children = children;
      this.pos = pos;
      this.i = i3;
      this.off = 0;
    }
    findPos(pos, bias = 1) {
      for (; ; ) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        let next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  };
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
    let { children } = parent;
    let before = children.length ? children[fromI] : null;
    let last = insert2.length ? insert2[insert2.length - 1] : null;
    let breakAtEnd = last ? last.breakAfter : breakAtStart;
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
      return;
    if (toI < children.length) {
      let after = children[toI];
      if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert2[insert2.length - 1] = after;
        } else {
          if (toOff || after.children.length && !after.children[0].length)
            after.merge(0, toOff, null, false, 0, openEnd);
          insert2.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        if (last)
          last.breakAfter = 1;
        else
          breakAtStart = 1;
      }
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
          before.breakAfter = insert2.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    while (fromI < toI && insert2.length) {
      if (children[toI - 1].become(insert2[insert2.length - 1])) {
        toI--;
        insert2.pop();
        openEnd = insert2.length ? 0 : openStart;
      } else if (children[fromI].become(insert2[0])) {
        fromI++;
        insert2.shift();
        openStart = insert2.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
      fromI--;
    if (fromI < toI || insert2.length)
      parent.replaceChildren(fromI, toI, insert2);
  }
  function mergeChildrenInto(parent, from2, to, insert2, openStart, openEnd) {
    let cur2 = parent.childCursor();
    let { i: toI, off: toOff } = cur2.findPos(to, 1);
    let { i: fromI, off: fromOff } = cur2.findPos(from2, -1);
    let dLen = from2 - to;
    for (let view of insert2)
      dLen += view.length;
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
  }
  var nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
  var doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
  var ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
  var ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
  var ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
  var ie2 = !!(ie_upto10 || ie_11up || ie_edge);
  var gecko = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
  var chrome = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
  var webkit = "webkitFontSmoothing" in doc.documentElement.style;
  var safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
  var ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
  var browser = {
    mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
    windows: /* @__PURE__ */ /Win/.test(nav.platform),
    linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
    ie: ie2,
    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
    gecko,
    gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
    chrome: !!chrome,
    chrome_version: chrome ? +chrome[1] : 0,
    ios,
    android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
    webkit,
    safari,
    webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
  };
  var MaxJoinLen = 256;
  var TextView = class _TextView extends ContentView {
    constructor(text5) {
      super();
      this.text = text5;
    }
    get length() {
      return this.text.length;
    }
    createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
    sync(view, track2) {
      if (!this.dom)
        this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track2 && track2.node == this.dom)
          track2.written = true;
        this.dom.nodeValue = this.text;
      }
    }
    reuseDOM(dom) {
      if (dom.nodeType == 3)
        this.createDOM(dom);
    }
    merge(from2, to, source) {
      if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to - from2) + source.length > MaxJoinLen || source.flags & 8))
        return false;
      this.text = this.text.slice(0, from2) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
    split(from2) {
      let result = new _TextView(this.text.slice(from2));
      this.text = this.text.slice(0, from2);
      this.markDirty();
      result.flags |= this.flags & 8;
      return result;
    }
    localPosFromDOM(node2, offset) {
      return node2 == this.dom ? offset : offset ? this.text.length : 0;
    }
    domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
    domBoundsAround(_from, _to, offset) {
      return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
    }
    coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  };
  var MarkView = class _MarkView extends ContentView {
    constructor(mark, children = [], length = 0) {
      super();
      this.mark = mark;
      this.children = children;
      this.length = length;
      for (let ch of children)
        ch.setParent(this);
    }
    setAttrs(dom) {
      clearAttributes(dom);
      if (this.mark.class)
        dom.className = this.mark.class;
      if (this.mark.attrs)
        for (let name2 in this.mark.attrs)
          dom.setAttribute(name2, this.mark.attrs[name2]);
      return dom;
    }
    canReuseDOM(other) {
      return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
    }
    reuseDOM(node2) {
      if (node2.nodeName == this.mark.tagName.toUpperCase()) {
        this.setDOM(node2);
        this.flags |= 4 | 2;
      }
    }
    sync(view, track2) {
      if (!this.dom)
        this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
      else if (this.flags & 4)
        this.setAttrs(this.dom);
      super.sync(view, track2);
    }
    merge(from2, to, source, _hasStart, openStart, openEnd) {
      if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from2 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      mergeChildrenInto(this, from2, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
    split(from2) {
      let result = [], off = 0, detachFrom = -1, i3 = 0;
      for (let elt of this.children) {
        let end = off + elt.length;
        if (end > from2)
          result.push(off < from2 ? elt.split(from2 - off) : elt);
        if (detachFrom < 0 && off >= from2)
          detachFrom = i3;
        off = end;
        i3++;
      }
      let length = this.length - from2;
      this.length = from2;
      if (detachFrom > -1) {
        this.children.length = detachFrom;
        this.markDirty();
      }
      return new _MarkView(this.mark, result, length);
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  };
  function textCoords(text5, pos, side) {
    let length = text5.nodeValue.length;
    if (pos > length)
      pos = length;
    let from2 = pos, to = pos, flatten2 = 0;
    if (pos == 0 && side < 0 || pos == length && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        if (pos) {
          from2--;
          flatten2 = 1;
        } else if (to < length) {
          to++;
          flatten2 = -1;
        }
      }
    } else {
      if (side < 0)
        from2--;
      else if (to < length)
        to++;
    }
    let rects = textRange(text5, from2, to).getClientRects();
    if (!rects.length)
      return null;
    let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten2 && rect.width == 0)
      rect = Array.prototype.find.call(rects, (r4) => r4.width) || rect;
    return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
  }
  var WidgetView = class _WidgetView extends ContentView {
    static create(widget, length, side) {
      return new _WidgetView(widget, length, side);
    }
    constructor(widget, length, side) {
      super();
      this.widget = widget;
      this.length = length;
      this.side = side;
      this.prevWidget = null;
    }
    split(from2) {
      let result = _WidgetView.create(this.widget, this.length - from2, this.side);
      this.length -= from2;
      return result;
    }
    sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget)
          this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        if (!this.widget.editable)
          this.dom.contentEditable = "false";
      }
    }
    getSide() {
      return this.side;
    }
    merge(from2, to, source, hasStart, openStart, openEnd) {
      if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from2 > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      this.length = from2 + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    become(other) {
      if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
        if (!this.widget.compare(other.widget))
          this.markDirty(true);
        if (this.dom && !this.prevWidget)
          this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get overrideDOMText() {
      if (this.length == 0)
        return Text2.empty;
      let top2 = this;
      while (top2.parent)
        top2 = top2.parent;
      let { view } = top2, text5 = view && view.state.doc, start = this.posAtStart;
      return text5 ? text5.slice(start, start + this.length) : Text2.empty;
    }
    domAtPos(pos) {
      return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos, side) {
      let custom = this.widget.coordsAt(this.dom, pos, side);
      if (custom)
        return custom;
      let rects = this.dom.getClientRects(), rect = null;
      if (!rects.length)
        return null;
      let fromBack = this.side ? this.side < 0 : pos > 0;
      for (let i3 = fromBack ? rects.length - 1 : 0; ; i3 += fromBack ? -1 : 1) {
        rect = rects[i3];
        if (pos > 0 ? i3 == 0 : i3 == rects.length - 1 || rect.top < rect.bottom)
          break;
      }
      return flattenRect(rect, !fromBack);
    }
    get isEditable() {
      return false;
    }
    get isWidget() {
      return true;
    }
    get isHidden() {
      return this.widget.isHidden;
    }
    destroy() {
      super.destroy();
      if (this.dom)
        this.widget.destroy(this.dom);
    }
  };
  var WidgetBufferView = class _WidgetBufferView extends ContentView {
    constructor(side) {
      super();
      this.side = side;
    }
    get length() {
      return 0;
    }
    merge() {
      return false;
    }
    become(other) {
      return other instanceof _WidgetBufferView && other.side == this.side;
    }
    split() {
      return new _WidgetBufferView(this.side);
    }
    sync() {
      if (!this.dom) {
        let dom = document.createElement("img");
        dom.className = "cm-widgetBuffer";
        dom.setAttribute("aria-hidden", "true");
        this.setDOM(dom);
      }
    }
    getSide() {
      return this.side;
    }
    domAtPos(pos) {
      return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
    }
    localPosFromDOM() {
      return 0;
    }
    domBoundsAround() {
      return null;
    }
    coordsAt(pos) {
      return this.dom.getBoundingClientRect();
    }
    get overrideDOMText() {
      return Text2.empty;
    }
    get isHidden() {
      return true;
    }
  };
  TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
  function inlineDOMAtPos(parent, pos) {
    let dom = parent.dom, { children } = parent, i3 = 0;
    for (let off = 0; i3 < children.length; i3++) {
      let child = children[i3], end = off + child.length;
      if (end == off && child.getSide() <= 0)
        continue;
      if (pos > off && pos < end && child.dom.parentNode == dom)
        return child.domAtPos(pos - off);
      if (pos <= off)
        break;
      off = end;
    }
    for (let j6 = i3; j6 > 0; j6--) {
      let prev = children[j6 - 1];
      if (prev.dom.parentNode == dom)
        return prev.domAtPos(prev.length);
    }
    for (let j6 = i3; j6 < children.length; j6++) {
      let next = children[j6];
      if (next.dom.parentNode == dom)
        return next.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  function joinInlineInto(parent, view, open) {
    let last, { children } = parent;
    if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
      joinInlineInto(last, view.children[0], open - 1);
    } else {
      children.push(view);
      view.setParent(parent);
    }
    parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
    let before = null, beforePos = -1, after = null, afterPos = -1;
    function scan(view2, pos2) {
      for (let i3 = 0, off = 0; i3 < view2.children.length && off <= pos2; i3++) {
        let child = view2.children[i3], end = off + child.length;
        if (end >= pos2) {
          if (child.children.length) {
            scan(child, pos2 - off);
          } else if ((!after || after.isHidden && side > 0) && (end > pos2 || off == end && child.getSide() > 0)) {
            after = child;
            afterPos = pos2 - off;
          } else if (off < pos2 || off == end && child.getSide() < 0 && !child.isHidden) {
            before = child;
            beforePos = pos2 - off;
          }
        }
        off = end;
      }
    }
    scan(view, pos);
    let target = (side < 0 ? before : after) || before || after;
    if (target)
      return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view);
  }
  function fallbackRect(view) {
    let last = view.dom.lastChild;
    if (!last)
      return view.dom.getBoundingClientRect();
    let rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  function combineAttrs(source, target) {
    for (let name2 in source) {
      if (name2 == "class" && target.class)
        target.class += " " + source.class;
      else if (name2 == "style" && target.style)
        target.style += ";" + source.style;
      else
        target[name2] = source[name2];
    }
    return target;
  }
  var noAttrs = /* @__PURE__ */ Object.create(null);
  function attrsEq(a2, b4, ignore) {
    if (a2 == b4)
      return true;
    if (!a2)
      a2 = noAttrs;
    if (!b4)
      b4 = noAttrs;
    let keysA = Object.keys(a2), keysB = Object.keys(b4);
    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
      return false;
    for (let key of keysA) {
      if (key != ignore && (keysB.indexOf(key) == -1 || a2[key] !== b4[key]))
        return false;
    }
    return true;
  }
  function updateAttrs(dom, prev, attrs) {
    let changed = false;
    if (prev) {
      for (let name2 in prev)
        if (!(attrs && name2 in attrs)) {
          changed = true;
          if (name2 == "style")
            dom.style.cssText = "";
          else
            dom.removeAttribute(name2);
        }
    }
    if (attrs) {
      for (let name2 in attrs)
        if (!(prev && prev[name2] == attrs[name2])) {
          changed = true;
          if (name2 == "style")
            dom.style.cssText = attrs[name2];
          else
            dom.setAttribute(name2, attrs[name2]);
        }
    }
    return changed;
  }
  function getAttrs(dom) {
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let i3 = 0; i3 < dom.attributes.length; i3++) {
      let attr = dom.attributes[i3];
      attrs[attr.name] = attr.value;
    }
    return attrs;
  }
  var LineView = class _LineView extends ContentView {
    constructor() {
      super(...arguments);
      this.children = [];
      this.length = 0;
      this.prevAttrs = void 0;
      this.attrs = null;
      this.breakAfter = 0;
    }
    // Consumes source
    merge(from2, to, source, hasStart, openStart, openEnd) {
      if (source) {
        if (!(source instanceof _LineView))
          return false;
        if (!this.dom)
          source.transferDOM(this);
      }
      if (hasStart)
        this.setDeco(source ? source.attrs : null);
      mergeChildrenInto(this, from2, to, source ? source.children.slice() : [], openStart, openEnd);
      return true;
    }
    split(at4) {
      let end = new _LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0)
        return end;
      let { i: i3, off } = this.childPos(at4);
      if (off) {
        end.append(this.children[i3].split(off), 0);
        this.children[i3].merge(off, this.children[i3].length, null, false, 0, 0);
        i3++;
      }
      for (let j6 = i3; j6 < this.children.length; j6++)
        end.append(this.children[j6], 0);
      while (i3 > 0 && this.children[i3 - 1].length == 0)
        this.children[--i3].destroy();
      this.children.length = i3;
      this.markDirty();
      this.length = at4;
      return end;
    }
    transferDOM(other) {
      if (!this.dom)
        return;
      this.markDirty();
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
      this.prevAttrs = void 0;
      this.dom = null;
    }
    setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
    append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
    addLineDeco(deco) {
      let attrs = deco.spec.attributes, cls = deco.spec.class;
      if (attrs)
        this.attrs = combineAttrs(attrs, this.attrs || {});
      if (cls)
        this.attrs = combineAttrs({ class: cls }, this.attrs || {});
    }
    domAtPos(pos) {
      return inlineDOMAtPos(this, pos);
    }
    reuseDOM(node2) {
      if (node2.nodeName == "DIV") {
        this.setDOM(node2);
        this.flags |= 4 | 2;
      }
    }
    sync(view, track2) {
      var _a2;
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : void 0;
      } else if (this.flags & 4) {
        clearAttributes(this.dom);
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : void 0;
      }
      if (this.prevAttrs !== void 0) {
        updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = void 0;
      }
      super.sync(view, track2);
      let last = this.dom.lastChild;
      while (last && ContentView.get(last) instanceof MarkView)
        last = last.lastChild;
      if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
        let hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
    measureTextSize() {
      if (this.children.length == 0 || this.length > 20)
        return null;
      let totalWidth = 0, textHeight;
      for (let child of this.children) {
        if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
          return null;
        let rects = clientRectsFor(child.dom);
        if (rects.length != 1)
          return null;
        totalWidth += rects[0].width;
        textHeight = rects[0].height;
      }
      return !totalWidth ? null : {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length,
        textHeight
      };
    }
    coordsAt(pos, side) {
      let rect = coordsInChildren(this, pos, side);
      if (!this.children.length && rect && this.parent) {
        let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
        if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
          let dist2 = (height - heightOracle.textHeight) / 2;
          return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
        }
      }
      return rect;
    }
    become(_other) {
      return false;
    }
    covers() {
      return true;
    }
    static find(docView, pos) {
      for (let i3 = 0, off = 0; i3 < docView.children.length; i3++) {
        let block = docView.children[i3], end = off + block.length;
        if (end >= pos) {
          if (block instanceof _LineView)
            return block;
          if (end > pos)
            break;
        }
        off = end + block.breakAfter;
      }
      return null;
    }
  };
  var BlockWidgetView = class _BlockWidgetView extends ContentView {
    constructor(widget, length, deco) {
      super();
      this.widget = widget;
      this.length = length;
      this.deco = deco;
      this.breakAfter = 0;
      this.prevWidget = null;
    }
    merge(from2, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from2 > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
        return false;
      this.length = from2 + (source ? source.length : 0) + (this.length - to);
      return true;
    }
    domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
    split(at4) {
      let len = this.length - at4;
      this.length = at4;
      let end = new _BlockWidgetView(this.widget, len, this.deco);
      end.breakAfter = this.breakAfter;
      return end;
    }
    get children() {
      return noChildren;
    }
    sync(view) {
      if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
        if (this.dom && this.prevWidget)
          this.prevWidget.destroy(this.dom);
        this.prevWidget = null;
        this.setDOM(this.widget.toDOM(view));
        if (!this.widget.editable)
          this.dom.contentEditable = "false";
      }
    }
    get overrideDOMText() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text2.empty;
    }
    domBoundsAround() {
      return null;
    }
    become(other) {
      if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.compare(this.widget))
          this.markDirty(true);
        if (this.dom && !this.prevWidget)
          this.prevWidget = this.widget;
        this.widget = other.widget;
        this.length = other.length;
        this.deco = other.deco;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
    ignoreMutation() {
      return true;
    }
    ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
    get isEditable() {
      return false;
    }
    get isWidget() {
      return true;
    }
    coordsAt(pos, side) {
      return this.widget.coordsAt(this.dom, pos, side);
    }
    destroy() {
      super.destroy();
      if (this.dom)
        this.widget.destroy(this.dom);
    }
    covers(side) {
      let { startSide, endSide } = this.deco;
      return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
    }
  };
  var WidgetType = class {
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    eq(widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
    updateDOM(dom, view) {
      return false;
    }
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
    get estimatedHeight() {
      return -1;
    }
    /**
    For inline widgets that are displayed inline (as opposed to
    `inline-block`) and introduce line breaks (through `<br>` tags
    or textual newlines), this must indicate the amount of line
    breaks they introduce. Defaults to 0.
    */
    get lineBreaks() {
      return 0;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
    ignoreEvent(event) {
      return true;
    }
    /**
    Override the way screen coordinates for positions at/in the
    widget are found. `pos` will be the offset into the widget, and
    `side` the side of the position that is being queried—less than
    zero for before, greater than zero for after, and zero for
    directly at that position.
    */
    coordsAt(dom, pos, side) {
      return null;
    }
    /**
    @internal
    */
    get isHidden() {
      return false;
    }
    /**
    @internal
    */
    get editable() {
      return false;
    }
    /**
    This is called when the an instance of the widget is removed
    from the editor view.
    */
    destroy(dom) {
    }
  };
  var BlockType = /* @__PURE__ */ function(BlockType2) {
    BlockType2[BlockType2["Text"] = 0] = "Text";
    BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
    BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
    BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
    return BlockType2;
  }(BlockType || (BlockType = {}));
  var Decoration = class extends RangeValue {
    constructor(startSide, endSide, widget, spec) {
      super();
      this.startSide = startSide;
      this.endSide = endSide;
      this.widget = widget;
      this.spec = spec;
    }
    /**
    @internal
    */
    get heightRelevant() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
    the higher-precedence decorations creating the inner DOM nodes.
    Such elements are split on line boundaries and on the boundaries
    of lower-precedence decorations.
    */
    static mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which displays a DOM element at the
    given position.
    */
    static widget(spec) {
      let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block = !!spec.block;
      side += block && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
      return new PointDecoration(spec, side, side, block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
    static replace(spec) {
      let block = !!spec.block, startSide, endSide;
      if (spec.isBlockGap) {
        startSide = -5e8;
        endSide = 4e8;
      } else {
        let { start, end } = getInclusive(spec, block);
        startSide = (start ? block ? -3e8 : -1 : 5e8) - 1;
        endSide = (end ? block ? 2e8 : 1 : -6e8) + 1;
      }
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
    static line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
    static set(of, sort = false) {
      return RangeSet.of(of, sort);
    }
    /**
    @internal
    */
    hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  };
  Decoration.none = RangeSet.empty;
  var MarkDecoration = class _MarkDecoration extends Decoration {
    constructor(spec) {
      let { start, end } = getInclusive(spec);
      super(start ? -1 : 5e8, end ? 1 : -6e8, null, spec);
      this.tagName = spec.tagName || "span";
      this.class = spec.class || "";
      this.attrs = spec.attributes || null;
    }
    eq(other) {
      var _a2, _b;
      return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) && attrsEq(this.attrs, other.attrs, "class");
    }
    range(from2, to = from2) {
      if (from2 >= to)
        throw new RangeError("Mark decorations may not be empty");
      return super.range(from2, to);
    }
  };
  MarkDecoration.prototype.point = false;
  var LineDecoration = class _LineDecoration extends Decoration {
    constructor(spec) {
      super(-2e8, -2e8, null, spec);
    }
    eq(other) {
      return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
    }
    range(from2, to = from2) {
      if (to != from2)
        throw new RangeError("Line decoration ranges must be zero-length");
      return super.range(from2, to);
    }
  };
  LineDecoration.prototype.mapMode = MapMode.TrackBefore;
  LineDecoration.prototype.point = true;
  var PointDecoration = class _PointDecoration extends Decoration {
    constructor(spec, startSide, endSide, block, widget, isReplace) {
      super(startSide, endSide, widget, spec);
      this.block = block;
      this.isReplace = isReplace;
      this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
    }
    // Only relevant when this.block == true
    get type() {
      return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
    get heightRelevant() {
      return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
    }
    eq(other) {
      return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
    range(from2, to = from2) {
      if (this.isReplace && (from2 > to || from2 == to && this.startSide > 0 && this.endSide <= 0))
        throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from2)
        throw new RangeError("Widget decorations can only have zero-length ranges");
      return super.range(from2, to);
    }
  };
  PointDecoration.prototype.point = true;
  function getInclusive(spec, block = false) {
    let { inclusiveStart: start, inclusiveEnd: end } = spec;
    if (start == null)
      start = spec.inclusive;
    if (end == null)
      end = spec.inclusive;
    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
  }
  function widgetsEq(a2, b4) {
    return a2 == b4 || !!(a2 && b4 && a2.compare(b4));
  }
  function addRange(from2, to, ranges, margin = 0) {
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from2)
      ranges[last] = Math.max(ranges[last], to);
    else
      ranges.push(from2, to);
  }
  var ContentBuilder = class _ContentBuilder {
    constructor(doc5, pos, end, disallowBlockEffectsFor) {
      this.doc = doc5;
      this.pos = pos;
      this.end = end;
      this.disallowBlockEffectsFor = disallowBlockEffectsFor;
      this.content = [];
      this.curLine = null;
      this.breakAtStart = 0;
      this.pendingBuffer = 0;
      this.bufferMarks = [];
      this.atCursorPos = true;
      this.openStart = -1;
      this.openEnd = -1;
      this.text = "";
      this.textOff = 0;
      this.cursor = doc5.iter();
      this.skip = pos;
    }
    posCovered() {
      if (this.content.length == 0)
        return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      let last = this.content[this.content.length - 1];
      return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
    }
    getLine() {
      if (!this.curLine) {
        this.content.push(this.curLine = new LineView());
        this.atCursorPos = true;
      }
      return this.curLine;
    }
    flushBuffer(active = this.bufferMarks) {
      if (this.pendingBuffer) {
        this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
        this.pendingBuffer = 0;
      }
    }
    addBlockWidget(view) {
      this.flushBuffer();
      this.curLine = null;
      this.content.push(view);
    }
    finish(openEnd) {
      if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
        this.flushBuffer();
      else
        this.pendingBuffer = 0;
      if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
        this.getLine();
    }
    buildText(length, active, openStart) {
      while (length > 0) {
        if (this.textOff == this.text.length) {
          let { value, lineBreak, done } = this.cursor.next(this.skip);
          this.skip = 0;
          if (done)
            throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered())
              this.getLine();
            if (this.content.length)
              this.content[this.content.length - 1].breakAfter = 1;
            else
              this.breakAtStart = 1;
            this.flushBuffer();
            this.curLine = null;
            this.atCursorPos = true;
            length--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        let take = Math.min(
          this.text.length - this.textOff,
          length,
          512
          /* T.Chunk */
        );
        this.flushBuffer(active.slice(active.length - openStart));
        this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.atCursorPos = true;
        this.textOff += take;
        length -= take;
        openStart = 0;
      }
    }
    span(from2, to, active, openStart) {
      this.buildText(to - from2, active, openStart);
      this.pos = to;
      if (this.openStart < 0)
        this.openStart = openStart;
    }
    point(from2, to, deco, active, openStart, index2) {
      if (this.disallowBlockEffectsFor[index2] && deco instanceof PointDecoration) {
        if (deco.block)
          throw new RangeError("Block decorations may not be specified via plugins");
        if (to > this.doc.lineAt(this.pos).to)
          throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
      }
      let len = to - from2;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          if (deco.startSide > 0 && !this.posCovered())
            this.getLine();
          this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
        } else {
          let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
          let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from2 < to || deco.startSide > 0);
          let cursorAfter = !view.isEditable && (from2 < to || openStart > active.length || deco.startSide <= 0);
          let line = this.getLine();
          if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
            this.pendingBuffer = 0;
          this.flushBuffer(active);
          if (cursorBefore) {
            line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
            openStart = active.length + Math.max(0, openStart - active.length);
          }
          line.append(wrapMarks(view, active), openStart);
          this.atCursorPos = cursorAfter;
          this.pendingBuffer = !cursorAfter ? 0 : from2 < to || openStart > active.length ? 1 : 2;
          if (this.pendingBuffer)
            this.bufferMarks = active.slice();
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0)
        this.openStart = openStart;
    }
    static build(text5, from2, to, decorations2, dynamicDecorationMap) {
      let builder = new _ContentBuilder(text5, from2, to, dynamicDecorationMap);
      builder.openEnd = RangeSet.spans(decorations2, from2, to, builder);
      if (builder.openStart < 0)
        builder.openStart = builder.openEnd;
      builder.finish(builder.openEnd);
      return builder;
    }
  };
  function wrapMarks(view, active) {
    for (let mark of active)
      view = new MarkView(mark, [view], view.length);
    return view;
  }
  var NullWidget = class extends WidgetType {
    constructor(tag) {
      super();
      this.tag = tag;
    }
    eq(other) {
      return other.tag == this.tag;
    }
    toDOM() {
      return document.createElement(this.tag);
    }
    updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
    get isHidden() {
      return true;
    }
  };
  NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
  NullWidget.block = /* @__PURE__ */ new NullWidget("div");
  var Direction = /* @__PURE__ */ function(Direction2) {
    Direction2[Direction2["LTR"] = 0] = "LTR";
    Direction2[Direction2["RTL"] = 1] = "RTL";
    return Direction2;
  }(Direction || (Direction = {}));
  var LTR = Direction.LTR;
  var RTL = Direction.RTL;
  function dec(str) {
    let result = [];
    for (let i3 = 0; i3 < str.length; i3++)
      result.push(1 << +str[i3]);
    return result;
  }
  var LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
  var ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
  var Brackets = /* @__PURE__ */ Object.create(null);
  var BracketStack = [];
  for (let p6 of ["()", "[]", "{}"]) {
    let l5 = /* @__PURE__ */ p6.charCodeAt(0), r4 = /* @__PURE__ */ p6.charCodeAt(1);
    Brackets[l5] = r4;
    Brackets[r4] = -l5;
  }
  function charType(ch) {
    return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8204 ? 256 : 64336 <= ch && ch <= 65023 ? 4 : 1;
  }
  var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
  var BidiSpan = class {
    /**
    The direction of this span.
    */
    get dir() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
    constructor(from2, to, level) {
      this.from = from2;
      this.to = to;
      this.level = level;
    }
    /**
    @internal
    */
    side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
    forward(forward, dir) {
      return forward == (this.dir == dir);
    }
    /**
    @internal
    */
    static find(order2, index2, level, assoc) {
      let maybe = -1;
      for (let i3 = 0; i3 < order2.length; i3++) {
        let span = order2[i3];
        if (span.from <= index2 && span.to >= index2) {
          if (span.level == level)
            return i3;
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index2 : span.to > index2 : order2[maybe].level > span.level))
            maybe = i3;
        }
      }
      if (maybe < 0)
        throw new RangeError("Index out of range");
      return maybe;
    }
  };
  function isolatesEq(a2, b4) {
    if (a2.length != b4.length)
      return false;
    for (let i3 = 0; i3 < a2.length; i3++) {
      let iA = a2[i3], iB = b4[i3];
      if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
        return false;
    }
    return true;
  }
  var types = [];
  function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
    for (let iI = 0; iI <= isolates.length; iI++) {
      let from2 = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      let prevType = iI ? 256 : outerType;
      for (let i3 = from2, prev = prevType, prevStrong = prevType; i3 < to; i3++) {
        let type = charType(line.charCodeAt(i3));
        if (type == 512)
          type = prev;
        else if (type == 8 && prevStrong == 4)
          type = 16;
        types[i3] = type == 4 ? 2 : type;
        if (type & 7)
          prevStrong = type;
        prev = type;
      }
      for (let i3 = from2, prev = prevType, prevStrong = prevType; i3 < to; i3++) {
        let type = types[i3];
        if (type == 128) {
          if (i3 < to - 1 && prev == types[i3 + 1] && prev & 24)
            type = types[i3] = prev;
          else
            types[i3] = 256;
        } else if (type == 64) {
          let end = i3 + 1;
          while (end < to && types[end] == 64)
            end++;
          let replace3 = i3 && prev == 8 || end < rTo && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
          for (let j6 = i3; j6 < end; j6++)
            types[j6] = replace3;
          i3 = end - 1;
        } else if (type == 8 && prevStrong == 1) {
          types[i3] = 1;
        }
        prev = type;
        if (type & 7)
          prevStrong = type;
      }
    }
  }
  function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
    let oppositeType = outerType == 1 ? 2 : 1;
    for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
      let from2 = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      for (let i3 = from2, ch, br, type; i3 < to; i3++) {
        if (br = Brackets[ch = line.charCodeAt(i3)]) {
          if (br < 0) {
            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
              if (BracketStack[sJ + 1] == -br) {
                let flags = BracketStack[sJ + 2];
                let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
                if (type2)
                  types[i3] = types[BracketStack[sJ]] = type2;
                sI = sJ;
                break;
              }
            }
          } else if (BracketStack.length == 189) {
            break;
          } else {
            BracketStack[sI++] = i3;
            BracketStack[sI++] = ch;
            BracketStack[sI++] = context;
          }
        } else if ((type = types[i3]) == 2 || type == 1) {
          let embed = type == outerType;
          context = embed ? 0 : 1;
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            let cur2 = BracketStack[sJ + 2];
            if (cur2 & 2)
              break;
            if (embed) {
              BracketStack[sJ + 2] |= 2;
            } else {
              if (cur2 & 4)
                break;
              BracketStack[sJ + 2] |= 4;
            }
          }
        }
      }
    }
  }
  function processNeutrals(rFrom, rTo, isolates, outerType) {
    for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
      let from2 = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
      for (let i3 = from2; i3 < to; ) {
        let type = types[i3];
        if (type == 256) {
          let end = i3 + 1;
          for (; ; ) {
            if (end == to) {
              if (iI == isolates.length)
                break;
              end = isolates[iI++].to;
              to = iI < isolates.length ? isolates[iI].from : rTo;
            } else if (types[end] == 256) {
              end++;
            } else {
              break;
            }
          }
          let beforeL = prev == 1;
          let afterL = (end < rTo ? types[end] : outerType) == 1;
          let replace3 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
          for (let j6 = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j6 > i3; ) {
            if (j6 == fromJ) {
              j6 = isolates[--jI].from;
              fromJ = jI ? isolates[jI - 1].to : rFrom;
            }
            types[--j6] = replace3;
          }
          i3 = end;
        } else {
          prev = type;
          i3++;
        }
      }
    }
  }
  function emitSpans(line, from2, to, level, baseLevel, isolates, order2) {
    let ourType = level % 2 ? 2 : 1;
    if (level % 2 == baseLevel % 2) {
      for (let iCh = from2, iI = 0; iCh < to; ) {
        let sameDir = true, isNum = false;
        if (iI == isolates.length || iCh < isolates[iI].from) {
          let next = types[iCh];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16;
          }
        }
        let recurse = !sameDir && ourType == 1 ? [] : null;
        let localLevel = sameDir ? level : level + 1;
        let iScan = iCh;
        run:
          for (; ; ) {
            if (iI < isolates.length && iScan == isolates[iI].from) {
              if (isNum)
                break run;
              let iso = isolates[iI];
              if (!sameDir)
                for (let upto = iso.to, jI = iI + 1; ; ) {
                  if (upto == to)
                    break run;
                  if (jI < isolates.length && isolates[jI].from == upto)
                    upto = isolates[jI++].to;
                  else if (types[upto] == ourType)
                    break run;
                  else
                    break;
                }
              iI++;
              if (recurse) {
                recurse.push(iso);
              } else {
                if (iso.from > iCh)
                  order2.push(new BidiSpan(iCh, iso.from, localLevel));
                let dirSwap = iso.direction == LTR != !(localLevel % 2);
                computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order2);
                iCh = iso.to;
              }
              iScan = iso.to;
            } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
              break;
            } else {
              iScan++;
            }
          }
        if (recurse)
          emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order2);
        else if (iCh < iScan)
          order2.push(new BidiSpan(iCh, iScan, localLevel));
        iCh = iScan;
      }
    } else {
      for (let iCh = to, iI = isolates.length; iCh > from2; ) {
        let sameDir = true, isNum = false;
        if (!iI || iCh > isolates[iI - 1].to) {
          let next = types[iCh - 1];
          if (next != ourType) {
            sameDir = false;
            isNum = next == 16;
          }
        }
        let recurse = !sameDir && ourType == 1 ? [] : null;
        let localLevel = sameDir ? level : level + 1;
        let iScan = iCh;
        run:
          for (; ; ) {
            if (iI && iScan == isolates[iI - 1].to) {
              if (isNum)
                break run;
              let iso = isolates[--iI];
              if (!sameDir)
                for (let upto = iso.from, jI = iI; ; ) {
                  if (upto == from2)
                    break run;
                  if (jI && isolates[jI - 1].to == upto)
                    upto = isolates[--jI].from;
                  else if (types[upto - 1] == ourType)
                    break run;
                  else
                    break;
                }
              if (recurse) {
                recurse.push(iso);
              } else {
                if (iso.to < iCh)
                  order2.push(new BidiSpan(iso.to, iCh, localLevel));
                let dirSwap = iso.direction == LTR != !(localLevel % 2);
                computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order2);
                iCh = iso.from;
              }
              iScan = iso.from;
            } else if (iScan == from2 || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
              break;
            } else {
              iScan--;
            }
          }
        if (recurse)
          emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order2);
        else if (iScan < iCh)
          order2.push(new BidiSpan(iScan, iCh, localLevel));
        iCh = iScan;
      }
    }
  }
  function computeSectionOrder(line, level, baseLevel, isolates, from2, to, order2) {
    let outerType = level % 2 ? 2 : 1;
    computeCharTypes(line, from2, to, isolates, outerType);
    processBracketPairs(line, from2, to, isolates, outerType);
    processNeutrals(from2, to, isolates, outerType);
    emitSpans(line, from2, to, level, baseLevel, isolates, order2);
  }
  function computeOrder(line, direction, isolates) {
    if (!line)
      return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
    if (direction == LTR && !isolates.length && !BidiRE.test(line))
      return trivialOrder(line.length);
    if (isolates.length)
      while (line.length > types.length)
        types[types.length] = 256;
    let order2 = [], level = direction == LTR ? 0 : 1;
    computeSectionOrder(line, level, level, isolates, 0, line.length, order2);
    return order2;
  }
  function trivialOrder(length) {
    return [new BidiSpan(0, length, 0)];
  }
  var movedOver = "";
  function moveVisually(line, order2, dir, start, forward) {
    var _a2;
    let startIndex = start.head - line.from;
    let spanI = BidiSpan.find(order2, startIndex, (_a2 = start.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start.assoc);
    let span = order2[spanI], spanEnd = span.side(forward, dir);
    if (startIndex == spanEnd) {
      let nextI = spanI += forward ? 1 : -1;
      if (nextI < 0 || nextI >= order2.length)
        return null;
      span = order2[spanI = nextI];
      startIndex = span.side(!forward, dir);
      spanEnd = span.side(forward, dir);
    }
    let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
    if (nextIndex < span.from || nextIndex > span.to)
      nextIndex = spanEnd;
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    let nextSpan = spanI == (forward ? order2.length - 1 : 0) ? null : order2[spanI + (forward ? 1 : -1)];
    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
      return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
  }
  function autoDirection(text5, from2, to) {
    for (let i3 = from2; i3 < to; i3++) {
      let type = charType(text5.charCodeAt(i3));
      if (type == 1)
        return LTR;
      if (type == 2 || type == 4)
        return RTL;
    }
    return LTR;
  }
  var clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
  var dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
  var mouseSelectionStyle = /* @__PURE__ */ Facet.define();
  var exceptionSink = /* @__PURE__ */ Facet.define();
  var updateListener = /* @__PURE__ */ Facet.define();
  var inputHandler = /* @__PURE__ */ Facet.define();
  var focusChangeEffect = /* @__PURE__ */ Facet.define();
  var perLineTextDirection = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((x7) => x7)
  });
  var nativeSelectionHidden = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((x7) => x7)
  });
  var scrollHandler = /* @__PURE__ */ Facet.define();
  var ScrollTarget = class _ScrollTarget {
    constructor(range, y4 = "nearest", x7 = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
      this.range = range;
      this.y = y4;
      this.x = x7;
      this.yMargin = yMargin;
      this.xMargin = xMargin;
      this.isSnapshot = isSnapshot;
    }
    map(changes) {
      return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
    }
    clip(state) {
      return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
    }
  };
  var scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t4, ch) => t4.map(ch) });
  function logException(state, exception, context) {
    let handler = state.facet(exceptionSink);
    if (handler.length)
      handler[0](exception);
    else if (window.onerror)
      window.onerror(String(exception), context, void 0, void 0, exception);
    else if (context)
      console.error(context + ":", exception);
    else
      console.error(exception);
  }
  var editable = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : true });
  var nextPluginID = 0;
  var viewPlugin = /* @__PURE__ */ Facet.define();
  var ViewPlugin = class _ViewPlugin {
    constructor(id2, create, domEventHandlers, domEventObservers, buildExtensions) {
      this.id = id2;
      this.create = create;
      this.domEventHandlers = domEventHandlers;
      this.domEventObservers = domEventObservers;
      this.extension = buildExtensions(this);
    }
    /**
    Define a plugin from a constructor function that creates the
    plugin's value, given an editor view.
    */
    static define(create, spec) {
      const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
      return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin2) => {
        let ext = [viewPlugin.of(plugin2)];
        if (deco)
          ext.push(decorations.of((view) => {
            let pluginInst = view.plugin(plugin2);
            return pluginInst ? deco(pluginInst) : Decoration.none;
          }));
        if (provide)
          ext.push(provide(plugin2));
        return ext;
      });
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
    static fromClass(cls, spec) {
      return _ViewPlugin.define((view) => new cls(view), spec);
    }
  };
  var PluginInstance = class {
    constructor(spec) {
      this.spec = spec;
      this.mustUpdate = null;
      this.value = null;
    }
    update(view) {
      if (!this.value) {
        if (this.spec) {
          try {
            this.value = this.spec.create(view);
          } catch (e3) {
            logException(view.state, e3, "CodeMirror plugin crashed");
            this.deactivate();
          }
        }
      } else if (this.mustUpdate) {
        let update = this.mustUpdate;
        this.mustUpdate = null;
        if (this.value.update) {
          try {
            this.value.update(update);
          } catch (e3) {
            logException(update.state, e3, "CodeMirror plugin crashed");
            if (this.value.destroy)
              try {
                this.value.destroy();
              } catch (_3) {
              }
            this.deactivate();
          }
        }
      }
      return this;
    }
    destroy(view) {
      var _a2;
      if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
        try {
          this.value.destroy();
        } catch (e3) {
          logException(view.state, e3, "CodeMirror plugin crashed");
        }
      }
    }
    deactivate() {
      this.spec = this.value = null;
    }
  };
  var editorAttributes = /* @__PURE__ */ Facet.define();
  var contentAttributes = /* @__PURE__ */ Facet.define();
  var decorations = /* @__PURE__ */ Facet.define();
  var outerDecorations = /* @__PURE__ */ Facet.define();
  var atomicRanges = /* @__PURE__ */ Facet.define();
  var bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
  function getIsolatedRanges(view, line) {
    let isolates = view.state.facet(bidiIsolatedRanges);
    if (!isolates.length)
      return isolates;
    let sets = isolates.map((i3) => i3 instanceof Function ? i3(view) : i3);
    let result = [];
    RangeSet.spans(sets, line.from, line.to, {
      point() {
      },
      span(fromDoc, toDoc, active, open) {
        let from2 = fromDoc - line.from, to = toDoc - line.from;
        let level = result;
        for (let i3 = active.length - 1; i3 >= 0; i3--, open--) {
          let direction = active[i3].spec.bidiIsolate, update;
          if (direction == null)
            direction = autoDirection(line.text, from2, to);
          if (open > 0 && level.length && (update = level[level.length - 1]).to == from2 && update.direction == direction) {
            update.to = to;
            level = update.inner;
          } else {
            let add2 = { from: from2, to, direction, inner: [] };
            level.push(add2);
            level = add2.inner;
          }
        }
      }
    });
    return result;
  }
  var scrollMargins = /* @__PURE__ */ Facet.define();
  function getScrollMargins(view) {
    let left = 0, right = 0, top2 = 0, bottom = 0;
    for (let source of view.state.facet(scrollMargins)) {
      let m4 = source(view);
      if (m4) {
        if (m4.left != null)
          left = Math.max(left, m4.left);
        if (m4.right != null)
          right = Math.max(right, m4.right);
        if (m4.top != null)
          top2 = Math.max(top2, m4.top);
        if (m4.bottom != null)
          bottom = Math.max(bottom, m4.bottom);
      }
    }
    return { left, right, top: top2, bottom };
  }
  var styleModule = /* @__PURE__ */ Facet.define();
  var ChangedRange = class _ChangedRange {
    constructor(fromA, toA, fromB, toB) {
      this.fromA = fromA;
      this.toA = toA;
      this.fromB = fromB;
      this.toB = toB;
    }
    join(other) {
      return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
    addToSet(set) {
      let i3 = set.length, me4 = this;
      for (; i3 > 0; i3--) {
        let range = set[i3 - 1];
        if (range.fromA > me4.toA)
          continue;
        if (range.toA < me4.fromA)
          break;
        me4 = me4.join(range);
        set.splice(i3 - 1, 1);
      }
      set.splice(i3, 0, me4);
      return set;
    }
    static extendWithRanges(diff, ranges) {
      if (ranges.length == 0)
        return diff;
      let result = [];
      for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
        let next = dI == diff.length ? null : diff[dI], off = posA - posB;
        let end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          let from2 = ranges[rI], to = ranges[rI + 1];
          let fromB = Math.max(posB, from2), toB = Math.min(end, to);
          if (fromB <= toB)
            new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end)
            break;
          else
            rI += 2;
        }
        if (!next)
          return result;
        new _ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  };
  var ViewUpdate = class _ViewUpdate {
    constructor(view, state, transactions) {
      this.view = view;
      this.state = state;
      this.transactions = transactions;
      this.flags = 0;
      this.startState = view.state;
      this.changes = ChangeSet.empty(this.startState.doc.length);
      for (let tr of transactions)
        this.changes = this.changes.compose(tr.changes);
      let changedRanges = [];
      this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
      this.changedRanges = changedRanges;
    }
    /**
    @internal
    */
    static create(view, state, transactions) {
      return new _ViewUpdate(view, state, transactions);
    }
    /**
    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
    update.
    */
    get viewportChanged() {
      return (this.flags & 4) > 0;
    }
    /**
    Indicates whether the height of a block element in the editor
    changed in this update.
    */
    get heightChanged() {
      return (this.flags & 2) > 0;
    }
    /**
    Returns true when the document was modified or the size of the
    editor, or elements within the editor, changed.
    */
    get geometryChanged() {
      return this.docChanged || (this.flags & (8 | 2)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
    get focusChanged() {
      return (this.flags & 1) > 0;
    }
    /**
    Whether the document changed in this update.
    */
    get docChanged() {
      return !this.changes.empty;
    }
    /**
    Whether the selection was explicitly set in this update.
    */
    get selectionSet() {
      return this.transactions.some((tr) => tr.selection);
    }
    /**
    @internal
    */
    get empty() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  };
  var DocView = class extends ContentView {
    get length() {
      return this.view.state.doc.length;
    }
    constructor(view) {
      super();
      this.view = view;
      this.decorations = [];
      this.dynamicDecorationMap = [];
      this.domChanged = null;
      this.hasComposition = null;
      this.markedForComposition = /* @__PURE__ */ new Set();
      this.lastCompositionAfterCursor = false;
      this.minWidth = 0;
      this.minWidthFrom = 0;
      this.minWidthTo = 0;
      this.impreciseAnchor = null;
      this.impreciseHead = null;
      this.forceSelection = false;
      this.lastUpdate = Date.now();
      this.setDOM(view.contentDOM);
      this.children = [new LineView()];
      this.children[0].setParent(this);
      this.updateDeco();
      this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
    }
    // Update the document view to a given state.
    update(update) {
      var _a2;
      let changedRanges = update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
          this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
        } else {
          this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      let readCompositionAt = -1;
      if (this.view.inputState.composing >= 0) {
        if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
          readCompositionAt = this.domChanged.newSel.head;
        else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
          readCompositionAt = update.state.selection.main.head;
      }
      let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
      this.domChanged = null;
      if (this.hasComposition) {
        this.markedForComposition.clear();
        let { from: from2, to } = this.hasComposition;
        changedRanges = new ChangedRange(from2, to, update.changes.mapPos(from2, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
      }
      this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
      if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
        this.forceSelection = true;
      let prevDeco = this.decorations, deco = this.updateDeco();
      let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      if (!(this.flags & 7) && changedRanges.length == 0) {
        return false;
      } else {
        this.updateInner(changedRanges, update.startState.doc.length, composition);
        if (update.transactions.length)
          this.lastUpdate = Date.now();
        return true;
      }
    }
    // Used by update and the constructor do perform the actual DOM
    // update
    updateInner(changes, oldLength, composition) {
      this.view.viewState.mustMeasureContent = true;
      this.updateChildren(changes, oldLength, composition);
      let { observer } = this.view;
      observer.ignore(() => {
        this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
        this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
        let track2 = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
        this.sync(this.view, track2);
        this.flags &= ~7;
        if (track2 && (track2.written || observer.selectionRange.focusNode != track2.node))
          this.forceSelection = true;
        this.dom.style.height = "";
      });
      this.markedForComposition.forEach(
        (cView) => cView.flags &= ~8
        /* ViewFlag.Composition */
      );
      let gaps = [];
      if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
        for (let child of this.children)
          if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
            gaps.push(child.dom);
      }
      observer.updateGaps(gaps);
    }
    updateChildren(changes, oldLength, composition) {
      let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
      let cursor = this.childCursor(oldLength);
      for (let i3 = ranges.length - 1; ; i3--) {
        let next = i3 >= 0 ? ranges[i3] : null;
        if (!next)
          break;
        let { fromA, toA, fromB, toB } = next, content4, breakAtStart, openStart, openEnd;
        if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
          let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
          let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
          breakAtStart = before.breakAtStart;
          openStart = before.openStart;
          openEnd = after.openEnd;
          let compLine = this.compositionView(composition);
          if (after.breakAtStart) {
            compLine.breakAfter = 1;
          } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
            compLine.breakAfter = after.content[0].breakAfter;
            after.content.shift();
          }
          if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
            before.content.pop();
          }
          content4 = before.content.concat(compLine).concat(after.content);
        } else {
          ({ content: content4, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
        }
        let { i: toI, off: toOff } = cursor.findPos(toA, 1);
        let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
        replaceRange(this, fromI, fromOff, toI, toOff, content4, breakAtStart, openStart, openEnd);
      }
      if (composition)
        this.fixCompositionDOM(composition);
    }
    compositionView(composition) {
      let cur2 = new TextView(composition.text.nodeValue);
      cur2.flags |= 8;
      for (let { deco } of composition.marks)
        cur2 = new MarkView(deco, [cur2], cur2.length);
      let line = new LineView();
      line.append(cur2, 0);
      return line;
    }
    fixCompositionDOM(composition) {
      let fix = (dom, cView2) => {
        cView2.flags |= 8 | (cView2.children.some(
          (c5) => c5.flags & 7
          /* ViewFlag.Dirty */
        ) ? 1 : 0);
        this.markedForComposition.add(cView2);
        let prev = ContentView.get(dom);
        if (prev && prev != cView2)
          prev.dom = null;
        cView2.setDOM(dom);
      };
      let pos = this.childPos(composition.range.fromB, 1);
      let cView = this.children[pos.i];
      fix(composition.line, cView);
      for (let i3 = composition.marks.length - 1; i3 >= -1; i3--) {
        pos = cView.childPos(pos.off, 1);
        cView = cView.children[pos.i];
        fix(i3 >= 0 ? composition.marks[i3].node : composition.text, cView);
      }
    }
    // Sync the DOM selection to this.state.selection
    updateSelection(mustRead = false, fromPointer = false) {
      if (mustRead || !this.view.observer.selectionRange.focusNode)
        this.view.observer.readSelectionRange();
      let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
      let selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
      if (!(focused || fromPointer || selectionNotFocus))
        return;
      let force = this.forceSelection;
      this.forceSelection = false;
      let main = this.view.state.selection.main;
      let anchor = this.moveToLine(this.domAtPos(main.anchor));
      let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
      if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
        let dummy = document.createTextNode("");
        this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      let domSel = this.view.observer.selectionRange;
      if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
        this.view.observer.ignore(() => {
          if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
            this.dom.blur();
            this.dom.focus({ preventScroll: true });
          }
          let rawSel = getSelection2(this.view.root);
          if (!rawSel)
            ;
          else if (main.empty) {
            if (browser.gecko) {
              let nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 | 2)) {
                let text5 = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                if (text5)
                  anchor = new DOMPos(text5.node, text5.offset);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
              rawSel.caretBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            rawSel.collapse(anchor.node, anchor.offset);
            try {
              rawSel.extend(head.node, head.offset);
            } catch (_3) {
            }
          } else {
            let range = document.createRange();
            if (main.anchor > main.head)
              [anchor, head] = [head, anchor];
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
          if (selectionNotFocus && this.view.root.activeElement == this.dom) {
            this.dom.blur();
            if (activeElt)
              activeElt.focus();
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
    // If a zero-length widget is inserted next to the cursor during
    // composition, avoid moving it across it and disrupting the
    // composition.
    suppressWidgetCursorChange(sel, cursor) {
      return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
    }
    enforceCursorAssoc() {
      if (this.hasComposition)
        return;
      let { view } = this, cursor = view.state.selection.main;
      let sel = getSelection2(view.root);
      let { anchorNode, anchorOffset } = view.observer.selectionRange;
      if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
        return;
      let line = LineView.find(this, cursor.head);
      if (!line)
        return;
      let lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length)
        return;
      let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top)
        return;
      let dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
      view.observer.readSelectionRange();
      let newRange = view.observer.selectionRange;
      if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
        sel.collapse(anchorNode, anchorOffset);
    }
    // If a position is in/near a block widget, move it to a nearby text
    // line, since we don't want the cursor inside a block widget.
    moveToLine(pos) {
      let dom = this.dom, newPos;
      if (pos.node != dom)
        return pos;
      for (let i3 = pos.offset; !newPos && i3 < dom.childNodes.length; i3++) {
        let view = ContentView.get(dom.childNodes[i3]);
        if (view instanceof LineView)
          newPos = view.domAtPos(0);
      }
      for (let i3 = pos.offset - 1; !newPos && i3 >= 0; i3--) {
        let view = ContentView.get(dom.childNodes[i3]);
        if (view instanceof LineView)
          newPos = view.domAtPos(view.length);
      }
      return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
    }
    nearest(dom) {
      for (let cur2 = dom; cur2; ) {
        let domView = ContentView.get(cur2);
        if (domView && domView.rootView == this)
          return domView;
        cur2 = cur2.parentNode;
      }
      return null;
    }
    posFromDOM(node2, offset) {
      let view = this.nearest(node2);
      if (!view)
        throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view.localPosFromDOM(node2, offset) + view.posAtStart;
    }
    domAtPos(pos) {
      let { i: i3, off } = this.childCursor().findPos(pos, -1);
      for (; i3 < this.children.length - 1; ) {
        let child = this.children[i3];
        if (off < child.length || child instanceof LineView)
          break;
        i3++;
        off = 0;
      }
      return this.children[i3].domAtPos(off);
    }
    coordsAt(pos, side) {
      let best = null, bestPos = 0;
      for (let off = this.length, i3 = this.children.length - 1; i3 >= 0; i3--) {
        let child = this.children[i3], end = off - child.breakAfter, start = end - child.length;
        if (end < pos)
          break;
        if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
          best = child;
          bestPos = start;
        }
        off = start;
      }
      return best ? best.coordsAt(pos - bestPos, side) : null;
    }
    coordsForChar(pos) {
      let { i: i3, off } = this.childPos(pos, 1), child = this.children[i3];
      if (!(child instanceof LineView))
        return null;
      while (child.children.length) {
        let { i: i4, off: childOff } = child.childPos(off, 1);
        for (; ; i4++) {
          if (i4 == child.children.length)
            return null;
          if ((child = child.children[i4]).length)
            break;
        }
        off = childOff;
      }
      if (!(child instanceof TextView))
        return null;
      let end = findClusterBreak(child.text, off);
      if (end == off)
        return null;
      let rects = textRange(child.dom, off, end).getClientRects();
      for (let i4 = 0; i4 < rects.length; i4++) {
        let rect = rects[i4];
        if (i4 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
          return rect;
      }
      return null;
    }
    measureVisibleLineHeights(viewport) {
      let result = [], { from: from2, to } = viewport;
      let contentWidth = this.view.contentDOM.clientWidth;
      let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      let widest = -1, ltr = this.view.textDirection == Direction.LTR;
      for (let pos = 0, i3 = 0; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = pos + child.length;
        if (end > to)
          break;
        if (pos >= from2) {
          let childRect = child.dom.getBoundingClientRect();
          result.push(childRect.height);
          if (isWider) {
            let last = child.dom.lastChild;
            let rects = last ? clientRectsFor(last) : [];
            if (rects.length) {
              let rect = rects[rects.length - 1];
              let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
              if (width > widest) {
                widest = width;
                this.minWidth = contentWidth;
                this.minWidthFrom = pos;
                this.minWidthTo = end;
              }
            }
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
    textDirectionAt(pos) {
      let { i: i3 } = this.childPos(pos, 1);
      return getComputedStyle(this.children[i3].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
    }
    measureTextSize() {
      for (let child of this.children) {
        if (child instanceof LineView) {
          let measure = child.measureTextSize();
          if (measure)
            return measure;
        }
      }
      let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
      dummy.className = "cm-line";
      dummy.style.width = "99999px";
      dummy.style.position = "absolute";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(() => {
        this.dom.appendChild(dummy);
        let rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        textHeight = rect ? rect.height : lineHeight;
        dummy.remove();
      });
      return { lineHeight, charWidth, textHeight };
    }
    childCursor(pos = this.length) {
      let i3 = this.children.length;
      if (i3)
        pos -= this.children[--i3].length;
      return new ChildCursor(this.children, pos, i3);
    }
    computeBlockGapDeco() {
      let deco = [], vs = this.view.viewState;
      for (let pos = 0, i3 = 0; ; i3++) {
        let next = i3 == vs.viewports.length ? null : vs.viewports[i3];
        let end = next ? next.from - 1 : this.length;
        if (end > pos) {
          let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true,
            isBlockGap: true
          }).range(pos, end));
        }
        if (!next)
          break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
    updateDeco() {
      let i3 = 0;
      let allDeco = this.view.state.facet(decorations).map((d6) => {
        let dynamic = this.dynamicDecorationMap[i3++] = typeof d6 == "function";
        return dynamic ? d6(this.view) : d6;
      });
      let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d6, i4) => {
        let dynamic = typeof d6 == "function";
        if (dynamic)
          dynamicOuter = true;
        return dynamic ? d6(this.view) : d6;
      });
      if (outerDeco.length) {
        this.dynamicDecorationMap[i3++] = dynamicOuter;
        allDeco.push(RangeSet.join(outerDeco));
      }
      this.decorations = [
        ...allDeco,
        this.computeBlockGapDeco(),
        this.view.viewState.lineGapDeco
      ];
      while (i3 < this.decorations.length)
        this.dynamicDecorationMap[i3++] = false;
      return this.decorations;
    }
    scrollIntoView(target) {
      if (target.isSnapshot) {
        let ref = this.view.viewState.lineBlockAt(target.range.head);
        this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
        this.view.scrollDOM.scrollLeft = target.xMargin;
        return;
      }
      for (let handler of this.view.state.facet(scrollHandler)) {
        try {
          if (handler(this.view, target.range, target))
            return true;
        } catch (e3) {
          logException(this.view.state, e3, "scroll handler");
        }
      }
      let { range } = target;
      let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
      if (!rect)
        return;
      if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
        rect = {
          left: Math.min(rect.left, other.left),
          top: Math.min(rect.top, other.top),
          right: Math.max(rect.right, other.right),
          bottom: Math.max(rect.bottom, other.bottom)
        };
      let margins = getScrollMargins(this.view);
      let targetRect = {
        left: rect.left - margins.left,
        top: rect.top - margins.top,
        right: rect.right + margins.right,
        bottom: rect.bottom + margins.bottom
      };
      let { offsetWidth, offsetHeight } = this.view.scrollDOM;
      scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
    }
  };
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  var BlockGapWidget = class extends WidgetType {
    constructor(height) {
      super();
      this.height = height;
    }
    toDOM() {
      let elt = document.createElement("div");
      elt.className = "cm-gap";
      this.updateDOM(elt);
      return elt;
    }
    eq(other) {
      return other.height == this.height;
    }
    updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
    get editable() {
      return true;
    }
    get estimatedHeight() {
      return this.height;
    }
    ignoreEvent() {
      return false;
    }
  };
  function findCompositionNode(view, headPos) {
    let sel = view.observer.selectionRange;
    if (!sel.focusNode)
      return null;
    let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
    let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
    let textNode = textBefore || textAfter;
    if (textAfter && textBefore && textAfter.node != textBefore.node) {
      let descAfter = ContentView.get(textAfter.node);
      if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
        textNode = textAfter;
      } else if (view.docView.lastCompositionAfterCursor) {
        let descBefore = ContentView.get(textBefore.node);
        if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
          textNode = textAfter;
      }
    }
    view.docView.lastCompositionAfterCursor = textNode != textBefore;
    if (!textNode)
      return null;
    let from2 = headPos - textNode.offset;
    return { from: from2, to: from2 + textNode.node.nodeValue.length, node: textNode.node };
  }
  function findCompositionRange(view, changes, headPos) {
    let found2 = findCompositionNode(view, headPos);
    if (!found2)
      return null;
    let { node: textNode, from: from2, to } = found2, text5 = textNode.nodeValue;
    if (/[\n\r]/.test(text5))
      return null;
    if (view.state.doc.sliceString(found2.from, found2.to) != text5)
      return null;
    let inv = changes.invertedDesc;
    let range = new ChangedRange(inv.mapPos(from2), inv.mapPos(to), from2, to);
    let marks2 = [];
    for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
      let parentView = ContentView.get(parent);
      if (parentView instanceof MarkView)
        marks2.push({ node: parent, deco: parentView.mark });
      else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
        return { range, text: textNode, marks: marks2, line: parent };
      else if (parent != view.contentDOM)
        marks2.push({ node: parent, deco: new MarkDecoration({
          inclusive: true,
          attributes: getAttrs(parent),
          tagName: parent.tagName.toLowerCase()
        }) });
      else
        return null;
    }
  }
  function nextToUneditable(node2, offset) {
    if (node2.nodeType != 1)
      return 0;
    return (offset && node2.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node2.childNodes.length && node2.childNodes[offset].contentEditable == "false" ? 2 : 0);
  }
  var DecorationComparator$1 = class DecorationComparator {
    constructor() {
      this.changes = [];
    }
    compareRange(from2, to) {
      addRange(from2, to, this.changes);
    }
    comparePoint(from2, to) {
      addRange(from2, to, this.changes);
    }
  };
  function findChangedDeco(a2, b4, diff) {
    let comp = new DecorationComparator$1();
    RangeSet.compare(a2, b4, diff, comp);
    return comp.changes;
  }
  function inUneditable(node2, inside2) {
    for (let cur2 = node2; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
      if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
        return true;
      }
    }
    return false;
  }
  function touchesComposition(changes, composition) {
    let touched = false;
    if (composition)
      changes.iterChangedRanges((from2, to) => {
        if (from2 < composition.to && to > composition.from)
          touched = true;
      });
    return touched;
  }
  function groupAt(state, pos, bias = 1) {
    let categorize = state.charCategorizer(pos);
    let line = state.doc.lineAt(pos), linePos = pos - line.from;
    if (line.length == 0)
      return EditorSelection.cursor(pos);
    if (linePos == 0)
      bias = 1;
    else if (linePos == line.length)
      bias = -1;
    let from2 = linePos, to = linePos;
    if (bias < 0)
      from2 = findClusterBreak(line.text, linePos, false);
    else
      to = findClusterBreak(line.text, linePos);
    let cat = categorize(line.text.slice(from2, to));
    while (from2 > 0) {
      let prev = findClusterBreak(line.text, from2, false);
      if (categorize(line.text.slice(prev, from2)) != cat)
        break;
      from2 = prev;
    }
    while (to < line.length) {
      let next = findClusterBreak(line.text, to);
      if (categorize(line.text.slice(to, next)) != cat)
        break;
      to = next;
    }
    return EditorSelection.range(from2 + line.from, to + line.from);
  }
  function getdx(x7, rect) {
    return rect.left > x7 ? rect.left - x7 : Math.max(0, x7 - rect.right);
  }
  function getdy(y4, rect) {
    return rect.top > y4 ? rect.top - y4 : Math.max(0, y4 - rect.bottom);
  }
  function yOverlap(a2, b4) {
    return a2.top < b4.bottom - 1 && a2.bottom > b4.top + 1;
  }
  function upTop(rect, top2) {
    return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x7, y4) {
    let closest, closestRect, closestX, closestY, closestOverlap = false;
    let above, below, aboveRect, belowRect;
    for (let child = parent.firstChild; child; child = child.nextSibling) {
      let rects = clientRectsFor(child);
      for (let i3 = 0; i3 < rects.length; i3++) {
        let rect = rects[i3];
        if (closestRect && yOverlap(closestRect, rect))
          rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        let dx = getdx(x7, rect), dy = getdy(y4, rect);
        if (dx == 0 && dy == 0)
          return child.nodeType == 3 ? domPosInText(child, x7, y4) : domPosAtCoords(child, x7, y4);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          let side = dy ? y4 < rect.top ? -1 : 1 : dx ? x7 < rect.left ? -1 : 1 : 0;
          closestOverlap = !side || (side > 0 ? i3 < rects.length - 1 : i3 > 0);
        }
        if (dx == 0) {
          if (y4 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y4 < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y4) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y4) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest)
      return { node: parent, offset: 0 };
    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x7));
    if (closest.nodeType == 3)
      return domPosInText(closest, clipX, y4);
    if (closestOverlap && closest.contentEditable != "false")
      return domPosAtCoords(closest, clipX, y4);
    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x7 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return { node: parent, offset };
  }
  function domPosInText(node2, x7, y4) {
    let len = node2.nodeValue.length;
    let closestOffset = -1, closestDY = 1e9, generalSide = 0;
    for (let i3 = 0; i3 < len; i3++) {
      let rects = textRange(node2, i3, i3 + 1).getClientRects();
      for (let j6 = 0; j6 < rects.length; j6++) {
        let rect = rects[j6];
        if (rect.top == rect.bottom)
          continue;
        if (!generalSide)
          generalSide = x7 - rect.left;
        let dy = (rect.top > y4 ? rect.top - y4 : y4 - rect.bottom) - 1;
        if (rect.left - 1 <= x7 && rect.right + 1 >= x7 && dy < closestDY) {
          let right = x7 >= (rect.left + rect.right) / 2, after = right;
          if (browser.chrome || browser.gecko) {
            let rectBefore = textRange(node2, i3).getBoundingClientRect();
            if (rectBefore.left == rect.right)
              after = !right;
          }
          if (dy <= 0)
            return { node: node2, offset: i3 + (after ? 1 : 0) };
          closestOffset = i3 + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return { node: node2, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node2.nodeValue.length : 0 };
  }
  function posAtCoords(view, coords, precise, bias = -1) {
    var _a2, _b;
    let content4 = view.contentDOM.getBoundingClientRect(), docTop = content4.top + view.viewState.paddingTop;
    let block, { docHeight } = view.viewState;
    let { x: x7, y: y4 } = coords, yOffset = y4 - docTop;
    if (yOffset < 0)
      return 0;
    if (yOffset > docHeight)
      return view.state.doc.length;
    for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
      block = view.elementAtHeight(yOffset);
      if (block.type == BlockType.Text)
        break;
      for (; ; ) {
        yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight)
          break;
        if (bounced)
          return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y4 = docTop + yOffset;
    let lineStart = block.from;
    if (lineStart < view.viewport.from)
      return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content4, block, x7, y4);
    if (lineStart > view.viewport.to)
      return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content4, block, x7, y4);
    let doc5 = view.dom.ownerDocument;
    let root2 = view.root.elementFromPoint ? view.root : doc5;
    let element2 = root2.elementFromPoint(x7, y4);
    if (element2 && !view.contentDOM.contains(element2))
      element2 = null;
    if (!element2) {
      x7 = Math.max(content4.left + 1, Math.min(content4.right - 1, x7));
      element2 = root2.elementFromPoint(x7, y4);
      if (element2 && !view.contentDOM.contains(element2))
        element2 = null;
    }
    let node2, offset = -1;
    if (element2 && ((_a2 = view.docView.nearest(element2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
      if (doc5.caretPositionFromPoint) {
        let pos = doc5.caretPositionFromPoint(x7, y4);
        if (pos)
          ({ offsetNode: node2, offset } = pos);
      } else if (doc5.caretRangeFromPoint) {
        let range = doc5.caretRangeFromPoint(x7, y4);
        if (range) {
          ({ startContainer: node2, startOffset: offset } = range);
          if (!view.contentDOM.contains(node2) || browser.safari && isSuspiciousSafariCaretResult(node2, offset, x7) || browser.chrome && isSuspiciousChromeCaretResult(node2, offset, x7))
            node2 = void 0;
        }
      }
    }
    if (!node2 || !view.docView.dom.contains(node2)) {
      let line = LineView.find(view.docView, lineStart);
      if (!line)
        return yOffset > block.top + block.height / 2 ? block.to : block.from;
      ({ node: node2, offset } = domPosAtCoords(line.dom, x7, y4));
    }
    let nearest = view.docView.nearest(node2);
    if (!nearest)
      return null;
    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
      let rect = nearest.dom.getBoundingClientRect();
      return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
    } else {
      return nearest.localPosFromDOM(node2, offset) + nearest.posAtStart;
    }
  }
  function posAtCoordsImprecise(view, contentRect, block, x7, y4) {
    let into = Math.round((x7 - contentRect.left) * view.defaultCharacterWidth);
    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
      let textHeight = view.viewState.heightOracle.textHeight;
      let line = Math.floor((y4 - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
      into += line * view.viewState.heightOracle.lineLength;
    }
    let content4 = view.state.sliceDoc(block.from, block.to);
    return block.from + findColumn(content4, into, view.state.tabSize);
  }
  function isSuspiciousSafariCaretResult(node2, offset, x7) {
    let len;
    if (node2.nodeType != 3 || offset != (len = node2.nodeValue.length))
      return false;
    for (let next = node2.nextSibling; next; next = next.nextSibling)
      if (next.nodeType != 1 || next.nodeName != "BR")
        return false;
    return textRange(node2, len - 1, len).getBoundingClientRect().left > x7;
  }
  function isSuspiciousChromeCaretResult(node2, offset, x7) {
    if (offset != 0)
      return false;
    for (let cur2 = node2; ; ) {
      let parent = cur2.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
        return false;
      if (parent.classList.contains("cm-line"))
        break;
      cur2 = parent;
    }
    let rect = node2.nodeType == 1 ? node2.getBoundingClientRect() : textRange(node2, 0, Math.max(node2.nodeValue.length, 1)).getBoundingClientRect();
    return x7 - rect.left > 5;
  }
  function blockAt(view, pos) {
    let line = view.lineBlockAt(pos);
    if (Array.isArray(line.type))
      for (let l5 of line.type) {
        if (l5.to > pos || l5.to == pos && (l5.to == line.to || l5.type == BlockType.Text))
          return l5;
      }
    return line;
  }
  function moveToLineBoundary(view, start, forward, includeWrap) {
    let line = blockAt(view, start.head);
    let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
    if (coords) {
      let editorRect = view.dom.getBoundingClientRect();
      let direction = view.textDirectionAt(line.from);
      let pos = view.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null)
        return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
  }
  function moveByChar(view, start, forward, by) {
    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
    let direction = view.textDirectionAt(line.from);
    for (let cur2 = start, check = null; ; ) {
      let next = moveVisually(line, spans, direction, cur2, forward), char = movedOver;
      if (!next) {
        if (line.number == (forward ? view.state.doc.lines : 1))
          return cur2;
        char = "\n";
        line = view.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view.bidiSpans(line);
        next = view.visualLineSide(line, !forward);
      }
      if (!check) {
        if (!by)
          return next;
        check = by(char);
      } else if (!check(char)) {
        return cur2;
      }
      cur2 = next;
    }
  }
  function byGroup(view, pos, start) {
    let categorize = view.state.charCategorizer(pos);
    let cat = categorize(start);
    return (next) => {
      let nextCat = categorize(next);
      if (cat == CharCategory.Space)
        cat = nextCat;
      return cat == nextCat;
    };
  }
  function moveVertically(view, start, forward, distance) {
    let startPos = start.head, dir = forward ? 1 : -1;
    if (startPos == (forward ? view.state.doc.length : 0))
      return EditorSelection.cursor(startPos, start.assoc);
    let goal = start.goalColumn, startY;
    let rect = view.contentDOM.getBoundingClientRect();
    let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
    if (startCoords) {
      if (goal == null)
        goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      let line = view.viewState.lineBlockAt(startPos);
      if (goal == null)
        goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    let resolvedGoal = rect.left + goal;
    let dist2 = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
    for (let extra = 0; ; extra += 10) {
      let curY = startY + (dist2 + extra) * dir;
      let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
        let charRect = view.docView.coordsForChar(pos);
        let assoc = !charRect || curY < charRect.top ? -1 : 1;
        return EditorSelection.cursor(pos, assoc, void 0, goal);
      }
    }
  }
  function skipAtomicRanges(atoms, pos, bias) {
    for (; ; ) {
      let moved = 0;
      for (let set of atoms) {
        set.between(pos - 1, pos + 1, (from2, to, value) => {
          if (pos > from2 && pos < to) {
            let side = moved || bias || (pos - from2 < to - pos ? -1 : 1);
            pos = side < 0 ? from2 : to;
            moved = side;
          }
        });
      }
      if (!moved)
        return pos;
    }
  }
  function skipAtoms(view, oldPos, pos) {
    let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f3) => f3(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
  }
  var InputState = class {
    setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
    constructor(view) {
      this.view = view;
      this.lastKeyCode = 0;
      this.lastKeyTime = 0;
      this.lastTouchTime = 0;
      this.lastFocusTime = 0;
      this.lastScrollTop = 0;
      this.lastScrollLeft = 0;
      this.pendingIOSKey = void 0;
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastEscPress = 0;
      this.lastContextMenu = 0;
      this.scrollHandlers = [];
      this.handlers = /* @__PURE__ */ Object.create(null);
      this.composing = -1;
      this.compositionFirstChange = null;
      this.compositionEndedAt = 0;
      this.compositionPendingKey = false;
      this.compositionPendingChange = false;
      this.mouseSelection = null;
      this.draggedContent = null;
      this.handleEvent = this.handleEvent.bind(this);
      this.notifiedFocused = view.hasFocus;
      if (browser.safari)
        view.contentDOM.addEventListener("input", () => null);
      if (browser.gecko)
        firefoxCopyCutHack(view.contentDOM.ownerDocument);
    }
    handleEvent(event) {
      if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
        return;
      if (event.type == "keydown" && this.keydown(event))
        return;
      this.runHandlers(event.type, event);
    }
    runHandlers(type, event) {
      let handlers3 = this.handlers[type];
      if (handlers3) {
        for (let observer of handlers3.observers)
          observer(this.view, event);
        for (let handler of handlers3.handlers) {
          if (event.defaultPrevented)
            break;
          if (handler(this.view, event)) {
            event.preventDefault();
            break;
          }
        }
      }
    }
    ensureHandlers(plugins) {
      let handlers3 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
      for (let type in handlers3)
        if (type != "scroll") {
          let passive = !handlers3[type].handlers.length;
          let exists = prev[type];
          if (exists && passive != !exists.handlers.length) {
            dom.removeEventListener(type, this.handleEvent);
            exists = null;
          }
          if (!exists)
            dom.addEventListener(type, this.handleEvent, { passive });
        }
      for (let type in prev)
        if (type != "scroll" && !handlers3[type])
          dom.removeEventListener(type, this.handleEvent);
      this.handlers = handlers3;
    }
    keydown(event) {
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
        return true;
      if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
        this.view.inputState.lastEscPress = 0;
      if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
        this.view.observer.delayAndroidKey(event.key, event.keyCode);
        return true;
      }
      let pending;
      if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
        this.pendingIOSKey = pending || event;
        setTimeout(() => this.flushIOSKey(), 250);
        return true;
      }
      if (event.keyCode != 229)
        this.view.observer.forceFlush();
      return false;
    }
    flushIOSKey(change) {
      let key = this.pendingIOSKey;
      if (!key)
        return false;
      if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
        return false;
      this.pendingIOSKey = void 0;
      return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
    }
    ignoreDuringComposition(event) {
      if (!/^key/.test(event.type))
        return false;
      if (this.composing > 0)
        return true;
      if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
        this.compositionPendingKey = false;
        return true;
      }
      return false;
    }
    startMouseSelection(mouseSelection) {
      if (this.mouseSelection)
        this.mouseSelection.destroy();
      this.mouseSelection = mouseSelection;
    }
    update(update) {
      if (this.mouseSelection)
        this.mouseSelection.update(update);
      if (this.draggedContent && update.docChanged)
        this.draggedContent = this.draggedContent.map(update.changes);
      if (update.transactions.length)
        this.lastKeyCode = this.lastSelectionTime = 0;
    }
    destroy() {
      if (this.mouseSelection)
        this.mouseSelection.destroy();
    }
  };
  function bindHandler(plugin2, handler) {
    return (view, event) => {
      try {
        return handler.call(plugin2, event, view);
      } catch (e3) {
        logException(view.state, e3);
      }
    };
  }
  function computeHandlers(plugins) {
    let result = /* @__PURE__ */ Object.create(null);
    function record(type) {
      return result[type] || (result[type] = { observers: [], handlers: [] });
    }
    for (let plugin2 of plugins) {
      let spec = plugin2.spec;
      if (spec && spec.domEventHandlers)
        for (let type in spec.domEventHandlers) {
          let f3 = spec.domEventHandlers[type];
          if (f3)
            record(type).handlers.push(bindHandler(plugin2.value, f3));
        }
      if (spec && spec.domEventObservers)
        for (let type in spec.domEventObservers) {
          let f3 = spec.domEventObservers[type];
          if (f3)
            record(type).observers.push(bindHandler(plugin2.value, f3));
        }
    }
    for (let type in handlers)
      record(type).handlers.push(handlers[type]);
    for (let type in observers)
      record(type).observers.push(observers[type]);
    return result;
  }
  var PendingKeys = [
    { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
    { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
    { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
    { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
  ];
  var EmacsyPendingKeys = "dthko";
  var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
  var dragScrollMargin = 6;
  function dragScrollSpeed(dist2) {
    return Math.max(0, dist2) * 0.7 + 8;
  }
  function dist(a2, b4) {
    return Math.max(Math.abs(a2.clientX - b4.clientX), Math.abs(a2.clientY - b4.clientY));
  }
  var MouseSelection = class {
    constructor(view, startEvent, style, mustSelect) {
      this.view = view;
      this.startEvent = startEvent;
      this.style = style;
      this.mustSelect = mustSelect;
      this.scrollSpeed = { x: 0, y: 0 };
      this.scrolling = -1;
      this.lastEvent = startEvent;
      this.scrollParent = scrollableParent(view.contentDOM);
      this.atoms = view.state.facet(atomicRanges).map((f3) => f3(view));
      let doc5 = view.contentDOM.ownerDocument;
      doc5.addEventListener("mousemove", this.move = this.move.bind(this));
      doc5.addEventListener("mouseup", this.up = this.up.bind(this));
      this.extend = startEvent.shiftKey;
      this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
      this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
    }
    start(event) {
      if (this.dragging === false)
        this.select(event);
    }
    move(event) {
      var _a2;
      if (event.buttons == 0)
        return this.destroy();
      if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
        return;
      this.select(this.lastEvent = event);
      let sx = 0, sy = 0;
      let rect = ((_a2 = this.scrollParent) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
      let margins = getScrollMargins(this.view);
      if (event.clientX - margins.left <= rect.left + dragScrollMargin)
        sx = -dragScrollSpeed(rect.left - event.clientX);
      else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
        sx = dragScrollSpeed(event.clientX - rect.right);
      if (event.clientY - margins.top <= rect.top + dragScrollMargin)
        sy = -dragScrollSpeed(rect.top - event.clientY);
      else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
        sy = dragScrollSpeed(event.clientY - rect.bottom);
      this.setScrollSpeed(sx, sy);
    }
    up(event) {
      if (this.dragging == null)
        this.select(this.lastEvent);
      if (!this.dragging)
        event.preventDefault();
      this.destroy();
    }
    destroy() {
      this.setScrollSpeed(0, 0);
      let doc5 = this.view.contentDOM.ownerDocument;
      doc5.removeEventListener("mousemove", this.move);
      doc5.removeEventListener("mouseup", this.up);
      this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
    }
    setScrollSpeed(sx, sy) {
      this.scrollSpeed = { x: sx, y: sy };
      if (sx || sy) {
        if (this.scrolling < 0)
          this.scrolling = setInterval(() => this.scroll(), 50);
      } else if (this.scrolling > -1) {
        clearInterval(this.scrolling);
        this.scrolling = -1;
      }
    }
    scroll() {
      if (this.scrollParent) {
        this.scrollParent.scrollLeft += this.scrollSpeed.x;
        this.scrollParent.scrollTop += this.scrollSpeed.y;
      } else {
        this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
      }
      if (this.dragging === false)
        this.select(this.lastEvent);
    }
    skipAtoms(sel) {
      let ranges = null;
      for (let i3 = 0; i3 < sel.ranges.length; i3++) {
        let range = sel.ranges[i3], updated = null;
        if (range.empty) {
          let pos = skipAtomicRanges(this.atoms, range.from, 0);
          if (pos != range.from)
            updated = EditorSelection.cursor(pos, -1);
        } else {
          let from2 = skipAtomicRanges(this.atoms, range.from, -1);
          let to = skipAtomicRanges(this.atoms, range.to, 1);
          if (from2 != range.from || to != range.to)
            updated = EditorSelection.range(range.from == range.anchor ? from2 : to, range.from == range.head ? from2 : to);
        }
        if (updated) {
          if (!ranges)
            ranges = sel.ranges.slice();
          ranges[i3] = updated;
        }
      }
      return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
    }
    select(event) {
      let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
      if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
        this.view.dispatch({
          selection,
          userEvent: "select.pointer"
        });
      this.mustSelect = false;
    }
    update(update) {
      if (this.style.update(update))
        setTimeout(() => this.select(this.lastEvent), 20);
    }
  };
  function addsSelectionRange(view, event) {
    let facet = view.state.facet(clickAddsSelectionRange);
    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
    let facet = view.state.facet(dragMovesSelection$1);
    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
    let { main } = view.state.selection;
    if (main.empty)
      return false;
    let sel = getSelection2(view.root);
    if (!sel || sel.rangeCount == 0)
      return true;
    let rects = sel.getRangeAt(0).getClientRects();
    for (let i3 = 0; i3 < rects.length; i3++) {
      let rect = rects[i3];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
        return true;
    }
    return false;
  }
  function eventBelongsToEditor(view, event) {
    if (!event.bubbles)
      return true;
    if (event.defaultPrevented)
      return false;
    for (let node2 = event.target, cView; node2 != view.contentDOM; node2 = node2.parentNode)
      if (!node2 || node2.nodeType == 11 || (cView = ContentView.get(node2)) && cView.ignoreEvent(event))
        return false;
    return true;
  }
  var handlers = /* @__PURE__ */ Object.create(null);
  var observers = /* @__PURE__ */ Object.create(null);
  var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
  function capturePaste(view) {
    let parent = view.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(() => {
      view.focus();
      target.remove();
      doPaste(view, target.value);
    }, 50);
  }
  function doPaste(view, input) {
    let { state } = view, changes, i3 = 1, text5 = state.toText(input);
    let byLine = text5.lines == state.selection.ranges.length;
    let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r4) => r4.empty) && lastLinewiseCopy == text5.toString();
    if (linewise) {
      let lastLine = -1;
      changes = state.changeByRange((range) => {
        let line = state.doc.lineAt(range.from);
        if (line.from == lastLine)
          return { range };
        lastLine = line.from;
        let insert2 = state.toText((byLine ? text5.line(i3++).text : input) + state.lineBreak);
        return {
          changes: { from: line.from, insert: insert2 },
          range: EditorSelection.cursor(range.from + insert2.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange((range) => {
        let line = text5.line(i3++);
        return {
          changes: { from: range.from, to: range.to, insert: line.text },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text5);
    }
    view.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  observers.scroll = (view) => {
    view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
    view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
  };
  handlers.keydown = (view, event) => {
    view.inputState.setSelectionOrigin("select");
    if (event.keyCode == 27)
      view.inputState.lastEscPress = Date.now();
    return false;
  };
  observers.touchstart = (view, e3) => {
    view.inputState.lastTouchTime = Date.now();
    view.inputState.setSelectionOrigin("select.pointer");
  };
  observers.touchmove = (view) => {
    view.inputState.setSelectionOrigin("select.pointer");
  };
  handlers.mousedown = (view, event) => {
    view.observer.flush();
    if (view.inputState.lastTouchTime > Date.now() - 2e3)
      return false;
    let style = null;
    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
      style = makeStyle(view, event);
      if (style)
        break;
    }
    if (!style && event.button == 0)
      style = basicMouseSelection(view, event);
    if (style) {
      let mustFocus = !view.hasFocus;
      view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
      if (mustFocus)
        view.observer.ignore(() => focusPreventScroll(view.contentDOM));
      let mouseSel = view.inputState.mouseSelection;
      if (mouseSel) {
        mouseSel.start(event);
        return mouseSel.dragging === false;
      }
    }
    return false;
  };
  function rangeForClick(view, pos, bias, type) {
    if (type == 1) {
      return EditorSelection.cursor(pos, bias);
    } else if (type == 2) {
      return groupAt(view.state, pos, bias);
    } else {
      let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      let from2 = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
      if (to < view.state.doc.length && to == line.to)
        to++;
      return EditorSelection.range(from2, to);
    }
  }
  var insideY = (y4, rect) => y4 >= rect.top && y4 <= rect.bottom;
  var inside = (x7, y4, rect) => insideY(y4, rect) && x7 >= rect.left && x7 <= rect.right;
  function findPositionSide(view, pos, x7, y4) {
    let line = LineView.find(view.docView, pos);
    if (!line)
      return 1;
    let off = pos - line.posAtStart;
    if (off == 0)
      return 1;
    if (off == line.length)
      return -1;
    let before = line.coordsAt(off, -1);
    if (before && inside(x7, y4, before))
      return -1;
    let after = line.coordsAt(off, 1);
    if (after && inside(x7, y4, after))
      return 1;
    return before && insideY(y4, before) ? -1 : 1;
  }
  function queryPos(view, event) {
    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  var BadMouseDetail = browser.ie && browser.ie_version <= 11;
  var lastMouseDown = null;
  var lastMouseDownCount = 0;
  var lastMouseDownTime = 0;
  function getClickType(event) {
    if (!BadMouseDetail)
      return event.detail;
    let last = lastMouseDown, lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
    let start = queryPos(view, event), type = getClickType(event);
    let startSel = view.state.selection;
    return {
      update(update) {
        if (update.docChanged) {
          start.pos = update.changes.mapPos(start.pos);
          startSel = startSel.map(update.changes);
        }
      },
      get(event2, extend3, multiple) {
        let cur2 = queryPos(view, event2), removed;
        let range = rangeForClick(view, cur2.pos, cur2.bias, type);
        if (start.pos != cur2.pos && !extend3) {
          let startRange = rangeForClick(view, start.pos, start.bias, type);
          let from2 = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
          range = from2 < range.from ? EditorSelection.range(from2, to) : EditorSelection.range(to, from2);
        }
        if (extend3)
          return startSel.replaceRange(startSel.main.extend(range.from, range.to));
        else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
          return removed;
        else if (multiple)
          return startSel.addRange(range);
        else
          return EditorSelection.create([range]);
      }
    };
  }
  function removeRangeAround(sel, pos) {
    for (let i3 = 0; i3 < sel.ranges.length; i3++) {
      let { from: from2, to } = sel.ranges[i3];
      if (from2 <= pos && to >= pos)
        return EditorSelection.create(sel.ranges.slice(0, i3).concat(sel.ranges.slice(i3 + 1)), sel.mainIndex == i3 ? 0 : sel.mainIndex - (sel.mainIndex > i3 ? 1 : 0));
    }
    return null;
  }
  handlers.dragstart = (view, event) => {
    let { selection: { main: range } } = view.state;
    if (event.target.draggable) {
      let cView = view.docView.nearest(event.target);
      if (cView && cView.isWidget) {
        let from2 = cView.posAtStart, to = from2 + cView.length;
        if (from2 >= range.to || to <= range.from)
          range = EditorSelection.range(from2, to);
      }
    }
    let { inputState } = view;
    if (inputState.mouseSelection)
      inputState.mouseSelection.dragging = true;
    inputState.draggedContent = range;
    if (event.dataTransfer) {
      event.dataTransfer.setData("Text", view.state.sliceDoc(range.from, range.to));
      event.dataTransfer.effectAllowed = "copyMove";
    }
    return false;
  };
  handlers.dragend = (view) => {
    view.inputState.draggedContent = null;
    return false;
  };
  function dropText(view, event, text5, direct) {
    if (!text5)
      return;
    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    let { draggedContent } = view.inputState;
    let del2 = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
    let ins = { from: dropPos, insert: text5 };
    let changes = view.state.changes(del2 ? [del2, ins] : ins);
    view.focus();
    view.dispatch({
      changes,
      selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
      userEvent: del2 ? "move.drop" : "input.drop"
    });
    view.inputState.draggedContent = null;
  }
  handlers.drop = (view, event) => {
    if (!event.dataTransfer)
      return false;
    if (view.state.readOnly)
      return true;
    let files = event.dataTransfer.files;
    if (files && files.length) {
      let text5 = Array(files.length), read = 0;
      let finishFile = () => {
        if (++read == files.length)
          dropText(view, event, text5.filter((s4) => s4 != null).join(view.state.lineBreak), false);
      };
      for (let i3 = 0; i3 < files.length; i3++) {
        let reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = () => {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
            text5[i3] = reader.result;
          finishFile();
        };
        reader.readAsText(files[i3]);
      }
      return true;
    } else {
      let text5 = event.dataTransfer.getData("Text");
      if (text5) {
        dropText(view, event, text5, true);
        return true;
      }
    }
    return false;
  };
  handlers.paste = (view, event) => {
    if (view.state.readOnly)
      return true;
    view.observer.flush();
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
      return true;
    } else {
      capturePaste(view);
      return false;
    }
  };
  function captureCopy(view, text5) {
    let parent = view.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text5;
    target.focus();
    target.selectionEnd = text5.length;
    target.selectionStart = 0;
    setTimeout(() => {
      target.remove();
      view.focus();
    }, 50);
  }
  function copiedRange(state) {
    let content4 = [], ranges = [], linewise = false;
    for (let range of state.selection.ranges)
      if (!range.empty) {
        content4.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    if (!content4.length) {
      let upto = -1;
      for (let { from: from2 } of state.selection.ranges) {
        let line = state.doc.lineAt(from2);
        if (line.number > upto) {
          content4.push(line.text);
          ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
        }
        upto = line.number;
      }
      linewise = true;
    }
    return { text: content4.join(state.lineBreak), ranges, linewise };
  }
  var lastLinewiseCopy = null;
  handlers.copy = handlers.cut = (view, event) => {
    let { text: text5, ranges, linewise } = copiedRange(view.state);
    if (!text5 && !linewise)
      return false;
    lastLinewiseCopy = linewise ? text5 : null;
    if (event.type == "cut" && !view.state.readOnly)
      view.dispatch({
        changes: ranges,
        scrollIntoView: true,
        userEvent: "delete.cut"
      });
    let data = brokenClipboardAPI ? null : event.clipboardData;
    if (data) {
      data.clearData();
      data.setData("text/plain", text5);
      return true;
    } else {
      captureCopy(view, text5);
      return false;
    }
  };
  var isFocusChange = /* @__PURE__ */ Annotation.define();
  function focusChangeTransaction(state, focus) {
    let effects = [];
    for (let getEffect of state.facet(focusChangeEffect)) {
      let effect = getEffect(state, focus);
      if (effect)
        effects.push(effect);
    }
    return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  function updateForFocusChange(view) {
    setTimeout(() => {
      let focus = view.hasFocus;
      if (focus != view.inputState.notifiedFocused) {
        let tr = focusChangeTransaction(view.state, focus);
        if (tr)
          view.dispatch(tr);
        else
          view.update([]);
      }
    }, 10);
  }
  observers.focus = (view) => {
    view.inputState.lastFocusTime = Date.now();
    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
      view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
      view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
    }
    updateForFocusChange(view);
  };
  observers.blur = (view) => {
    view.observer.clearSelectionRange();
    updateForFocusChange(view);
  };
  observers.compositionstart = observers.compositionupdate = (view) => {
    if (view.inputState.compositionFirstChange == null)
      view.inputState.compositionFirstChange = true;
    if (view.inputState.composing < 0) {
      view.inputState.composing = 0;
    }
  };
  observers.compositionend = (view) => {
    view.inputState.composing = -1;
    view.inputState.compositionEndedAt = Date.now();
    view.inputState.compositionPendingKey = true;
    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
    view.inputState.compositionFirstChange = null;
    if (browser.chrome && browser.android) {
      view.observer.flushSoon();
    } else if (view.inputState.compositionPendingChange) {
      Promise.resolve().then(() => view.observer.flush());
    } else {
      setTimeout(() => {
        if (view.inputState.composing < 0 && view.docView.hasComposition)
          view.update([]);
      }, 50);
    }
  };
  observers.contextmenu = (view) => {
    view.inputState.lastContextMenu = Date.now();
  };
  handlers.beforeinput = (view, event) => {
    var _a2;
    let pending;
    if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
      view.observer.delayAndroidKey(pending.key, pending.keyCode);
      if (pending.key == "Backspace" || pending.key == "Delete") {
        let startViewHeight = ((_a2 = window.visualViewport) === null || _a2 === void 0 ? void 0 : _a2.height) || 0;
        setTimeout(() => {
          var _a3;
          if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
            view.contentDOM.blur();
            view.focus();
          }
        }, 100);
      }
    }
    if (browser.ios && event.inputType == "deleteContentForward") {
      view.observer.flushSoon();
    }
    if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
      setTimeout(() => observers.compositionend(view, event), 20);
    }
    return false;
  };
  var appliedFirefoxHack = /* @__PURE__ */ new Set();
  function firefoxCopyCutHack(doc5) {
    if (!appliedFirefoxHack.has(doc5)) {
      appliedFirefoxHack.add(doc5);
      doc5.addEventListener("copy", () => {
      });
      doc5.addEventListener("cut", () => {
      });
    }
  }
  var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
  var HeightOracle = class {
    constructor(lineWrapping) {
      this.lineWrapping = lineWrapping;
      this.doc = Text2.empty;
      this.heightSamples = {};
      this.lineHeight = 14;
      this.charWidth = 7;
      this.textHeight = 14;
      this.lineLength = 30;
      this.heightChanged = false;
    }
    heightForGap(from2, to) {
      let lines = this.doc.lineAt(to).number - this.doc.lineAt(from2).number + 1;
      if (this.lineWrapping)
        lines += Math.max(0, Math.ceil((to - from2 - lines * this.lineLength * 0.5) / this.lineLength));
      return this.lineHeight * lines;
    }
    heightForLine(length) {
      if (!this.lineWrapping)
        return this.lineHeight;
      let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
    setDoc(doc5) {
      this.doc = doc5;
      return this;
    }
    mustRefreshForWrapping(whiteSpace) {
      return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
    }
    mustRefreshForHeights(lineHeights) {
      let newHeight = false;
      for (let i3 = 0; i3 < lineHeights.length; i3++) {
        let h3 = lineHeights[i3];
        if (h3 < 0) {
          i3++;
        } else if (!this.heightSamples[Math.floor(h3 * 10)]) {
          newHeight = true;
          this.heightSamples[Math.floor(h3 * 10)] = true;
        }
      }
      return newHeight;
    }
    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
      let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
      this.lineWrapping = lineWrapping;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.textHeight = textHeight;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (let i3 = 0; i3 < knownHeights.length; i3++) {
          let h3 = knownHeights[i3];
          if (h3 < 0)
            i3++;
          else
            this.heightSamples[Math.floor(h3 * 10)] = true;
        }
      }
      return changed;
    }
  };
  var MeasuredHeights = class {
    constructor(from2, heights) {
      this.from = from2;
      this.heights = heights;
      this.index = 0;
    }
    get more() {
      return this.index < this.heights.length;
    }
  };
  var BlockInfo = class _BlockInfo {
    /**
    @internal
    */
    constructor(from2, length, top2, height, _content) {
      this.from = from2;
      this.length = length;
      this.top = top2;
      this.height = height;
      this._content = _content;
    }
    /**
    The type of element this is. When querying lines, this may be
    an array of all the blocks that make up the line.
    */
    get type() {
      return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
    }
    /**
    The end of the element as a document position.
    */
    get to() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
    get bottom() {
      return this.top + this.height;
    }
    /**
    If this is a widget block, this will return the widget
    associated with it.
    */
    get widget() {
      return this._content instanceof PointDecoration ? this._content.widget : null;
    }
    /**
    If this is a textblock, this holds the number of line breaks
    that appear in widgets inside the block.
    */
    get widgetLineBreaks() {
      return typeof this._content == "number" ? this._content : 0;
    }
    /**
    @internal
    */
    join(other) {
      let content4 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
      return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content4);
    }
  };
  var QueryType = /* @__PURE__ */ function(QueryType3) {
    QueryType3[QueryType3["ByPos"] = 0] = "ByPos";
    QueryType3[QueryType3["ByHeight"] = 1] = "ByHeight";
    QueryType3[QueryType3["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType3;
  }(QueryType || (QueryType = {}));
  var Epsilon = 1e-3;
  var HeightMap = class _HeightMap {
    constructor(length, height, flags = 2) {
      this.length = length;
      this.height = height;
      this.flags = flags;
    }
    get outdated() {
      return (this.flags & 2) > 0;
    }
    set outdated(value) {
      this.flags = (value ? 2 : 0) | this.flags & ~2;
    }
    setHeight(oracle, height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon)
          oracle.heightChanged = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
    replace(_from, _to, nodes) {
      return _HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
    decomposeLeft(_to, result) {
      result.push(this);
    }
    decomposeRight(_from, result) {
      result.push(this);
    }
    applyChanges(decorations2, oldDoc, oracle, changes) {
      let me4 = this, doc5 = oracle.doc;
      for (let i3 = changes.length - 1; i3 >= 0; i3--) {
        let { fromA, toA, fromB, toB } = changes[i3];
        let start = me4.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
        let end = start.to >= toA ? start : me4.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i3 > 0 && start.from <= changes[i3 - 1].toA) {
          fromA = changes[i3 - 1].fromA;
          fromB = changes[i3 - 1].fromB;
          i3--;
          if (fromA < start.from)
            start = me4.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        let nodes = NodeBuilder.build(oracle.setDoc(doc5), decorations2, fromB, toB);
        me4 = me4.replace(fromA, toA, nodes);
      }
      return me4.updateHeight(oracle, 0);
    }
    static empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
    static of(nodes) {
      if (nodes.length == 1)
        return nodes[0];
      let i3 = 0, j6 = nodes.length, before = 0, after = 0;
      for (; ; ) {
        if (i3 == j6) {
          if (before > after * 2) {
            let split2 = nodes[i3 - 1];
            if (split2.break)
              nodes.splice(--i3, 1, split2.left, null, split2.right);
            else
              nodes.splice(--i3, 1, split2.left, split2.right);
            j6 += 1 + split2.break;
            before -= split2.size;
          } else if (after > before * 2) {
            let split2 = nodes[j6];
            if (split2.break)
              nodes.splice(j6, 1, split2.left, null, split2.right);
            else
              nodes.splice(j6, 1, split2.left, split2.right);
            j6 += 2 + split2.break;
            after -= split2.size;
          } else {
            break;
          }
        } else if (before < after) {
          let next = nodes[i3++];
          if (next)
            before += next.size;
        } else {
          let next = nodes[--j6];
          if (next)
            after += next.size;
        }
      }
      let brk = 0;
      if (nodes[i3 - 1] == null) {
        brk = 1;
        i3--;
      } else if (nodes[i3] == null) {
        brk = 1;
        j6++;
      }
      return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i3)), brk, _HeightMap.of(nodes.slice(j6)));
    }
  };
  HeightMap.prototype.size = 1;
  var HeightMapBlock = class extends HeightMap {
    constructor(length, height, deco) {
      super(length, height);
      this.deco = deco;
    }
    blockAt(_height, _oracle, top2, offset) {
      return new BlockInfo(offset, this.length, top2, this.height, this.deco || 0);
    }
    lineAt(_value, _type, oracle, top2, offset) {
      return this.blockAt(0, oracle, top2, offset);
    }
    forEachLine(from2, to, oracle, top2, offset, f3) {
      if (from2 <= offset + this.length && to >= offset)
        f3(this.blockAt(0, oracle, top2, offset));
    }
    updateHeight(oracle, offset = 0, _force = false, measured) {
      if (measured && measured.from <= offset && measured.more)
        this.setHeight(oracle, measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
    toString() {
      return `block(${this.length})`;
    }
  };
  var HeightMapText = class _HeightMapText extends HeightMapBlock {
    constructor(length, height) {
      super(length, height, null);
      this.collapsed = 0;
      this.widgetHeight = 0;
      this.breaks = 0;
    }
    blockAt(_height, _oracle, top2, offset) {
      return new BlockInfo(offset, this.length, top2, this.height, this.breaks);
    }
    replace(_from, _to, nodes) {
      let node2 = nodes[0];
      if (nodes.length == 1 && (node2 instanceof _HeightMapText || node2 instanceof HeightMapGap && node2.flags & 4) && Math.abs(this.length - node2.length) < 10) {
        if (node2 instanceof HeightMapGap)
          node2 = new _HeightMapText(node2.length, this.height);
        else
          node2.height = this.height;
        if (!this.outdated)
          node2.outdated = false;
        return node2;
      } else {
        return HeightMap.of(nodes);
      }
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      if (measured && measured.from <= offset && measured.more)
        this.setHeight(oracle, measured.heights[measured.index++]);
      else if (force || this.outdated)
        this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
      this.outdated = false;
      return this;
    }
    toString() {
      return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
    }
  };
  var HeightMapGap = class _HeightMapGap extends HeightMap {
    constructor(length) {
      super(length, 0);
    }
    heightMetrics(oracle, offset) {
      let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
      let lines = lastLine - firstLine + 1;
      let perLine, perChar = 0;
      if (oracle.lineWrapping) {
        let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
        perLine = totalPerLine / lines;
        if (this.length > lines + 1)
          perChar = (this.height - totalPerLine) / (this.length - lines - 1);
      } else {
        perLine = this.height / lines;
      }
      return { firstLine, lastLine, perLine, perChar };
    }
    blockAt(height, oracle, top2, offset) {
      let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      if (oracle.lineWrapping) {
        let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
        let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
        let lineTop = Math.max(top2, height - lineHeight / 2);
        return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
      } else {
        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
        let { from: from2, length } = oracle.doc.line(firstLine + line);
        return new BlockInfo(from2, length, top2 + perLine * line, perLine, 0);
      }
    }
    lineAt(value, type, oracle, top2, offset) {
      if (type == QueryType.ByHeight)
        return this.blockAt(value, oracle, top2, offset);
      if (type == QueryType.ByPosNoHeight) {
        let { from: from2, to } = oracle.doc.lineAt(value);
        return new BlockInfo(from2, to - from2, 0, 0, 0);
      }
      let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
      let linesAbove = line.number - firstLine;
      let lineTop = top2 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
      return new BlockInfo(line.from, line.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
    }
    forEachLine(from2, to, oracle, top2, offset, f3) {
      from2 = Math.max(from2, offset);
      to = Math.min(to, offset + this.length);
      let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
      for (let pos = from2, lineTop = top2; pos <= to; ) {
        let line = oracle.doc.lineAt(pos);
        if (pos == from2) {
          let linesAbove = line.number - firstLine;
          lineTop += perLine * linesAbove + perChar * (from2 - offset - linesAbove);
        }
        let lineHeight = perLine + perChar * line.length;
        f3(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
        lineTop += lineHeight;
        pos = line.to + 1;
      }
    }
    replace(from2, to, nodes) {
      let after = this.length - to;
      if (after > 0) {
        let last = nodes[nodes.length - 1];
        if (last instanceof _HeightMapGap)
          nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
        else
          nodes.push(null, new _HeightMapGap(after - 1));
      }
      if (from2 > 0) {
        let first = nodes[0];
        if (first instanceof _HeightMapGap)
          nodes[0] = new _HeightMapGap(from2 + first.length);
        else
          nodes.unshift(new _HeightMapGap(from2 - 1), null);
      }
      return HeightMap.of(nodes);
    }
    decomposeLeft(to, result) {
      result.push(new _HeightMapGap(to - 1), null);
    }
    decomposeRight(from2, result) {
      result.push(null, new _HeightMapGap(this.length - from2 - 1));
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
        if (measured.from > offset)
          nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          let len = oracle.doc.lineAt(pos).length;
          if (nodes.length)
            nodes.push(null);
          let height = measured.heights[measured.index++];
          if (singleHeight == -1)
            singleHeight = height;
          else if (Math.abs(height - singleHeight) >= Epsilon)
            singleHeight = -2;
          let line = new HeightMapText(len, height);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end)
          nodes.push(null, new _HeightMapGap(end - pos).updateHeight(oracle, pos));
        let result = HeightMap.of(nodes);
        if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
          oracle.heightChanged = true;
        return result;
      } else if (force || this.outdated) {
        this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
    toString() {
      return `gap(${this.length})`;
    }
  };
  var HeightMapBranch = class extends HeightMap {
    constructor(left, brk, right) {
      super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
      this.left = left;
      this.right = right;
      this.size = left.size + right.size;
    }
    get break() {
      return this.flags & 1;
    }
    blockAt(height, oracle, top2, offset) {
      let mid = top2 + this.left.height;
      return height < mid ? this.left.blockAt(height, oracle, top2, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
    }
    lineAt(value, type, oracle, top2, offset) {
      let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
      let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
      let base2 = left ? this.left.lineAt(value, type, oracle, top2, offset) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
      if (this.break || (left ? base2.to < rightOffset : base2.from > rightOffset))
        return base2;
      let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
      if (left)
        return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
      else
        return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset).join(base2);
    }
    forEachLine(from2, to, oracle, top2, offset, f3) {
      let rightTop = top2 + this.left.height, rightOffset = offset + this.left.length + this.break;
      if (this.break) {
        if (from2 < rightOffset)
          this.left.forEachLine(from2, to, oracle, top2, offset, f3);
        if (to >= rightOffset)
          this.right.forEachLine(from2, to, oracle, rightTop, rightOffset, f3);
      } else {
        let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset);
        if (from2 < mid.from)
          this.left.forEachLine(from2, mid.from - 1, oracle, top2, offset, f3);
        if (mid.to >= from2 && mid.from <= to)
          f3(mid);
        if (to > mid.to)
          this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f3);
      }
    }
    replace(from2, to, nodes) {
      let rightStart = this.left.length + this.break;
      if (to < rightStart)
        return this.balanced(this.left.replace(from2, to, nodes), this.right);
      if (from2 > this.left.length)
        return this.balanced(this.left, this.right.replace(from2 - rightStart, to - rightStart, nodes));
      let result = [];
      if (from2 > 0)
        this.decomposeLeft(from2, result);
      let left = result.length;
      for (let node2 of nodes)
        result.push(node2);
      if (from2 > 0)
        mergeGaps(result, left - 1);
      if (to < this.length) {
        let right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
    decomposeLeft(to, result) {
      let left = this.left.length;
      if (to <= left)
        return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this.break) {
        left++;
        if (to >= left)
          result.push(null);
      }
      if (to > left)
        this.right.decomposeLeft(to - left, result);
    }
    decomposeRight(from2, result) {
      let left = this.left.length, right = left + this.break;
      if (from2 >= right)
        return this.right.decomposeRight(from2 - right, result);
      if (from2 < left)
        this.left.decomposeRight(from2, result);
      if (this.break && from2 < right)
        result.push(null);
      result.push(this.right);
    }
    balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size)
        return HeightMap.of(this.break ? [left, null, right] : [left, right]);
      this.left = left;
      this.right = right;
      this.height = left.height + right.height;
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this.break + right.length;
      return this;
    }
    updateHeight(oracle, offset = 0, force = false, measured) {
      let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more)
        rebalance = left = left.updateHeight(oracle, offset, force, measured);
      else
        left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more)
        rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
      else
        right.updateHeight(oracle, rightStart, force);
      if (rebalance)
        return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
    toString() {
      return this.left + (this.break ? " " : "-") + this.right;
    }
  };
  function mergeGaps(nodes, around) {
    let before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
      nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  var relevantWidgetHeight = 5;
  var NodeBuilder = class _NodeBuilder {
    constructor(pos, oracle) {
      this.pos = pos;
      this.oracle = oracle;
      this.nodes = [];
      this.lineStart = -1;
      this.lineEnd = -1;
      this.covering = null;
      this.writtenTo = pos;
    }
    get isCovered() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
    span(_from, to) {
      if (this.lineStart > -1) {
        let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText)
          last.length += end - this.pos;
        else if (end > this.pos || !this.isCovered)
          this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
    point(from2, to, deco) {
      if (from2 < to || deco.heightRelevant) {
        let height = deco.widget ? deco.widget.estimatedHeight : 0;
        let breaks = deco.widget ? deco.widget.lineBreaks : 0;
        if (height < 0)
          height = this.oracle.lineHeight;
        let len = to - from2;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco));
        } else if (len || breaks || height >= relevantWidgetHeight) {
          this.addLineDeco(height, breaks, len);
        }
      } else if (to > from2) {
        this.span(from2, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos)
        this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
    enterLine() {
      if (this.lineStart > -1)
        return;
      let { from: from2, to } = this.oracle.doc.lineAt(this.pos);
      this.lineStart = from2;
      this.lineEnd = to;
      if (this.writtenTo < from2) {
        if (this.writtenTo < from2 - 1 || this.nodes[this.nodes.length - 1] == null)
          this.nodes.push(this.blankContent(this.writtenTo, from2 - 1));
        this.nodes.push(null);
      }
      if (this.pos > from2)
        this.nodes.push(new HeightMapText(this.pos - from2, -1));
      this.writtenTo = this.pos;
    }
    blankContent(from2, to) {
      let gap = new HeightMapGap(to - from2);
      if (this.oracle.doc.lineAt(from2).to == to)
        gap.flags |= 4;
      return gap;
    }
    ensureLine() {
      this.enterLine();
      let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText)
        return last;
      let line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
    addBlock(block) {
      this.enterLine();
      let deco = block.deco;
      if (deco && deco.startSide > 0 && !this.isCovered)
        this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (deco && deco.endSide > 0)
        this.covering = block;
    }
    addLineDeco(height, breaks, length) {
      let line = this.ensureLine();
      line.length += length;
      line.collapsed += length;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      line.breaks += breaks;
      this.writtenTo = this.pos = this.pos + length;
    }
    finish(from2) {
      let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
        this.nodes.push(new HeightMapText(0, -1));
      else if (this.writtenTo < this.pos || last == null)
        this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      let pos = from2;
      for (let node2 of this.nodes) {
        if (node2 instanceof HeightMapText)
          node2.updateHeight(this.oracle, pos);
        pos += node2 ? node2.length : 1;
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
    static build(oracle, decorations2, from2, to) {
      let builder = new _NodeBuilder(from2, oracle);
      RangeSet.spans(decorations2, from2, to, builder, 0);
      return builder.finish(from2);
    }
  };
  function heightRelevantDecoChanges(a2, b4, diff) {
    let comp = new DecorationComparator2();
    RangeSet.compare(a2, b4, diff, comp, 0);
    return comp.changes;
  }
  var DecorationComparator2 = class {
    constructor() {
      this.changes = [];
    }
    compareRange() {
    }
    comparePoint(from2, to, a2, b4) {
      if (from2 < to || a2 && a2.heightRelevant || b4 && b4.heightRelevant)
        addRange(from2, to, this.changes, 5);
    }
  };
  function visiblePixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    let doc5 = dom.ownerDocument, win = doc5.defaultView || window;
    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
    let top2 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
    for (let parent = dom.parentNode; parent && parent != doc5.body; ) {
      if (parent.nodeType == 1) {
        let elt = parent;
        let style = window.getComputedStyle(elt);
        if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
          let parentRect = elt.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top2 = Math.max(top2, parentRect.top);
          bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
        }
        parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
      } else if (parent.nodeType == 11) {
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top2 - (rect.top + paddingTop),
      bottom: Math.max(top2, bottom) - (rect.top + paddingTop)
    };
  }
  function fullPixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  var LineGap = class {
    constructor(from2, to, size) {
      this.from = from2;
      this.to = to;
      this.size = size;
    }
    static same(a2, b4) {
      if (a2.length != b4.length)
        return false;
      for (let i3 = 0; i3 < a2.length; i3++) {
        let gA = a2[i3], gB = b4[i3];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
          return false;
      }
      return true;
    }
    draw(viewState, wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
      }).range(this.from, this.to);
    }
  };
  var LineGapWidget = class extends WidgetType {
    constructor(size, vertical) {
      super();
      this.size = size;
      this.vertical = vertical;
    }
    eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
    toDOM() {
      let elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
    get estimatedHeight() {
      return this.vertical ? this.size : -1;
    }
  };
  var ViewState = class {
    constructor(state) {
      this.state = state;
      this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
      this.inView = true;
      this.paddingTop = 0;
      this.paddingBottom = 0;
      this.contentDOMWidth = 0;
      this.contentDOMHeight = 0;
      this.editorHeight = 0;
      this.editorWidth = 0;
      this.scrollTop = 0;
      this.scrolledToBottom = false;
      this.scaleX = 1;
      this.scaleY = 1;
      this.scrollAnchorPos = 0;
      this.scrollAnchorHeight = -1;
      this.scaler = IdScaler;
      this.scrollTarget = null;
      this.printing = false;
      this.mustMeasureContent = true;
      this.defaultTextDirection = Direction.LTR;
      this.visibleRanges = [];
      this.mustEnforceCursorAssoc = false;
      let guessWrapping = state.facet(contentAttributes).some((v4) => typeof v4 != "function" && v4.class == "cm-lineWrapping");
      this.heightOracle = new HeightOracle(guessWrapping);
      this.stateDeco = state.facet(decorations).filter((d6) => typeof d6 != "function");
      this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text2.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
      this.viewport = this.getViewport(0, null);
      this.updateViewportLines();
      this.updateForViewport();
      this.lineGaps = this.ensureLineGaps([]);
      this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
      this.computeVisibleRanges();
    }
    updateForViewport() {
      let viewports = [this.viewport], { main } = this.state.selection;
      for (let i3 = 0; i3 <= 1; i3++) {
        let pos = i3 ? main.head : main.anchor;
        if (!viewports.some(({ from: from2, to }) => pos >= from2 && pos <= to)) {
          let { from: from2, to } = this.lineBlockAt(pos);
          viewports.push(new Viewport(from2, to));
        }
      }
      this.viewports = viewports.sort((a2, b4) => a2.from - b4.from);
      this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
    }
    updateViewportLines() {
      this.viewportLines = [];
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block) => {
        this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
      });
    }
    update(update, scrollTarget = null) {
      this.state = update.state;
      let prevDeco = this.stateDeco;
      this.stateDeco = this.state.facet(decorations).filter((d6) => typeof d6 != "function");
      let contentChanges = update.changedRanges;
      let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
      let prevHeight = this.heightMap.height;
      let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
      this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight)
        update.flags |= 2;
      if (scrollAnchor) {
        this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
        this.scrollAnchorHeight = scrollAnchor.top;
      } else {
        this.scrollAnchorPos = -1;
        this.scrollAnchorHeight = this.heightMap.height;
      }
      let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
      if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
        viewport = this.getViewport(0, scrollTarget);
      let updateLines = !update.changes.empty || update.flags & 2 || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
      this.viewport = viewport;
      this.updateForViewport();
      if (updateLines)
        this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
        this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
      update.flags |= this.computeVisibleRanges();
      if (scrollTarget)
        this.scrollTarget = scrollTarget;
      if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
        this.mustEnforceCursorAssoc = true;
    }
    measure(view) {
      let dom = view.contentDOM, style = window.getComputedStyle(dom);
      let oracle = this.heightOracle;
      let whiteSpace = style.whiteSpace;
      this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
      let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
      let domRect = dom.getBoundingClientRect();
      let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
      this.contentDOMHeight = domRect.height;
      this.mustMeasureContent = false;
      let result = 0, bias = 0;
      if (domRect.width && domRect.height) {
        let { scaleX, scaleY } = getScale(dom, domRect);
        if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          result |= 8;
          refresh = measureContent = true;
        }
      }
      let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
      let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
      if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
        this.paddingTop = paddingTop;
        this.paddingBottom = paddingBottom;
        result |= 8 | 2;
      }
      if (this.editorWidth != view.scrollDOM.clientWidth) {
        if (oracle.lineWrapping)
          measureContent = true;
        this.editorWidth = view.scrollDOM.clientWidth;
        result |= 8;
      }
      let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
      if (this.scrollTop != scrollTop) {
        this.scrollAnchorHeight = -1;
        this.scrollTop = scrollTop;
      }
      this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
      let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
      let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (inView != this.inView) {
        this.inView = inView;
        if (inView)
          measureContent = true;
      }
      if (!this.inView && !this.scrollTarget)
        return 0;
      let contentWidth = domRect.width;
      if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
        this.contentDOMWidth = domRect.width;
        this.editorHeight = view.scrollDOM.clientHeight;
        result |= 8;
      }
      if (measureContent) {
        let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
        if (oracle.mustRefreshForHeights(lineHeights))
          refresh = true;
        if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
          let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
          refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
          if (refresh) {
            view.docView.minWidth = 0;
            result |= 8;
          }
        }
        if (dTop > 0 && dBottom > 0)
          bias = Math.max(dTop, dBottom);
        else if (dTop < 0 && dBottom < 0)
          bias = Math.min(dTop, dBottom);
        oracle.heightChanged = false;
        for (let vp of this.viewports) {
          let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
          this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text2.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
        }
        if (oracle.heightChanged)
          result |= 2;
      }
      let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
      if (viewportChange)
        this.viewport = this.getViewport(bias, this.scrollTarget);
      this.updateForViewport();
      if (result & 2 || viewportChange)
        this.updateViewportLines();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
        this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
      result |= this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        view.docView.enforceCursorAssoc();
      }
      return result;
    }
    get visibleTop() {
      return this.scaler.fromDOM(this.pixelViewport.top);
    }
    get visibleBottom() {
      return this.scaler.fromDOM(this.pixelViewport.bottom);
    }
    getViewport(bias, scrollTarget) {
      let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
      let map6 = this.heightMap, oracle = this.heightOracle;
      let { visibleTop, visibleBottom } = this;
      let viewport = new Viewport(map6.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map6.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
      if (scrollTarget) {
        let { head } = scrollTarget.range;
        if (head < viewport.from || head > viewport.to) {
          let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
          let block = map6.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
          if (scrollTarget.y == "center")
            topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
          else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
            topPos = block.top;
          else
            topPos = block.bottom - viewHeight;
          viewport = new Viewport(map6.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map6.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
        }
      }
      return viewport;
    }
    mapViewport(viewport, changes) {
      let from2 = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
      return new Viewport(this.heightMap.lineAt(from2, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
    viewportIsAppropriate({ from: from2, to }, bias = 0) {
      if (!this.inView)
        return true;
      let { top: top2 } = this.heightMap.lineAt(from2, QueryType.ByPos, this.heightOracle, 0, 0);
      let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
      let { visibleTop, visibleBottom } = this;
      return (from2 == 0 || top2 <= visibleTop - Math.max(10, Math.min(
        -bias,
        250
        /* VP.MaxCoverMargin */
      ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
        bias,
        250
        /* VP.MaxCoverMargin */
      ))) && (top2 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
    }
    mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty)
        return gaps;
      let mapped = [];
      for (let gap of gaps)
        if (!changes.touchesRange(gap.from, gap.to))
          mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
    ensureLineGaps(current, mayMeasure) {
      let wrapping = this.heightOracle.lineWrapping;
      let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
      if (this.defaultTextDirection != Direction.LTR && !wrapping)
        return [];
      let gaps = [];
      let addGap = (from2, to, line, structure) => {
        if (to - from2 < halfMargin)
          return;
        let sel = this.state.selection.main, avoid = [sel.from];
        if (!sel.empty)
          avoid.push(sel.to);
        for (let pos of avoid) {
          if (pos > from2 && pos < to) {
            addGap(from2, pos - 10, line, structure);
            addGap(pos + 10, to, line, structure);
            return;
          }
        }
        let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from2) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
        if (!gap) {
          if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r4) => r4.from <= to && r4.to >= to)) {
            let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
            if (lineStart > from2)
              to = lineStart;
          }
          gap = new LineGap(from2, to, this.gapSize(line, from2, to, structure));
        }
        gaps.push(gap);
      };
      for (let line of this.viewportLines) {
        if (line.length < doubleMargin)
          continue;
        let structure = lineStructure(line.from, line.to, this.stateDeco);
        if (structure.total < doubleMargin)
          continue;
        let target = this.scrollTarget ? this.scrollTarget.range.head : null;
        let viewFrom, viewTo;
        if (wrapping) {
          let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
          let top2, bot;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
            top2 = targetFrac - spaceFrac;
            bot = targetFrac + spaceFrac;
          } else {
            top2 = (this.visibleTop - line.top - marginHeight) / line.height;
            bot = (this.visibleBottom - line.top + marginHeight) / line.height;
          }
          viewFrom = findPosition(structure, top2);
          viewTo = findPosition(structure, bot);
        } else {
          let totalWidth = structure.total * this.heightOracle.charWidth;
          let marginWidth = margin * this.heightOracle.charWidth;
          let left, right;
          if (target != null) {
            let targetFrac = findFraction(structure, target);
            let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
            left = targetFrac - spaceFrac;
            right = targetFrac + spaceFrac;
          } else {
            left = (this.pixelViewport.left - marginWidth) / totalWidth;
            right = (this.pixelViewport.right + marginWidth) / totalWidth;
          }
          viewFrom = findPosition(structure, left);
          viewTo = findPosition(structure, right);
        }
        if (viewFrom > line.from)
          addGap(line.from, viewFrom, line, structure);
        if (viewTo < line.to)
          addGap(viewTo, line.to, line, structure);
      }
      return gaps;
    }
    gapSize(line, from2, to, structure) {
      let fraction = findFraction(structure, to) - findFraction(structure, from2);
      if (this.heightOracle.lineWrapping) {
        return line.height * fraction;
      } else {
        return structure.total * this.heightOracle.charWidth * fraction;
      }
    }
    updateLineGaps(gaps) {
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
      }
    }
    computeVisibleRanges() {
      let deco = this.stateDeco;
      if (this.lineGaps.length)
        deco = deco.concat(this.lineGapDeco);
      let ranges = [];
      RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span(from2, to) {
          ranges.push({ from: from2, to });
        },
        point() {
        }
      }, 20);
      let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r4, i3) => r4.from != ranges[i3].from || r4.to != ranges[i3].to);
      this.visibleRanges = ranges;
      return changed ? 4 : 0;
    }
    lineBlockAt(pos) {
      return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b4) => b4.from <= pos && b4.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
    }
    lineBlockAtHeight(height) {
      return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
    }
    scrollAnchorAt(scrollTop) {
      let block = this.lineBlockAtHeight(scrollTop + 8);
      return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
    }
    elementAtHeight(height) {
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
    }
    get docHeight() {
      return this.scaler.toDOM(this.heightMap.height);
    }
    get contentHeight() {
      return this.docHeight + this.paddingTop + this.paddingBottom;
    }
  };
  var Viewport = class {
    constructor(from2, to) {
      this.from = from2;
      this.to = to;
    }
  };
  function lineStructure(from2, to, stateDeco) {
    let ranges = [], pos = from2, total = 0;
    RangeSet.spans(stateDeco, from2, to, {
      span() {
      },
      point(from3, to2) {
        if (from3 > pos) {
          ranges.push({ from: pos, to: from3 });
          total += from3 - pos;
        }
        pos = to2;
      }
    }, 20);
    if (pos < to) {
      ranges.push({ from: pos, to });
      total += to - pos;
    }
    return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
    if (ratio <= 0)
      return ranges[0].from;
    if (ratio >= 1)
      return ranges[ranges.length - 1].to;
    let dist2 = Math.floor(total * ratio);
    for (let i3 = 0; ; i3++) {
      let { from: from2, to } = ranges[i3], size = to - from2;
      if (dist2 <= size)
        return from2 + dist2;
      dist2 -= size;
    }
  }
  function findFraction(structure, pos) {
    let counted = 0;
    for (let { from: from2, to } of structure.ranges) {
      if (pos <= to) {
        counted += pos - from2;
        break;
      }
      counted += to - from2;
    }
    return counted / structure.total;
  }
  function find(array, f3) {
    for (let val of array)
      if (f3(val))
        return val;
    return void 0;
  }
  var IdScaler = {
    toDOM(n5) {
      return n5;
    },
    fromDOM(n5) {
      return n5;
    },
    scale: 1
  };
  var BigScaler = class {
    constructor(oracle, heightMap, viewports) {
      let vpHeight = 0, base2 = 0, domBase = 0;
      this.viewports = viewports.map(({ from: from2, to }) => {
        let top2 = heightMap.lineAt(from2, QueryType.ByPos, oracle, 0, 0).top;
        let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
        vpHeight += bottom - top2;
        return { from: from2, to, top: top2, bottom, domTop: 0, domBottom: 0 };
      });
      this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
      for (let obj of this.viewports) {
        obj.domTop = domBase + (obj.top - base2) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base2 = obj.bottom;
      }
    }
    toDOM(n5) {
      for (let i3 = 0, base2 = 0, domBase = 0; ; i3++) {
        let vp = i3 < this.viewports.length ? this.viewports[i3] : null;
        if (!vp || n5 < vp.top)
          return domBase + (n5 - base2) * this.scale;
        if (n5 <= vp.bottom)
          return vp.domTop + (n5 - vp.top);
        base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
    fromDOM(n5) {
      for (let i3 = 0, base2 = 0, domBase = 0; ; i3++) {
        let vp = i3 < this.viewports.length ? this.viewports[i3] : null;
        if (!vp || n5 < vp.domTop)
          return base2 + (n5 - domBase) / this.scale;
        if (n5 <= vp.domBottom)
          return vp.top + (n5 - vp.domTop);
        base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  };
  function scaleBlock(block, scaler) {
    if (scaler.scale == 1)
      return block;
    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map((b4) => scaleBlock(b4, scaler)) : block._content);
  }
  var theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
  var darkTheme = /* @__PURE__ */ Facet.define({ combine: (values) => values.indexOf(true) > -1 });
  var baseThemeID = /* @__PURE__ */ StyleModule.newName();
  var baseLightID = /* @__PURE__ */ StyleModule.newName();
  var baseDarkID = /* @__PURE__ */ StyleModule.newName();
  var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, (m4) => {
          if (m4 == "&")
            return main;
          if (!scopes || !scopes[m4])
            throw new RangeError(`Unsupported selector: ${m4}`);
          return scopes[m4];
        }) : main + " " + sel;
      }
    });
  }
  var baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
    "&": {
      position: "relative !important",
      boxSizing: "border-box",
      "&.cm-focused": {
        // Provide a simple default outline to make sure a focused
        // editor is visually distinct. Can't leave the default behavior
        // because that will apply to the content element, which is
        // inside the scrollable container and doesn't include the
        // gutters. We also can't use an 'auto' outline, since those
        // are, for some reason, drawn behind the element content, which
        // will cause things like the active line background to cover
        // the outline (#297).
        outline: "1px dotted #212121"
      },
      display: "flex !important",
      flexDirection: "column"
    },
    ".cm-scroller": {
      display: "flex !important",
      alignItems: "flex-start !important",
      fontFamily: "monospace",
      lineHeight: 1.4,
      height: "100%",
      overflowX: "auto",
      position: "relative",
      zIndex: 0
    },
    ".cm-content": {
      margin: 0,
      flexGrow: 2,
      flexShrink: 0,
      display: "block",
      whiteSpace: "pre",
      wordWrap: "normal",
      // https://github.com/codemirror/dev/issues/456
      boxSizing: "border-box",
      minHeight: "100%",
      padding: "4px 0",
      outline: "none",
      "&[contenteditable=true]": {
        WebkitUserModify: "read-write-plaintext-only"
      }
    },
    ".cm-lineWrapping": {
      whiteSpace_fallback: "pre-wrap",
      // For IE
      whiteSpace: "break-spaces",
      wordBreak: "break-word",
      // For Safari, which doesn't support overflow-wrap: anywhere
      overflowWrap: "anywhere",
      flexShrink: 1
    },
    "&light .cm-content": { caretColor: "black" },
    "&dark .cm-content": { caretColor: "white" },
    ".cm-line": {
      display: "block",
      padding: "0 2px 0 6px"
    },
    ".cm-layer": {
      position: "absolute",
      left: 0,
      top: 0,
      contain: "size style",
      "& > *": {
        position: "absolute"
      }
    },
    "&light .cm-selectionBackground": {
      background: "#d9d9d9"
    },
    "&dark .cm-selectionBackground": {
      background: "#222"
    },
    "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#d7d4f0"
    },
    "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
      background: "#233"
    },
    ".cm-cursorLayer": {
      pointerEvents: "none"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
      animation: "steps(1) cm-blink 1.2s infinite"
    },
    // Two animations defined so that we can switch between them to
    // restart the animation without forcing another style
    // recomputation.
    "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
    "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
    ".cm-cursor, .cm-dropCursor": {
      borderLeft: "1.2px solid black",
      marginLeft: "-0.6px",
      pointerEvents: "none"
    },
    ".cm-cursor": {
      display: "none"
    },
    "&dark .cm-cursor": {
      borderLeftColor: "#444"
    },
    ".cm-dropCursor": {
      position: "absolute"
    },
    "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
      display: "block"
    },
    ".cm-iso": {
      unicodeBidi: "isolate"
    },
    ".cm-announced": {
      position: "fixed",
      top: "-10000px"
    },
    "@media print": {
      ".cm-announced": { display: "none" }
    },
    "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
    "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
    "&light .cm-specialChar": { color: "red" },
    "&dark .cm-specialChar": { color: "#f78" },
    ".cm-gutters": {
      flexShrink: 0,
      display: "flex",
      height: "100%",
      boxSizing: "border-box",
      insetInlineStart: 0,
      zIndex: 200
    },
    "&light .cm-gutters": {
      backgroundColor: "#f5f5f5",
      color: "#6c6c6c",
      borderRight: "1px solid #ddd"
    },
    "&dark .cm-gutters": {
      backgroundColor: "#333338",
      color: "#ccc"
    },
    ".cm-gutter": {
      display: "flex !important",
      // Necessary -- prevents margin collapsing
      flexDirection: "column",
      flexShrink: 0,
      boxSizing: "border-box",
      minHeight: "100%",
      overflow: "hidden"
    },
    ".cm-gutterElement": {
      boxSizing: "border-box"
    },
    ".cm-lineNumbers .cm-gutterElement": {
      padding: "0 3px 0 5px",
      minWidth: "20px",
      textAlign: "right",
      whiteSpace: "nowrap"
    },
    "&light .cm-activeLineGutter": {
      backgroundColor: "#e2f2ff"
    },
    "&dark .cm-activeLineGutter": {
      backgroundColor: "#222227"
    },
    ".cm-panels": {
      boxSizing: "border-box",
      position: "sticky",
      left: 0,
      right: 0
    },
    "&light .cm-panels": {
      backgroundColor: "#f5f5f5",
      color: "black"
    },
    "&light .cm-panels-top": {
      borderBottom: "1px solid #ddd"
    },
    "&light .cm-panels-bottom": {
      borderTop: "1px solid #ddd"
    },
    "&dark .cm-panels": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tab": {
      display: "inline-block",
      overflow: "hidden",
      verticalAlign: "bottom"
    },
    ".cm-widgetBuffer": {
      verticalAlign: "text-top",
      height: "1em",
      width: 0,
      display: "inline"
    },
    ".cm-placeholder": {
      color: "#888",
      display: "inline-block",
      verticalAlign: "top"
    },
    ".cm-highlightSpace:before": {
      content: "attr(data-display)",
      position: "absolute",
      pointerEvents: "none",
      color: "#888"
    },
    ".cm-highlightTab": {
      backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
      backgroundSize: "auto 100%",
      backgroundPosition: "right 90%",
      backgroundRepeat: "no-repeat"
    },
    ".cm-trailingSpace": {
      backgroundColor: "#ff332255"
    },
    ".cm-button": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      padding: ".2em 1em",
      borderRadius: "1px"
    },
    "&light .cm-button": {
      backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
      }
    },
    "&dark .cm-button": {
      backgroundImage: "linear-gradient(#393939, #111)",
      border: "1px solid #888",
      "&:active": {
        backgroundImage: "linear-gradient(#111, #333)"
      }
    },
    ".cm-textfield": {
      verticalAlign: "middle",
      color: "inherit",
      fontSize: "70%",
      border: "1px solid silver",
      padding: ".2em .5em"
    },
    "&light .cm-textfield": {
      backgroundColor: "white"
    },
    "&dark .cm-textfield": {
      border: "1px solid #555",
      backgroundColor: "inherit"
    }
  }, lightDarkIDs);
  var LineBreakPlaceholder = "\uFFFF";
  var DOMReader = class {
    constructor(points, state) {
      this.points = points;
      this.text = "";
      this.lineSeparator = state.facet(EditorState.lineSeparator);
    }
    append(text5) {
      this.text += text5;
    }
    lineBreak() {
      this.text += LineBreakPlaceholder;
    }
    readRange(start, end) {
      if (!start)
        return this;
      let parent = start.parentNode;
      for (let cur2 = start; ; ) {
        this.findPointBefore(parent, cur2);
        let oldLen = this.text.length;
        this.readNode(cur2);
        let next = cur2.nextSibling;
        if (next == end)
          break;
        let view = ContentView.get(cur2), nextView = ContentView.get(next);
        if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
          this.lineBreak();
        cur2 = next;
      }
      this.findPointBefore(parent, end);
      return this;
    }
    readTextNode(node2) {
      let text5 = node2.nodeValue;
      for (let point3 of this.points)
        if (point3.node == node2)
          point3.pos = this.text.length + Math.min(point3.offset, text5.length);
      for (let off = 0, re4 = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
        let nextBreak = -1, breakSize = 1, m4;
        if (this.lineSeparator) {
          nextBreak = text5.indexOf(this.lineSeparator, off);
          breakSize = this.lineSeparator.length;
        } else if (m4 = re4.exec(text5)) {
          nextBreak = m4.index;
          breakSize = m4[0].length;
        }
        this.append(text5.slice(off, nextBreak < 0 ? text5.length : nextBreak));
        if (nextBreak < 0)
          break;
        this.lineBreak();
        if (breakSize > 1) {
          for (let point3 of this.points)
            if (point3.node == node2 && point3.pos > this.text.length)
              point3.pos -= breakSize - 1;
        }
        off = nextBreak + breakSize;
      }
    }
    readNode(node2) {
      if (node2.cmIgnore)
        return;
      let view = ContentView.get(node2);
      let fromView = view && view.overrideDOMText;
      if (fromView != null) {
        this.findPointInside(node2, fromView.length);
        for (let i3 = fromView.iter(); !i3.next().done; ) {
          if (i3.lineBreak)
            this.lineBreak();
          else
            this.append(i3.value);
        }
      } else if (node2.nodeType == 3) {
        this.readTextNode(node2);
      } else if (node2.nodeName == "BR") {
        if (node2.nextSibling)
          this.lineBreak();
      } else if (node2.nodeType == 1) {
        this.readRange(node2.firstChild, null);
      }
    }
    findPointBefore(node2, next) {
      for (let point3 of this.points)
        if (point3.node == node2 && node2.childNodes[point3.offset] == next)
          point3.pos = this.text.length;
    }
    findPointInside(node2, length) {
      for (let point3 of this.points)
        if (node2.nodeType == 3 ? point3.node == node2 : node2.contains(point3.node))
          point3.pos = this.text.length + (isAtEnd(node2, point3.node, point3.offset) ? length : 0);
    }
  };
  function isAtEnd(parent, node2, offset) {
    for (; ; ) {
      if (!node2 || offset < maxOffset(node2))
        return false;
      if (node2 == parent)
        return true;
      offset = domIndex(node2) + 1;
      node2 = node2.parentNode;
    }
  }
  var DOMPoint = class {
    constructor(node2, offset) {
      this.node = node2;
      this.offset = offset;
      this.pos = -1;
    }
  };
  var DOMChange = class {
    constructor(view, start, end, typeOver) {
      this.typeOver = typeOver;
      this.bounds = null;
      this.text = "";
      let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
      if (view.state.readOnly && start > -1) {
        this.newSel = null;
      } else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
        let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
        let reader = new DOMReader(selPoints, view.state);
        reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
        this.text = reader.text;
        this.newSel = selectionFromPoints(selPoints, this.bounds.from);
      } else {
        let domSel = view.observer.selectionRange;
        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
        let vp = view.viewport;
        if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
          let from2 = Math.min(head, anchor), to = Math.max(head, anchor);
          let offFrom = vp.from - from2, offTo = vp.to - to;
          if ((offFrom == 0 || offFrom == 1 || from2 == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
            head = 0;
            anchor = view.state.doc.length;
          }
        }
        this.newSel = EditorSelection.single(anchor, head);
      }
    }
  };
  function applyDOMChange(view, domChange) {
    let change;
    let { newSel } = domChange, sel = view.state.selection.main;
    let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
    if (domChange.bounds) {
      let { from: from2, to } = domChange.bounds;
      let preferredPos = sel.from, preferredSide = null;
      if (lastKey === 8 || browser.android && domChange.text.length < to - from2) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      let diff = findDiff(view.state.doc.sliceString(from2, to, LineBreakPlaceholder), domChange.text, preferredPos - from2, preferredSide);
      if (diff) {
        if (browser.chrome && lastKey == 13 && diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
          diff.toB--;
        change = {
          from: from2 + diff.from,
          to: from2 + diff.toA,
          insert: Text2.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel)
      return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
      };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
      if (newSel && change.insert.length == 2)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: sel.from, to: sel.to, insert: Text2.of([" "]) };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
      if (newSel)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: sel.from, to: sel.to, insert: Text2.of([" "]) };
    }
    if (change) {
      if (browser.ios && view.inputState.flushIOSKey(change))
        return true;
      if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
      // after a completion when you press enter
      (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
        return true;
      let text5 = change.insert.toString();
      if (view.inputState.composing >= 0)
        view.inputState.composing++;
      let defaultTr;
      let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
      if (!view.state.facet(inputHandler).some((h3) => h3(view, change.from, change.to, text5, defaultInsert)))
        view.dispatch(defaultInsert());
      return true;
    } else if (newSel && !newSel.main.eq(sel)) {
      let scrollIntoView3 = false, userEvent = "select";
      if (view.inputState.lastSelectionTime > Date.now() - 50) {
        if (view.inputState.lastSelectionOrigin == "select")
          scrollIntoView3 = true;
        userEvent = view.inputState.lastSelectionOrigin;
      }
      view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView3, userEvent });
      return true;
    } else {
      return false;
    }
  }
  function applyDefaultInsert(view, change, newSel) {
    let tr, startState = view.state, sel = startState.selection.main;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
      let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
    } else {
      let changes = startState.changes(change);
      let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
      if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
        let replaced = view.state.sliceDoc(change.from, change.to);
        let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
        if (composition) {
          let dLen = change.insert.length - (change.to - change.from);
          compositionRange = { from: composition.from, to: composition.to - dLen };
        } else {
          compositionRange = view.state.doc.lineAt(sel.head);
        }
        let offset = sel.to - change.to, size = sel.to - sel.from;
        tr = startState.changeByRange((range) => {
          if (range.from == sel.from && range.to == sel.to)
            return { changes, range: mainSel || range.map(changes) };
          let to = range.to - offset, from2 = to - replaced.length;
          if (range.to - range.from != size || view.state.sliceDoc(from2, to) != replaced || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          range.to >= compositionRange.from && range.from <= compositionRange.to)
            return { range };
          let rangeChanges = startState.changes({ from: from2, to, insert: change.insert }), selOff = range.to - sel.to;
          return {
            changes: rangeChanges,
            range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
          };
        });
      } else {
        tr = {
          changes,
          selection: mainSel && startState.selection.replaceRange(mainSel)
        };
      }
    }
    let userEvent = "input.type";
    if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
      view.inputState.compositionPendingChange = false;
      userEvent += ".compose";
      if (view.inputState.compositionFirstChange) {
        userEvent += ".start";
        view.inputState.compositionFirstChange = false;
      }
    }
    return startState.update(tr, { userEvent, scrollIntoView: true });
  }
  function findDiff(a2, b4, preferredPos, preferredSide) {
    let minLen = Math.min(a2.length, b4.length);
    let from2 = 0;
    while (from2 < minLen && a2.charCodeAt(from2) == b4.charCodeAt(from2))
      from2++;
    if (from2 == minLen && a2.length == b4.length)
      return null;
    let toA = a2.length, toB = b4.length;
    while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b4.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      let adjust = Math.max(0, from2 - Math.min(toA, toB));
      preferredPos -= toA + adjust - from2;
    }
    if (toA < from2 && a2.length < b4.length) {
      let move = preferredPos <= from2 && preferredPos >= toA ? from2 - preferredPos : 0;
      from2 -= move;
      toB = from2 + (toB - toA);
      toA = from2;
    } else if (toB < from2) {
      let move = preferredPos <= from2 && preferredPos >= toB ? from2 - preferredPos : 0;
      from2 -= move;
      toA = from2 + (toA - toB);
      toB = from2;
    }
    return { from: from2, toA, toB };
  }
  function selectionPoints(view) {
    let result = [];
    if (view.root.activeElement != view.contentDOM)
      return result;
    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset)
        result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  function selectionFromPoints(points, base2) {
    if (points.length == 0)
      return null;
    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
  }
  var observeOptions = {
    childList: true,
    characterData: true,
    subtree: true,
    attributes: true,
    characterDataOldValue: true
  };
  var useCharData = browser.ie && browser.ie_version <= 11;
  var DOMObserver = class {
    constructor(view) {
      this.view = view;
      this.active = false;
      this.selectionRange = new DOMSelectionState();
      this.selectionChanged = false;
      this.delayedFlush = -1;
      this.resizeTimeout = -1;
      this.queue = [];
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
      this.lastChange = 0;
      this.scrollTargets = [];
      this.intersection = null;
      this.resizeScroll = null;
      this.intersecting = false;
      this.gapIntersection = null;
      this.gaps = [];
      this.printQuery = null;
      this.parentCheck = -1;
      this.dom = view.contentDOM;
      this.observer = new MutationObserver((mutations) => {
        for (let mut of mutations)
          this.queue.push(mut);
        if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m4) => m4.type == "childList" && m4.removedNodes.length || m4.type == "characterData" && m4.oldValue.length > m4.target.nodeValue.length))
          this.flushSoon();
        else
          this.flush();
      });
      if (useCharData)
        this.onCharData = (event) => {
          this.queue.push({
            target: event.target,
            type: "characterData",
            oldValue: event.prevValue
          });
          this.flushSoon();
        };
      this.onSelectionChange = this.onSelectionChange.bind(this);
      this.onResize = this.onResize.bind(this);
      this.onPrint = this.onPrint.bind(this);
      this.onScroll = this.onScroll.bind(this);
      if (window.matchMedia)
        this.printQuery = window.matchMedia("print");
      if (typeof ResizeObserver == "function") {
        this.resizeScroll = new ResizeObserver(() => {
          var _a2;
          if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
            this.onResize();
        });
        this.resizeScroll.observe(view.scrollDOM);
      }
      this.addWindowListeners(this.win = view.win);
      this.start();
      if (typeof IntersectionObserver == "function") {
        this.intersection = new IntersectionObserver((entries) => {
          if (this.parentCheck < 0)
            this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
            this.intersecting = !this.intersecting;
            if (this.intersecting != this.view.inView)
              this.onScrollChanged(document.createEvent("Event"));
          }
        }, { threshold: [0, 1e-3] });
        this.intersection.observe(this.dom);
        this.gapIntersection = new IntersectionObserver((entries) => {
          if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
            this.onScrollChanged(document.createEvent("Event"));
        }, {});
      }
      this.listenForScroll();
      this.readSelectionRange();
    }
    onScrollChanged(e3) {
      this.view.inputState.runHandlers("scroll", e3);
      if (this.intersecting)
        this.view.measure();
    }
    onScroll(e3) {
      if (this.intersecting)
        this.flush(false);
      this.onScrollChanged(e3);
    }
    onResize() {
      if (this.resizeTimeout < 0)
        this.resizeTimeout = setTimeout(() => {
          this.resizeTimeout = -1;
          this.view.requestMeasure();
        }, 50);
    }
    onPrint(event) {
      if (event.type == "change" && !event.matches)
        return;
      this.view.viewState.printing = true;
      this.view.measure();
      setTimeout(() => {
        this.view.viewState.printing = false;
        this.view.requestMeasure();
      }, 500);
    }
    updateGaps(gaps) {
      if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g5, i3) => g5 != gaps[i3]))) {
        this.gapIntersection.disconnect();
        for (let gap of gaps)
          this.gapIntersection.observe(gap);
        this.gaps = gaps;
      }
    }
    onSelectionChange(event) {
      let wasChanged = this.selectionChanged;
      if (!this.readSelectionRange() || this.delayedAndroidKey)
        return;
      let { view } = this, sel = this.selectionRange;
      if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
        return;
      let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
      if (context && context.ignoreEvent(event)) {
        if (!wasChanged)
          this.selectionChanged = false;
        return;
      }
      if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
      sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
        this.flushSoon();
      else
        this.flush(false);
    }
    readSelectionRange() {
      let { view } = this;
      let selection = getSelection2(view.root);
      if (!selection)
        return false;
      let range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
      if (!range || this.selectionRange.eq(range))
        return false;
      let local = hasSelection(this.dom, range);
      if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
        this.view.inputState.lastFocusTime = 0;
        view.docView.updateSelection();
        return false;
      }
      this.selectionRange.setRange(range);
      if (local)
        this.selectionChanged = true;
      return true;
    }
    setSelectionRange(anchor, head) {
      this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
      this.selectionChanged = false;
    }
    clearSelectionRange() {
      this.selectionRange.set(null, 0, null, 0);
    }
    listenForScroll() {
      this.parentCheck = -1;
      let i3 = 0, changed = null;
      for (let dom = this.dom; dom; ) {
        if (dom.nodeType == 1) {
          if (!changed && i3 < this.scrollTargets.length && this.scrollTargets[i3] == dom)
            i3++;
          else if (!changed)
            changed = this.scrollTargets.slice(0, i3);
          if (changed)
            changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i3 < this.scrollTargets.length && !changed)
        changed = this.scrollTargets.slice(0, i3);
      if (changed) {
        for (let dom of this.scrollTargets)
          dom.removeEventListener("scroll", this.onScroll);
        for (let dom of this.scrollTargets = changed)
          dom.addEventListener("scroll", this.onScroll);
      }
    }
    ignore(f3) {
      if (!this.active)
        return f3();
      try {
        this.stop();
        return f3();
      } finally {
        this.start();
        this.clear();
      }
    }
    start() {
      if (this.active)
        return;
      this.observer.observe(this.dom, observeOptions);
      if (useCharData)
        this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
    stop() {
      if (!this.active)
        return;
      this.active = false;
      this.observer.disconnect();
      if (useCharData)
        this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
    // Throw away any pending changes
    clear() {
      this.processRecords();
      this.queue.length = 0;
      this.selectionChanged = false;
    }
    // Chrome Android, especially in combination with GBoard, not only
    // doesn't reliably fire regular key events, but also often
    // surrounds the effect of enter or backspace with a bunch of
    // composition events that, when interrupted, cause text duplication
    // or other kinds of corruption. This hack makes the editor back off
    // from handling DOM changes for a moment when such a key is
    // detected (via beforeinput or keydown), and then tries to flush
    // them or, if that has no effect, dispatches the given key.
    delayAndroidKey(key, keyCode) {
      var _a2;
      if (!this.delayedAndroidKey) {
        let flush = () => {
          let key2 = this.delayedAndroidKey;
          if (key2) {
            this.clearDelayedAndroidKey();
            this.view.inputState.lastKeyCode = key2.keyCode;
            this.view.inputState.lastKeyTime = Date.now();
            let flushed = this.flush();
            if (!flushed && key2.force)
              dispatchKey(this.dom, key2.key, key2.keyCode);
          }
        };
        this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
      }
      if (!this.delayedAndroidKey || key == "Enter")
        this.delayedAndroidKey = {
          key,
          keyCode,
          // Only run the key handler when no changes are detected if
          // this isn't coming right after another change, in which case
          // it is probably part of a weird chain of updates, and should
          // be ignored if it returns the DOM to its previous state.
          force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
        };
    }
    clearDelayedAndroidKey() {
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
      this.delayedAndroidKey = null;
      this.flushingAndroidKey = -1;
    }
    flushSoon() {
      if (this.delayedFlush < 0)
        this.delayedFlush = this.view.win.requestAnimationFrame(() => {
          this.delayedFlush = -1;
          this.flush();
        });
    }
    forceFlush() {
      if (this.delayedFlush >= 0) {
        this.view.win.cancelAnimationFrame(this.delayedFlush);
        this.delayedFlush = -1;
      }
      this.flush();
    }
    pendingRecords() {
      for (let mut of this.observer.takeRecords())
        this.queue.push(mut);
      return this.queue;
    }
    processRecords() {
      let records = this.pendingRecords();
      if (records.length)
        this.queue = [];
      let from2 = -1, to = -1, typeOver = false;
      for (let record of records) {
        let range = this.readMutation(record);
        if (!range)
          continue;
        if (range.typeOver)
          typeOver = true;
        if (from2 == -1) {
          ({ from: from2, to } = range);
        } else {
          from2 = Math.min(range.from, from2);
          to = Math.max(range.to, to);
        }
      }
      return { from: from2, to, typeOver };
    }
    readChange() {
      let { from: from2, to, typeOver } = this.processRecords();
      let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
      if (from2 < 0 && !newSel)
        return null;
      if (from2 > -1)
        this.lastChange = Date.now();
      this.view.inputState.lastFocusTime = 0;
      this.selectionChanged = false;
      let change = new DOMChange(this.view, from2, to, typeOver);
      this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
      return change;
    }
    // Apply pending changes, if any
    flush(readSelection = true) {
      if (this.delayedFlush >= 0 || this.delayedAndroidKey)
        return false;
      if (readSelection)
        this.readSelectionRange();
      let domChange = this.readChange();
      if (!domChange) {
        this.view.requestMeasure();
        return false;
      }
      let startState = this.view.state;
      let handled = applyDOMChange(this.view, domChange);
      if (this.view.state == startState)
        this.view.update([]);
      return handled;
    }
    readMutation(rec) {
      let cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec))
        return null;
      cView.markDirty(rec.type == "attributes");
      if (rec.type == "attributes")
        cView.flags |= 4;
      if (rec.type == "childList") {
        let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else if (rec.type == "characterData") {
        return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
      } else {
        return null;
      }
    }
    setWindow(win) {
      if (win != this.win) {
        this.removeWindowListeners(this.win);
        this.win = win;
        this.addWindowListeners(this.win);
      }
    }
    addWindowListeners(win) {
      win.addEventListener("resize", this.onResize);
      if (this.printQuery)
        this.printQuery.addEventListener("change", this.onPrint);
      else
        win.addEventListener("beforeprint", this.onPrint);
      win.addEventListener("scroll", this.onScroll);
      win.document.addEventListener("selectionchange", this.onSelectionChange);
    }
    removeWindowListeners(win) {
      win.removeEventListener("scroll", this.onScroll);
      win.removeEventListener("resize", this.onResize);
      if (this.printQuery)
        this.printQuery.removeEventListener("change", this.onPrint);
      else
        win.removeEventListener("beforeprint", this.onPrint);
      win.document.removeEventListener("selectionchange", this.onSelectionChange);
    }
    destroy() {
      var _a2, _b, _c;
      this.stop();
      (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
      (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
      for (let dom of this.scrollTargets)
        dom.removeEventListener("scroll", this.onScroll);
      this.removeWindowListeners(this.win);
      clearTimeout(this.parentCheck);
      clearTimeout(this.resizeTimeout);
      this.win.cancelAnimationFrame(this.delayedFlush);
      this.win.cancelAnimationFrame(this.flushingAndroidKey);
    }
  };
  function findChild(cView, dom, dir) {
    while (dom) {
      let curView = ContentView.get(dom);
      if (curView && curView.parent == cView)
        return curView;
      let parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  function buildSelectionRangeFromRange(view, range) {
    let anchorNode = range.startContainer, anchorOffset = range.startOffset;
    let focusNode = range.endContainer, focusOffset = range.endOffset;
    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
      [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  function safariSelectionRangeHack(view, selection) {
    if (selection.getComposedRanges) {
      let range = selection.getComposedRanges(view.root)[0];
      if (range)
        return buildSelectionRangeFromRange(view, range);
    }
    let found2 = null;
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found2 = event.getTargetRanges()[0];
    }
    view.contentDOM.addEventListener("beforeinput", read, true);
    view.dom.ownerDocument.execCommand("indent");
    view.contentDOM.removeEventListener("beforeinput", read, true);
    return found2 ? buildSelectionRangeFromRange(view, found2) : null;
  }
  var EditorView = class _EditorView {
    /**
    The current editor state.
    */
    get state() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
    get viewport() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
    get visibleRanges() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
    get inView() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
    one change has been made in the current composition.
    */
    get composing() {
      return this.inputState.composing > 0;
    }
    /**
    Indicates whether the user is currently in composing state. Note
    that on some platforms, like Android, this will be the case a
    lot, since just putting the cursor on a word starts a
    composition there.
    */
    get compositionStarted() {
      return this.inputState.composing >= 0;
    }
    /**
    The document or shadow root that the view lives in.
    */
    get root() {
      return this._root;
    }
    /**
    @internal
    */
    get win() {
      return this.dom.ownerDocument.defaultView || window;
    }
    /**
    Construct a new view. You'll want to either provide a `parent`
    option, or put `view.dom` into your document after creating a
    view, so that the user can see the editor.
    */
    constructor(config2 = {}) {
      this.plugins = [];
      this.pluginMap = /* @__PURE__ */ new Map();
      this.editorAttrs = {};
      this.contentAttrs = {};
      this.bidiCache = [];
      this.destroyed = false;
      this.updateState = 2;
      this.measureScheduled = -1;
      this.measureRequests = [];
      this.contentDOM = document.createElement("div");
      this.scrollDOM = document.createElement("div");
      this.scrollDOM.tabIndex = -1;
      this.scrollDOM.className = "cm-scroller";
      this.scrollDOM.appendChild(this.contentDOM);
      this.announceDOM = document.createElement("div");
      this.announceDOM.className = "cm-announced";
      this.announceDOM.setAttribute("aria-live", "polite");
      this.dom = document.createElement("div");
      this.dom.appendChild(this.announceDOM);
      this.dom.appendChild(this.scrollDOM);
      if (config2.parent)
        config2.parent.appendChild(this.dom);
      let { dispatch } = config2;
      this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));
      this.dispatch = this.dispatch.bind(this);
      this._root = config2.root || getRoot(config2.parent) || document;
      this.viewState = new ViewState(config2.state || EditorState.create(config2));
      if (config2.scrollTo && config2.scrollTo.is(scrollIntoView))
        this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
      this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
      for (let plugin2 of this.plugins)
        plugin2.update(this);
      this.observer = new DOMObserver(this);
      this.inputState = new InputState(this);
      this.inputState.ensureHandlers(this.plugins);
      this.docView = new DocView(this);
      this.mountStyles();
      this.updateAttrs();
      this.updateState = 0;
      this.requestMeasure();
    }
    dispatch(...input) {
      let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
      this.dispatchTransactions(trs, this);
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
    update(transactions) {
      if (this.updateState != 0)
        throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      let redrawn = false, attrsChanged = false, update;
      let state = this.state;
      for (let tr of transactions) {
        if (tr.startState != state)
          throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
        state = tr.state;
      }
      if (this.destroyed) {
        this.viewState.state = state;
        return;
      }
      let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
      if (transactions.some((tr) => tr.annotation(isFocusChange))) {
        this.inputState.notifiedFocused = focus;
        focusFlag = 1;
      } else if (focus != this.inputState.notifiedFocused) {
        this.inputState.notifiedFocused = focus;
        dispatchFocus = focusChangeTransaction(state, focus);
        if (!dispatchFocus)
          focusFlag = 1;
      }
      let pendingKey = this.observer.delayedAndroidKey, domChange = null;
      if (pendingKey) {
        this.observer.clearDelayedAndroidKey();
        domChange = this.observer.readChange();
        if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
          domChange = null;
      } else {
        this.observer.clear();
      }
      if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
        return this.setState(state);
      update = ViewUpdate.create(this, state, transactions);
      update.flags |= focusFlag;
      let scrollTarget = this.viewState.scrollTarget;
      try {
        this.updateState = 2;
        for (let tr of transactions) {
          if (scrollTarget)
            scrollTarget = scrollTarget.map(tr.changes);
          if (tr.scrollIntoView) {
            let { main } = tr.state.selection;
            scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
          }
          for (let e3 of tr.effects)
            if (e3.is(scrollIntoView))
              scrollTarget = e3.value.clip(this.state);
        }
        this.viewState.update(update, scrollTarget);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules)
          this.mountStyles();
        attrsChanged = this.updateAttrs();
        this.showAnnouncements(transactions);
        this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
      } finally {
        this.updateState = 0;
      }
      if (update.startState.facet(theme) != update.state.facet(theme))
        this.viewState.mustMeasureContent = true;
      if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
        this.requestMeasure();
      if (redrawn)
        this.docViewUpdate();
      if (!update.empty)
        for (let listener of this.state.facet(updateListener)) {
          try {
            listener(update);
          } catch (e3) {
            logException(this.state, e3, "update listener");
          }
        }
      if (dispatchFocus || domChange)
        Promise.resolve().then(() => {
          if (dispatchFocus && this.state == dispatchFocus.startState)
            this.dispatch(dispatchFocus);
          if (domChange) {
            if (!applyDOMChange(this, domChange) && pendingKey.force)
              dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
          }
        });
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
    setState(newState) {
      if (this.updateState != 0)
        throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      if (this.destroyed) {
        this.viewState.state = newState;
        return;
      }
      this.updateState = 2;
      let hadFocus = this.hasFocus;
      try {
        for (let plugin2 of this.plugins)
          plugin2.destroy(this);
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
        this.pluginMap.clear();
        for (let plugin2 of this.plugins)
          plugin2.update(this);
        this.docView.destroy();
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this.plugins);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0;
      }
      if (hadFocus)
        this.focus();
      this.requestMeasure();
    }
    updatePlugins(update) {
      let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        let newPlugins = [];
        for (let spec of specs) {
          let found2 = prevSpecs.indexOf(spec);
          if (found2 < 0) {
            newPlugins.push(new PluginInstance(spec));
          } else {
            let plugin2 = this.plugins[found2];
            plugin2.mustUpdate = update;
            newPlugins.push(plugin2);
          }
        }
        for (let plugin2 of this.plugins)
          if (plugin2.mustUpdate != update)
            plugin2.destroy(this);
        this.plugins = newPlugins;
        this.pluginMap.clear();
      } else {
        for (let p6 of this.plugins)
          p6.mustUpdate = update;
      }
      for (let i3 = 0; i3 < this.plugins.length; i3++)
        this.plugins[i3].update(this);
      if (prevSpecs != specs)
        this.inputState.ensureHandlers(this.plugins);
    }
    docViewUpdate() {
      for (let plugin2 of this.plugins) {
        let val = plugin2.value;
        if (val && val.docViewUpdate) {
          try {
            val.docViewUpdate(this);
          } catch (e3) {
            logException(this.state, e3, "doc view update listener");
          }
        }
      }
    }
    /**
    @internal
    */
    measure(flush = true) {
      if (this.destroyed)
        return;
      if (this.measureScheduled > -1)
        this.win.cancelAnimationFrame(this.measureScheduled);
      if (this.observer.delayedAndroidKey) {
        this.measureScheduled = -1;
        this.requestMeasure();
        return;
      }
      this.measureScheduled = 0;
      if (flush)
        this.observer.forceFlush();
      let updated = null;
      let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
      let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
      if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
        scrollAnchorHeight = -1;
      this.viewState.scrollAnchorHeight = -1;
      try {
        for (let i3 = 0; ; i3++) {
          if (scrollAnchorHeight < 0) {
            if (isScrolledToBottom(sDOM)) {
              scrollAnchorPos = -1;
              scrollAnchorHeight = this.viewState.heightMap.height;
            } else {
              let block = this.viewState.scrollAnchorAt(scrollTop);
              scrollAnchorPos = block.from;
              scrollAnchorHeight = block.top;
            }
          }
          this.updateState = 1;
          let changed = this.viewState.measure(this);
          if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
            break;
          if (i3 > 5) {
            console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
            break;
          }
          let measuring = [];
          if (!(changed & 4))
            [this.measureRequests, measuring] = [measuring, this.measureRequests];
          let measured = measuring.map((m4) => {
            try {
              return m4.read(this);
            } catch (e3) {
              logException(this.state, e3);
              return BadMeasure;
            }
          });
          let update = ViewUpdate.create(this, this.state, []), redrawn = false;
          update.flags |= changed;
          if (!updated)
            updated = update;
          else
            updated.flags |= changed;
          this.updateState = 2;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
            this.updateAttrs();
            redrawn = this.docView.update(update);
            if (redrawn)
              this.docViewUpdate();
          }
          for (let i4 = 0; i4 < measuring.length; i4++)
            if (measured[i4] != BadMeasure) {
              try {
                let m4 = measuring[i4];
                if (m4.write)
                  m4.write(measured[i4], this);
              } catch (e3) {
                logException(this.state, e3);
              }
            }
          if (redrawn)
            this.docView.updateSelection(true);
          if (!update.viewportChanged && this.measureRequests.length == 0) {
            if (this.viewState.editorHeight) {
              if (this.viewState.scrollTarget) {
                this.docView.scrollIntoView(this.viewState.scrollTarget);
                this.viewState.scrollTarget = null;
                scrollAnchorHeight = -1;
                continue;
              } else {
                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                let diff = newAnchorHeight - scrollAnchorHeight;
                if (diff > 1 || diff < -1) {
                  scrollTop = scrollTop + diff;
                  sDOM.scrollTop = scrollTop / this.scaleY;
                  scrollAnchorHeight = -1;
                  continue;
                }
              }
            }
            break;
          }
        }
      } finally {
        this.updateState = 0;
        this.measureScheduled = -1;
      }
      if (updated && !updated.empty)
        for (let listener of this.state.facet(updateListener))
          listener(updated);
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
    get themeClasses() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
    }
    updateAttrs() {
      let editorAttrs = attrsFromFacet(this, editorAttributes, {
        class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      let contentAttrs = {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        translate: "no",
        contenteditable: !this.state.facet(editable) ? "false" : "true",
        class: "cm-content",
        style: `${browser.tabSize}: ${this.state.tabSize}`,
        role: "textbox",
        "aria-multiline": "true"
      };
      if (this.state.readOnly)
        contentAttrs["aria-readonly"] = "true";
      attrsFromFacet(this, contentAttributes, contentAttrs);
      let changed = this.observer.ignore(() => {
        let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
        let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
        return changedContent || changedEditor;
      });
      this.editorAttrs = editorAttrs;
      this.contentAttrs = contentAttrs;
      return changed;
    }
    showAnnouncements(trs) {
      let first = true;
      for (let tr of trs)
        for (let effect of tr.effects)
          if (effect.is(_EditorView.announce)) {
            if (first)
              this.announceDOM.textContent = "";
            first = false;
            let div = this.announceDOM.appendChild(document.createElement("div"));
            div.textContent = effect.value;
          }
    }
    mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      let nonce = this.state.facet(_EditorView.cspNonce);
      StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
    }
    readMeasured() {
      if (this.updateState == 2)
        throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 && this.measureScheduled > -1)
        this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
    requestMeasure(request) {
      if (this.measureScheduled < 0)
        this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
      if (request) {
        if (this.measureRequests.indexOf(request) > -1)
          return;
        if (request.key != null)
          for (let i3 = 0; i3 < this.measureRequests.length; i3++) {
            if (this.measureRequests[i3].key === request.key) {
              this.measureRequests[i3] = request;
              return;
            }
          }
        this.measureRequests.push(request);
      }
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
    plugin(plugin2) {
      let known = this.pluginMap.get(plugin2);
      if (known === void 0 || known && known.spec != plugin2)
        this.pluginMap.set(plugin2, known = this.plugins.find((p6) => p6.spec == plugin2) || null);
      return known && known.update(this).value;
    }
    /**
    The top position of the document, in screen coordinates. This
    may be negative when the editor is scrolled down. Points
    directly to the top of the first line, not above the padding.
    */
    get documentTop() {
      return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
    }
    /**
    Reports the padding above and below the document.
    */
    get documentPadding() {
      return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
    }
    /**
    If the editor is transformed with CSS, this provides the scale
    along the X axis. Otherwise, it will just be 1. Note that
    transforms other than translation and scaling are not supported.
    */
    get scaleX() {
      return this.viewState.scaleX;
    }
    /**
    Provide the CSS transformed scale along the Y axis.
    */
    get scaleY() {
      return this.viewState.scaleY;
    }
    /**
    Find the text line or block widget at the given vertical
    position (which is interpreted as relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
    */
    elementAtHeight(height) {
      this.readMeasured();
      return this.viewState.elementAtHeight(height);
    }
    /**
    Find the line block (see
    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
    height, again interpreted relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
    */
    lineBlockAtHeight(height) {
      this.readMeasured();
      return this.viewState.lineBlockAtHeight(height);
    }
    /**
    Get the extent and vertical position of all [line
    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
    are relative to the [top of the
    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
    */
    get viewportLineBlocks() {
      return this.viewState.viewportLines;
    }
    /**
    Find the line block around the given document position. A line
    block is a range delimited on both sides by either a
    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
    start/end of the document. It will usually just hold a line of
    text, but may be broken into multiple textblocks by block
    widgets.
    */
    lineBlockAt(pos) {
      return this.viewState.lineBlockAt(pos);
    }
    /**
    The editor's total content height.
    */
    get contentHeight() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. In
    bidirectional text, the line is traversed in visual order, using
    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    When the start position was the last one on the line, the
    returned position will be across the line break. If there is no
    further line, the original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
    moveByChar(start, forward, by) {
      return skipAtoms(this, start, moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
    moveByGroup(start, forward) {
      return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
    }
    /**
    Get the cursor position visually at the start or end of a line.
    Note that this may differ from the _logical_ position at its
    start or end (which is simply at `line.from`/`line.to`) if text
    at the start or end goes against the line's base text direction.
    */
    visualLineSide(line, end) {
      let order2 = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
      let span = order2[end ? order2.length - 1 : 0];
      return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
    moveToLineBoundary(start, forward, includeWrap = true) {
      return moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
    moveVertically(start, forward, distance) {
      return skipAtoms(this, start, moveVertically(this, start, forward, distance));
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    
    Note that for positions that aren't currently in
    `visibleRanges`, the resulting DOM position isn't necessarily
    meaningful (it may just point before or after a placeholder
    element).
    */
    domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
    posAtDOM(node2, offset = 0) {
      return this.docView.posFromDOM(node2, offset);
    }
    posAtCoords(coords, precise = true) {
      this.readMeasured();
      return posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
    coordsAtPos(pos, side = 1) {
      this.readMeasured();
      let rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right)
        return rect;
      let line = this.state.doc.lineAt(pos), order2 = this.bidiSpans(line);
      let span = order2[BidiSpan.find(order2, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    Return the rectangle around a given character. If `pos` does not
    point in front of a character that is in the viewport and
    rendered (i.e. not replaced, not a line break), this will return
    null. For space characters that are a line wrap point, this will
    return the position before the line break.
    */
    coordsForChar(pos) {
      this.readMeasured();
      return this.docView.coordsForChar(pos);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
    get defaultCharacterWidth() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
    get defaultLineHeight() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor's content element.
    */
    get textDirection() {
      return this.viewState.defaultTextDirection;
    }
    /**
    Find the text direction of the block at the given position, as
    assigned by CSS. If
    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
    isn't enabled, or the given position is outside of the viewport,
    this will always return the same as
    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
    this may trigger a DOM layout.
    */
    textDirectionAt(pos) {
      let perLine = this.state.facet(perLineTextDirection);
      if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
        return this.textDirection;
      this.readMeasured();
      return this.docView.textDirectionAt(pos);
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
    get lineWrapping() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
    bidiSpans(line) {
      if (line.length > MaxBidiLine)
        return trivialOrder(line.length);
      let dir = this.textDirectionAt(line.from), isolates;
      for (let entry of this.bidiCache) {
        if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
          return entry.order;
      }
      if (!isolates)
        isolates = getIsolatedRanges(this, line);
      let order2 = computeOrder(line.text, dir, isolates);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order2));
      return order2;
    }
    /**
    Check whether the editor has focus.
    */
    get hasFocus() {
      var _a2;
      return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
    focus() {
      this.observer.ignore(() => {
        focusPreventScroll(this.contentDOM);
        this.docView.updateSelection();
      });
    }
    /**
    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
    necessary when moving the editor's existing DOM to a new window or shadow root.
    */
    setRoot(root2) {
      if (this._root != root2) {
        this._root = root2;
        this.observer.setWindow((root2.nodeType == 9 ? root2 : root2.ownerDocument).defaultView || window);
        this.mountStyles();
      }
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
    destroy() {
      for (let plugin2 of this.plugins)
        plugin2.destroy(this);
      this.plugins = [];
      this.inputState.destroy();
      this.docView.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1)
        this.win.cancelAnimationFrame(this.measureScheduled);
      this.destroyed = true;
    }
    /**
    Returns an effect that can be
    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
    cause it to scroll the given position or range into view.
    */
    static scrollIntoView(pos, options = {}) {
      return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
    }
    /**
    Return an effect that resets the editor to its current (at the
    time this method was called) scroll position. Note that this
    only affects the editor's own scrollable element, not parents.
    See also
    [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
    
    The effect should be used with a document identical to the one
    it was created for. Failing to do so is not an error, but may
    not scroll to the expected position. You can
    [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
    */
    scrollSnapshot() {
      let { scrollTop, scrollLeft } = this.scrollDOM;
      let ref = this.viewState.scrollAnchorAt(scrollTop);
      return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
    }
    /**
    Returns an extension that can be used to add DOM event handlers.
    The value should be an object mapping event names to handler
    functions. For any given event, such functions are ordered by
    extension precedence, and the first handler to return true will
    be assumed to have handled that event, and no other handlers or
    built-in behavior will be activated for it. These are registered
    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
    for `scroll` handlers, which will be called any time the
    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
    its parent nodes is scrolled.
    */
    static domEventHandlers(handlers3) {
      return ViewPlugin.define(() => ({}), { eventHandlers: handlers3 });
    }
    /**
    Create an extension that registers DOM event observers. Contrary
    to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
    observers can't be prevented from running by a higher-precedence
    handler returning true. They also don't prevent other handlers
    and observers from running when they return true, and should not
    call `preventDefault`.
    */
    static domEventObservers(observers2) {
      return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
    static theme(spec, options) {
      let prefix = StyleModule.newName();
      let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
      if (options && options.dark)
        result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
    static baseTheme(spec) {
      return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
    /**
    Retrieve an editor view instance from the view's DOM
    representation.
    */
    static findFromDOM(dom) {
      var _a2;
      let content4 = dom.querySelector(".cm-content");
      let cView = content4 && ContentView.get(content4) || ContentView.get(dom);
      return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
    }
  };
  EditorView.styleModule = styleModule;
  EditorView.inputHandler = inputHandler;
  EditorView.scrollHandler = scrollHandler;
  EditorView.focusChangeEffect = focusChangeEffect;
  EditorView.perLineTextDirection = perLineTextDirection;
  EditorView.exceptionSink = exceptionSink;
  EditorView.updateListener = updateListener;
  EditorView.editable = editable;
  EditorView.mouseSelectionStyle = mouseSelectionStyle;
  EditorView.dragMovesSelection = dragMovesSelection$1;
  EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
  EditorView.decorations = decorations;
  EditorView.outerDecorations = outerDecorations;
  EditorView.atomicRanges = atomicRanges;
  EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
  EditorView.scrollMargins = scrollMargins;
  EditorView.darkTheme = darkTheme;
  EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : "" });
  EditorView.contentAttributes = contentAttributes;
  EditorView.editorAttributes = editorAttributes;
  EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
  EditorView.announce = /* @__PURE__ */ StateEffect.define();
  var MaxBidiLine = 4096;
  var BadMeasure = {};
  var CachedOrder = class _CachedOrder {
    constructor(from2, to, dir, isolates, fresh, order2) {
      this.from = from2;
      this.to = to;
      this.dir = dir;
      this.isolates = isolates;
      this.fresh = fresh;
      this.order = order2;
    }
    static update(cache2, changes) {
      if (changes.empty && !cache2.some((c5) => c5.fresh))
        return cache2;
      let result = [], lastDir = cache2.length ? cache2[cache2.length - 1].dir : Direction.LTR;
      for (let i3 = Math.max(0, cache2.length - 10); i3 < cache2.length; i3++) {
        let entry = cache2[i3];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
          result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
      }
      return result;
    }
  };
  function attrsFromFacet(view, facet, base2) {
    for (let sources = view.state.facet(facet), i3 = sources.length - 1; i3 >= 0; i3--) {
      let source = sources[i3], value = typeof source == "function" ? source(view) : source;
      if (value)
        combineAttrs(value, base2);
    }
    return base2;
  }
  var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
  function normalizeKeyName(name2, platform) {
    const parts = name2.split(/-(?!$)/);
    let result = parts[parts.length - 1];
    if (result == "Space")
      result = " ";
    let alt, ctrl, shift2, meta2;
    for (let i3 = 0; i3 < parts.length - 1; ++i3) {
      const mod = parts[i3];
      if (/^(cmd|meta|m)$/i.test(mod))
        meta2 = true;
      else if (/^a(lt)?$/i.test(mod))
        alt = true;
      else if (/^(c|ctrl|control)$/i.test(mod))
        ctrl = true;
      else if (/^s(hift)?$/i.test(mod))
        shift2 = true;
      else if (/^mod$/i.test(mod)) {
        if (platform == "mac")
          meta2 = true;
        else
          ctrl = true;
      } else
        throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt)
      result = "Alt-" + result;
    if (ctrl)
      result = "Ctrl-" + result;
    if (meta2)
      result = "Meta-" + result;
    if (shift2)
      result = "Shift-" + result;
    return result;
  }
  function modifiers(name2, event, shift2) {
    if (event.altKey)
      name2 = "Alt-" + name2;
    if (event.ctrlKey)
      name2 = "Ctrl-" + name2;
    if (event.metaKey)
      name2 = "Meta-" + name2;
    if (shift2 !== false && event.shiftKey)
      name2 = "Shift-" + name2;
    return name2;
  }
  var handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
    keydown(event, view) {
      return runHandlers(getKeymap(view.state), event, view, "editor");
    }
  }));
  var keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
  var Keymaps = /* @__PURE__ */ new WeakMap();
  function getKeymap(state) {
    let bindings = state.facet(keymap);
    let map6 = Keymaps.get(bindings);
    if (!map6)
      Keymaps.set(bindings, map6 = buildKeymap(bindings.reduce((a2, b4) => a2.concat(b4), [])));
    return map6;
  }
  function runScopeHandlers(view, event, scope) {
    return runHandlers(getKeymap(view.state), event, view, scope);
  }
  var storedPrefix = null;
  var PrefixTimeout = 4e3;
  function buildKeymap(bindings, platform = currentPlatform) {
    let bound = /* @__PURE__ */ Object.create(null);
    let isPrefix = /* @__PURE__ */ Object.create(null);
    let checkPrefix = (name2, is2) => {
      let current = isPrefix[name2];
      if (current == null)
        isPrefix[name2] = is2;
      else if (current != is2)
        throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
    };
    let add2 = (scope, key, command2, preventDefault, stopPropagation) => {
      var _a2, _b;
      let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
      let parts = key.split(/ (?!$)/).map((k4) => normalizeKeyName(k4, platform));
      for (let i3 = 1; i3 < parts.length; i3++) {
        let prefix = parts.slice(0, i3).join(" ");
        checkPrefix(prefix, true);
        if (!scopeObj[prefix])
          scopeObj[prefix] = {
            preventDefault: true,
            stopPropagation: false,
            run: [(view) => {
              let ourObj = storedPrefix = { view, prefix, scope };
              setTimeout(() => {
                if (storedPrefix == ourObj)
                  storedPrefix = null;
              }, PrefixTimeout);
              return true;
            }]
          };
      }
      let full = parts.join(" ");
      checkPrefix(full, false);
      let binding = scopeObj[full] || (scopeObj[full] = {
        preventDefault: false,
        stopPropagation: false,
        run: ((_b = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
      });
      if (command2)
        binding.run.push(command2);
      if (preventDefault)
        binding.preventDefault = true;
      if (stopPropagation)
        binding.stopPropagation = true;
    };
    for (let b4 of bindings) {
      let scopes = b4.scope ? b4.scope.split(" ") : ["editor"];
      if (b4.any)
        for (let scope of scopes) {
          let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
          if (!scopeObj._any)
            scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
          for (let key in scopeObj)
            scopeObj[key].run.push(b4.any);
        }
      let name2 = b4[platform] || b4.key;
      if (!name2)
        continue;
      for (let scope of scopes) {
        add2(scope, name2, b4.run, b4.preventDefault, b4.stopPropagation);
        if (b4.shift)
          add2(scope, "Shift-" + name2, b4.shift, b4.preventDefault, b4.stopPropagation);
      }
    }
    return bound;
  }
  function runHandlers(map6, event, view, scope) {
    let name2 = keyName(event);
    let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
    let prefix = "", handled = false, prevented = false, stopPropagation = false;
    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
      prefix = storedPrefix.prefix + " ";
      if (modifierCodes.indexOf(event.keyCode) < 0) {
        prevented = true;
        storedPrefix = null;
      }
    }
    let ran = /* @__PURE__ */ new Set();
    let runFor = (binding) => {
      if (binding) {
        for (let cmd2 of binding.run)
          if (!ran.has(cmd2)) {
            ran.add(cmd2);
            if (cmd2(view, event)) {
              if (binding.stopPropagation)
                stopPropagation = true;
              return true;
            }
          }
        if (binding.preventDefault) {
          if (binding.stopPropagation)
            stopPropagation = true;
          prevented = true;
        }
      }
      return false;
    };
    let scopeObj = map6[scope], baseName, shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)])) {
        handled = true;
      } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
      !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
        if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
          handled = true;
        } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
          handled = true;
        }
      } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name2, event, true)])) {
        handled = true;
      }
      if (!handled && runFor(scopeObj._any))
        handled = true;
    }
    if (prevented)
      handled = true;
    if (handled && stopPropagation)
      event.stopPropagation();
    return handled;
  }
  var RectangleMarker = class _RectangleMarker {
    /**
    Create a marker with the given class and dimensions. If `width`
    is null, the DOM element will get no width style.
    */
    constructor(className, left, top2, width, height) {
      this.className = className;
      this.left = left;
      this.top = top2;
      this.width = width;
      this.height = height;
    }
    draw() {
      let elt = document.createElement("div");
      elt.className = this.className;
      this.adjust(elt);
      return elt;
    }
    update(elt, prev) {
      if (prev.className != this.className)
        return false;
      this.adjust(elt);
      return true;
    }
    adjust(elt) {
      elt.style.left = this.left + "px";
      elt.style.top = this.top + "px";
      if (this.width != null)
        elt.style.width = this.width + "px";
      elt.style.height = this.height + "px";
    }
    eq(p6) {
      return this.left == p6.left && this.top == p6.top && this.width == p6.width && this.height == p6.height && this.className == p6.className;
    }
    /**
    Create a set of rectangles for the given selection range,
    assigning them theclass`className`. Will create a single
    rectangle for empty ranges, and a set of selection-style
    rectangles covering the range's content (in a bidi-aware
    way) for non-empty ones.
    */
    static forRange(view, className, range) {
      if (range.empty) {
        let pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (!pos)
          return [];
        let base2 = getBase(view);
        return [new _RectangleMarker(className, pos.left - base2.left, pos.top - base2.top, null, pos.bottom - pos.top)];
      } else {
        return rectanglesForRange(view, className, range);
      }
    }
  };
  function getBase(view) {
    let rect = view.scrollDOM.getBoundingClientRect();
    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
    return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
  }
  function wrappedLine(view, pos, inside2) {
    let range = EditorSelection.cursor(pos);
    return {
      from: Math.max(inside2.from, view.moveToLineBoundary(range, false, true).from),
      to: Math.min(inside2.to, view.moveToLineBoundary(range, true, true).from),
      type: BlockType.Text
    };
  }
  function rectanglesForRange(view, className, range) {
    if (range.to <= view.viewport.from || range.from >= view.viewport.to)
      return [];
    let from2 = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
    let ltr = view.textDirection == Direction.LTR;
    let content4 = view.contentDOM, contentRect = content4.getBoundingClientRect(), base2 = getBase(view);
    let lineElt = content4.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
    let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
    let startBlock = blockAt(view, from2), endBlock = blockAt(view, to);
    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
      visualStart = wrappedLine(view, from2, visualStart);
    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
      visualEnd = wrappedLine(view, to, visualEnd);
    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
      return pieces(drawForLine(range.from, range.to, visualStart));
    } else {
      let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
      let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
      let between2 = [];
      if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view.defaultLineHeight / 2 < bottom.top)
        between2.push(piece(leftSide, top2.bottom, rightSide, bottom.top));
      else if (top2.bottom < bottom.top && view.elementAtHeight((top2.bottom + bottom.top) / 2).type == BlockType.Text)
        top2.bottom = bottom.top = (top2.bottom + bottom.top) / 2;
      return pieces(top2).concat(between2).concat(pieces(bottom));
    }
    function piece(left, top2, right, bottom) {
      return new RectangleMarker(
        className,
        left - base2.left,
        top2 - base2.top - 0.01,
        right - left,
        bottom - top2 + 0.01
        /* C.Epsilon */
      );
    }
    function pieces({ top: top2, bottom, horizontal }) {
      let pieces2 = [];
      for (let i3 = 0; i3 < horizontal.length; i3 += 2)
        pieces2.push(piece(horizontal[i3], top2, horizontal[i3 + 1], bottom));
      return pieces2;
    }
    function drawForLine(from3, to2, line) {
      let top2 = 1e9, bottom = -1e9, horizontal = [];
      function addSpan(from4, fromOpen, to3, toOpen, dir) {
        let fromCoords = view.coordsAtPos(from4, from4 == line.to ? -2 : 2);
        let toCoords = view.coordsAtPos(to3, to3 == line.from ? 2 : -2);
        if (!fromCoords || !toCoords)
          return;
        top2 = Math.min(fromCoords.top, toCoords.top, top2);
        bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
        if (dir == Direction.LTR)
          horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
        else
          horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
      }
      let start = from3 !== null && from3 !== void 0 ? from3 : line.from, end = to2 !== null && to2 !== void 0 ? to2 : line.to;
      for (let r4 of view.visibleRanges)
        if (r4.to > start && r4.from < end) {
          for (let pos = Math.max(r4.from, start), endPos = Math.min(r4.to, end); ; ) {
            let docLine = view.state.doc.lineAt(pos);
            for (let span of view.bidiSpans(docLine)) {
              let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
              if (spanFrom >= endPos)
                break;
              if (spanTo > pos)
                addSpan(Math.max(spanFrom, pos), from3 == null && spanFrom <= start, Math.min(spanTo, endPos), to2 == null && spanTo >= end, span.dir);
            }
            pos = docLine.to + 1;
            if (pos >= endPos)
              break;
          }
        }
      if (horizontal.length == 0)
        addSpan(start, from3 == null, end, to2 == null, view.textDirection);
      return { top: top2, bottom, horizontal };
    }
    function drawForWidget(block, top2) {
      let y4 = contentRect.top + (top2 ? block.top : block.bottom);
      return { top: y4, bottom: y4, horizontal: [] };
    }
  }
  function sameMarker(a2, b4) {
    return a2.constructor == b4.constructor && a2.eq(b4);
  }
  var LayerView = class {
    constructor(view, layer2) {
      this.view = view;
      this.layer = layer2;
      this.drawn = [];
      this.scaleX = 1;
      this.scaleY = 1;
      this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
      this.dom = view.scrollDOM.appendChild(document.createElement("div"));
      this.dom.classList.add("cm-layer");
      if (layer2.above)
        this.dom.classList.add("cm-layer-above");
      if (layer2.class)
        this.dom.classList.add(layer2.class);
      this.scale();
      this.dom.setAttribute("aria-hidden", "true");
      this.setOrder(view.state);
      view.requestMeasure(this.measureReq);
      if (layer2.mount)
        layer2.mount(this.dom, view);
    }
    update(update) {
      if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
        this.setOrder(update.state);
      if (this.layer.update(update, this.dom) || update.geometryChanged) {
        this.scale();
        update.view.requestMeasure(this.measureReq);
      }
    }
    docViewUpdate(view) {
      if (this.layer.updateOnDocViewUpdate !== false)
        view.requestMeasure(this.measureReq);
    }
    setOrder(state) {
      let pos = 0, order2 = state.facet(layerOrder);
      while (pos < order2.length && order2[pos] != this.layer)
        pos++;
      this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
    }
    measure() {
      return this.layer.markers(this.view);
    }
    scale() {
      let { scaleX, scaleY } = this.view;
      if (scaleX != this.scaleX || scaleY != this.scaleY) {
        this.scaleX = scaleX;
        this.scaleY = scaleY;
        this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
      }
    }
    draw(markers) {
      if (markers.length != this.drawn.length || markers.some((p6, i3) => !sameMarker(p6, this.drawn[i3]))) {
        let old = this.dom.firstChild, oldI = 0;
        for (let marker of markers) {
          if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
            old = old.nextSibling;
            oldI++;
          } else {
            this.dom.insertBefore(marker.draw(), old);
          }
        }
        while (old) {
          let next = old.nextSibling;
          old.remove();
          old = next;
        }
        this.drawn = markers;
      }
    }
    destroy() {
      if (this.layer.destroy)
        this.layer.destroy(this.dom, this.view);
      this.dom.remove();
    }
  };
  var layerOrder = /* @__PURE__ */ Facet.define();
  function layer(config2) {
    return [
      ViewPlugin.define((v4) => new LayerView(v4, config2)),
      layerOrder.of(config2)
    ];
  }
  var CanHidePrimary = !browser.ios;
  var selectionConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        cursorBlinkRate: 1200,
        drawRangeCursor: true
      }, {
        cursorBlinkRate: (a2, b4) => Math.min(a2, b4),
        drawRangeCursor: (a2, b4) => a2 || b4
      });
    }
  });
  function drawSelection(config2 = {}) {
    return [
      selectionConfig.of(config2),
      cursorLayer,
      selectionLayer,
      hideNativeSelection,
      nativeSelectionHidden.of(true)
    ];
  }
  function getDrawSelectionConfig(state) {
    return state.facet(selectionConfig);
  }
  function configChanged(update) {
    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
  }
  var cursorLayer = /* @__PURE__ */ layer({
    above: true,
    markers(view) {
      let { state } = view, conf = state.facet(selectionConfig);
      let cursors = [];
      for (let r4 of state.selection.ranges) {
        let prim = r4 == state.selection.main;
        if (r4.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
          let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
          let cursor = r4.empty ? r4 : EditorSelection.cursor(r4.head, r4.head > r4.anchor ? -1 : 1);
          for (let piece of RectangleMarker.forRange(view, className, cursor))
            cursors.push(piece);
        }
      }
      return cursors;
    },
    update(update, dom) {
      if (update.transactions.some((tr) => tr.selection))
        dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
      let confChange = configChanged(update);
      if (confChange)
        setBlinkRate(update.state, dom);
      return update.docChanged || update.selectionSet || confChange;
    },
    mount(dom, view) {
      setBlinkRate(view.state, dom);
    },
    class: "cm-cursorLayer"
  });
  function setBlinkRate(state, dom) {
    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
  }
  var selectionLayer = /* @__PURE__ */ layer({
    above: false,
    markers(view) {
      return view.state.selection.ranges.map((r4) => r4.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r4)).reduce((a2, b4) => a2.concat(b4));
    },
    update(update, dom) {
      return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
    },
    class: "cm-selectionLayer"
  });
  var themeSpec = {
    ".cm-line": {
      "& ::selection": { backgroundColor: "transparent !important" },
      "&::selection": { backgroundColor: "transparent !important" }
    }
  };
  if (CanHidePrimary) {
    themeSpec[".cm-line"].caretColor = "transparent !important";
    themeSpec[".cm-content"] = { caretColor: "transparent !important" };
  }
  var hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme(themeSpec));
  var setDropCursorPos = /* @__PURE__ */ StateEffect.define({
    map(pos, mapping) {
      return pos == null ? null : mapping.mapPos(pos);
    }
  });
  var dropCursorPos = /* @__PURE__ */ StateField.define({
    create() {
      return null;
    },
    update(pos, tr) {
      if (pos != null)
        pos = tr.changes.mapPos(pos);
      return tr.effects.reduce((pos2, e3) => e3.is(setDropCursorPos) ? e3.value : pos2, pos);
    }
  });
  var drawDropCursor = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.cursor = null;
      this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
    }
    update(update) {
      var _a2;
      let cursorPos = update.state.field(dropCursorPos);
      if (cursorPos == null) {
        if (this.cursor != null) {
          (_a2 = this.cursor) === null || _a2 === void 0 ? void 0 : _a2.remove();
          this.cursor = null;
        }
      } else {
        if (!this.cursor) {
          this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
          this.cursor.className = "cm-dropCursor";
        }
        if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
          this.view.requestMeasure(this.measureReq);
      }
    }
    readPos() {
      let { view } = this;
      let pos = view.state.field(dropCursorPos);
      let rect = pos != null && view.coordsAtPos(pos);
      if (!rect)
        return null;
      let outer = view.scrollDOM.getBoundingClientRect();
      return {
        left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
        top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
        height: rect.bottom - rect.top
      };
    }
    drawCursor(pos) {
      if (this.cursor) {
        let { scaleX, scaleY } = this.view;
        if (pos) {
          this.cursor.style.left = pos.left / scaleX + "px";
          this.cursor.style.top = pos.top / scaleY + "px";
          this.cursor.style.height = pos.height / scaleY + "px";
        } else {
          this.cursor.style.left = "-100000px";
        }
      }
    }
    destroy() {
      if (this.cursor)
        this.cursor.remove();
    }
    setDropPos(pos) {
      if (this.view.state.field(dropCursorPos) != pos)
        this.view.dispatch({ effects: setDropCursorPos.of(pos) });
    }
  }, {
    eventObservers: {
      dragover(event) {
        this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
      },
      dragleave(event) {
        if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
          this.setDropPos(null);
      },
      dragend() {
        this.setDropPos(null);
      },
      drop() {
        this.setDropPos(null);
      }
    }
  });
  function dropCursor() {
    return [dropCursorPos, drawDropCursor];
  }
  function iterMatches(doc5, re4, from2, to, f3) {
    re4.lastIndex = 0;
    for (let cursor = doc5.iterRange(from2, to), pos = from2, m4; !cursor.next().done; pos += cursor.value.length) {
      if (!cursor.lineBreak)
        while (m4 = re4.exec(cursor.value))
          f3(pos + m4.index, m4);
    }
  }
  function matchRanges(view, maxLength) {
    let visible = view.visibleRanges;
    if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
      return visible;
    let result = [];
    for (let { from: from2, to } of visible) {
      from2 = Math.max(view.state.doc.lineAt(from2).from, from2 - maxLength);
      to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
      if (result.length && result[result.length - 1].to >= from2)
        result[result.length - 1].to = to;
      else
        result.push({ from: from2, to });
    }
    return result;
  }
  var MatchDecorator = class {
    /**
    Create a decorator.
    */
    constructor(config2) {
      const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
      if (!regexp.global)
        throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
      this.regexp = regexp;
      if (decorate) {
        this.addMatch = (match, view, from2, add2) => decorate(add2, from2, from2 + match[0].length, match, view);
      } else if (typeof decoration == "function") {
        this.addMatch = (match, view, from2, add2) => {
          let deco = decoration(match, view, from2);
          if (deco)
            add2(from2, from2 + match[0].length, deco);
        };
      } else if (decoration) {
        this.addMatch = (match, _view, from2, add2) => add2(from2, from2 + match[0].length, decoration);
      } else {
        throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
      }
      this.boundary = boundary;
      this.maxLength = maxLength;
    }
    /**
    Compute the full set of decorations for matches in the given
    view's viewport. You'll want to call this when initializing your
    plugin.
    */
    createDeco(view) {
      let build = new RangeSetBuilder(), add2 = build.add.bind(build);
      for (let { from: from2, to } of matchRanges(view, this.maxLength))
        iterMatches(view.state.doc, this.regexp, from2, to, (from3, m4) => this.addMatch(m4, view, from3, add2));
      return build.finish();
    }
    /**
    Update a set of decorations for a view update. `deco` _must_ be
    the set of decorations produced by _this_ `MatchDecorator` for
    the view state before the update.
    */
    updateDeco(update, deco) {
      let changeFrom = 1e9, changeTo = -1;
      if (update.docChanged)
        update.changes.iterChanges((_f, _t2, from2, to) => {
          if (to > update.view.viewport.from && from2 < update.view.viewport.to) {
            changeFrom = Math.min(from2, changeFrom);
            changeTo = Math.max(to, changeTo);
          }
        });
      if (update.viewportChanged || changeTo - changeFrom > 1e3)
        return this.createDeco(update.view);
      if (changeTo > -1)
        return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
      return deco;
    }
    updateRange(view, deco, updateFrom, updateTo) {
      for (let r4 of view.visibleRanges) {
        let from2 = Math.max(r4.from, updateFrom), to = Math.min(r4.to, updateTo);
        if (to > from2) {
          let fromLine = view.state.doc.lineAt(from2), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
          let start = Math.max(r4.from, fromLine.from), end = Math.min(r4.to, toLine.to);
          if (this.boundary) {
            for (; from2 > fromLine.from; from2--)
              if (this.boundary.test(fromLine.text[from2 - 1 - fromLine.from])) {
                start = from2;
                break;
              }
            for (; to < toLine.to; to++)
              if (this.boundary.test(toLine.text[to - toLine.from])) {
                end = to;
                break;
              }
          }
          let ranges = [], m4;
          let add2 = (from3, to2, deco2) => ranges.push(deco2.range(from3, to2));
          if (fromLine == toLine) {
            this.regexp.lastIndex = start - fromLine.from;
            while ((m4 = this.regexp.exec(fromLine.text)) && m4.index < end - fromLine.from)
              this.addMatch(m4, view, m4.index + fromLine.from, add2);
          } else {
            iterMatches(view.state.doc, this.regexp, start, end, (from3, m5) => this.addMatch(m5, view, from3, add2));
          }
          deco = deco.update({ filterFrom: start, filterTo: end, filter: (from3, to2) => from3 < start || to2 > end, add: ranges });
        }
      }
      return deco;
    }
  };
  var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
  var Specials = /* @__PURE__ */ new RegExp("[\0-\b\n-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
  var Names = {
    0: "null",
    7: "bell",
    8: "backspace",
    10: "newline",
    11: "vertical tab",
    13: "carriage return",
    27: "escape",
    8203: "zero width space",
    8204: "zero width non-joiner",
    8205: "zero width joiner",
    8206: "left-to-right mark",
    8207: "right-to-left mark",
    8232: "line separator",
    8237: "left-to-right override",
    8238: "right-to-left override",
    8294: "left-to-right isolate",
    8295: "right-to-left isolate",
    8297: "pop directional isolate",
    8233: "paragraph separator",
    65279: "zero width no-break space",
    65532: "object replacement"
  };
  var _supportsTabSize = null;
  function supportsTabSize() {
    var _a2;
    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
      let styles = document.body.style;
      _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
    }
    return _supportsTabSize || false;
  }
  var specialCharConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      let config2 = combineConfig(configs, {
        render: null,
        specialChars: Specials,
        addSpecialChars: null
      });
      if (config2.replaceTabs = !supportsTabSize())
        config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
      if (config2.addSpecialChars)
        config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
      return config2;
    }
  });
  function highlightSpecialChars(config2 = {}) {
    return [specialCharConfig.of(config2), specialCharPlugin()];
  }
  var _plugin = null;
  function specialCharPlugin() {
    return _plugin || (_plugin = ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.decorations = Decoration.none;
        this.decorationCache = /* @__PURE__ */ Object.create(null);
        this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
        this.decorations = this.decorator.createDeco(view);
      }
      makeDecorator(conf) {
        return new MatchDecorator({
          regexp: conf.specialChars,
          decoration: (m4, view, pos) => {
            let { doc: doc5 } = view.state;
            let code3 = codePointAt(m4[0], 0);
            if (code3 == 9) {
              let line = doc5.lineAt(pos);
              let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
              return Decoration.replace({
                widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
              });
            }
            return this.decorationCache[code3] || (this.decorationCache[code3] = Decoration.replace({ widget: new SpecialCharWidget(conf, code3) }));
          },
          boundary: conf.replaceTabs ? void 0 : /[^]/
        });
      }
      update(update) {
        let conf = update.state.facet(specialCharConfig);
        if (update.startState.facet(specialCharConfig) != conf) {
          this.decorator = this.makeDecorator(conf);
          this.decorations = this.decorator.createDeco(update.view);
        } else {
          this.decorations = this.decorator.updateDeco(update, this.decorations);
        }
      }
    }, {
      decorations: (v4) => v4.decorations
    }));
  }
  var DefaultPlaceholder = "\u2022";
  function placeholder$1(code3) {
    if (code3 >= 32)
      return DefaultPlaceholder;
    if (code3 == 10)
      return "\u2424";
    return String.fromCharCode(9216 + code3);
  }
  var SpecialCharWidget = class extends WidgetType {
    constructor(options, code3) {
      super();
      this.options = options;
      this.code = code3;
    }
    eq(other) {
      return other.code == this.code;
    }
    toDOM(view) {
      let ph = placeholder$1(this.code);
      let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
      let custom = this.options.render && this.options.render(this.code, desc, ph);
      if (custom)
        return custom;
      let span = document.createElement("span");
      span.textContent = ph;
      span.title = desc;
      span.setAttribute("aria-label", desc);
      span.className = "cm-specialChar";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  };
  var TabWidget = class extends WidgetType {
    constructor(width) {
      super();
      this.width = width;
    }
    eq(other) {
      return other.width == this.width;
    }
    toDOM() {
      let span = document.createElement("span");
      span.textContent = "	";
      span.className = "cm-tab";
      span.style.width = this.width + "px";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  };
  var plugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor() {
      this.height = 1e3;
      this.attrs = { style: "padding-bottom: 1000px" };
    }
    update(update) {
      let { view } = update;
      let height = view.viewState.editorHeight - view.defaultLineHeight - view.documentPadding.top - 0.5;
      if (height >= 0 && height != this.height) {
        this.height = height;
        this.attrs = { style: `padding-bottom: ${height}px` };
      }
    }
  });
  function scrollPastEnd() {
    return [plugin, contentAttributes.of((view) => {
      var _a2;
      return ((_a2 = view.plugin(plugin)) === null || _a2 === void 0 ? void 0 : _a2.attrs) || null;
    })];
  }
  function highlightActiveLine() {
    return activeLineHighlighter;
  }
  var lineDeco = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
  var activeLineHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.getDeco(view);
    }
    update(update) {
      if (update.docChanged || update.selectionSet)
        this.decorations = this.getDeco(update.view);
    }
    getDeco(view) {
      let lastLineStart = -1, deco = [];
      for (let r4 of view.state.selection.ranges) {
        let line = view.lineBlockAt(r4.head);
        if (line.from > lastLineStart) {
          deco.push(lineDeco.range(line.from));
          lastLineStart = line.from;
        }
      }
      return Decoration.set(deco);
    }
  }, {
    decorations: (v4) => v4.decorations
  });
  var Placeholder = class extends WidgetType {
    constructor(content4) {
      super();
      this.content = content4;
    }
    toDOM() {
      let wrap3 = document.createElement("span");
      wrap3.className = "cm-placeholder";
      wrap3.style.pointerEvents = "none";
      wrap3.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
      if (typeof this.content == "string")
        wrap3.setAttribute("aria-label", "placeholder " + this.content);
      else
        wrap3.setAttribute("aria-hidden", "true");
      return wrap3;
    }
    coordsAt(dom) {
      let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];
      if (!rects.length)
        return null;
      let style = window.getComputedStyle(dom.parentNode);
      let rect = flattenRect(rects[0], style.direction != "rtl");
      let lineHeight = parseInt(style.lineHeight);
      if (rect.bottom - rect.top > lineHeight * 1.5)
        return { left: rect.left, right: rect.right, top: rect.top, bottom: rect.top + lineHeight };
      return rect;
    }
    ignoreEvent() {
      return false;
    }
  };
  function placeholder(content4) {
    return ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.placeholder = content4 ? Decoration.set([Decoration.widget({ widget: new Placeholder(content4), side: 1 }).range(0)]) : Decoration.none;
      }
      get decorations() {
        return this.view.state.doc.length ? Decoration.none : this.placeholder;
      }
    }, { decorations: (v4) => v4.decorations });
  }
  var MaxOff = 2e3;
  function rectangleFor(state, a2, b4) {
    let startLine = Math.min(a2.line, b4.line), endLine = Math.max(a2.line, b4.line);
    let ranges = [];
    if (a2.off > MaxOff || b4.off > MaxOff || a2.col < 0 || b4.col < 0) {
      let startOff = Math.min(a2.off, b4.off), endOff = Math.max(a2.off, b4.off);
      for (let i3 = startLine; i3 <= endLine; i3++) {
        let line = state.doc.line(i3);
        if (line.length <= endOff)
          ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
      }
    } else {
      let startCol = Math.min(a2.col, b4.col), endCol = Math.max(a2.col, b4.col);
      for (let i3 = startLine; i3 <= endLine; i3++) {
        let line = state.doc.line(i3);
        let start = findColumn(line.text, startCol, state.tabSize, true);
        if (start < 0) {
          ranges.push(EditorSelection.cursor(line.to));
        } else {
          let end = findColumn(line.text, endCol, state.tabSize);
          ranges.push(EditorSelection.range(line.from + start, line.from + end));
        }
      }
    }
    return ranges;
  }
  function absoluteColumn(view, x7) {
    let ref = view.coordsAtPos(view.viewport.from);
    return ref ? Math.round(Math.abs((ref.left - x7) / view.defaultCharacterWidth)) : -1;
  }
  function getPos(view, event) {
    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    let line = view.state.doc.lineAt(offset), off = offset - line.from;
    let col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
    return { line: line.number, col, off };
  }
  function rectangleSelectionStyle(view, event) {
    let start = getPos(view, event), startSel = view.state.selection;
    if (!start)
      return null;
    return {
      update(update) {
        if (update.docChanged) {
          let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
          let newLine = update.state.doc.lineAt(newStart);
          start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
          startSel = startSel.map(update.changes);
        }
      },
      get(event2, _extend, multiple) {
        let cur2 = getPos(view, event2);
        if (!cur2)
          return startSel;
        let ranges = rectangleFor(view.state, start, cur2);
        if (!ranges.length)
          return startSel;
        if (multiple)
          return EditorSelection.create(ranges.concat(startSel.ranges));
        else
          return EditorSelection.create(ranges);
      }
    };
  }
  function rectangularSelection(options) {
    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e3) => e3.altKey && e3.button == 0);
    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
  }
  var keys = {
    Alt: [18, (e3) => !!e3.altKey],
    Control: [17, (e3) => !!e3.ctrlKey],
    Shift: [16, (e3) => !!e3.shiftKey],
    Meta: [91, (e3) => !!e3.metaKey]
  };
  var showCrosshair = { style: "cursor: crosshair" };
  function crosshairCursor(options = {}) {
    let [code3, getter] = keys[options.key || "Alt"];
    let plugin2 = ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.isDown = false;
      }
      set(isDown) {
        if (this.isDown != isDown) {
          this.isDown = isDown;
          this.view.update([]);
        }
      }
    }, {
      eventObservers: {
        keydown(e3) {
          this.set(e3.keyCode == code3 || getter(e3));
        },
        keyup(e3) {
          if (e3.keyCode == code3 || !getter(e3))
            this.set(false);
        },
        mousemove(e3) {
          this.set(getter(e3));
        }
      }
    });
    return [
      plugin2,
      EditorView.contentAttributes.of((view) => {
        var _a2;
        return ((_a2 = view.plugin(plugin2)) === null || _a2 === void 0 ? void 0 : _a2.isDown) ? showCrosshair : null;
      })
    ];
  }
  var Outside = "-10000px";
  var TooltipViewManager = class {
    constructor(view, facet, createTooltipView, removeTooltipView) {
      this.facet = facet;
      this.createTooltipView = createTooltipView;
      this.removeTooltipView = removeTooltipView;
      this.input = view.state.facet(facet);
      this.tooltips = this.input.filter((t4) => t4);
      let prev = null;
      this.tooltipViews = this.tooltips.map((t4) => prev = createTooltipView(t4, prev));
    }
    update(update, above) {
      var _a2;
      let input = update.state.facet(this.facet);
      let tooltips2 = input.filter((x7) => x7);
      if (input === this.input) {
        for (let t4 of this.tooltipViews)
          if (t4.update)
            t4.update(update);
        return false;
      }
      let tooltipViews = [], newAbove = above ? [] : null;
      for (let i3 = 0; i3 < tooltips2.length; i3++) {
        let tip = tooltips2[i3], known = -1;
        if (!tip)
          continue;
        for (let i4 = 0; i4 < this.tooltips.length; i4++) {
          let other = this.tooltips[i4];
          if (other && other.create == tip.create)
            known = i4;
        }
        if (known < 0) {
          tooltipViews[i3] = this.createTooltipView(tip, i3 ? tooltipViews[i3 - 1] : null);
          if (newAbove)
            newAbove[i3] = !!tip.above;
        } else {
          let tooltipView = tooltipViews[i3] = this.tooltipViews[known];
          if (newAbove)
            newAbove[i3] = above[known];
          if (tooltipView.update)
            tooltipView.update(update);
        }
      }
      for (let t4 of this.tooltipViews)
        if (tooltipViews.indexOf(t4) < 0) {
          this.removeTooltipView(t4);
          (_a2 = t4.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t4);
        }
      if (above) {
        newAbove.forEach((val, i3) => above[i3] = val);
        above.length = newAbove.length;
      }
      this.input = input;
      this.tooltips = tooltips2;
      this.tooltipViews = tooltipViews;
      return true;
    }
  };
  function tooltips(config2 = {}) {
    return tooltipConfig.of(config2);
  }
  function windowSpace(view) {
    let { win } = view;
    return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
  }
  var tooltipConfig = /* @__PURE__ */ Facet.define({
    combine: (values) => {
      var _a2, _b, _c;
      return {
        position: browser.ios ? "absolute" : ((_a2 = values.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
        parent: ((_b = values.find((conf) => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
        tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
      };
    }
  });
  var knownHeight = /* @__PURE__ */ new WeakMap();
  var tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.above = [];
      this.inView = true;
      this.madeAbsolute = false;
      this.lastTransaction = 0;
      this.measureTimeout = -1;
      let config2 = view.state.facet(tooltipConfig);
      this.position = config2.position;
      this.parent = config2.parent;
      this.classes = view.themeClasses;
      this.createContainer();
      this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
      this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
      this.manager = new TooltipViewManager(view, showTooltip, (t4, p6) => this.createTooltip(t4, p6), (t4) => {
        if (this.resizeObserver)
          this.resizeObserver.unobserve(t4.dom);
        t4.dom.remove();
      });
      this.above = this.manager.tooltips.map((t4) => !!t4.above);
      this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
        if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
          this.measureSoon();
      }, { threshold: [1] }) : null;
      this.observeIntersection();
      view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
      this.maybeMeasure();
    }
    createContainer() {
      if (this.parent) {
        this.container = document.createElement("div");
        this.container.style.position = "relative";
        this.container.className = this.view.themeClasses;
        this.parent.appendChild(this.container);
      } else {
        this.container = this.view.dom;
      }
    }
    observeIntersection() {
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
        for (let tooltip of this.manager.tooltipViews)
          this.intersectionObserver.observe(tooltip.dom);
      }
    }
    measureSoon() {
      if (this.measureTimeout < 0)
        this.measureTimeout = setTimeout(() => {
          this.measureTimeout = -1;
          this.maybeMeasure();
        }, 50);
    }
    update(update) {
      if (update.transactions.length)
        this.lastTransaction = Date.now();
      let updated = this.manager.update(update, this.above);
      if (updated)
        this.observeIntersection();
      let shouldMeasure = updated || update.geometryChanged;
      let newConfig = update.state.facet(tooltipConfig);
      if (newConfig.position != this.position && !this.madeAbsolute) {
        this.position = newConfig.position;
        for (let t4 of this.manager.tooltipViews)
          t4.dom.style.position = this.position;
        shouldMeasure = true;
      }
      if (newConfig.parent != this.parent) {
        if (this.parent)
          this.container.remove();
        this.parent = newConfig.parent;
        this.createContainer();
        for (let t4 of this.manager.tooltipViews)
          this.container.appendChild(t4.dom);
        shouldMeasure = true;
      } else if (this.parent && this.view.themeClasses != this.classes) {
        this.classes = this.container.className = this.view.themeClasses;
      }
      if (shouldMeasure)
        this.maybeMeasure();
    }
    createTooltip(tooltip, prev) {
      let tooltipView = tooltip.create(this.view);
      let before = prev ? prev.dom : null;
      tooltipView.dom.classList.add("cm-tooltip");
      if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
        let arrow2 = document.createElement("div");
        arrow2.className = "cm-tooltip-arrow";
        tooltipView.dom.appendChild(arrow2);
      }
      tooltipView.dom.style.position = this.position;
      tooltipView.dom.style.top = Outside;
      tooltipView.dom.style.left = "0px";
      this.container.insertBefore(tooltipView.dom, before);
      if (tooltipView.mount)
        tooltipView.mount(this.view);
      if (this.resizeObserver)
        this.resizeObserver.observe(tooltipView.dom);
      return tooltipView;
    }
    destroy() {
      var _a2, _b, _c;
      this.view.win.removeEventListener("resize", this.measureSoon);
      for (let tooltipView of this.manager.tooltipViews) {
        tooltipView.dom.remove();
        (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
      }
      if (this.parent)
        this.container.remove();
      (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
      (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
      clearTimeout(this.measureTimeout);
    }
    readMeasure() {
      let editor = this.view.dom.getBoundingClientRect();
      let scaleX = 1, scaleY = 1, makeAbsolute = false;
      if (this.position == "fixed" && this.manager.tooltipViews.length) {
        let { dom } = this.manager.tooltipViews[0];
        if (browser.gecko) {
          makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
        } else if (dom.style.top == Outside && dom.style.left == "0px") {
          let rect = dom.getBoundingClientRect();
          makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
        }
      }
      if (makeAbsolute || this.position == "absolute") {
        if (this.parent) {
          let rect = this.parent.getBoundingClientRect();
          if (rect.width && rect.height) {
            scaleX = rect.width / this.parent.offsetWidth;
            scaleY = rect.height / this.parent.offsetHeight;
          }
        } else {
          ({ scaleX, scaleY } = this.view.viewState);
        }
      }
      return {
        editor,
        parent: this.parent ? this.container.getBoundingClientRect() : editor,
        pos: this.manager.tooltips.map((t4, i3) => {
          let tv = this.manager.tooltipViews[i3];
          return tv.getCoords ? tv.getCoords(t4.pos) : this.view.coordsAtPos(t4.pos);
        }),
        size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
        space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
        scaleX,
        scaleY,
        makeAbsolute
      };
    }
    writeMeasure(measured) {
      var _a2;
      if (measured.makeAbsolute) {
        this.madeAbsolute = true;
        this.position = "absolute";
        for (let t4 of this.manager.tooltipViews)
          t4.dom.style.position = "absolute";
      }
      let { editor, space: space2, scaleX, scaleY } = measured;
      let others = [];
      for (let i3 = 0; i3 < this.manager.tooltips.length; i3++) {
        let tooltip = this.manager.tooltips[i3], tView = this.manager.tooltipViews[i3], { dom } = tView;
        let pos = measured.pos[i3], size = measured.size[i3];
        if (!pos || pos.bottom <= Math.max(editor.top, space2.top) || pos.top >= Math.min(editor.bottom, space2.bottom) || pos.right < Math.max(editor.left, space2.left) - 0.1 || pos.left > Math.min(editor.right, space2.right) + 0.1) {
          dom.style.top = Outside;
          continue;
        }
        let arrow2 = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
        let arrowHeight = arrow2 ? 7 : 0;
        let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
        let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
        let left = size.width > space2.right - space2.left ? ltr ? space2.left : space2.right - size.width : ltr ? Math.min(pos.left - (arrow2 ? 14 : 0) + offset.x, space2.right - width) : Math.max(space2.left, pos.left - width + (arrow2 ? 14 : 0) - offset.x);
        let above = this.above[i3];
        if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space2.top : pos.bottom + (size.bottom - size.top) + offset.y > space2.bottom) && above == space2.bottom - pos.bottom > pos.top - space2.top)
          above = this.above[i3] = !above;
        let spaceVert = (above ? pos.top - space2.top : space2.bottom - pos.bottom) - arrowHeight;
        if (spaceVert < height && tView.resize !== false) {
          if (spaceVert < this.view.defaultLineHeight) {
            dom.style.top = Outside;
            continue;
          }
          knownHeight.set(tView, height);
          dom.style.height = (height = spaceVert) / scaleY + "px";
        } else if (dom.style.height) {
          dom.style.height = "";
        }
        let top2 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
        let right = left + width;
        if (tView.overlap !== true) {
          for (let r4 of others)
            if (r4.left < right && r4.right > left && r4.top < top2 + height && r4.bottom > top2)
              top2 = above ? r4.top - height - 2 - arrowHeight : r4.bottom + arrowHeight + 2;
        }
        if (this.position == "absolute") {
          dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
          dom.style.left = (left - measured.parent.left) / scaleX + "px";
        } else {
          dom.style.top = top2 / scaleY + "px";
          dom.style.left = left / scaleX + "px";
        }
        if (arrow2) {
          let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
          arrow2.style.left = arrowLeft / scaleX + "px";
        }
        if (tView.overlap !== true)
          others.push({ left, top: top2, right, bottom: top2 + height });
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned)
          tView.positioned(measured.space);
      }
    }
    maybeMeasure() {
      if (this.manager.tooltips.length) {
        if (this.view.inView)
          this.view.requestMeasure(this.measureReq);
        if (this.inView != this.view.inView) {
          this.inView = this.view.inView;
          if (!this.inView)
            for (let tv of this.manager.tooltipViews)
              tv.dom.style.top = Outside;
        }
      }
    }
  }, {
    eventObservers: {
      scroll() {
        this.maybeMeasure();
      }
    }
  });
  var baseTheme = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-tooltip": {
      zIndex: 100,
      boxSizing: "border-box"
    },
    "&light .cm-tooltip": {
      border: "1px solid #bbb",
      backgroundColor: "#f5f5f5"
    },
    "&light .cm-tooltip-section:not(:first-child)": {
      borderTop: "1px solid #bbb"
    },
    "&dark .cm-tooltip": {
      backgroundColor: "#333338",
      color: "white"
    },
    ".cm-tooltip-arrow": {
      height: `${7}px`,
      width: `${7 * 2}px`,
      position: "absolute",
      zIndex: -1,
      overflow: "hidden",
      "&:before, &:after": {
        content: "''",
        position: "absolute",
        width: 0,
        height: 0,
        borderLeft: `${7}px solid transparent`,
        borderRight: `${7}px solid transparent`
      },
      ".cm-tooltip-above &": {
        bottom: `-${7}px`,
        "&:before": {
          borderTop: `${7}px solid #bbb`
        },
        "&:after": {
          borderTop: `${7}px solid #f5f5f5`,
          bottom: "1px"
        }
      },
      ".cm-tooltip-below &": {
        top: `-${7}px`,
        "&:before": {
          borderBottom: `${7}px solid #bbb`
        },
        "&:after": {
          borderBottom: `${7}px solid #f5f5f5`,
          top: "1px"
        }
      }
    },
    "&dark .cm-tooltip .cm-tooltip-arrow": {
      "&:before": {
        borderTopColor: "#333338",
        borderBottomColor: "#333338"
      },
      "&:after": {
        borderTopColor: "transparent",
        borderBottomColor: "transparent"
      }
    }
  });
  var noOffset = { x: 0, y: 0 };
  var showTooltip = /* @__PURE__ */ Facet.define({
    enables: [tooltipPlugin, baseTheme]
  });
  var showHoverTooltip = /* @__PURE__ */ Facet.define({
    combine: (inputs) => inputs.reduce((a2, i3) => a2.concat(i3), [])
  });
  var HoverTooltipHost = class _HoverTooltipHost {
    // Needs to be static so that host tooltip instances always match
    static create(view) {
      return new _HoverTooltipHost(view);
    }
    constructor(view) {
      this.view = view;
      this.mounted = false;
      this.dom = document.createElement("div");
      this.dom.classList.add("cm-tooltip-hover");
      this.manager = new TooltipViewManager(view, showHoverTooltip, (t4, p6) => this.createHostedView(t4, p6), (t4) => t4.dom.remove());
    }
    createHostedView(tooltip, prev) {
      let hostedView = tooltip.create(this.view);
      hostedView.dom.classList.add("cm-tooltip-section");
      this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
      if (this.mounted && hostedView.mount)
        hostedView.mount(this.view);
      return hostedView;
    }
    mount(view) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.mount)
          hostedView.mount(view);
      }
      this.mounted = true;
    }
    positioned(space2) {
      for (let hostedView of this.manager.tooltipViews) {
        if (hostedView.positioned)
          hostedView.positioned(space2);
      }
    }
    update(update) {
      this.manager.update(update);
    }
    destroy() {
      var _a2;
      for (let t4 of this.manager.tooltipViews)
        (_a2 = t4.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t4);
    }
    passProp(name2) {
      let value = void 0;
      for (let view of this.manager.tooltipViews) {
        let given = view[name2];
        if (given !== void 0) {
          if (value === void 0)
            value = given;
          else if (value !== given)
            return void 0;
        }
      }
      return value;
    }
    get offset() {
      return this.passProp("offset");
    }
    get getCoords() {
      return this.passProp("getCoords");
    }
    get overlap() {
      return this.passProp("overlap");
    }
    get resize() {
      return this.passProp("resize");
    }
  };
  var showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
    let tooltips2 = state.facet(showHoverTooltip);
    if (tooltips2.length === 0)
      return null;
    return {
      pos: Math.min(...tooltips2.map((t4) => t4.pos)),
      end: Math.max(...tooltips2.map((t4) => {
        var _a2;
        return (_a2 = t4.end) !== null && _a2 !== void 0 ? _a2 : t4.pos;
      })),
      create: HoverTooltipHost.create,
      above: tooltips2[0].above,
      arrow: tooltips2.some((t4) => t4.arrow)
    };
  });
  var HoverPlugin = class {
    constructor(view, source, field, setHover, hoverTime) {
      this.view = view;
      this.source = source;
      this.field = field;
      this.setHover = setHover;
      this.hoverTime = hoverTime;
      this.hoverTimeout = -1;
      this.restartTimeout = -1;
      this.pending = null;
      this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
      this.checkHover = this.checkHover.bind(this);
      view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
      view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
    }
    update() {
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(() => this.startHover(), 20);
      }
    }
    get active() {
      return this.view.state.field(this.field);
    }
    checkHover() {
      this.hoverTimeout = -1;
      if (this.active.length)
        return;
      let hovered = Date.now() - this.lastMove.time;
      if (hovered < this.hoverTime)
        this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
      else
        this.startHover();
    }
    startHover() {
      clearTimeout(this.restartTimeout);
      let { view, lastMove } = this;
      let desc = view.docView.nearest(lastMove.target);
      if (!desc)
        return;
      let pos, side = 1;
      if (desc instanceof WidgetView) {
        pos = desc.posAtStart;
      } else {
        pos = view.posAtCoords(lastMove);
        if (pos == null)
          return;
        let posCoords = view.coordsAtPos(pos);
        if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
          return;
        let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find((s4) => s4.from <= pos && s4.to >= pos);
        let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
        side = lastMove.x < posCoords.left ? -rtl : rtl;
      }
      let open = this.source(view, pos, side);
      if (open === null || open === void 0 ? void 0 : open.then) {
        let pending = this.pending = { pos };
        open.then((result) => {
          if (this.pending == pending) {
            this.pending = null;
            if (result && !(Array.isArray(result) && !result.length))
              view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
          }
        }, (e3) => logException(view.state, e3, "hover tooltip"));
      } else if (open && !(Array.isArray(open) && !open.length)) {
        view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
      }
    }
    get tooltip() {
      let plugin2 = this.view.plugin(tooltipPlugin);
      let index2 = plugin2 ? plugin2.manager.tooltips.findIndex((t4) => t4.create == HoverTooltipHost.create) : -1;
      return index2 > -1 ? plugin2.manager.tooltipViews[index2] : null;
    }
    mousemove(event) {
      var _a2, _b;
      this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
      if (this.hoverTimeout < 0)
        this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
      let { active, tooltip } = this;
      if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
        let { pos } = active[0] || this.pending, end = (_b = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b !== void 0 ? _b : pos;
        if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY)) {
          this.view.dispatch({ effects: this.setHover.of([]) });
          this.pending = null;
        }
      }
    }
    mouseleave(event) {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      let { active } = this;
      if (active.length) {
        let { tooltip } = this;
        let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
        if (!inTooltip)
          this.view.dispatch({ effects: this.setHover.of([]) });
        else
          this.watchTooltipLeave(tooltip.dom);
      }
    }
    watchTooltipLeave(tooltip) {
      let watch = (event) => {
        tooltip.removeEventListener("mouseleave", watch);
        if (this.active.length && !this.view.dom.contains(event.relatedTarget))
          this.view.dispatch({ effects: this.setHover.of([]) });
      };
      tooltip.addEventListener("mouseleave", watch);
    }
    destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  };
  var tooltipMargin = 4;
  function isInTooltip(tooltip, event) {
    let rect = tooltip.getBoundingClientRect();
    return event.clientX >= rect.left - tooltipMargin && event.clientX <= rect.right + tooltipMargin && event.clientY >= rect.top - tooltipMargin && event.clientY <= rect.bottom + tooltipMargin;
  }
  function isOverRange(view, from2, to, x7, y4, margin) {
    let rect = view.scrollDOM.getBoundingClientRect();
    let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
    if (rect.left > x7 || rect.right < x7 || rect.top > y4 || Math.min(rect.bottom, docBottom) < y4)
      return false;
    let pos = view.posAtCoords({ x: x7, y: y4 }, false);
    return pos >= from2 && pos <= to;
  }
  function hoverTooltip(source, options = {}) {
    let setHover = StateEffect.define();
    let hoverState = StateField.define({
      create() {
        return [];
      },
      update(value, tr) {
        if (value.length) {
          if (options.hideOnChange && (tr.docChanged || tr.selection))
            value = [];
          else if (options.hideOn)
            value = value.filter((v4) => !options.hideOn(tr, v4));
          if (tr.docChanged) {
            let mapped = [];
            for (let tooltip of value) {
              let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
              if (newPos != null) {
                let copy2 = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
                copy2.pos = newPos;
                if (copy2.end != null)
                  copy2.end = tr.changes.mapPos(copy2.end);
                mapped.push(copy2);
              }
            }
            value = mapped;
          }
        }
        for (let effect of tr.effects) {
          if (effect.is(setHover))
            value = effect.value;
          if (effect.is(closeHoverTooltipEffect))
            value = [];
        }
        return value;
      },
      provide: (f3) => showHoverTooltip.from(f3)
    });
    return [
      hoverState,
      ViewPlugin.define((view) => new HoverPlugin(
        view,
        source,
        hoverState,
        setHover,
        options.hoverTime || 300
        /* Hover.Time */
      )),
      showHoverTooltipHost
    ];
  }
  function getTooltip(view, tooltip) {
    let plugin2 = view.plugin(tooltipPlugin);
    if (!plugin2)
      return null;
    let found2 = plugin2.manager.tooltips.indexOf(tooltip);
    return found2 < 0 ? null : plugin2.manager.tooltipViews[found2];
  }
  function hasHoverTooltips(state) {
    return state.facet(showHoverTooltip).some((x7) => x7);
  }
  var closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
  var closeHoverTooltips = /* @__PURE__ */ closeHoverTooltipEffect.of(null);
  function repositionTooltips(view) {
    let plugin2 = view.plugin(tooltipPlugin);
    if (plugin2)
      plugin2.maybeMeasure();
  }
  var panelConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      let topContainer, bottomContainer;
      for (let c5 of configs) {
        topContainer = topContainer || c5.topContainer;
        bottomContainer = bottomContainer || c5.bottomContainer;
      }
      return { topContainer, bottomContainer };
    }
  });
  function panels(config2) {
    return config2 ? [panelConfig.of(config2)] : [];
  }
  function getPanel(view, panel) {
    let plugin2 = view.plugin(panelPlugin);
    let index2 = plugin2 ? plugin2.specs.indexOf(panel) : -1;
    return index2 > -1 ? plugin2.panels[index2] : null;
  }
  var panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.input = view.state.facet(showPanel);
      this.specs = this.input.filter((s4) => s4);
      this.panels = this.specs.map((spec) => spec(view));
      let conf = view.state.facet(panelConfig);
      this.top = new PanelGroup(view, true, conf.topContainer);
      this.bottom = new PanelGroup(view, false, conf.bottomContainer);
      this.top.sync(this.panels.filter((p6) => p6.top));
      this.bottom.sync(this.panels.filter((p6) => !p6.top));
      for (let p6 of this.panels) {
        p6.dom.classList.add("cm-panel");
        if (p6.mount)
          p6.mount();
      }
    }
    update(update) {
      let conf = update.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(update.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      let input = update.state.facet(showPanel);
      if (input != this.input) {
        let specs = input.filter((x7) => x7);
        let panels2 = [], top2 = [], bottom = [], mount = [];
        for (let spec of specs) {
          let known = this.specs.indexOf(spec), panel;
          if (known < 0) {
            panel = spec(update.view);
            mount.push(panel);
          } else {
            panel = this.panels[known];
            if (panel.update)
              panel.update(update);
          }
          panels2.push(panel);
          (panel.top ? top2 : bottom).push(panel);
        }
        this.specs = specs;
        this.panels = panels2;
        this.top.sync(top2);
        this.bottom.sync(bottom);
        for (let p6 of mount) {
          p6.dom.classList.add("cm-panel");
          if (p6.mount)
            p6.mount();
        }
      } else {
        for (let p6 of this.panels)
          if (p6.update)
            p6.update(update);
      }
    }
    destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }, {
    provide: (plugin2) => EditorView.scrollMargins.of((view) => {
      let value = view.plugin(plugin2);
      return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
    })
  });
  var PanelGroup = class {
    constructor(view, top2, container) {
      this.view = view;
      this.top = top2;
      this.container = container;
      this.dom = void 0;
      this.classes = "";
      this.panels = [];
      this.syncClasses();
    }
    sync(panels2) {
      for (let p6 of this.panels)
        if (p6.destroy && panels2.indexOf(p6) < 0)
          p6.destroy();
      this.panels = panels2;
      this.syncDOM();
    }
    syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = void 0;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        let parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      let curDOM = this.dom.firstChild;
      for (let panel of this.panels) {
        if (panel.dom.parentNode == this.dom) {
          while (curDOM != panel.dom)
            curDOM = rm(curDOM);
          curDOM = curDOM.nextSibling;
        } else {
          this.dom.insertBefore(panel.dom, curDOM);
        }
      }
      while (curDOM)
        curDOM = rm(curDOM);
    }
    scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
    syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses)
        return;
      for (let cls of this.classes.split(" "))
        if (cls)
          this.container.classList.remove(cls);
      for (let cls of (this.classes = this.view.themeClasses).split(" "))
        if (cls)
          this.container.classList.add(cls);
    }
  };
  function rm(node2) {
    let next = node2.nextSibling;
    node2.remove();
    return next;
  }
  var showPanel = /* @__PURE__ */ Facet.define({
    enables: panelPlugin
  });
  var GutterMarker = class extends RangeValue {
    /**
    @internal
    */
    compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
    eq(other) {
      return false;
    }
    /**
    Called if the marker has a `toDOM` method and its representation
    was removed from a gutter.
    */
    destroy(dom) {
    }
  };
  GutterMarker.prototype.elementClass = "";
  GutterMarker.prototype.toDOM = void 0;
  GutterMarker.prototype.mapMode = MapMode.TrackBefore;
  GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
  GutterMarker.prototype.point = true;
  var gutterLineClass = /* @__PURE__ */ Facet.define();
  var defaults = {
    class: "",
    renderEmptyElements: false,
    elementStyle: "",
    markers: () => RangeSet.empty,
    lineMarker: () => null,
    widgetMarker: () => null,
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {}
  };
  var activeGutters = /* @__PURE__ */ Facet.define();
  function gutter(config2) {
    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config2))];
  }
  var unfixGutters = /* @__PURE__ */ Facet.define({
    combine: (values) => values.some((x7) => x7)
  });
  function gutters(config2) {
    let result = [
      gutterView
    ];
    if (config2 && config2.fixed === false)
      result.push(unfixGutters.of(true));
    return result;
  }
  var gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.prevViewport = view.viewport;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutters";
      this.dom.setAttribute("aria-hidden", "true");
      this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
      for (let gutter2 of this.gutters)
        this.dom.appendChild(gutter2.dom);
      this.fixed = !view.state.facet(unfixGutters);
      if (this.fixed) {
        this.dom.style.position = "sticky";
      }
      this.syncGutters(false);
      view.scrollDOM.insertBefore(this.dom, view.contentDOM);
    }
    update(update) {
      if (this.updateGutters(update)) {
        let vpA = this.prevViewport, vpB = update.view.viewport;
        let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
        this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
      }
      if (update.geometryChanged) {
        this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
      }
      if (this.view.state.facet(unfixGutters) != !this.fixed) {
        this.fixed = !this.fixed;
        this.dom.style.position = this.fixed ? "sticky" : "";
      }
      this.prevViewport = update.view.viewport;
    }
    syncGutters(detach) {
      let after = this.dom.nextSibling;
      if (detach)
        this.dom.remove();
      let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
      let classSet = [];
      let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
      for (let line of this.view.viewportLineBlocks) {
        if (classSet.length)
          classSet = [];
        if (Array.isArray(line.type)) {
          let first = true;
          for (let b4 of line.type) {
            if (b4.type == BlockType.Text && first) {
              advanceCursor(lineClasses, classSet, b4.from);
              for (let cx of contexts)
                cx.line(this.view, b4, classSet);
              first = false;
            } else if (b4.widget) {
              for (let cx of contexts)
                cx.widget(this.view, b4);
            }
          }
        } else if (line.type == BlockType.Text) {
          advanceCursor(lineClasses, classSet, line.from);
          for (let cx of contexts)
            cx.line(this.view, line, classSet);
        } else if (line.widget) {
          for (let cx of contexts)
            cx.widget(this.view, line);
        }
      }
      for (let cx of contexts)
        cx.finish();
      if (detach)
        this.view.scrollDOM.insertBefore(this.dom, after);
    }
    updateGutters(update) {
      let prev = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
      let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
      if (prev == cur2) {
        for (let gutter2 of this.gutters)
          if (gutter2.update(update))
            change = true;
      } else {
        change = true;
        let gutters2 = [];
        for (let conf of cur2) {
          let known = prev.indexOf(conf);
          if (known < 0) {
            gutters2.push(new SingleGutterView(this.view, conf));
          } else {
            this.gutters[known].update(update);
            gutters2.push(this.gutters[known]);
          }
        }
        for (let g5 of this.gutters) {
          g5.dom.remove();
          if (gutters2.indexOf(g5) < 0)
            g5.destroy();
        }
        for (let g5 of gutters2)
          this.dom.appendChild(g5.dom);
        this.gutters = gutters2;
      }
      return change;
    }
    destroy() {
      for (let view of this.gutters)
        view.destroy();
      this.dom.remove();
    }
  }, {
    provide: (plugin2) => EditorView.scrollMargins.of((view) => {
      let value = view.plugin(plugin2);
      if (!value || value.gutters.length == 0 || !value.fixed)
        return null;
      return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view.scaleX } : { right: value.dom.offsetWidth * view.scaleX };
    })
  });
  function asArray2(val) {
    return Array.isArray(val) ? val : [val];
  }
  function advanceCursor(cursor, collect, pos) {
    while (cursor.value && cursor.from <= pos) {
      if (cursor.from == pos)
        collect.push(cursor.value);
      cursor.next();
    }
  }
  var UpdateContext = class {
    constructor(gutter2, viewport, height) {
      this.gutter = gutter2;
      this.height = height;
      this.i = 0;
      this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
    }
    addElement(view, block, markers) {
      let { gutter: gutter2 } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
      if (this.i == gutter2.elements.length) {
        let newElt = new GutterElement(view, height, above, markers);
        gutter2.elements.push(newElt);
        gutter2.dom.appendChild(newElt.dom);
      } else {
        gutter2.elements[this.i].update(view, height, above, markers);
      }
      this.height = block.bottom;
      this.i++;
    }
    line(view, line, extraMarkers) {
      let localMarkers = [];
      advanceCursor(this.cursor, localMarkers, line.from);
      if (extraMarkers.length)
        localMarkers = localMarkers.concat(extraMarkers);
      let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
      if (forLine)
        localMarkers.unshift(forLine);
      let gutter2 = this.gutter;
      if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
        return;
      this.addElement(view, line, localMarkers);
    }
    widget(view, block) {
      let marker = this.gutter.config.widgetMarker(view, block.widget, block);
      if (marker)
        this.addElement(view, block, [marker]);
    }
    finish() {
      let gutter2 = this.gutter;
      while (gutter2.elements.length > this.i) {
        let last = gutter2.elements.pop();
        gutter2.dom.removeChild(last.dom);
        last.destroy();
      }
    }
  };
  var SingleGutterView = class {
    constructor(view, config2) {
      this.view = view;
      this.config = config2;
      this.elements = [];
      this.spacer = null;
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
      for (let prop in config2.domEventHandlers) {
        this.dom.addEventListener(prop, (event) => {
          let target = event.target, y4;
          if (target != this.dom && this.dom.contains(target)) {
            while (target.parentNode != this.dom)
              target = target.parentNode;
            let rect = target.getBoundingClientRect();
            y4 = (rect.top + rect.bottom) / 2;
          } else {
            y4 = event.clientY;
          }
          let line = view.lineBlockAtHeight(y4 - view.documentTop);
          if (config2.domEventHandlers[prop](view, line, event))
            event.preventDefault();
        });
      }
      this.markers = asArray2(config2.markers(view));
      if (config2.initialSpacer) {
        this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
        this.dom.appendChild(this.spacer.dom);
        this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
      }
    }
    update(update) {
      let prevMarkers = this.markers;
      this.markers = asArray2(this.config.markers(update.view));
      if (this.spacer && this.config.updateSpacer) {
        let updated = this.config.updateSpacer(this.spacer.markers[0], update);
        if (updated != this.spacer.markers[0])
          this.spacer.update(update.view, 0, 0, [updated]);
      }
      let vp = update.view.viewport;
      return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
    }
    destroy() {
      for (let elt of this.elements)
        elt.destroy();
    }
  };
  var GutterElement = class {
    constructor(view, height, above, markers) {
      this.height = -1;
      this.above = 0;
      this.markers = [];
      this.dom = document.createElement("div");
      this.dom.className = "cm-gutterElement";
      this.update(view, height, above, markers);
    }
    update(view, height, above, markers) {
      if (this.height != height) {
        this.height = height;
        this.dom.style.height = height + "px";
      }
      if (this.above != above)
        this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
      if (!sameMarkers(this.markers, markers))
        this.setMarkers(view, markers);
    }
    setMarkers(view, markers) {
      let cls = "cm-gutterElement", domPos = this.dom.firstChild;
      for (let iNew = 0, iOld = 0; ; ) {
        let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
        if (marker) {
          let c5 = marker.elementClass;
          if (c5)
            cls += " " + c5;
          for (let i3 = iOld; i3 < this.markers.length; i3++)
            if (this.markers[i3].compare(marker)) {
              skipTo = i3;
              matched = true;
              break;
            }
        } else {
          skipTo = this.markers.length;
        }
        while (iOld < skipTo) {
          let next = this.markers[iOld++];
          if (next.toDOM) {
            next.destroy(domPos);
            let after = domPos.nextSibling;
            domPos.remove();
            domPos = after;
          }
        }
        if (!marker)
          break;
        if (marker.toDOM) {
          if (matched)
            domPos = domPos.nextSibling;
          else
            this.dom.insertBefore(marker.toDOM(view), domPos);
        }
        if (matched)
          iOld++;
      }
      this.dom.className = cls;
      this.markers = markers;
    }
    destroy() {
      this.setMarkers(null, []);
    }
  };
  function sameMarkers(a2, b4) {
    if (a2.length != b4.length)
      return false;
    for (let i3 = 0; i3 < a2.length; i3++)
      if (!a2[i3].compare(b4[i3]))
        return false;
    return true;
  }
  var lineNumberMarkers = /* @__PURE__ */ Facet.define();
  var lineNumberConfig = /* @__PURE__ */ Facet.define({
    combine(values) {
      return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
        domEventHandlers(a2, b4) {
          let result = Object.assign({}, a2);
          for (let event in b4) {
            let exists = result[event], add2 = b4[event];
            result[event] = exists ? (view, line, event2) => exists(view, line, event2) || add2(view, line, event2) : add2;
          }
          return result;
        }
      });
    }
  });
  var NumberMarker = class extends GutterMarker {
    constructor(number2) {
      super();
      this.number = number2;
    }
    eq(other) {
      return this.number == other.number;
    }
    toDOM() {
      return document.createTextNode(this.number);
    }
  };
  function formatNumber(view, number2) {
    return view.state.facet(lineNumberConfig).formatNumber(number2, view.state);
  }
  var lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
    class: "cm-lineNumbers",
    renderEmptyElements: false,
    markers(view) {
      return view.state.facet(lineNumberMarkers);
    },
    lineMarker(view, line, others) {
      if (others.some((m4) => m4.toDOM))
        return null;
      return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
    },
    widgetMarker: () => null,
    lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
    initialSpacer(view) {
      return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
    },
    updateSpacer(spacer, update) {
      let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
      return max == spacer.number ? spacer : new NumberMarker(max);
    },
    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
  }));
  function lineNumbers(config2 = {}) {
    return [
      lineNumberConfig.of(config2),
      gutters(),
      lineNumberGutter
    ];
  }
  function maxLineNumber(lines) {
    let last = 9;
    while (last < lines)
      last = last * 10 + 9;
    return last;
  }
  var activeLineGutterMarker = /* @__PURE__ */ new class extends GutterMarker {
    constructor() {
      super(...arguments);
      this.elementClass = "cm-activeLineGutter";
    }
  }();
  var activeLineGutterHighlighter = /* @__PURE__ */ gutterLineClass.compute(["selection"], (state) => {
    let marks2 = [], last = -1;
    for (let range of state.selection.ranges) {
      let linePos = state.doc.lineAt(range.head).from;
      if (linePos > last) {
        last = linePos;
        marks2.push(activeLineGutterMarker.range(linePos));
      }
    }
    return RangeSet.of(marks2);
  });
  function highlightActiveLineGutter() {
    return activeLineGutterHighlighter;
  }
  var WhitespaceDeco = /* @__PURE__ */ new Map();
  function getWhitespaceDeco(space2) {
    let deco = WhitespaceDeco.get(space2);
    if (!deco)
      WhitespaceDeco.set(space2, deco = Decoration.mark({
        attributes: space2 === "	" ? {
          class: "cm-highlightTab"
        } : {
          class: "cm-highlightSpace",
          "data-display": space2.replace(/ /g, "\xB7")
        }
      }));
    return deco;
  }
  function matcher(decorator) {
    return ViewPlugin.define((view) => ({
      decorations: decorator.createDeco(view),
      update(u5) {
        this.decorations = decorator.updateDeco(u5, this.decorations);
      }
    }), {
      decorations: (v4) => v4.decorations
    });
  }
  var whitespaceHighlighter = /* @__PURE__ */ matcher(/* @__PURE__ */ new MatchDecorator({
    regexp: /\t| +/g,
    decoration: (match) => getWhitespaceDeco(match[0]),
    boundary: /\S/
  }));
  function highlightWhitespace() {
    return whitespaceHighlighter;
  }
  var trailingHighlighter = /* @__PURE__ */ matcher(/* @__PURE__ */ new MatchDecorator({
    regexp: /\s+$/g,
    decoration: /* @__PURE__ */ Decoration.mark({ class: "cm-trailingSpace" }),
    boundary: /\S/
  }));
  function highlightTrailingWhitespace() {
    return trailingHighlighter;
  }
  var __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };

  // node_modules/@codemirror/language/dist/index.js
  var dist_exports3 = {};
  __export(dist_exports3, {
    DocInput: () => DocInput,
    HighlightStyle: () => HighlightStyle,
    IndentContext: () => IndentContext,
    LRLanguage: () => LRLanguage,
    Language: () => Language,
    LanguageDescription: () => LanguageDescription,
    LanguageSupport: () => LanguageSupport,
    ParseContext: () => ParseContext,
    StreamLanguage: () => StreamLanguage,
    StringStream: () => StringStream,
    TreeIndentContext: () => TreeIndentContext,
    bidiIsolates: () => bidiIsolates,
    bracketMatching: () => bracketMatching,
    bracketMatchingHandle: () => bracketMatchingHandle,
    codeFolding: () => codeFolding,
    continuedIndent: () => continuedIndent,
    defaultHighlightStyle: () => defaultHighlightStyle,
    defineLanguageFacet: () => defineLanguageFacet,
    delimitedIndent: () => delimitedIndent,
    ensureSyntaxTree: () => ensureSyntaxTree,
    flatIndent: () => flatIndent,
    foldAll: () => foldAll,
    foldCode: () => foldCode,
    foldEffect: () => foldEffect,
    foldGutter: () => foldGutter,
    foldInside: () => foldInside,
    foldKeymap: () => foldKeymap,
    foldNodeProp: () => foldNodeProp,
    foldService: () => foldService,
    foldState: () => foldState,
    foldable: () => foldable,
    foldedRanges: () => foldedRanges,
    forceParsing: () => forceParsing,
    getIndentUnit: () => getIndentUnit,
    getIndentation: () => getIndentation,
    highlightingFor: () => highlightingFor,
    indentNodeProp: () => indentNodeProp,
    indentOnInput: () => indentOnInput,
    indentRange: () => indentRange,
    indentService: () => indentService,
    indentString: () => indentString,
    indentUnit: () => indentUnit,
    language: () => language,
    languageDataProp: () => languageDataProp,
    matchBrackets: () => matchBrackets,
    sublanguageProp: () => sublanguageProp,
    syntaxHighlighting: () => syntaxHighlighting,
    syntaxParserRunning: () => syntaxParserRunning,
    syntaxTree: () => syntaxTree,
    syntaxTreeAvailable: () => syntaxTreeAvailable,
    toggleFold: () => toggleFold,
    unfoldAll: () => unfoldAll,
    unfoldCode: () => unfoldCode,
    unfoldEffect: () => unfoldEffect
  });

  // node_modules/@lezer/common/dist/index.js
  var DefaultBufferLength = 1024;
  var nextPropID = 0;
  var Range2 = class {
    constructor(from2, to) {
      this.from = from2;
      this.to = to;
    }
  };
  var NodeProp = class {
    /**
    Create a new node prop type.
    */
    constructor(config2 = {}) {
      this.id = nextPropID++;
      this.perNode = !!config2.perNode;
      this.deserialize = config2.deserialize || (() => {
        throw new Error("This node type doesn't define a deserialize function");
      });
    }
    /**
    This is meant to be used with
    [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.ParserConfig.props) to compute
    prop values for each node type in the set. Takes a [match
    object](#common.NodeType^match) or function that returns undefined
    if the node type doesn't get this prop, and the prop's value if
    it does.
    */
    add(match) {
      if (this.perNode)
        throw new RangeError("Can't add per-node props to node types");
      if (typeof match != "function")
        match = NodeType.match(match);
      return (type) => {
        let result = match(type);
        return result === void 0 ? null : [this, result];
      };
    }
  };
  NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
  NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
  NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
  NodeProp.isolate = new NodeProp({ deserialize: (value) => {
    if (value && value != "rtl" && value != "ltr" && value != "auto")
      throw new RangeError("Invalid value for isolate: " + value);
    return value || "auto";
  } });
  NodeProp.contextHash = new NodeProp({ perNode: true });
  NodeProp.lookAhead = new NodeProp({ perNode: true });
  NodeProp.mounted = new NodeProp({ perNode: true });
  var MountedTree = class {
    constructor(tree, overlay, parser2) {
      this.tree = tree;
      this.overlay = overlay;
      this.parser = parser2;
    }
    /**
    @internal
    */
    static get(tree) {
      return tree && tree.props && tree.props[NodeProp.mounted.id];
    }
  };
  var noProps = /* @__PURE__ */ Object.create(null);
  var NodeType = class _NodeType {
    /**
    @internal
    */
    constructor(name2, props, id2, flags = 0) {
      this.name = name2;
      this.props = props;
      this.id = id2;
      this.flags = flags;
    }
    /**
    Define a node type.
    */
    static define(spec) {
      let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
      let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
      let type = new _NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props)
        for (let src of spec.props) {
          if (!Array.isArray(src))
            src = src(type);
          if (src) {
            if (src[0].perNode)
              throw new RangeError("Can't store a per-node prop on a node type");
            props[src[0].id] = src[1];
          }
        }
      return type;
    }
    /**
    Retrieves a node prop for this type. Will return `undefined` if
    the prop isn't present on this node.
    */
    prop(prop) {
      return this.props[prop.id];
    }
    /**
    True when this is the top node of a grammar.
    */
    get isTop() {
      return (this.flags & 1) > 0;
    }
    /**
    True when this node is produced by a skip rule.
    */
    get isSkipped() {
      return (this.flags & 2) > 0;
    }
    /**
    Indicates whether this is an error node.
    */
    get isError() {
      return (this.flags & 4) > 0;
    }
    /**
    When true, this node type doesn't correspond to a user-declared
    named node, for example because it is used to cache repetition.
    */
    get isAnonymous() {
      return (this.flags & 8) > 0;
    }
    /**
    Returns true when this node's name or one of its
    [groups](#common.NodeProp^group) matches the given string.
    */
    is(name2) {
      if (typeof name2 == "string") {
        if (this.name == name2)
          return true;
        let group = this.prop(NodeProp.group);
        return group ? group.indexOf(name2) > -1 : false;
      }
      return this.id == name2;
    }
    /**
    Create a function from node types to arbitrary values by
    specifying an object whose property names are node or
    [group](#common.NodeProp^group) names. Often useful with
    [`NodeProp.add`](#common.NodeProp.add). You can put multiple
    names, separated by spaces, in a single property name to map
    multiple node names to a single value.
    */
    static match(map6) {
      let direct = /* @__PURE__ */ Object.create(null);
      for (let prop in map6)
        for (let name2 of prop.split(" "))
          direct[name2] = map6[prop];
      return (node2) => {
        for (let groups = node2.prop(NodeProp.group), i3 = -1; i3 < (groups ? groups.length : 0); i3++) {
          let found2 = direct[i3 < 0 ? node2.name : groups[i3]];
          if (found2)
            return found2;
        }
      };
    }
  };
  NodeType.none = new NodeType(
    "",
    /* @__PURE__ */ Object.create(null),
    0,
    8
    /* NodeFlag.Anonymous */
  );
  var NodeSet = class _NodeSet {
    /**
    Create a set with the given types. The `id` property of each
    type should correspond to its position within the array.
    */
    constructor(types2) {
      this.types = types2;
      for (let i3 = 0; i3 < types2.length; i3++)
        if (types2[i3].id != i3)
          throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
    /**
    Create a copy of this set with some node properties added. The
    arguments to this method can be created with
    [`NodeProp.add`](#common.NodeProp.add).
    */
    extend(...props) {
      let newTypes = [];
      for (let type of this.types) {
        let newProps = null;
        for (let source of props) {
          let add2 = source(type);
          if (add2) {
            if (!newProps)
              newProps = Object.assign({}, type.props);
            newProps[add2[0].id] = add2[1];
          }
        }
        newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
      }
      return new _NodeSet(newTypes);
    }
  };
  var CachedNode = /* @__PURE__ */ new WeakMap();
  var CachedInnerNode = /* @__PURE__ */ new WeakMap();
  var IterMode;
  (function(IterMode2) {
    IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
    IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
    IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
    IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
  })(IterMode || (IterMode = {}));
  var Tree = class _Tree {
    /**
    Construct a new tree. See also [`Tree.build`](#common.Tree^build).
    */
    constructor(type, children, positions, length, props) {
      this.type = type;
      this.children = children;
      this.positions = positions;
      this.length = length;
      this.props = null;
      if (props && props.length) {
        this.props = /* @__PURE__ */ Object.create(null);
        for (let [prop, value] of props)
          this.props[typeof prop == "number" ? prop : prop.id] = value;
      }
    }
    /**
    @internal
    */
    toString() {
      let mounted = MountedTree.get(this);
      if (mounted && !mounted.overlay)
        return mounted.tree.toString();
      let children = "";
      for (let ch of this.children) {
        let str = ch.toString();
        if (str) {
          if (children)
            children += ",";
          children += str;
        }
      }
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /**
    Get a [tree cursor](#common.TreeCursor) positioned at the top of
    the tree. Mode can be used to [control](#common.IterMode) which
    nodes the cursor visits.
    */
    cursor(mode = 0) {
      return new TreeCursor(this.topNode, mode);
    }
    /**
    Get a [tree cursor](#common.TreeCursor) pointing into this tree
    at the given position and side (see
    [`moveTo`](#common.TreeCursor.moveTo).
    */
    cursorAt(pos, side = 0, mode = 0) {
      let scope = CachedNode.get(this) || this.topNode;
      let cursor = new TreeCursor(scope);
      cursor.moveTo(pos, side);
      CachedNode.set(this, cursor._tree);
      return cursor;
    }
    /**
    Get a [syntax node](#common.SyntaxNode) object for the top of the
    tree.
    */
    get topNode() {
      return new TreeNode(this, 0, 0, null);
    }
    /**
    Get the [syntax node](#common.SyntaxNode) at the given position.
    If `side` is -1, this will move into nodes that end at the
    position. If 1, it'll move into nodes that start at the
    position. With 0, it'll only enter nodes that cover the position
    from both sides.
    
    Note that this will not enter
    [overlays](#common.MountedTree.overlay), and you often want
    [`resolveInner`](#common.Tree.resolveInner) instead.
    */
    resolve(pos, side = 0) {
      let node2 = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
      CachedNode.set(this, node2);
      return node2;
    }
    /**
    Like [`resolve`](#common.Tree.resolve), but will enter
    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
    pointing into the innermost overlaid tree at the given position
    (with parent links going through all parent structure, including
    the host trees).
    */
    resolveInner(pos, side = 0) {
      let node2 = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
      CachedInnerNode.set(this, node2);
      return node2;
    }
    /**
    In some situations, it can be useful to iterate through all
    nodes around a position, including those in overlays that don't
    directly cover the position. This method gives you an iterator
    that will produce all nodes, from small to big, around the given
    position.
    */
    resolveStack(pos, side = 0) {
      return stackIterator(this, pos, side);
    }
    /**
    Iterate over the tree and its children, calling `enter` for any
    node that touches the `from`/`to` region (if given) before
    running over such a node's children, and `leave` (if given) when
    leaving the node. When `enter` returns `false`, that node will
    not have its children iterated over (or `leave` called).
    */
    iterate(spec) {
      let { enter, leave, from: from2 = 0, to = this.length } = spec;
      let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
      for (let c5 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
        let entered = false;
        if (c5.from <= to && c5.to >= from2 && (!anon && c5.type.isAnonymous || enter(c5) !== false)) {
          if (c5.firstChild())
            continue;
          entered = true;
        }
        for (; ; ) {
          if (entered && leave && (anon || !c5.type.isAnonymous))
            leave(c5);
          if (c5.nextSibling())
            break;
          if (!c5.parent())
            return;
          entered = true;
        }
      }
    }
    /**
    Get the value of the given [node prop](#common.NodeProp) for this
    node. Works with both per-node and per-type props.
    */
    prop(prop) {
      return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
    }
    /**
    Returns the node's [per-node props](#common.NodeProp.perNode) in a
    format that can be passed to the [`Tree`](#common.Tree)
    constructor.
    */
    get propValues() {
      let result = [];
      if (this.props)
        for (let id2 in this.props)
          result.push([+id2, this.props[id2]]);
      return result;
    }
    /**
    Balance the direct children of this tree, producing a copy of
    which may have children grouped into subtrees with type
    [`NodeType.none`](#common.NodeType^none).
    */
    balance(config2 = {}) {
      return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new _Tree(this.type, children, positions, length, this.propValues), config2.makeTree || ((children, positions, length) => new _Tree(NodeType.none, children, positions, length)));
    }
    /**
    Build a tree from a postfix-ordered buffer of node information,
    or a cursor over such a buffer.
    */
    static build(data) {
      return buildTree(data);
    }
  };
  Tree.empty = new Tree(NodeType.none, [], [], 0);
  var FlatBufferCursor = class _FlatBufferCursor {
    constructor(buffer, index2) {
      this.buffer = buffer;
      this.index = index2;
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    get pos() {
      return this.index;
    }
    next() {
      this.index -= 4;
    }
    fork() {
      return new _FlatBufferCursor(this.buffer, this.index);
    }
  };
  var TreeBuffer = class _TreeBuffer {
    /**
    Create a tree buffer.
    */
    constructor(buffer, length, set) {
      this.buffer = buffer;
      this.length = length;
      this.set = set;
    }
    /**
    @internal
    */
    get type() {
      return NodeType.none;
    }
    /**
    @internal
    */
    toString() {
      let result = [];
      for (let index2 = 0; index2 < this.buffer.length; ) {
        result.push(this.childString(index2));
        index2 = this.buffer[index2 + 3];
      }
      return result.join(",");
    }
    /**
    @internal
    */
    childString(index2) {
      let id2 = this.buffer[index2], endIndex = this.buffer[index2 + 3];
      let type = this.set.types[id2], result = type.name;
      if (/\W/.test(result) && !type.isError)
        result = JSON.stringify(result);
      index2 += 4;
      if (endIndex == index2)
        return result;
      let children = [];
      while (index2 < endIndex) {
        children.push(this.childString(index2));
        index2 = this.buffer[index2 + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /**
    @internal
    */
    findChild(startIndex, endIndex, dir, pos, side) {
      let { buffer } = this, pick = -1;
      for (let i3 = startIndex; i3 != endIndex; i3 = buffer[i3 + 3]) {
        if (checkSide(side, pos, buffer[i3 + 1], buffer[i3 + 2])) {
          pick = i3;
          if (dir > 0)
            break;
        }
      }
      return pick;
    }
    /**
    @internal
    */
    slice(startI, endI, from2) {
      let b4 = this.buffer;
      let copy2 = new Uint16Array(endI - startI), len = 0;
      for (let i3 = startI, j6 = 0; i3 < endI; ) {
        copy2[j6++] = b4[i3++];
        copy2[j6++] = b4[i3++] - from2;
        let to = copy2[j6++] = b4[i3++] - from2;
        copy2[j6++] = b4[i3++] - startI;
        len = Math.max(len, to);
      }
      return new _TreeBuffer(copy2, len, this.set);
    }
  };
  function checkSide(side, pos, from2, to) {
    switch (side) {
      case -2:
        return from2 < pos;
      case -1:
        return to >= pos && from2 < pos;
      case 0:
        return from2 < pos && to > pos;
      case 1:
        return from2 <= pos && to > pos;
      case 2:
        return to > pos;
      case 4:
        return true;
    }
  }
  function resolveNode(node2, pos, side, overlays) {
    var _a2;
    while (node2.from == node2.to || (side < 1 ? node2.from >= pos : node2.from > pos) || (side > -1 ? node2.to <= pos : node2.to < pos)) {
      let parent = !overlays && node2 instanceof TreeNode && node2.index < 0 ? null : node2.parent;
      if (!parent)
        return node2;
      node2 = parent;
    }
    let mode = overlays ? 0 : IterMode.IgnoreOverlays;
    if (overlays)
      for (let scan = node2, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
        if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
          node2 = parent;
      }
    for (; ; ) {
      let inner = node2.enter(pos, side, mode);
      if (!inner)
        return node2;
      node2 = inner;
    }
  }
  var BaseNode = class {
    cursor(mode = 0) {
      return new TreeCursor(this, mode);
    }
    getChild(type, before = null, after = null) {
      let r4 = getChildren(this, type, before, after);
      return r4.length ? r4[0] : null;
    }
    getChildren(type, before = null, after = null) {
      return getChildren(this, type, before, after);
    }
    resolve(pos, side = 0) {
      return resolveNode(this, pos, side, false);
    }
    resolveInner(pos, side = 0) {
      return resolveNode(this, pos, side, true);
    }
    matchContext(context) {
      return matchNodeContext(this, context);
    }
    enterUnfinishedNodesBefore(pos) {
      let scan = this.childBefore(pos), node2 = this;
      while (scan) {
        let last = scan.lastChild;
        if (!last || last.to != scan.to)
          break;
        if (last.type.isError && last.from == last.to) {
          node2 = scan;
          scan = last.prevSibling;
        } else {
          scan = last;
        }
      }
      return node2;
    }
    get node() {
      return this;
    }
    get next() {
      return this.parent;
    }
  };
  var TreeNode = class _TreeNode extends BaseNode {
    constructor(_tree, from2, index2, _parent) {
      super();
      this._tree = _tree;
      this.from = from2;
      this.index = index2;
      this._parent = _parent;
    }
    get type() {
      return this._tree.type;
    }
    get name() {
      return this._tree.type.name;
    }
    get to() {
      return this.from + this._tree.length;
    }
    nextChild(i3, dir, pos, side, mode = 0) {
      for (let parent = this; ; ) {
        for (let { children, positions } = parent._tree, e3 = dir > 0 ? children.length : -1; i3 != e3; i3 += dir) {
          let next = children[i3], start = positions[i3] + parent.from;
          if (!checkSide(side, pos, start, start + next.length))
            continue;
          if (next instanceof TreeBuffer) {
            if (mode & IterMode.ExcludeBuffers)
              continue;
            let index2 = next.findChild(0, next.buffer.length, dir, pos - start, side);
            if (index2 > -1)
              return new BufferNode(new BufferContext(parent, next, i3, start), null, index2);
          } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
            let mounted;
            if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
              return new _TreeNode(mounted.tree, start, i3, parent);
            let inner = new _TreeNode(next, start, i3, parent);
            return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
          }
        }
        if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
          return null;
        if (parent.index >= 0)
          i3 = parent.index + dir;
        else
          i3 = dir < 0 ? -1 : parent._parent._tree.children.length;
        parent = parent._parent;
        if (!parent)
          return null;
      }
    }
    get firstChild() {
      return this.nextChild(
        0,
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    get lastChild() {
      return this.nextChild(
        this._tree.children.length - 1,
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    childAfter(pos) {
      return this.nextChild(
        0,
        1,
        pos,
        2
        /* Side.After */
      );
    }
    childBefore(pos) {
      return this.nextChild(
        this._tree.children.length - 1,
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    enter(pos, side, mode = 0) {
      let mounted;
      if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
        let rPos = pos - this.from;
        for (let { from: from2, to } of mounted.overlay) {
          if ((side > 0 ? from2 <= rPos : from2 < rPos) && (side < 0 ? to >= rPos : to > rPos))
            return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
        }
      }
      return this.nextChild(0, 1, pos, side, mode);
    }
    nextSignificantParent() {
      let val = this;
      while (val.type.isAnonymous && val._parent)
        val = val._parent;
      return val;
    }
    get parent() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
    get nextSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(
        this.index + 1,
        1,
        0,
        4
        /* Side.DontCare */
      ) : null;
    }
    get prevSibling() {
      return this._parent && this.index >= 0 ? this._parent.nextChild(
        this.index - 1,
        -1,
        0,
        4
        /* Side.DontCare */
      ) : null;
    }
    get tree() {
      return this._tree;
    }
    toTree() {
      return this._tree;
    }
    /**
    @internal
    */
    toString() {
      return this._tree.toString();
    }
  };
  function getChildren(node2, type, before, after) {
    let cur2 = node2.cursor(), result = [];
    if (!cur2.firstChild())
      return result;
    if (before != null)
      for (let found2 = false; !found2; ) {
        found2 = cur2.type.is(before);
        if (!cur2.nextSibling())
          return result;
      }
    for (; ; ) {
      if (after != null && cur2.type.is(after))
        return result;
      if (cur2.type.is(type))
        result.push(cur2.node);
      if (!cur2.nextSibling())
        return after == null ? result : [];
    }
  }
  function matchNodeContext(node2, context, i3 = context.length - 1) {
    for (let p6 = node2.parent; i3 >= 0; p6 = p6.parent) {
      if (!p6)
        return false;
      if (!p6.type.isAnonymous) {
        if (context[i3] && context[i3] != p6.name)
          return false;
        i3--;
      }
    }
    return true;
  }
  var BufferContext = class {
    constructor(parent, buffer, index2, start) {
      this.parent = parent;
      this.buffer = buffer;
      this.index = index2;
      this.start = start;
    }
  };
  var BufferNode = class _BufferNode extends BaseNode {
    get name() {
      return this.type.name;
    }
    get from() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
    get to() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
    constructor(context, _parent, index2) {
      super();
      this.context = context;
      this._parent = _parent;
      this.index = index2;
      this.type = context.buffer.set.types[context.buffer.buffer[index2]];
    }
    child(dir, pos, side) {
      let { buffer } = this.context;
      let index2 = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
      return index2 < 0 ? null : new _BufferNode(this.context, this, index2);
    }
    get firstChild() {
      return this.child(
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    get lastChild() {
      return this.child(
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    childAfter(pos) {
      return this.child(
        1,
        pos,
        2
        /* Side.After */
      );
    }
    childBefore(pos) {
      return this.child(
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    enter(pos, side, mode = 0) {
      if (mode & IterMode.ExcludeBuffers)
        return null;
      let { buffer } = this.context;
      let index2 = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
      return index2 < 0 ? null : new _BufferNode(this.context, this, index2);
    }
    get parent() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
    externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(
        this.context.index + dir,
        dir,
        0,
        4
        /* Side.DontCare */
      );
    }
    get nextSibling() {
      let { buffer } = this.context;
      let after = buffer.buffer[this.index + 3];
      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
        return new _BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
    get prevSibling() {
      let { buffer } = this.context;
      let parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart)
        return this.externalSibling(-1);
      return new _BufferNode(this.context, this._parent, buffer.findChild(
        parentStart,
        this.index,
        -1,
        0,
        4
        /* Side.DontCare */
      ));
    }
    get tree() {
      return null;
    }
    toTree() {
      let children = [], positions = [];
      let { buffer } = this.context;
      let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
      if (endI > startI) {
        let from2 = buffer.buffer[this.index + 1];
        children.push(buffer.slice(startI, endI, from2));
        positions.push(0);
      }
      return new Tree(this.type, children, positions, this.to - this.from);
    }
    /**
    @internal
    */
    toString() {
      return this.context.buffer.childString(this.index);
    }
  };
  function iterStack(heads) {
    if (!heads.length)
      return null;
    let pick = 0, picked = heads[0];
    for (let i3 = 1; i3 < heads.length; i3++) {
      let node2 = heads[i3];
      if (node2.from > picked.from || node2.to < picked.to) {
        picked = node2;
        pick = i3;
      }
    }
    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
    let newHeads = heads.slice();
    if (next)
      newHeads[pick] = next;
    else
      newHeads.splice(pick, 1);
    return new StackIterator(newHeads, picked);
  }
  var StackIterator = class {
    constructor(heads, node2) {
      this.heads = heads;
      this.node = node2;
    }
    get next() {
      return iterStack(this.heads);
    }
  };
  function stackIterator(tree, pos, side) {
    let inner = tree.resolveInner(pos, side), layers = null;
    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
      if (scan.index < 0) {
        let parent = scan.parent;
        (layers || (layers = [inner])).push(parent.resolve(pos, side));
        scan = parent;
      } else {
        let mount = MountedTree.get(scan.tree);
        if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
          let root2 = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
          (layers || (layers = [inner])).push(resolveNode(root2, pos, side, false));
        }
      }
    }
    return layers ? iterStack(layers) : inner;
  }
  var TreeCursor = class {
    /**
    Shorthand for `.type.name`.
    */
    get name() {
      return this.type.name;
    }
    /**
    @internal
    */
    constructor(node2, mode = 0) {
      this.mode = mode;
      this.buffer = null;
      this.stack = [];
      this.index = 0;
      this.bufferNode = null;
      if (node2 instanceof TreeNode) {
        this.yieldNode(node2);
      } else {
        this._tree = node2.context.parent;
        this.buffer = node2.context;
        for (let n5 = node2._parent; n5; n5 = n5._parent)
          this.stack.unshift(n5.index);
        this.bufferNode = node2;
        this.yieldBuf(node2.index);
      }
    }
    yieldNode(node2) {
      if (!node2)
        return false;
      this._tree = node2;
      this.type = node2.type;
      this.from = node2.from;
      this.to = node2.to;
      return true;
    }
    yieldBuf(index2, type) {
      this.index = index2;
      let { start, buffer } = this.buffer;
      this.type = type || buffer.set.types[buffer.buffer[index2]];
      this.from = start + buffer.buffer[index2 + 1];
      this.to = start + buffer.buffer[index2 + 2];
      return true;
    }
    /**
    @internal
    */
    yield(node2) {
      if (!node2)
        return false;
      if (node2 instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node2);
      }
      this.buffer = node2.context;
      return this.yieldBuf(node2.index, node2.type);
    }
    /**
    @internal
    */
    toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /**
    @internal
    */
    enterChild(dir, pos, side) {
      if (!this.buffer)
        return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
      let { buffer } = this.buffer;
      let index2 = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
      if (index2 < 0)
        return false;
      this.stack.push(this.index);
      return this.yieldBuf(index2);
    }
    /**
    Move the cursor to this node's first child. When this returns
    false, the node has no child, and the cursor has not been moved.
    */
    firstChild() {
      return this.enterChild(
        1,
        0,
        4
        /* Side.DontCare */
      );
    }
    /**
    Move the cursor to this node's last child.
    */
    lastChild() {
      return this.enterChild(
        -1,
        0,
        4
        /* Side.DontCare */
      );
    }
    /**
    Move the cursor to the first child that ends after `pos`.
    */
    childAfter(pos) {
      return this.enterChild(
        1,
        pos,
        2
        /* Side.After */
      );
    }
    /**
    Move to the last child that starts before `pos`.
    */
    childBefore(pos) {
      return this.enterChild(
        -1,
        pos,
        -2
        /* Side.Before */
      );
    }
    /**
    Move the cursor to the child around `pos`. If side is -1 the
    child may end at that position, when 1 it may start there. This
    will also enter [overlaid](#common.MountedTree.overlay)
    [mounted](#common.NodeProp^mounted) trees unless `overlays` is
    set to false.
    */
    enter(pos, side, mode = this.mode) {
      if (!this.buffer)
        return this.yield(this._tree.enter(pos, side, mode));
      return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
    }
    /**
    Move to the node's parent node, if this isn't the top node.
    */
    parent() {
      if (!this.buffer)
        return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
      if (this.stack.length)
        return this.yieldBuf(this.stack.pop());
      let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /**
    @internal
    */
    sibling(dir) {
      if (!this.buffer)
        return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
      let { buffer } = this.buffer, d6 = this.stack.length - 1;
      if (dir < 0) {
        let parentStart = d6 < 0 ? 0 : this.stack[d6] + 4;
        if (this.index != parentStart)
          return this.yieldBuf(buffer.findChild(
            parentStart,
            this.index,
            -1,
            0,
            4
            /* Side.DontCare */
          ));
      } else {
        let after = buffer.buffer[this.index + 3];
        if (after < (d6 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d6] + 3]))
          return this.yieldBuf(after);
      }
      return d6 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
    }
    /**
    Move to this node's next sibling, if any.
    */
    nextSibling() {
      return this.sibling(1);
    }
    /**
    Move to this node's previous sibling, if any.
    */
    prevSibling() {
      return this.sibling(-1);
    }
    atLastNode(dir) {
      let index2, parent, { buffer } = this;
      if (buffer) {
        if (dir > 0) {
          if (this.index < buffer.buffer.buffer.length)
            return false;
        } else {
          for (let i3 = 0; i3 < this.index; i3++)
            if (buffer.buffer.buffer[i3 + 3] < this.index)
              return false;
        }
        ({ index: index2, parent } = buffer);
      } else {
        ({ index: index2, _parent: parent } = this._tree);
      }
      for (; parent; { index: index2, _parent: parent } = parent) {
        if (index2 > -1)
          for (let i3 = index2 + dir, e3 = dir < 0 ? -1 : parent._tree.children.length; i3 != e3; i3 += dir) {
            let child = parent._tree.children[i3];
            if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
              return false;
          }
      }
      return true;
    }
    move(dir, enter) {
      if (enter && this.enterChild(
        dir,
        0,
        4
        /* Side.DontCare */
      ))
        return true;
      for (; ; ) {
        if (this.sibling(dir))
          return true;
        if (this.atLastNode(dir) || !this.parent())
          return false;
      }
    }
    /**
    Move to the next node in a
    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
    traversal, going from a node to its first child or, if the
    current node is empty or `enter` is false, its next sibling or
    the next sibling of the first parent node that has one.
    */
    next(enter = true) {
      return this.move(1, enter);
    }
    /**
    Move to the next node in a last-to-first pre-order traveral. A
    node is followed by its last child or, if it has none, its
    previous sibling or the previous sibling of the first parent
    node that has one.
    */
    prev(enter = true) {
      return this.move(-1, enter);
    }
    /**
    Move the cursor to the innermost node that covers `pos`. If
    `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    it will enter nodes that start at `pos`.
    */
    moveTo(pos, side = 0) {
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
        if (!this.parent())
          break;
      while (this.enterChild(1, pos, side)) {
      }
      return this;
    }
    /**
    Get a [syntax node](#common.SyntaxNode) at the cursor's current
    position.
    */
    get node() {
      if (!this.buffer)
        return this._tree;
      let cache2 = this.bufferNode, result = null, depth2 = 0;
      if (cache2 && cache2.context == this.buffer) {
        scan:
          for (let index2 = this.index, d6 = this.stack.length; d6 >= 0; ) {
            for (let c5 = cache2; c5; c5 = c5._parent)
              if (c5.index == index2) {
                if (index2 == this.index)
                  return c5;
                result = c5;
                depth2 = d6 + 1;
                break scan;
              }
            index2 = this.stack[--d6];
          }
      }
      for (let i3 = depth2; i3 < this.stack.length; i3++)
        result = new BufferNode(this.buffer, result, this.stack[i3]);
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /**
    Get the [tree](#common.Tree) that represents the current node, if
    any. Will return null when the node is in a [tree
    buffer](#common.TreeBuffer).
    */
    get tree() {
      return this.buffer ? null : this._tree._tree;
    }
    /**
    Iterate over the current node and all its descendants, calling
    `enter` when entering a node and `leave`, if given, when leaving
    one. When `enter` returns `false`, any children of that node are
    skipped, and `leave` isn't called for it.
    */
    iterate(enter, leave) {
      for (let depth2 = 0; ; ) {
        let mustLeave = false;
        if (this.type.isAnonymous || enter(this) !== false) {
          if (this.firstChild()) {
            depth2++;
            continue;
          }
          if (!this.type.isAnonymous)
            mustLeave = true;
        }
        for (; ; ) {
          if (mustLeave && leave)
            leave(this);
          mustLeave = this.type.isAnonymous;
          if (this.nextSibling())
            break;
          if (!depth2)
            return;
          this.parent();
          depth2--;
          mustLeave = true;
        }
      }
    }
    /**
    Test whether the current node matches a given context—a sequence
    of direct parent node names. Empty strings in the context array
    are treated as wildcards.
    */
    matchContext(context) {
      if (!this.buffer)
        return matchNodeContext(this.node, context);
      let { buffer } = this.buffer, { types: types2 } = buffer.set;
      for (let i3 = context.length - 1, d6 = this.stack.length - 1; i3 >= 0; d6--) {
        if (d6 < 0)
          return matchNodeContext(this.node, context, i3);
        let type = types2[buffer.buffer[this.stack[d6]]];
        if (!type.isAnonymous) {
          if (context[i3] && context[i3] != type.name)
            return false;
          i3--;
        }
      }
      return true;
    }
  };
  function hasChild(tree) {
    return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
  }
  function buildTree(data) {
    var _a2;
    let { buffer, nodeSet: nodeSet2, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet2.types.length } = data;
    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
    let types2 = nodeSet2.types;
    let contextHash = 0, lookAhead = 0;
    function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth2) {
      let { id: id2, start, end, size } = cursor;
      let lookAheadAtStart = lookAhead;
      while (size < 0) {
        cursor.next();
        if (size == -1) {
          let node3 = reused[id2];
          children2.push(node3);
          positions2.push(start - parentStart);
          return;
        } else if (size == -3) {
          contextHash = id2;
          return;
        } else if (size == -4) {
          lookAhead = id2;
          return;
        } else {
          throw new RangeError(`Unrecognized record size: ${size}`);
        }
      }
      let type = types2[id2], node2, buffer2;
      let startPos = start - parentStart;
      if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
        let data2 = new Uint16Array(buffer2.size - buffer2.skip);
        let endPos = cursor.pos - buffer2.size, index2 = data2.length;
        while (cursor.pos > endPos)
          index2 = copyToBuffer(buffer2.start, data2, index2);
        node2 = new TreeBuffer(data2, end - buffer2.start, nodeSet2);
        startPos = buffer2.start - parentStart;
      } else {
        let endPos = cursor.pos - size;
        cursor.next();
        let localChildren = [], localPositions = [];
        let localInRepeat = id2 >= minRepeatType ? id2 : -1;
        let lastGroup = 0, lastEnd = end;
        while (cursor.pos > endPos) {
          if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
            if (cursor.end <= lastEnd - maxBufferLength) {
              makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
              lastGroup = localChildren.length;
              lastEnd = cursor.end;
            }
            cursor.next();
          } else if (depth2 > 2500) {
            takeFlatNode(start, endPos, localChildren, localPositions);
          } else {
            takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth2 + 1);
          }
        }
        if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
          makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
        localChildren.reverse();
        localPositions.reverse();
        if (localInRepeat > -1 && lastGroup > 0) {
          let make = makeBalanced(type);
          node2 = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
        } else {
          node2 = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
        }
      }
      children2.push(node2);
      positions2.push(startPos);
    }
    function takeFlatNode(parentStart, minPos, children2, positions2) {
      let nodes = [];
      let nodeCount = 0, stopAt = -1;
      while (cursor.pos > minPos) {
        let { id: id2, start, end, size } = cursor;
        if (size > 4) {
          cursor.next();
        } else if (stopAt > -1 && start < stopAt) {
          break;
        } else {
          if (stopAt < 0)
            stopAt = end - maxBufferLength;
          nodes.push(id2, start, end);
          nodeCount++;
          cursor.next();
        }
      }
      if (nodeCount) {
        let buffer2 = new Uint16Array(nodeCount * 4);
        let start = nodes[nodes.length - 2];
        for (let i3 = nodes.length - 3, j6 = 0; i3 >= 0; i3 -= 3) {
          buffer2[j6++] = nodes[i3];
          buffer2[j6++] = nodes[i3 + 1] - start;
          buffer2[j6++] = nodes[i3 + 2] - start;
          buffer2[j6++] = j6;
        }
        children2.push(new TreeBuffer(buffer2, nodes[2] - start, nodeSet2));
        positions2.push(start - parentStart);
      }
    }
    function makeBalanced(type) {
      return (children2, positions2, length2) => {
        let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
        if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
          if (!lastI && last.type == type && last.length == length2)
            return last;
          if (lookAheadProp = last.prop(NodeProp.lookAhead))
            lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
        }
        return makeTree(type, children2, positions2, length2, lookAhead2);
      };
    }
    function makeRepeatLeaf(children2, positions2, base2, i3, from2, to, type, lookAhead2) {
      let localChildren = [], localPositions = [];
      while (children2.length > i3) {
        localChildren.push(children2.pop());
        localPositions.push(positions2.pop() + base2 - from2);
      }
      children2.push(makeTree(nodeSet2.types[type], localChildren, localPositions, to - from2, lookAhead2 - to));
      positions2.push(from2 - base2);
    }
    function makeTree(type, children2, positions2, length2, lookAhead2 = 0, props) {
      if (contextHash) {
        let pair2 = [NodeProp.contextHash, contextHash];
        props = props ? [pair2].concat(props) : [pair2];
      }
      if (lookAhead2 > 25) {
        let pair2 = [NodeProp.lookAhead, lookAhead2];
        props = props ? [pair2].concat(props) : [pair2];
      }
      return new Tree(type, children2, positions2, length2, props);
    }
    function findBufferSize(maxSize, inRepeat) {
      let fork = cursor.fork();
      let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
      let result = { size: 0, start: 0, skip: 0 };
      scan:
        for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
          let nodeSize3 = fork.size;
          if (fork.id == inRepeat && nodeSize3 >= 0) {
            result.size = size;
            result.start = start;
            result.skip = skip;
            skip += 4;
            size += 4;
            fork.next();
            continue;
          }
          let startPos = fork.pos - nodeSize3;
          if (nodeSize3 < 0 || startPos < minPos || fork.start < minStart)
            break;
          let localSkipped = fork.id >= minRepeatType ? 4 : 0;
          let nodeStart2 = fork.start;
          fork.next();
          while (fork.pos > startPos) {
            if (fork.size < 0) {
              if (fork.size == -3)
                localSkipped += 4;
              else
                break scan;
            } else if (fork.id >= minRepeatType) {
              localSkipped += 4;
            }
            fork.next();
          }
          start = nodeStart2;
          size += nodeSize3;
          skip += localSkipped;
        }
      if (inRepeat < 0 || size == maxSize) {
        result.size = size;
        result.start = start;
        result.skip = skip;
      }
      return result.size > 4 ? result : void 0;
    }
    function copyToBuffer(bufferStart, buffer2, index2) {
      let { id: id2, start, end, size } = cursor;
      cursor.next();
      if (size >= 0 && id2 < minRepeatType) {
        let startIndex = index2;
        if (size > 4) {
          let endPos = cursor.pos - (size - 4);
          while (cursor.pos > endPos)
            index2 = copyToBuffer(bufferStart, buffer2, index2);
        }
        buffer2[--index2] = startIndex;
        buffer2[--index2] = end - bufferStart;
        buffer2[--index2] = start - bufferStart;
        buffer2[--index2] = id2;
      } else if (size == -3) {
        contextHash = id2;
      } else if (size == -4) {
        lookAhead = id2;
      }
      return index2;
    }
    let children = [], positions = [];
    while (cursor.pos > 0)
      takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
    let length = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
    return new Tree(types2[data.topID], children.reverse(), positions.reverse(), length);
  }
  var nodeSizeCache = /* @__PURE__ */ new WeakMap();
  function nodeSize(balanceType, node2) {
    if (!balanceType.isAnonymous || node2 instanceof TreeBuffer || node2.type != balanceType)
      return 1;
    let size = nodeSizeCache.get(node2);
    if (size == null) {
      size = 1;
      for (let child of node2.children) {
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
      nodeSizeCache.set(node2, size);
    }
    return size;
  }
  function balanceRange(balanceType, children, positions, from2, to, start, length, mkTop, mkTree) {
    let total = 0;
    for (let i3 = from2; i3 < to; i3++)
      total += nodeSize(balanceType, children[i3]);
    let maxChild = Math.ceil(
      total * 1.5 / 8
      /* Balance.BranchFactor */
    );
    let localChildren = [], localPositions = [];
    function divide(children2, positions2, from3, to2, offset) {
      for (let i3 = from3; i3 < to2; ) {
        let groupFrom = i3, groupStart = positions2[i3], groupSize = nodeSize(balanceType, children2[i3]);
        i3++;
        for (; i3 < to2; i3++) {
          let nextSize = nodeSize(balanceType, children2[i3]);
          if (groupSize + nextSize >= maxChild)
            break;
          groupSize += nextSize;
        }
        if (i3 == groupFrom + 1) {
          if (groupSize > maxChild) {
            let only = children2[groupFrom];
            divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
            continue;
          }
          localChildren.push(children2[groupFrom]);
        } else {
          let length2 = positions2[i3 - 1] + children2[i3 - 1].length - groupStart;
          localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i3, groupStart, length2, null, mkTree));
        }
        localPositions.push(groupStart + offset - start);
      }
    }
    divide(children, positions, from2, to, 0);
    return (mkTop || mkTree)(localChildren, localPositions, length);
  }
  var NodeWeakMap = class {
    constructor() {
      this.map = /* @__PURE__ */ new WeakMap();
    }
    setBuffer(buffer, index2, value) {
      let inner = this.map.get(buffer);
      if (!inner)
        this.map.set(buffer, inner = /* @__PURE__ */ new Map());
      inner.set(index2, value);
    }
    getBuffer(buffer, index2) {
      let inner = this.map.get(buffer);
      return inner && inner.get(index2);
    }
    /**
    Set the value for this syntax node.
    */
    set(node2, value) {
      if (node2 instanceof BufferNode)
        this.setBuffer(node2.context.buffer, node2.index, value);
      else if (node2 instanceof TreeNode)
        this.map.set(node2.tree, value);
    }
    /**
    Retrieve value for this syntax node, if it exists in the map.
    */
    get(node2) {
      return node2 instanceof BufferNode ? this.getBuffer(node2.context.buffer, node2.index) : node2 instanceof TreeNode ? this.map.get(node2.tree) : void 0;
    }
    /**
    Set the value for the node that a cursor currently points to.
    */
    cursorSet(cursor, value) {
      if (cursor.buffer)
        this.setBuffer(cursor.buffer.buffer, cursor.index, value);
      else
        this.map.set(cursor.tree, value);
    }
    /**
    Retrieve the value for the node that a cursor currently points
    to.
    */
    cursorGet(cursor) {
      return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
    }
  };
  var TreeFragment = class _TreeFragment {
    /**
    Construct a tree fragment. You'll usually want to use
    [`addTree`](#common.TreeFragment^addTree) and
    [`applyChanges`](#common.TreeFragment^applyChanges) instead of
    calling this directly.
    */
    constructor(from2, to, tree, offset, openStart = false, openEnd = false) {
      this.from = from2;
      this.to = to;
      this.tree = tree;
      this.offset = offset;
      this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
    }
    /**
    Whether the start of the fragment represents the start of a
    parse, or the end of a change. (In the second case, it may not
    be safe to reuse some nodes at the start, depending on the
    parsing algorithm.)
    */
    get openStart() {
      return (this.open & 1) > 0;
    }
    /**
    Whether the end of the fragment represents the end of a
    full-document parse, or the start of a change.
    */
    get openEnd() {
      return (this.open & 2) > 0;
    }
    /**
    Create a set of fragments from a freshly parsed tree, or update
    an existing set of fragments by replacing the ones that overlap
    with a tree with content from the new tree. When `partial` is
    true, the parse is treated as incomplete, and the resulting
    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
    true.
    */
    static addTree(tree, fragments = [], partial = false) {
      let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
      for (let f3 of fragments)
        if (f3.to > tree.length)
          result.push(f3);
      return result;
    }
    /**
    Apply a set of edits to an array of fragments, removing or
    splitting fragments as necessary to remove edited ranges, and
    adjusting offsets for fragments that moved.
    */
    static applyChanges(fragments, changes, minGap = 128) {
      if (!changes.length)
        return fragments;
      let result = [];
      let fI = 1, nextF = fragments.length ? fragments[0] : null;
      for (let cI = 0, pos = 0, off = 0; ; cI++) {
        let nextC = cI < changes.length ? changes[cI] : null;
        let nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap)
          while (nextF && nextF.from < nextPos) {
            let cut = nextF;
            if (pos >= cut.from || nextPos <= cut.to || off) {
              let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
              cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
            }
            if (cut)
              result.push(cut);
            if (nextF.to > nextPos)
              break;
            nextF = fI < fragments.length ? fragments[fI++] : null;
          }
        if (!nextC)
          break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
  };
  var Parser = class {
    /**
    Start a parse, returning a [partial parse](#common.PartialParse)
    object. [`fragments`](#common.TreeFragment) can be passed in to
    make the parse incremental.
    
    By default, the entire input is parsed. You can pass `ranges`,
    which should be a sorted array of non-empty, non-overlapping
    ranges, to parse only those ranges. The tree returned in that
    case will start at `ranges[0].from`.
    */
    startParse(input, fragments, ranges) {
      if (typeof input == "string")
        input = new StringInput(input);
      ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r4) => new Range2(r4.from, r4.to)) : [new Range2(0, 0)];
      return this.createParse(input, fragments || [], ranges);
    }
    /**
    Run a full parse, returning the resulting tree.
    */
    parse(input, fragments, ranges) {
      let parse2 = this.startParse(input, fragments, ranges);
      for (; ; ) {
        let done = parse2.advance();
        if (done)
          return done;
      }
    }
  };
  var StringInput = class {
    constructor(string4) {
      this.string = string4;
    }
    get length() {
      return this.string.length;
    }
    chunk(from2) {
      return this.string.slice(from2);
    }
    get lineChunks() {
      return false;
    }
    read(from2, to) {
      return this.string.slice(from2, to);
    }
  };
  var stoppedInner = new NodeProp({ perNode: true });

  // node_modules/@lezer/highlight/dist/index.js
  var nextTagID = 0;
  var Tag = class _Tag {
    /**
    @internal
    */
    constructor(set, base2, modified) {
      this.set = set;
      this.base = base2;
      this.modified = modified;
      this.id = nextTagID++;
    }
    /**
    Define a new tag. If `parent` is given, the tag is treated as a
    sub-tag of that parent, and
    [highlighters](#highlight.tagHighlighter) that don't mention
    this tag will try to fall back to the parent tag (or grandparent
    tag, etc).
    */
    static define(parent) {
      if (parent === null || parent === void 0 ? void 0 : parent.base)
        throw new Error("Can not derive from a modified tag");
      let tag = new _Tag([], null, []);
      tag.set.push(tag);
      if (parent)
        for (let t4 of parent.set)
          tag.set.push(t4);
      return tag;
    }
    /**
    Define a tag _modifier_, which is a function that, given a tag,
    will return a tag that is a subtag of the original. Applying the
    same modifier to a twice tag will return the same value (`m1(t1)
    == m1(t1)`) and applying multiple modifiers will, regardless or
    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    
    When multiple modifiers are applied to a given base tag, each
    smaller set of modifiers is registered as a parent, so that for
    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    `m1(m3(t1)`, and so on.
    */
    static defineModifier() {
      let mod = new Modifier();
      return (tag) => {
        if (tag.modified.indexOf(mod) > -1)
          return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a2, b4) => a2.id - b4.id));
      };
    }
  };
  var nextModifierID = 0;
  var Modifier = class _Modifier {
    constructor() {
      this.instances = [];
      this.id = nextModifierID++;
    }
    static get(base2, mods) {
      if (!mods.length)
        return base2;
      let exists = mods[0].instances.find((t4) => t4.base == base2 && sameArray2(mods, t4.modified));
      if (exists)
        return exists;
      let set = [], tag = new Tag(set, base2, mods);
      for (let m4 of mods)
        m4.instances.push(tag);
      let configs = powerSet(mods);
      for (let parent of base2.set)
        if (!parent.modified.length)
          for (let config2 of configs)
            set.push(_Modifier.get(parent, config2));
      return tag;
    }
  };
  function sameArray2(a2, b4) {
    return a2.length == b4.length && a2.every((x7, i3) => x7 == b4[i3]);
  }
  function powerSet(array) {
    let sets = [[]];
    for (let i3 = 0; i3 < array.length; i3++) {
      for (let j6 = 0, e3 = sets.length; j6 < e3; j6++) {
        sets.push(sets[j6].concat(array[i3]));
      }
    }
    return sets.sort((a2, b4) => b4.length - a2.length);
  }
  function styleTags(spec) {
    let byName = /* @__PURE__ */ Object.create(null);
    for (let prop in spec) {
      let tags2 = spec[prop];
      if (!Array.isArray(tags2))
        tags2 = [tags2];
      for (let part of prop.split(" "))
        if (part) {
          let pieces = [], mode = 2, rest = part;
          for (let pos = 0; ; ) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1;
              break;
            }
            let m4 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m4)
              throw new RangeError("Invalid path: " + part);
            pieces.push(m4[0] == "*" ? "" : m4[0][0] == '"' ? JSON.parse(m4[0]) : m4[0]);
            pos += m4[0].length;
            if (pos == part.length)
              break;
            let next = part[pos++];
            if (pos == part.length && next == "!") {
              mode = 0;
              break;
            }
            if (next != "/")
              throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          let last = pieces.length - 1, inner = pieces[last];
          if (!inner)
            throw new RangeError("Invalid path: " + part);
          let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
    }
    return ruleNodeProp.add(byName);
  }
  var ruleNodeProp = new NodeProp();
  var Rule = class {
    constructor(tags2, mode, context, next) {
      this.tags = tags2;
      this.mode = mode;
      this.context = context;
      this.next = next;
    }
    get opaque() {
      return this.mode == 0;
    }
    get inherit() {
      return this.mode == 1;
    }
    sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
    get depth() {
      return this.context ? this.context.length : 0;
    }
  };
  Rule.empty = new Rule([], 2, null);
  function tagHighlighter(tags2, options) {
    let map6 = /* @__PURE__ */ Object.create(null);
    for (let style of tags2) {
      if (!Array.isArray(style.tag))
        map6[style.tag.id] = style.class;
      else
        for (let tag of style.tag)
          map6[tag.id] = style.class;
    }
    let { scope, all: all2 = null } = options || {};
    return {
      style: (tags3) => {
        let cls = all2;
        for (let tag of tags3) {
          for (let sub of tag.set) {
            let tagClass = map6[sub.id];
            if (tagClass) {
              cls = cls ? cls + " " + tagClass : tagClass;
              break;
            }
          }
        }
        return cls;
      },
      scope
    };
  }
  function highlightTags(highlighters, tags2) {
    let result = null;
    for (let highlighter of highlighters) {
      let value = highlighter.style(tags2);
      if (value)
        result = result ? result + " " + value : value;
    }
    return result;
  }
  function highlightTree(tree, highlighter, putStyle, from2 = 0, to = tree.length) {
    let builder = new HighlightBuilder(from2, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
    builder.highlightRange(tree.cursor(), from2, to, "", builder.highlighters);
    builder.flush(to);
  }
  var HighlightBuilder = class {
    constructor(at4, highlighters, span) {
      this.at = at4;
      this.highlighters = highlighters;
      this.span = span;
      this.class = "";
    }
    startSpan(at4, cls) {
      if (cls != this.class) {
        this.flush(at4);
        if (at4 > this.at)
          this.at = at4;
        this.class = cls;
      }
    }
    flush(to) {
      if (to > this.at && this.class)
        this.span(this.at, to, this.class);
    }
    highlightRange(cursor, from2, to, inheritedClass, highlighters) {
      let { type, from: start, to: end } = cursor;
      if (start >= to || end <= from2)
        return;
      if (type.isTop)
        highlighters = this.highlighters.filter((h3) => !h3.scope || h3.scope(type));
      let cls = inheritedClass;
      let rule = getStyleTags(cursor) || Rule.empty;
      let tagCls = highlightTags(highlighters, rule.tags);
      if (tagCls) {
        if (cls)
          cls += " ";
        cls += tagCls;
        if (rule.mode == 1)
          inheritedClass += (inheritedClass ? " " : "") + tagCls;
      }
      this.startSpan(Math.max(from2, start), cls);
      if (rule.opaque)
        return;
      let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
      if (mounted && mounted.overlay) {
        let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
        let innerHighlighters = this.highlighters.filter((h3) => !h3.scope || h3.scope(mounted.tree.type));
        let hasChild2 = cursor.firstChild();
        for (let i3 = 0, pos = start; ; i3++) {
          let next = i3 < mounted.overlay.length ? mounted.overlay[i3] : null;
          let nextPos = next ? next.from + start : end;
          let rangeFrom = Math.max(from2, pos), rangeTo = Math.min(to, nextPos);
          if (rangeFrom < rangeTo && hasChild2) {
            while (cursor.from < rangeTo) {
              this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
              this.startSpan(Math.min(rangeTo, cursor.to), cls);
              if (cursor.to >= nextPos || !cursor.nextSibling())
                break;
            }
          }
          if (!next || nextPos > to)
            break;
          pos = next.to + start;
          if (pos > from2) {
            this.highlightRange(inner.cursor(), Math.max(from2, next.from + start), Math.min(to, pos), "", innerHighlighters);
            this.startSpan(Math.min(to, pos), cls);
          }
        }
        if (hasChild2)
          cursor.parent();
      } else if (cursor.firstChild()) {
        if (mounted)
          inheritedClass = "";
        do {
          if (cursor.to <= from2)
            continue;
          if (cursor.from >= to)
            break;
          this.highlightRange(cursor, from2, to, inheritedClass, highlighters);
          this.startSpan(Math.min(to, cursor.to), cls);
        } while (cursor.nextSibling());
        cursor.parent();
      }
    }
  };
  function getStyleTags(node2) {
    let rule = node2.type.prop(ruleNodeProp);
    while (rule && rule.context && !node2.matchContext(rule.context))
      rule = rule.next;
    return rule || null;
  }
  var t = Tag.define;
  var comment = t();
  var name = t();
  var typeName = t(name);
  var propertyName = t(name);
  var literal = t();
  var string = t(literal);
  var number = t(literal);
  var content = t();
  var heading = t(content);
  var keyword = t();
  var operator = t();
  var punctuation = t();
  var bracket = t(punctuation);
  var meta = t();
  var tags = {
    /**
    A comment.
    */
    comment,
    /**
    A line [comment](#highlight.tags.comment).
    */
    lineComment: t(comment),
    /**
    A block [comment](#highlight.tags.comment).
    */
    blockComment: t(comment),
    /**
    A documentation [comment](#highlight.tags.comment).
    */
    docComment: t(comment),
    /**
    Any kind of identifier.
    */
    name,
    /**
    The [name](#highlight.tags.name) of a variable.
    */
    variableName: t(name),
    /**
    A type [name](#highlight.tags.name).
    */
    typeName,
    /**
    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
    */
    tagName: t(typeName),
    /**
    A property or field [name](#highlight.tags.name).
    */
    propertyName,
    /**
    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
    */
    attributeName: t(propertyName),
    /**
    The [name](#highlight.tags.name) of a class.
    */
    className: t(name),
    /**
    A label [name](#highlight.tags.name).
    */
    labelName: t(name),
    /**
    A namespace [name](#highlight.tags.name).
    */
    namespace: t(name),
    /**
    The [name](#highlight.tags.name) of a macro.
    */
    macroName: t(name),
    /**
    A literal value.
    */
    literal,
    /**
    A string [literal](#highlight.tags.literal).
    */
    string,
    /**
    A documentation [string](#highlight.tags.string).
    */
    docString: t(string),
    /**
    A character literal (subtag of [string](#highlight.tags.string)).
    */
    character: t(string),
    /**
    An attribute value (subtag of [string](#highlight.tags.string)).
    */
    attributeValue: t(string),
    /**
    A number [literal](#highlight.tags.literal).
    */
    number,
    /**
    An integer [number](#highlight.tags.number) literal.
    */
    integer: t(number),
    /**
    A floating-point [number](#highlight.tags.number) literal.
    */
    float: t(number),
    /**
    A boolean [literal](#highlight.tags.literal).
    */
    bool: t(literal),
    /**
    Regular expression [literal](#highlight.tags.literal).
    */
    regexp: t(literal),
    /**
    An escape [literal](#highlight.tags.literal), for example a
    backslash escape in a string.
    */
    escape: t(literal),
    /**
    A color [literal](#highlight.tags.literal).
    */
    color: t(literal),
    /**
    A URL [literal](#highlight.tags.literal).
    */
    url: t(literal),
    /**
    A language keyword.
    */
    keyword,
    /**
    The [keyword](#highlight.tags.keyword) for the self or this
    object.
    */
    self: t(keyword),
    /**
    The [keyword](#highlight.tags.keyword) for null.
    */
    null: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) denoting some atomic value.
    */
    atom: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that represents a unit.
    */
    unit: t(keyword),
    /**
    A modifier [keyword](#highlight.tags.keyword).
    */
    modifier: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that acts as an operator.
    */
    operatorKeyword: t(keyword),
    /**
    A control-flow related [keyword](#highlight.tags.keyword).
    */
    controlKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) that defines something.
    */
    definitionKeyword: t(keyword),
    /**
    A [keyword](#highlight.tags.keyword) related to defining or
    interfacing with modules.
    */
    moduleKeyword: t(keyword),
    /**
    An operator.
    */
    operator,
    /**
    An [operator](#highlight.tags.operator) that dereferences something.
    */
    derefOperator: t(operator),
    /**
    Arithmetic-related [operator](#highlight.tags.operator).
    */
    arithmeticOperator: t(operator),
    /**
    Logical [operator](#highlight.tags.operator).
    */
    logicOperator: t(operator),
    /**
    Bit [operator](#highlight.tags.operator).
    */
    bitwiseOperator: t(operator),
    /**
    Comparison [operator](#highlight.tags.operator).
    */
    compareOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that updates its operand.
    */
    updateOperator: t(operator),
    /**
    [Operator](#highlight.tags.operator) that defines something.
    */
    definitionOperator: t(operator),
    /**
    Type-related [operator](#highlight.tags.operator).
    */
    typeOperator: t(operator),
    /**
    Control-flow [operator](#highlight.tags.operator).
    */
    controlOperator: t(operator),
    /**
    Program or markup punctuation.
    */
    punctuation,
    /**
    [Punctuation](#highlight.tags.punctuation) that separates
    things.
    */
    separator: t(punctuation),
    /**
    Bracket-style [punctuation](#highlight.tags.punctuation).
    */
    bracket,
    /**
    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
    tokens).
    */
    angleBracket: t(bracket),
    /**
    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
    tokens).
    */
    squareBracket: t(bracket),
    /**
    Parentheses (usually `(` and `)` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    paren: t(bracket),
    /**
    Braces (usually `{` and `}` tokens). Subtag of
    [bracket](#highlight.tags.bracket).
    */
    brace: t(bracket),
    /**
    Content, for example plain text in XML or markup documents.
    */
    content,
    /**
    [Content](#highlight.tags.content) that represents a heading.
    */
    heading,
    /**
    A level 1 [heading](#highlight.tags.heading).
    */
    heading1: t(heading),
    /**
    A level 2 [heading](#highlight.tags.heading).
    */
    heading2: t(heading),
    /**
    A level 3 [heading](#highlight.tags.heading).
    */
    heading3: t(heading),
    /**
    A level 4 [heading](#highlight.tags.heading).
    */
    heading4: t(heading),
    /**
    A level 5 [heading](#highlight.tags.heading).
    */
    heading5: t(heading),
    /**
    A level 6 [heading](#highlight.tags.heading).
    */
    heading6: t(heading),
    /**
    A prose separator (such as a horizontal rule).
    */
    contentSeparator: t(content),
    /**
    [Content](#highlight.tags.content) that represents a list.
    */
    list: t(content),
    /**
    [Content](#highlight.tags.content) that represents a quote.
    */
    quote: t(content),
    /**
    [Content](#highlight.tags.content) that is emphasized.
    */
    emphasis: t(content),
    /**
    [Content](#highlight.tags.content) that is styled strong.
    */
    strong: t(content),
    /**
    [Content](#highlight.tags.content) that is part of a link.
    */
    link: t(content),
    /**
    [Content](#highlight.tags.content) that is styled as code or
    monospace.
    */
    monospace: t(content),
    /**
    [Content](#highlight.tags.content) that has a strike-through
    style.
    */
    strikethrough: t(content),
    /**
    Inserted text in a change-tracking format.
    */
    inserted: t(),
    /**
    Deleted text.
    */
    deleted: t(),
    /**
    Changed text.
    */
    changed: t(),
    /**
    An invalid or unsyntactic element.
    */
    invalid: t(),
    /**
    Metadata or meta-instruction.
    */
    meta,
    /**
    [Metadata](#highlight.tags.meta) that applies to the entire
    document.
    */
    documentMeta: t(meta),
    /**
    [Metadata](#highlight.tags.meta) that annotates or adds
    attributes to a given syntactic element.
    */
    annotation: t(meta),
    /**
    Processing instruction or preprocessor directive. Subtag of
    [meta](#highlight.tags.meta).
    */
    processingInstruction: t(meta),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that a
    given element is being defined. Expected to be used with the
    various [name](#highlight.tags.name) tags.
    */
    definition: Tag.defineModifier(),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates that
    something is constant. Mostly expected to be used with
    [variable names](#highlight.tags.variableName).
    */
    constant: Tag.defineModifier(),
    /**
    [Modifier](#highlight.Tag^defineModifier) used to indicate that
    a [variable](#highlight.tags.variableName) or [property
    name](#highlight.tags.propertyName) is being called or defined
    as a function.
    */
    function: Tag.defineModifier(),
    /**
    [Modifier](#highlight.Tag^defineModifier) that can be applied to
    [names](#highlight.tags.name) to indicate that they belong to
    the language's standard environment.
    */
    standard: Tag.defineModifier(),
    /**
    [Modifier](#highlight.Tag^defineModifier) that indicates a given
    [names](#highlight.tags.name) is local to some scope.
    */
    local: Tag.defineModifier(),
    /**
    A generic variant [modifier](#highlight.Tag^defineModifier) that
    can be used to tag language-specific alternative variants of
    some common tag. It is recommended for themes to define special
    forms of at least the [string](#highlight.tags.string) and
    [variable name](#highlight.tags.variableName) tags, since those
    come up a lot.
    */
    special: Tag.defineModifier()
  };
  var classHighlighter = tagHighlighter([
    { tag: tags.link, class: "tok-link" },
    { tag: tags.heading, class: "tok-heading" },
    { tag: tags.emphasis, class: "tok-emphasis" },
    { tag: tags.strong, class: "tok-strong" },
    { tag: tags.keyword, class: "tok-keyword" },
    { tag: tags.atom, class: "tok-atom" },
    { tag: tags.bool, class: "tok-bool" },
    { tag: tags.url, class: "tok-url" },
    { tag: tags.labelName, class: "tok-labelName" },
    { tag: tags.inserted, class: "tok-inserted" },
    { tag: tags.deleted, class: "tok-deleted" },
    { tag: tags.literal, class: "tok-literal" },
    { tag: tags.string, class: "tok-string" },
    { tag: tags.number, class: "tok-number" },
    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
    { tag: tags.variableName, class: "tok-variableName" },
    { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
    { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
    { tag: tags.special(tags.variableName), class: "tok-variableName2" },
    { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
    { tag: tags.typeName, class: "tok-typeName" },
    { tag: tags.namespace, class: "tok-namespace" },
    { tag: tags.className, class: "tok-className" },
    { tag: tags.macroName, class: "tok-macroName" },
    { tag: tags.propertyName, class: "tok-propertyName" },
    { tag: tags.operator, class: "tok-operator" },
    { tag: tags.comment, class: "tok-comment" },
    { tag: tags.meta, class: "tok-meta" },
    { tag: tags.invalid, class: "tok-invalid" },
    { tag: tags.punctuation, class: "tok-punctuation" }
  ]);

  // node_modules/@codemirror/language/dist/index.js
  var _a;
  var languageDataProp = /* @__PURE__ */ new NodeProp();
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? (values) => values.concat(baseData) : void 0
    });
  }
  var sublanguageProp = /* @__PURE__ */ new NodeProp();
  var Language = class {
    /**
    Construct a language object. If you need to invoke this
    directly, first define a data facet with
    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
    to the language's outer syntax node.
    */
    constructor(data, parser2, extraExtensions = [], name2 = "") {
      this.data = data;
      this.name = name2;
      if (!EditorState.prototype.hasOwnProperty("tree"))
        Object.defineProperty(EditorState.prototype, "tree", { get() {
          return syntaxTree(this);
        } });
      this.parser = parser2;
      this.extension = [
        language.of(this),
        EditorState.languageData.of((state, pos, side) => {
          let top2 = topNodeAt(state, pos, side), data2 = top2.type.prop(languageDataProp);
          if (!data2)
            return [];
          let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);
          if (sub) {
            let innerNode = top2.resolve(pos - top2.from, side);
            for (let sublang of sub)
              if (sublang.test(innerNode, state)) {
                let data3 = state.facet(sublang.facet);
                return sublang.type == "replace" ? data3 : data3.concat(base2);
              }
          }
          return base2;
        })
      ].concat(extraExtensions);
    }
    /**
    Query whether this language is active at the given position.
    */
    isActiveAt(state, pos, side = -1) {
      return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
    findRegions(state) {
      let lang = state.facet(language);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
        return [{ from: 0, to: state.doc.length }];
      if (!lang || !lang.allowsNesting)
        return [];
      let result = [];
      let explore = (tree, from2) => {
        if (tree.prop(languageDataProp) == this.data) {
          result.push({ from: from2, to: from2 + tree.length });
          return;
        }
        let mount = tree.prop(NodeProp.mounted);
        if (mount) {
          if (mount.tree.prop(languageDataProp) == this.data) {
            if (mount.overlay)
              for (let r4 of mount.overlay)
                result.push({ from: r4.from + from2, to: r4.to + from2 });
            else
              result.push({ from: from2, to: from2 + tree.length });
            return;
          } else if (mount.overlay) {
            let size = result.length;
            explore(mount.tree, mount.overlay[0].from + from2);
            if (result.length > size)
              return;
          }
        }
        for (let i3 = 0; i3 < tree.children.length; i3++) {
          let ch = tree.children[i3];
          if (ch instanceof Tree)
            explore(ch, tree.positions[i3] + from2);
        }
      };
      explore(syntaxTree(state), 0);
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
    get allowsNesting() {
      return true;
    }
  };
  Language.setState = /* @__PURE__ */ StateEffect.define();
  function topNodeAt(state, pos, side) {
    let topLang = state.facet(language), tree = syntaxTree(state).topNode;
    if (!topLang || topLang.allowsNesting) {
      for (let node2 = tree; node2; node2 = node2.enter(pos, side, IterMode.ExcludeBuffers))
        if (node2.type.isTop)
          tree = node2;
    }
    return tree;
  }
  var LRLanguage = class _LRLanguage extends Language {
    constructor(data, parser2, name2) {
      super(data, parser2, [], name2);
      this.parser = parser2;
    }
    /**
    Define a language from a parser.
    */
    static define(spec) {
      let data = defineLanguageFacet(spec.languageData);
      return new _LRLanguage(data, spec.parser.configure({
        props: [languageDataProp.add((type) => type.isTop ? data : void 0)]
      }), spec.name);
    }
    /**
    Create a new instance of this language with a reconfigured
    version of its parser and optionally a new name.
    */
    configure(options, name2) {
      return new _LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
    }
    get allowsNesting() {
      return this.parser.hasWrappers();
    }
  };
  function syntaxTree(state) {
    let field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  function ensureSyntaxTree(state, upto, timeout = 50) {
    var _a2;
    let parse2 = (_a2 = state.field(Language.state, false)) === null || _a2 === void 0 ? void 0 : _a2.context;
    if (!parse2)
      return null;
    let oldVieport = parse2.viewport;
    parse2.updateViewport({ from: 0, to: upto });
    let result = parse2.isDone(upto) || parse2.work(timeout, upto) ? parse2.tree : null;
    parse2.updateViewport(oldVieport);
    return result;
  }
  function syntaxTreeAvailable(state, upto = state.doc.length) {
    var _a2;
    return ((_a2 = state.field(Language.state, false)) === null || _a2 === void 0 ? void 0 : _a2.context.isDone(upto)) || false;
  }
  function forceParsing(view, upto = view.viewport.to, timeout = 100) {
    let success = ensureSyntaxTree(view.state, upto, timeout);
    if (success != syntaxTree(view.state))
      view.dispatch({});
    return !!success;
  }
  function syntaxParserRunning(view) {
    var _a2;
    return ((_a2 = view.plugin(parseWorker)) === null || _a2 === void 0 ? void 0 : _a2.isWorking()) || false;
  }
  var DocInput = class {
    /**
    Create an input object for the given document.
    */
    constructor(doc5) {
      this.doc = doc5;
      this.cursorPos = 0;
      this.string = "";
      this.cursor = doc5.iter();
    }
    get length() {
      return this.doc.length;
    }
    syncTo(pos) {
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
    chunk(pos) {
      this.syncTo(pos);
      return this.string;
    }
    get lineChunks() {
      return true;
    }
    read(from2, to) {
      let stringStart = this.cursorPos - this.string.length;
      if (from2 < stringStart || to >= this.cursorPos)
        return this.doc.sliceString(from2, to);
      else
        return this.string.slice(from2 - stringStart, to - stringStart);
    }
  };
  var currentContext = null;
  var ParseContext = class _ParseContext {
    constructor(parser2, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
      this.parser = parser2;
      this.state = state;
      this.fragments = fragments;
      this.tree = tree;
      this.treeLen = treeLen;
      this.viewport = viewport;
      this.skipped = skipped;
      this.scheduleOn = scheduleOn;
      this.parse = null;
      this.tempSkipped = [];
    }
    /**
    @internal
    */
    static create(parser2, state, viewport) {
      return new _ParseContext(parser2, state, [], Tree.empty, 0, viewport, [], null);
    }
    startParse() {
      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
    }
    /**
    @internal
    */
    work(until, upto) {
      if (upto != null && upto >= this.state.doc.length)
        upto = void 0;
      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
        this.takeTree();
        return true;
      }
      return this.withContext(() => {
        var _a2;
        if (typeof until == "number") {
          let endTime = Date.now() + until;
          until = () => Date.now() > endTime;
        }
        if (!this.parse)
          this.parse = this.startParse();
        if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
          this.parse.stopAt(upto);
        for (; ; ) {
          let done = this.parse.advance();
          if (done) {
            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
            this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
            this.tree = done;
            this.parse = null;
            if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
              this.parse = this.startParse();
            else
              return true;
          }
          if (until())
            return false;
        }
      });
    }
    /**
    @internal
    */
    takeTree() {
      let pos, tree;
      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
          this.parse.stopAt(pos);
        this.withContext(() => {
          while (!(tree = this.parse.advance())) {
          }
        });
        this.treeLen = pos;
        this.tree = tree;
        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
        this.parse = null;
      }
    }
    withContext(f3) {
      let prev = currentContext;
      currentContext = this;
      try {
        return f3();
      } finally {
        currentContext = prev;
      }
    }
    withoutTempSkipped(fragments) {
      for (let r4; r4 = this.tempSkipped.pop(); )
        fragments = cutFragments(fragments, r4.from, r4.to);
      return fragments;
    }
    /**
    @internal
    */
    changes(changes, newState) {
      let { fragments, tree, treeLen, viewport, skipped } = this;
      this.takeTree();
      if (!changes.empty) {
        let ranges = [];
        changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
        fragments = TreeFragment.applyChanges(fragments, ranges);
        tree = Tree.empty;
        treeLen = 0;
        viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
        if (this.skipped.length) {
          skipped = [];
          for (let r4 of this.skipped) {
            let from2 = changes.mapPos(r4.from, 1), to = changes.mapPos(r4.to, -1);
            if (from2 < to)
              skipped.push({ from: from2, to });
          }
        }
      }
      return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
    updateViewport(viewport) {
      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
        return false;
      this.viewport = viewport;
      let startLen = this.skipped.length;
      for (let i3 = 0; i3 < this.skipped.length; i3++) {
        let { from: from2, to } = this.skipped[i3];
        if (from2 < viewport.to && to > viewport.from) {
          this.fragments = cutFragments(this.fragments, from2, to);
          this.skipped.splice(i3--, 1);
        }
      }
      if (this.skipped.length >= startLen)
        return false;
      this.reset();
      return true;
    }
    /**
    @internal
    */
    reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
    skipUntilInView(from2, to) {
      this.skipped.push({ from: from2, to });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
    static getSkippingParser(until) {
      return new class extends Parser {
        createParse(input, fragments, ranges) {
          let from2 = ranges[0].from, to = ranges[ranges.length - 1].to;
          let parser2 = {
            parsedPos: from2,
            advance() {
              let cx = currentContext;
              if (cx) {
                for (let r4 of ranges)
                  cx.tempSkipped.push(r4);
                if (until)
                  cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
              }
              this.parsedPos = to;
              return new Tree(NodeType.none, [], [], to - from2);
            },
            stoppedAt: null,
            stopAt() {
            }
          };
          return parser2;
        }
      }();
    }
    /**
    @internal
    */
    isDone(upto) {
      upto = Math.min(upto, this.state.doc.length);
      let frags = this.fragments;
      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
    }
    /**
    Get the context for the current parse, or `null` if no editor
    parse is in progress.
    */
    static get() {
      return currentContext;
    }
  };
  function cutFragments(fragments, from2, to) {
    return TreeFragment.applyChanges(fragments, [{ fromA: from2, toA: to, fromB: from2, toB: to }]);
  }
  var LanguageState = class _LanguageState {
    constructor(context) {
      this.context = context;
      this.tree = context.tree;
    }
    apply(tr) {
      if (!tr.docChanged && this.tree == this.context.tree)
        return this;
      let newCx = this.context.changes(tr.changes, tr.state);
      let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
      if (!newCx.work(20, upto))
        newCx.takeTree();
      return new _LanguageState(newCx);
    }
    static init(state) {
      let vpTo = Math.min(3e3, state.doc.length);
      let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
      if (!parseState.work(20, vpTo))
        parseState.takeTree();
      return new _LanguageState(parseState);
    }
  };
  Language.state = /* @__PURE__ */ StateField.define({
    create: LanguageState.init,
    update(value, tr) {
      for (let e3 of tr.effects)
        if (e3.is(Language.setState))
          return e3.value;
      if (tr.startState.facet(language) != tr.state.facet(language))
        return LanguageState.init(tr.state);
      return value.apply(tr);
    }
  });
  var requestIdle = (callback) => {
    let timeout = setTimeout(
      () => callback(),
      500
      /* Work.MaxPause */
    );
    return () => clearTimeout(timeout);
  };
  if (typeof requestIdleCallback != "undefined")
    requestIdle = (callback) => {
      let idle = -1, timeout = setTimeout(
        () => {
          idle = requestIdleCallback(callback, {
            timeout: 500 - 100
            /* Work.MinPause */
          });
        },
        100
        /* Work.MinPause */
      );
      return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
    };
  var isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
  var parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
    constructor(view) {
      this.view = view;
      this.working = null;
      this.workScheduled = 0;
      this.chunkEnd = -1;
      this.chunkBudget = -1;
      this.work = this.work.bind(this);
      this.scheduleWork();
    }
    update(update) {
      let cx = this.view.state.field(Language.state).context;
      if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
        this.scheduleWork();
      if (update.docChanged || update.selectionSet) {
        if (this.view.hasFocus)
          this.chunkBudget += 50;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
    scheduleWork() {
      if (this.working)
        return;
      let { state } = this.view, field = state.field(Language.state);
      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
        this.working = requestIdle(this.work);
    }
    work(deadline) {
      this.working = null;
      let now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        this.chunkEnd = now + 3e4;
        this.chunkBudget = 3e3;
      }
      if (this.chunkBudget <= 0)
        return;
      let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
      if (field.tree == field.context.tree && field.context.isDone(
        vpTo + 1e5
        /* Work.MaxParseAhead */
      ))
        return;
      let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
      let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
      let done = field.context.work(() => {
        return isInputPending && isInputPending() || Date.now() > endTime;
      }, vpTo + (viewportFirst ? 0 : 1e5));
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0) {
        field.context.takeTree();
        this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
      }
      if (this.chunkBudget > 0 && !(done && !viewportFirst))
        this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
    checkAsyncSchedule(cx) {
      if (cx.scheduleOn) {
        this.workScheduled++;
        cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
        cx.scheduleOn = null;
      }
    }
    destroy() {
      if (this.working)
        this.working();
    }
    isWorking() {
      return !!(this.working || this.workScheduled > 0);
    }
  }, {
    eventHandlers: { focus() {
      this.scheduleWork();
    } }
  });
  var language = /* @__PURE__ */ Facet.define({
    combine(languages) {
      return languages.length ? languages[0] : null;
    },
    enables: (language2) => [
      Language.state,
      parseWorker,
      EditorView.contentAttributes.compute([language2], (state) => {
        let lang = state.facet(language2);
        return lang && lang.name ? { "data-language": lang.name } : {};
      })
    ]
  });
  var LanguageSupport = class {
    /**
    Create a language support object.
    */
    constructor(language2, support = []) {
      this.language = language2;
      this.support = support;
      this.extension = [language2, support];
    }
  };
  var LanguageDescription = class _LanguageDescription {
    constructor(name2, alias, extensions, filename, loadFunc, support = void 0) {
      this.name = name2;
      this.alias = alias;
      this.extensions = extensions;
      this.filename = filename;
      this.loadFunc = loadFunc;
      this.support = support;
      this.loading = null;
    }
    /**
    Start loading the the language. Will return a promise that
    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
    object when the language successfully loads.
    */
    load() {
      return this.loading || (this.loading = this.loadFunc().then((support) => this.support = support, (err) => {
        this.loading = null;
        throw err;
      }));
    }
    /**
    Create a language description.
    */
    static of(spec) {
      let { load, support } = spec;
      if (!load) {
        if (!support)
          throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
        load = () => Promise.resolve(support);
      }
      return new _LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map((s4) => s4.toLowerCase()), spec.extensions || [], spec.filename, load, support);
    }
    /**
    Look for a language in the given array of descriptions that
    matches the filename. Will first match
    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
    and return the first language that matches.
    */
    static matchFilename(descs, filename) {
      for (let d6 of descs)
        if (d6.filename && d6.filename.test(filename))
          return d6;
      let ext = /\.([^.]+)$/.exec(filename);
      if (ext) {
        for (let d6 of descs)
          if (d6.extensions.indexOf(ext[1]) > -1)
            return d6;
      }
      return null;
    }
    /**
    Look for a language whose name or alias matches the the given
    name (case-insensitively). If `fuzzy` is true, and no direct
    matchs is found, this'll also search for a language whose name
    or alias occurs in the string (for names shorter than three
    characters, only when surrounded by non-word characters).
    */
    static matchLanguageName(descs, name2, fuzzy = true) {
      name2 = name2.toLowerCase();
      for (let d6 of descs)
        if (d6.alias.some((a2) => a2 == name2))
          return d6;
      if (fuzzy)
        for (let d6 of descs)
          for (let a2 of d6.alias) {
            let found2 = name2.indexOf(a2);
            if (found2 > -1 && (a2.length > 2 || !/\w/.test(name2[found2 - 1]) && !/\w/.test(name2[found2 + a2.length])))
              return d6;
          }
      return null;
    }
  };
  var indentService = /* @__PURE__ */ Facet.define();
  var indentUnit = /* @__PURE__ */ Facet.define({
    combine: (values) => {
      if (!values.length)
        return "  ";
      let unit = values[0];
      if (!unit || /\S/.test(unit) || Array.from(unit).some((e3) => e3 != unit[0]))
        throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
      return unit;
    }
  });
  function getIndentUnit(state) {
    let unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  function indentString(state, cols) {
    let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
    if (ch == "	") {
      while (cols >= ts) {
        result += "	";
        cols -= ts;
      }
      ch = " ";
    }
    for (let i3 = 0; i3 < cols; i3++)
      result += ch;
    return result;
  }
  function getIndentation(context, pos) {
    if (context instanceof EditorState)
      context = new IndentContext(context);
    for (let service of context.state.facet(indentService)) {
      let result = service(context, pos);
      if (result !== void 0)
        return result;
    }
    let tree = syntaxTree(context.state);
    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
  }
  function indentRange(state, from2, to) {
    let updated = /* @__PURE__ */ Object.create(null);
    let context = new IndentContext(state, { overrideIndentation: (start) => {
      var _a2;
      return (_a2 = updated[start]) !== null && _a2 !== void 0 ? _a2 : -1;
    } });
    let changes = [];
    for (let pos = from2; pos <= to; ) {
      let line = state.doc.lineAt(pos);
      pos = line.to + 1;
      let indent2 = getIndentation(context, line.from);
      if (indent2 == null)
        continue;
      if (!/\S/.test(line.text))
        indent2 = 0;
      let cur2 = /^\s*/.exec(line.text)[0];
      let norm = indentString(state, indent2);
      if (cur2 != norm) {
        updated[line.from] = indent2;
        changes.push({ from: line.from, to: line.from + cur2.length, insert: norm });
      }
    }
    return state.changes(changes);
  }
  var IndentContext = class {
    /**
    Create an indent context.
    */
    constructor(state, options = {}) {
      this.state = state;
      this.options = options;
      this.unit = getIndentUnit(state);
    }
    /**
    Get a description of the line at the given position, taking
    [simulated line
    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    into account. If there is such a break at `pos`, the `bias`
    argument determines whether the part of the line line before or
    after the break is used.
    */
    lineAt(pos, bias = 1) {
      let line = this.state.doc.lineAt(pos);
      let { simulateBreak, simulateDoubleBreak } = this.options;
      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
        if (simulateDoubleBreak && simulateBreak == pos)
          return { text: "", from: pos };
        else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
          return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
        else
          return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
      }
      return line;
    }
    /**
    Get the text directly after `pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    textAfterPos(pos, bias = 1) {
      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
        return "";
      let { text: text5, from: from2 } = this.lineAt(pos, bias);
      return text5.slice(pos - from2, Math.min(text5.length, pos + 100 - from2));
    }
    /**
    Find the column for the given position.
    */
    column(pos, bias = 1) {
      let { text: text5, from: from2 } = this.lineAt(pos, bias);
      let result = this.countColumn(text5, pos - from2);
      let override = this.options.overrideIndentation ? this.options.overrideIndentation(from2) : -1;
      if (override > -1)
        result += override - this.countColumn(text5, text5.search(/\S|$/));
      return result;
    }
    /**
    Find the column position (taking tabs into account) of the given
    position in the given string.
    */
    countColumn(line, pos = line.length) {
      return countColumn(line, this.state.tabSize, pos);
    }
    /**
    Find the indentation column of the line at the given point.
    */
    lineIndent(pos, bias = 1) {
      let { text: text5, from: from2 } = this.lineAt(pos, bias);
      let override = this.options.overrideIndentation;
      if (override) {
        let overriden = override(from2);
        if (overriden > -1)
          return overriden;
      }
      return this.countColumn(text5, text5.search(/\S|$/));
    }
    /**
    Returns the [simulated line
    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
    for this context, if any.
    */
    get simulatedBreak() {
      return this.options.simulateBreak || null;
    }
  };
  var indentNodeProp = /* @__PURE__ */ new NodeProp();
  function syntaxIndentation(cx, ast, pos) {
    let stack = ast.resolveStack(pos);
    let inner = stack.node.enterUnfinishedNodesBefore(pos);
    if (inner != stack.node) {
      let add2 = [];
      for (let cur2 = inner; cur2 != stack.node; cur2 = cur2.parent)
        add2.push(cur2);
      for (let i3 = add2.length - 1; i3 >= 0; i3--)
        stack = { node: add2[i3], next: stack };
    }
    return indentFor(stack, cx, pos);
  }
  function indentFor(stack, cx, pos) {
    for (let cur2 = stack; cur2; cur2 = cur2.next) {
      let strategy = indentStrategy(cur2.node);
      if (strategy)
        return strategy(TreeIndentContext.create(cx, pos, cur2));
    }
    return 0;
  }
  function ignoreClosed(cx) {
    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
  }
  function indentStrategy(tree) {
    let strategy = tree.type.prop(indentNodeProp);
    if (strategy)
      return strategy;
    let first = tree.firstChild, close2;
    if (first && (close2 = first.type.prop(NodeProp.closedBy))) {
      let last = tree.lastChild, closed = last && close2.indexOf(last.name) > -1;
      return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last.from : void 0);
    }
    return tree.parent == null ? topIndent : null;
  }
  function topIndent() {
    return 0;
  }
  var TreeIndentContext = class _TreeIndentContext extends IndentContext {
    constructor(base2, pos, context) {
      super(base2.state, base2.options);
      this.base = base2;
      this.pos = pos;
      this.context = context;
    }
    /**
    The syntax tree node to which the indentation strategy
    applies.
    */
    get node() {
      return this.context.node;
    }
    /**
    @internal
    */
    static create(base2, pos, context) {
      return new _TreeIndentContext(base2, pos, context);
    }
    /**
    Get the text directly after `this.pos`, either the entire line
    or the next 100 characters, whichever is shorter.
    */
    get textAfter() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
    get baseIndent() {
      return this.baseIndentFor(this.node);
    }
    /**
    Get the indentation for the reference line of the given node
    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
    */
    baseIndentFor(node2) {
      let line = this.state.doc.lineAt(node2.from);
      for (; ; ) {
        let atBreak = node2.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from)
          atBreak = atBreak.parent;
        if (isParent(atBreak, node2))
          break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line.from);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
    continue() {
      return indentFor(this.context.next, this.base, this.pos);
    }
  };
  function isParent(parent, of) {
    for (let cur2 = of; cur2; cur2 = cur2.parent)
      if (parent == cur2)
        return true;
    return false;
  }
  function bracketedAligned(context) {
    let tree = context.node;
    let openToken = tree.childAfter(tree.from), last = tree.lastChild;
    if (!openToken)
      return null;
    let sim = context.options.simulateBreak;
    let openLine = context.state.doc.lineAt(openToken.from);
    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (let pos = openToken.to; ; ) {
      let next = tree.childAfter(pos);
      if (!next || next == last)
        return null;
      if (!next.type.isSkipped)
        return next.from < lineEnd ? openToken : null;
      pos = next.to;
    }
  }
  function delimitedIndent({ closing: closing2, align = true, units = 1 }) {
    return (context) => delimitedStrategy(context, align, units, closing2);
  }
  function delimitedStrategy(context, align, units, closing2, closedAt) {
    let after = context.textAfter, space2 = after.match(/^\s*/)[0].length;
    let closed = closing2 && after.slice(space2, space2 + closing2.length) == closing2 || closedAt == context.pos + space2;
    let aligned = align ? bracketedAligned(context) : null;
    if (aligned)
      return closed ? context.column(aligned.from) : context.column(aligned.to);
    return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  var flatIndent = (context) => context.baseIndent;
  function continuedIndent({ except, units = 1 } = {}) {
    return (context) => {
      let matchExcept = except && except.test(context.textAfter);
      return context.baseIndent + (matchExcept ? 0 : units * context.unit);
    };
  }
  var DontIndentBeyond = 200;
  function indentOnInput() {
    return EditorState.transactionFilter.of((tr) => {
      if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
        return tr;
      let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
      if (!rules.length)
        return tr;
      let doc5 = tr.newDoc, { head } = tr.newSelection.main, line = doc5.lineAt(head);
      if (head > line.from + DontIndentBeyond)
        return tr;
      let lineStart = doc5.sliceString(line.from, head);
      if (!rules.some((r4) => r4.test(lineStart)))
        return tr;
      let { state } = tr, last = -1, changes = [];
      for (let { head: head2 } of state.selection.ranges) {
        let line2 = state.doc.lineAt(head2);
        if (line2.from == last)
          continue;
        last = line2.from;
        let indent2 = getIndentation(state, line2.from);
        if (indent2 == null)
          continue;
        let cur2 = /^\s*/.exec(line2.text)[0];
        let norm = indentString(state, indent2);
        if (cur2 != norm)
          changes.push({ from: line2.from, to: line2.from + cur2.length, insert: norm });
      }
      return changes.length ? [tr, { changes, sequential: true }] : tr;
    });
  }
  var foldService = /* @__PURE__ */ Facet.define();
  var foldNodeProp = /* @__PURE__ */ new NodeProp();
  function foldInside(node2) {
    let first = node2.firstChild, last = node2.lastChild;
    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node2.to : last.from } : null;
  }
  function syntaxFolding(state, start, end) {
    let tree = syntaxTree(state);
    if (tree.length < end)
      return null;
    let stack = tree.resolveStack(end, 1);
    let found2 = null;
    for (let iter = stack; iter; iter = iter.next) {
      let cur2 = iter.node;
      if (cur2.to <= end || cur2.from > end)
        continue;
      if (found2 && cur2.from < start)
        break;
      let prop = cur2.type.prop(foldNodeProp);
      if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
        let value = prop(cur2, state);
        if (value && value.from <= end && value.from >= start && value.to > end)
          found2 = value;
      }
    }
    return found2;
  }
  function isUnfinished(node2) {
    let ch = node2.lastChild;
    return ch && ch.to == node2.to && ch.type.isError;
  }
  function foldable(state, lineStart, lineEnd) {
    for (let service of state.facet(foldService)) {
      let result = service(state, lineStart, lineEnd);
      if (result)
        return result;
    }
    return syntaxFolding(state, lineStart, lineEnd);
  }
  function mapRange(range, mapping) {
    let from2 = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
    return from2 >= to ? void 0 : { from: from2, to };
  }
  var foldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
  var unfoldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
  function selectedLines(view) {
    let lines = [];
    for (let { head } of view.state.selection.ranges) {
      if (lines.some((l5) => l5.from <= head && l5.to >= head))
        continue;
      lines.push(view.lineBlockAt(head));
    }
    return lines;
  }
  var foldState = /* @__PURE__ */ StateField.define({
    create() {
      return Decoration.none;
    },
    update(folded, tr) {
      folded = folded.map(tr.changes);
      for (let e3 of tr.effects) {
        if (e3.is(foldEffect) && !foldExists(folded, e3.value.from, e3.value.to)) {
          let { preparePlaceholder } = tr.state.facet(foldConfig);
          let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e3.value)) });
          folded = folded.update({ add: [widget.range(e3.value.from, e3.value.to)] });
        } else if (e3.is(unfoldEffect)) {
          folded = folded.update({
            filter: (from2, to) => e3.value.from != from2 || e3.value.to != to,
            filterFrom: e3.value.from,
            filterTo: e3.value.to
          });
        }
      }
      if (tr.selection) {
        let onSelection = false, { head } = tr.selection.main;
        folded.between(head, head, (a2, b4) => {
          if (a2 < head && b4 > head)
            onSelection = true;
        });
        if (onSelection)
          folded = folded.update({
            filterFrom: head,
            filterTo: head,
            filter: (a2, b4) => b4 <= head || a2 >= head
          });
      }
      return folded;
    },
    provide: (f3) => EditorView.decorations.from(f3),
    toJSON(folded, state) {
      let ranges = [];
      folded.between(0, state.doc.length, (from2, to) => {
        ranges.push(from2, to);
      });
      return ranges;
    },
    fromJSON(value) {
      if (!Array.isArray(value) || value.length % 2)
        throw new RangeError("Invalid JSON for fold state");
      let ranges = [];
      for (let i3 = 0; i3 < value.length; ) {
        let from2 = value[i3++], to = value[i3++];
        if (typeof from2 != "number" || typeof to != "number")
          throw new RangeError("Invalid JSON for fold state");
        ranges.push(foldWidget.range(from2, to));
      }
      return Decoration.set(ranges, true);
    }
  });
  function foldedRanges(state) {
    return state.field(foldState, false) || RangeSet.empty;
  }
  function findFold(state, from2, to) {
    var _a2;
    let found2 = null;
    (_a2 = state.field(foldState, false)) === null || _a2 === void 0 ? void 0 : _a2.between(from2, to, (from3, to2) => {
      if (!found2 || found2.from > from3)
        found2 = { from: from3, to: to2 };
    });
    return found2;
  }
  function foldExists(folded, from2, to) {
    let found2 = false;
    folded.between(from2, from2, (a2, b4) => {
      if (a2 == from2 && b4 == to)
        found2 = true;
    });
    return found2;
  }
  function maybeEnable(state, other) {
    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
  }
  var foldCode = (view) => {
    for (let line of selectedLines(view)) {
      let range = foldable(view.state, line.from, line.to);
      if (range) {
        view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
        return true;
      }
    }
    return false;
  };
  var unfoldCode = (view) => {
    if (!view.state.field(foldState, false))
      return false;
    let effects = [];
    for (let line of selectedLines(view)) {
      let folded = findFold(view.state, line.from, line.to);
      if (folded)
        effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
    }
    if (effects.length)
      view.dispatch({ effects });
    return effects.length > 0;
  };
  function announceFold(view, range, fold = true) {
    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
    return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
  }
  var foldAll = (view) => {
    let { state } = view, effects = [];
    for (let pos = 0; pos < state.doc.length; ) {
      let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
      if (range)
        effects.push(foldEffect.of(range));
      pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
    }
    if (effects.length)
      view.dispatch({ effects: maybeEnable(view.state, effects) });
    return !!effects.length;
  };
  var unfoldAll = (view) => {
    let field = view.state.field(foldState, false);
    if (!field || !field.size)
      return false;
    let effects = [];
    field.between(0, view.state.doc.length, (from2, to) => {
      effects.push(unfoldEffect.of({ from: from2, to }));
    });
    view.dispatch({ effects });
    return true;
  };
  function foldableContainer(view, lineBlock) {
    for (let line = lineBlock; ; ) {
      let foldableRegion = foldable(view.state, line.from, line.to);
      if (foldableRegion && foldableRegion.to > lineBlock.from)
        return foldableRegion;
      if (!line.from)
        return null;
      line = view.lineBlockAt(line.from - 1);
    }
  }
  var toggleFold = (view) => {
    let effects = [];
    for (let line of selectedLines(view)) {
      let folded = findFold(view.state, line.from, line.to);
      if (folded) {
        effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      } else {
        let foldRange = foldableContainer(view, line);
        if (foldRange)
          effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));
      }
    }
    if (effects.length > 0)
      view.dispatch({ effects: maybeEnable(view.state, effects) });
    return !!effects.length;
  };
  var foldKeymap = [
    { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
    { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
    { key: "Ctrl-Alt-[", run: foldAll },
    { key: "Ctrl-Alt-]", run: unfoldAll }
  ];
  var defaultConfig = {
    placeholderDOM: null,
    preparePlaceholder: null,
    placeholderText: "\u2026"
  };
  var foldConfig = /* @__PURE__ */ Facet.define({
    combine(values) {
      return combineConfig(values, defaultConfig);
    }
  });
  function codeFolding(config2) {
    let result = [foldState, baseTheme$12];
    if (config2)
      result.push(foldConfig.of(config2));
    return result;
  }
  function widgetToDOM(view, prepared) {
    let { state } = view, conf = state.facet(foldConfig);
    let onclick = (event) => {
      let line = view.lineBlockAt(view.posAtDOM(event.target));
      let folded = findFold(view.state, line.from, line.to);
      if (folded)
        view.dispatch({ effects: unfoldEffect.of(folded) });
      event.preventDefault();
    };
    if (conf.placeholderDOM)
      return conf.placeholderDOM(view, onclick, prepared);
    let element2 = document.createElement("span");
    element2.textContent = conf.placeholderText;
    element2.setAttribute("aria-label", state.phrase("folded code"));
    element2.title = state.phrase("unfold");
    element2.className = "cm-foldPlaceholder";
    element2.onclick = onclick;
    return element2;
  }
  var foldWidget = /* @__PURE__ */ Decoration.replace({ widget: /* @__PURE__ */ new class extends WidgetType {
    toDOM(view) {
      return widgetToDOM(view, null);
    }
  }() });
  var PreparedFoldWidget = class extends WidgetType {
    constructor(value) {
      super();
      this.value = value;
    }
    eq(other) {
      return this.value == other.value;
    }
    toDOM(view) {
      return widgetToDOM(view, this.value);
    }
  };
  var foldGutterDefaults = {
    openText: "\u2304",
    closedText: "\u203A",
    markerDOM: null,
    domEventHandlers: {},
    foldingChanged: () => false
  };
  var FoldMarker = class extends GutterMarker {
    constructor(config2, open) {
      super();
      this.config = config2;
      this.open = open;
    }
    eq(other) {
      return this.config == other.config && this.open == other.open;
    }
    toDOM(view) {
      if (this.config.markerDOM)
        return this.config.markerDOM(this.open);
      let span = document.createElement("span");
      span.textContent = this.open ? this.config.openText : this.config.closedText;
      span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
      return span;
    }
  };
  function foldGutter(config2 = {}) {
    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config2);
    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
    let markers = ViewPlugin.fromClass(class {
      constructor(view) {
        this.from = view.viewport.from;
        this.markers = this.buildMarkers(view);
      }
      update(update) {
        if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update))
          this.markers = this.buildMarkers(update.view);
      }
      buildMarkers(view) {
        let builder = new RangeSetBuilder();
        for (let line of view.viewportLineBlocks) {
          let mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
          if (mark)
            builder.add(line.from, line.from, mark);
        }
        return builder.finish();
      }
    });
    let { domEventHandlers } = fullConfig;
    return [
      markers,
      gutter({
        class: "cm-foldGutter",
        markers(view) {
          var _a2;
          return ((_a2 = view.plugin(markers)) === null || _a2 === void 0 ? void 0 : _a2.markers) || RangeSet.empty;
        },
        initialSpacer() {
          return new FoldMarker(fullConfig, false);
        },
        domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
          if (domEventHandlers.click && domEventHandlers.click(view, line, event))
            return true;
          let folded = findFold(view.state, line.from, line.to);
          if (folded) {
            view.dispatch({ effects: unfoldEffect.of(folded) });
            return true;
          }
          let range = foldable(view.state, line.from, line.to);
          if (range) {
            view.dispatch({ effects: foldEffect.of(range) });
            return true;
          }
          return false;
        } })
      }),
      codeFolding()
    ];
  }
  var baseTheme$12 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-foldPlaceholder": {
      backgroundColor: "#eee",
      border: "1px solid #ddd",
      color: "#888",
      borderRadius: ".2em",
      margin: "0 1px",
      padding: "0 1px",
      cursor: "pointer"
    },
    ".cm-foldGutter span": {
      padding: "0 1px",
      cursor: "pointer"
    }
  });
  var HighlightStyle = class _HighlightStyle {
    constructor(specs, options) {
      this.specs = specs;
      let modSpec;
      function def(spec) {
        let cls = StyleModule.newName();
        (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
        return cls;
      }
      const all2 = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
      const scopeOpt = options.scope;
      this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
      this.style = tagHighlighter(specs.map((style) => ({
        tag: style.tag,
        class: style.class || def(Object.assign({}, style, { tag: null }))
      })), {
        all: all2
      }).style;
      this.module = modSpec ? new StyleModule(modSpec) : null;
      this.themeType = options.themeType;
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The specs must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighter
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
    static define(specs, options) {
      return new _HighlightStyle(specs, options || {});
    }
  };
  var highlighterFacet = /* @__PURE__ */ Facet.define();
  var fallbackHighlighter = /* @__PURE__ */ Facet.define({
    combine(values) {
      return values.length ? [values[0]] : null;
    }
  });
  function getHighlighters(state) {
    let main = state.facet(highlighterFacet);
    return main.length ? main : state.facet(fallbackHighlighter);
  }
  function syntaxHighlighting(highlighter, options) {
    let ext = [treeHighlighter], themeType;
    if (highlighter instanceof HighlightStyle) {
      if (highlighter.module)
        ext.push(EditorView.styleModule.of(highlighter.module));
      themeType = highlighter.themeType;
    }
    if (options === null || options === void 0 ? void 0 : options.fallback)
      ext.push(fallbackHighlighter.of(highlighter));
    else if (themeType)
      ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
        return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
      }));
    else
      ext.push(highlighterFacet.of(highlighter));
    return ext;
  }
  function highlightingFor(state, tags2, scope) {
    let highlighters = getHighlighters(state);
    let result = null;
    if (highlighters)
      for (let highlighter of highlighters) {
        if (!highlighter.scope || scope && highlighter.scope(scope)) {
          let cls = highlighter.style(tags2);
          if (cls)
            result = result ? result + " " + cls : cls;
        }
      }
    return result;
  }
  var TreeHighlighter = class {
    constructor(view) {
      this.markCache = /* @__PURE__ */ Object.create(null);
      this.tree = syntaxTree(view.state);
      this.decorations = this.buildDeco(view, getHighlighters(view.state));
      this.decoratedTo = view.viewport.to;
    }
    update(update) {
      let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
      let styleChange = highlighters != getHighlighters(update.startState);
      let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
      if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
        this.decorations = this.decorations.map(update.changes);
        this.decoratedTo = decoratedToMapped;
      } else if (tree != this.tree || update.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(update.view, highlighters);
        this.decoratedTo = viewport.to;
      }
    }
    buildDeco(view, highlighters) {
      if (!highlighters || !this.tree.length)
        return Decoration.none;
      let builder = new RangeSetBuilder();
      for (let { from: from2, to } of view.visibleRanges) {
        highlightTree(this.tree, highlighters, (from3, to2, style) => {
          builder.add(from3, to2, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
        }, from2, to);
      }
      return builder.finish();
    }
  };
  var treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
    decorations: (v4) => v4.decorations
  }));
  var defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
    {
      tag: tags.meta,
      color: "#404740"
    },
    {
      tag: tags.link,
      textDecoration: "underline"
    },
    {
      tag: tags.heading,
      textDecoration: "underline",
      fontWeight: "bold"
    },
    {
      tag: tags.emphasis,
      fontStyle: "italic"
    },
    {
      tag: tags.strong,
      fontWeight: "bold"
    },
    {
      tag: tags.strikethrough,
      textDecoration: "line-through"
    },
    {
      tag: tags.keyword,
      color: "#708"
    },
    {
      tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
      color: "#219"
    },
    {
      tag: [tags.literal, tags.inserted],
      color: "#164"
    },
    {
      tag: [tags.string, tags.deleted],
      color: "#a11"
    },
    {
      tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
      color: "#e40"
    },
    {
      tag: /* @__PURE__ */ tags.definition(tags.variableName),
      color: "#00f"
    },
    {
      tag: /* @__PURE__ */ tags.local(tags.variableName),
      color: "#30a"
    },
    {
      tag: [tags.typeName, tags.namespace],
      color: "#085"
    },
    {
      tag: tags.className,
      color: "#167"
    },
    {
      tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
      color: "#256"
    },
    {
      tag: /* @__PURE__ */ tags.definition(tags.propertyName),
      color: "#00c"
    },
    {
      tag: tags.comment,
      color: "#940"
    },
    {
      tag: tags.invalid,
      color: "#f00"
    }
  ]);
  var baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
    "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
    "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
  });
  var DefaultScanDist = 1e4;
  var DefaultBrackets = "()[]{}";
  var bracketMatchingConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        afterCursor: true,
        brackets: DefaultBrackets,
        maxScanDistance: DefaultScanDist,
        renderMatch: defaultRenderMatch
      });
    }
  });
  var matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" });
  var nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
  function defaultRenderMatch(match) {
    let decorations2 = [];
    let mark = match.matched ? matchingMark : nonmatchingMark;
    decorations2.push(mark.range(match.start.from, match.start.to));
    if (match.end)
      decorations2.push(mark.range(match.end.from, match.end.to));
    return decorations2;
  }
  var bracketMatchingState = /* @__PURE__ */ StateField.define({
    create() {
      return Decoration.none;
    },
    update(deco, tr) {
      if (!tr.docChanged && !tr.selection)
        return deco;
      let decorations2 = [];
      let config2 = tr.state.facet(bracketMatchingConfig);
      for (let range of tr.state.selection.ranges) {
        if (!range.empty)
          continue;
        let match = matchBrackets(tr.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr.state, range.head, 1, config2) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config2));
        if (match)
          decorations2 = decorations2.concat(config2.renderMatch(match, tr.state));
      }
      return Decoration.set(decorations2, true);
    },
    provide: (f3) => EditorView.decorations.from(f3)
  });
  var bracketMatchingUnique = [
    bracketMatchingState,
    baseTheme2
  ];
  function bracketMatching(config2 = {}) {
    return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
  }
  var bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
  function matchingNodes(node2, dir, brackets) {
    let byProp = node2.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
    if (byProp)
      return byProp;
    if (node2.name.length == 1) {
      let index2 = brackets.indexOf(node2.name);
      if (index2 > -1 && index2 % 2 == (dir < 0 ? 1 : 0))
        return [brackets[index2 + dir]];
    }
    return null;
  }
  function findHandle(node2) {
    let hasHandle = node2.type.prop(bracketMatchingHandle);
    return hasHandle ? hasHandle(node2.node) : node2;
  }
  function matchBrackets(state, pos, dir, config2 = {}) {
    let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
    let tree = syntaxTree(state), node2 = tree.resolveInner(pos, dir);
    for (let cur2 = node2; cur2; cur2 = cur2.parent) {
      let matches2 = matchingNodes(cur2.type, dir, brackets);
      if (matches2 && cur2.from < cur2.to) {
        let handle2 = findHandle(cur2);
        if (handle2 && (dir > 0 ? pos >= handle2.from && pos < handle2.to : pos > handle2.from && pos <= handle2.to))
          return matchMarkedBrackets(state, pos, dir, cur2, handle2, matches2, brackets);
      }
    }
    return matchPlainBrackets(state, pos, dir, tree, node2.type, maxScanDistance, brackets);
  }
  function matchMarkedBrackets(_state, _pos, dir, token, handle2, matching, brackets) {
    let parent = token.parent, firstToken = { from: handle2.from, to: handle2.to };
    let depth2 = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
      do {
        if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
          if (depth2 == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
            let endHandle = findHandle(cursor);
            return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
          } else if (matchingNodes(cursor.type, dir, brackets)) {
            depth2++;
          } else if (matchingNodes(cursor.type, -dir, brackets)) {
            if (depth2 == 0) {
              let endHandle = findHandle(cursor);
              return {
                start: firstToken,
                end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
                matched: false
              };
            }
            depth2--;
          }
        }
      } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
    return { start: firstToken, matched: false };
  }
  function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
    let bracket2 = brackets.indexOf(startCh);
    if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
      return null;
    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth2 = 0;
    for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
      let text5 = iter.value;
      if (dir < 0)
        distance += text5.length;
      let basePos = pos + distance * dir;
      for (let pos2 = dir > 0 ? 0 : text5.length - 1, end = dir > 0 ? text5.length : -1; pos2 != end; pos2 += dir) {
        let found2 = brackets.indexOf(text5[pos2]);
        if (found2 < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
          continue;
        if (found2 % 2 == 0 == dir > 0) {
          depth2++;
        } else if (depth2 == 1) {
          return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found2 >> 1 == bracket2 >> 1 };
        } else {
          depth2--;
        }
      }
      if (dir > 0)
        distance += text5.length;
    }
    return iter.done ? { start: startToken, matched: false } : null;
  }
  function countCol(string4, end, tabSize, startIndex = 0, startValue = 0) {
    if (end == null) {
      end = string4.search(/[^\s\u00a0]/);
      if (end == -1)
        end = string4.length;
    }
    let n5 = startValue;
    for (let i3 = startIndex; i3 < end; i3++) {
      if (string4.charCodeAt(i3) == 9)
        n5 += tabSize - n5 % tabSize;
      else
        n5++;
    }
    return n5;
  }
  var StringStream = class {
    /**
    Create a stream.
    */
    constructor(string4, tabSize, indentUnit2, overrideIndent) {
      this.string = string4;
      this.tabSize = tabSize;
      this.indentUnit = indentUnit2;
      this.overrideIndent = overrideIndent;
      this.pos = 0;
      this.start = 0;
      this.lastColumnPos = 0;
      this.lastColumnValue = 0;
    }
    /**
    True if we are at the end of the line.
    */
    eol() {
      return this.pos >= this.string.length;
    }
    /**
    True if we are at the start of the line.
    */
    sol() {
      return this.pos == 0;
    }
    /**
    Get the next code unit after the current position, or undefined
    if we're at the end of the line.
    */
    peek() {
      return this.string.charAt(this.pos) || void 0;
    }
    /**
    Read the next code unit and advance `this.pos`.
    */
    next() {
      if (this.pos < this.string.length)
        return this.string.charAt(this.pos++);
    }
    /**
    Match the next character against the given string, regular
    expression, or predicate. Consume and return it if it matches.
    */
    eat(match) {
      let ch = this.string.charAt(this.pos);
      let ok3;
      if (typeof match == "string")
        ok3 = ch == match;
      else
        ok3 = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
      if (ok3) {
        ++this.pos;
        return ch;
      }
    }
    /**
    Continue matching characters that match the given string,
    regular expression, or predicate function. Return true if any
    characters were consumed.
    */
    eatWhile(match) {
      let start = this.pos;
      while (this.eat(match)) {
      }
      return this.pos > start;
    }
    /**
    Consume whitespace ahead of `this.pos`. Return true if any was
    found.
    */
    eatSpace() {
      let start = this.pos;
      while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
        ++this.pos;
      return this.pos > start;
    }
    /**
    Move to the end of the line.
    */
    skipToEnd() {
      this.pos = this.string.length;
    }
    /**
    Move to directly before the given character, if found on the
    current line.
    */
    skipTo(ch) {
      let found2 = this.string.indexOf(ch, this.pos);
      if (found2 > -1) {
        this.pos = found2;
        return true;
      }
    }
    /**
    Move back `n` characters.
    */
    backUp(n5) {
      this.pos -= n5;
    }
    /**
    Get the column position at `this.pos`.
    */
    column() {
      if (this.lastColumnPos < this.start) {
        this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
        this.lastColumnPos = this.start;
      }
      return this.lastColumnValue;
    }
    /**
    Get the indentation column of the current line.
    */
    indentation() {
      var _a2;
      return (_a2 = this.overrideIndent) !== null && _a2 !== void 0 ? _a2 : countCol(this.string, null, this.tabSize);
    }
    /**
    Match the input against the given string or regular expression
    (which should start with a `^`). Return true or the regexp match
    if it matches.
    
    Unless `consume` is set to `false`, this will move `this.pos`
    past the matched text.
    
    When matching a string `caseInsensitive` can be set to true to
    make the match case-insensitive.
    */
    match(pattern, consume, caseInsensitive) {
      if (typeof pattern == "string") {
        let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
        let substr = this.string.substr(this.pos, pattern.length);
        if (cased(substr) == cased(pattern)) {
          if (consume !== false)
            this.pos += pattern.length;
          return true;
        } else
          return null;
      } else {
        let match = this.string.slice(this.pos).match(pattern);
        if (match && match.index > 0)
          return null;
        if (match && consume !== false)
          this.pos += match[0].length;
        return match;
      }
    }
    /**
    Get the current token.
    */
    current() {
      return this.string.slice(this.start, this.pos);
    }
  };
  function fullParser(spec) {
    return {
      name: spec.name || "",
      token: spec.token,
      blankLine: spec.blankLine || (() => {
      }),
      startState: spec.startState || (() => true),
      copyState: spec.copyState || defaultCopyState,
      indent: spec.indent || (() => null),
      languageData: spec.languageData || {},
      tokenTable: spec.tokenTable || noTokens
    };
  }
  function defaultCopyState(state) {
    if (typeof state != "object")
      return state;
    let newState = {};
    for (let prop in state) {
      let val = state[prop];
      newState[prop] = val instanceof Array ? val.slice() : val;
    }
    return newState;
  }
  var IndentedFrom = /* @__PURE__ */ new WeakMap();
  var StreamLanguage = class _StreamLanguage extends Language {
    constructor(parser2) {
      let data = defineLanguageFacet(parser2.languageData);
      let p6 = fullParser(parser2), self2;
      let impl = new class extends Parser {
        createParse(input, fragments, ranges) {
          return new Parse(self2, input, fragments, ranges);
        }
      }();
      super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser2.name);
      this.topNode = docID(data);
      self2 = this;
      this.streamParser = p6;
      this.stateAfter = new NodeProp({ perNode: true });
      this.tokenTable = parser2.tokenTable ? new TokenTable(p6.tokenTable) : defaultTokenTable;
    }
    /**
    Define a stream language.
    */
    static define(spec) {
      return new _StreamLanguage(spec);
    }
    getIndent(cx, pos) {
      let tree = syntaxTree(cx.state), at4 = tree.resolve(pos);
      while (at4 && at4.type != this.topNode)
        at4 = at4.parent;
      if (!at4)
        return null;
      let from2 = void 0;
      let { overrideIndentation } = cx.options;
      if (overrideIndentation) {
        from2 = IndentedFrom.get(cx.state);
        if (from2 != null && from2 < pos - 1e4)
          from2 = void 0;
      }
      let start = findState(this, tree, 0, at4.from, from2 !== null && from2 !== void 0 ? from2 : pos), statePos, state;
      if (start) {
        state = start.state;
        statePos = start.pos + 1;
      } else {
        state = this.streamParser.startState(cx.unit);
        statePos = 0;
      }
      if (pos - statePos > 1e4)
        return null;
      while (statePos < pos) {
        let line2 = cx.state.doc.lineAt(statePos), end = Math.min(pos, line2.to);
        if (line2.length) {
          let indentation = overrideIndentation ? overrideIndentation(line2.from) : -1;
          let stream = new StringStream(line2.text, cx.state.tabSize, cx.unit, indentation < 0 ? void 0 : indentation);
          while (stream.pos < end - line2.from)
            readToken(this.streamParser.token, stream, state);
        } else {
          this.streamParser.blankLine(state, cx.unit);
        }
        if (end == pos)
          break;
        statePos = line2.to + 1;
      }
      let line = cx.lineAt(pos);
      if (overrideIndentation && from2 == null)
        IndentedFrom.set(cx.state, line.from);
      return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx);
    }
    get allowsNesting() {
      return false;
    }
  };
  function findState(lang, tree, off, startPos, before) {
    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
    if (state)
      return { state: lang.streamParser.copyState(state), pos: off + tree.length };
    for (let i3 = tree.children.length - 1; i3 >= 0; i3--) {
      let child = tree.children[i3], pos = off + tree.positions[i3];
      let found2 = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
      if (found2)
        return found2;
    }
    return null;
  }
  function cutTree(lang, tree, from2, to, inside2) {
    if (inside2 && from2 <= 0 && to >= tree.length)
      return tree;
    if (!inside2 && tree.type == lang.topNode)
      inside2 = true;
    for (let i3 = tree.children.length - 1; i3 >= 0; i3--) {
      let pos = tree.positions[i3], child = tree.children[i3], inner;
      if (pos < to && child instanceof Tree) {
        if (!(inner = cutTree(lang, child, from2 - pos, to - pos, inside2)))
          break;
        return !inside2 ? inner : new Tree(tree.type, tree.children.slice(0, i3).concat(inner), tree.positions.slice(0, i3 + 1), pos + inner.length);
      }
    }
    return null;
  }
  function findStartInFragments(lang, fragments, startPos, editorState) {
    for (let f3 of fragments) {
      let from2 = f3.from + (f3.openStart ? 25 : 0), to = f3.to - (f3.openEnd ? 25 : 0);
      let found2 = from2 <= startPos && to > startPos && findState(lang, f3.tree, 0 - f3.offset, startPos, to), tree;
      if (found2 && (tree = cutTree(lang, f3.tree, startPos + f3.offset, found2.pos + f3.offset, false)))
        return { state: found2.state, tree };
    }
    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
  }
  var Parse = class {
    constructor(lang, input, fragments, ranges) {
      this.lang = lang;
      this.input = input;
      this.fragments = fragments;
      this.ranges = ranges;
      this.stoppedAt = null;
      this.chunks = [];
      this.chunkPos = [];
      this.chunk = [];
      this.chunkReused = void 0;
      this.rangeIndex = 0;
      this.to = ranges[ranges.length - 1].to;
      let context = ParseContext.get(), from2 = ranges[0].from;
      let { state, tree } = findStartInFragments(lang, fragments, from2, context === null || context === void 0 ? void 0 : context.state);
      this.state = state;
      this.parsedPos = this.chunkStart = from2 + tree.length;
      for (let i3 = 0; i3 < tree.children.length; i3++) {
        this.chunks.push(tree.children[i3]);
        this.chunkPos.push(tree.positions[i3]);
      }
      if (context && this.parsedPos < context.viewport.from - 1e5) {
        this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
        context.skipUntilInView(this.parsedPos, context.viewport.from);
        this.parsedPos = context.viewport.from;
      }
      this.moveRangeIndex();
    }
    advance() {
      let context = ParseContext.get();
      let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
      let end = Math.min(
        parseEnd,
        this.chunkStart + 2048
        /* C.ChunkSize */
      );
      if (context)
        end = Math.min(end, context.viewport.to);
      while (this.parsedPos < end)
        this.parseLine(context);
      if (this.chunkStart < this.parsedPos)
        this.finishChunk();
      if (this.parsedPos >= parseEnd)
        return this.finish();
      if (context && this.parsedPos >= context.viewport.to) {
        context.skipUntilInView(this.parsedPos, parseEnd);
        return this.finish();
      }
      return null;
    }
    stopAt(pos) {
      this.stoppedAt = pos;
    }
    lineAfter(pos) {
      let chunk = this.input.chunk(pos);
      if (!this.input.lineChunks) {
        let eol2 = chunk.indexOf("\n");
        if (eol2 > -1)
          chunk = chunk.slice(0, eol2);
      } else if (chunk == "\n") {
        chunk = "";
      }
      return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
    }
    nextLine() {
      let from2 = this.parsedPos, line = this.lineAfter(from2), end = from2 + line.length;
      for (let index2 = this.rangeIndex; ; ) {
        let rangeEnd2 = this.ranges[index2].to;
        if (rangeEnd2 >= end)
          break;
        line = line.slice(0, rangeEnd2 - (end - line.length));
        index2++;
        if (index2 == this.ranges.length)
          break;
        let rangeStart = this.ranges[index2].from;
        let after = this.lineAfter(rangeStart);
        line += after;
        end = rangeStart + after.length;
      }
      return { line, end };
    }
    skipGapsTo(pos, offset, side) {
      for (; ; ) {
        let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;
        if (side > 0 ? end > offPos : end >= offPos)
          break;
        let start = this.ranges[++this.rangeIndex].from;
        offset += start - end;
      }
      return offset;
    }
    moveRangeIndex() {
      while (this.ranges[this.rangeIndex].to < this.parsedPos)
        this.rangeIndex++;
    }
    emitToken(id2, from2, to, size, offset) {
      if (this.ranges.length > 1) {
        offset = this.skipGapsTo(from2, offset, 1);
        from2 += offset;
        let len0 = this.chunk.length;
        offset = this.skipGapsTo(to, offset, -1);
        to += offset;
        size += this.chunk.length - len0;
      }
      this.chunk.push(id2, from2, to, size);
      return offset;
    }
    parseLine(context) {
      let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;
      let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
      if (stream.eol()) {
        streamParser.blankLine(this.state, stream.indentUnit);
      } else {
        while (!stream.eol()) {
          let token = readToken(streamParser.token, stream, this.state);
          if (token)
            offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
          if (stream.start > 1e4)
            break;
        }
      }
      this.parsedPos = end;
      this.moveRangeIndex();
      if (this.parsedPos < this.to)
        this.parsedPos++;
    }
    finishChunk() {
      let tree = Tree.build({
        buffer: this.chunk,
        start: this.chunkStart,
        length: this.parsedPos - this.chunkStart,
        nodeSet,
        topID: 0,
        maxBufferLength: 2048,
        reused: this.chunkReused
      });
      tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
      this.chunks.push(tree);
      this.chunkPos.push(this.chunkStart - this.ranges[0].from);
      this.chunk = [];
      this.chunkReused = void 0;
      this.chunkStart = this.parsedPos;
    }
    finish() {
      return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
    }
  };
  function readToken(token, stream, state) {
    stream.start = stream.pos;
    for (let i3 = 0; i3 < 10; i3++) {
      let result = token(stream, state);
      if (stream.pos > stream.start)
        return result;
    }
    throw new Error("Stream parser failed to advance stream.");
  }
  var noTokens = /* @__PURE__ */ Object.create(null);
  var typeArray = [NodeType.none];
  var nodeSet = /* @__PURE__ */ new NodeSet(typeArray);
  var warned = [];
  var byTag = /* @__PURE__ */ Object.create(null);
  var defaultTable = /* @__PURE__ */ Object.create(null);
  for (let [legacyName, name2] of [
    ["variable", "variableName"],
    ["variable-2", "variableName.special"],
    ["string-2", "string.special"],
    ["def", "variableName.definition"],
    ["tag", "tagName"],
    ["attribute", "attributeName"],
    ["type", "typeName"],
    ["builtin", "variableName.standard"],
    ["qualifier", "modifier"],
    ["error", "invalid"],
    ["header", "heading"],
    ["property", "propertyName"]
  ])
    defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
  var TokenTable = class {
    constructor(extra) {
      this.extra = extra;
      this.table = Object.assign(/* @__PURE__ */ Object.create(null), defaultTable);
    }
    resolve(tag) {
      return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
    }
  };
  var defaultTokenTable = /* @__PURE__ */ new TokenTable(noTokens);
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1)
      return;
    warned.push(part);
    console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
    let tags$1 = [];
    for (let name3 of tagStr.split(" ")) {
      let found2 = [];
      for (let part of name3.split(".")) {
        let value = extra[part] || tags[part];
        if (!value) {
          warnForPart(part, `Unknown highlighting tag ${part}`);
        } else if (typeof value == "function") {
          if (!found2.length)
            warnForPart(part, `Modifier ${part} used at start of tag`);
          else
            found2 = found2.map(value);
        } else {
          if (found2.length)
            warnForPart(part, `Tag ${part} used as modifier`);
          else
            found2 = Array.isArray(value) ? value : [value];
        }
      }
      for (let tag of found2)
        tags$1.push(tag);
    }
    if (!tags$1.length)
      return 0;
    let name2 = tagStr.replace(/ /g, "_"), key = name2 + " " + tags$1.map((t4) => t4.id);
    let known = byTag[key];
    if (known)
      return known.id;
    let type = byTag[key] = NodeType.define({
      id: typeArray.length,
      name: name2,
      props: [styleTags({ [name2]: tags$1 })]
    });
    typeArray.push(type);
    return type.id;
  }
  function docID(data) {
    let type = NodeType.define({ id: typeArray.length, name: "Document", props: [languageDataProp.add(() => data)], top: true });
    typeArray.push(type);
    return type;
  }
  function buildForLine(line) {
    return line.length <= 4096 && /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/.test(line);
  }
  function textHasRTL(text5) {
    for (let i3 = text5.iter(); !i3.next().done; )
      if (buildForLine(i3.value))
        return true;
    return false;
  }
  function changeAddsRTL(change) {
    let added = false;
    change.iterChanges((fA, tA, fB, tB, ins) => {
      if (!added && textHasRTL(ins))
        added = true;
    });
    return added;
  }
  var alwaysIsolate = /* @__PURE__ */ Facet.define({ combine: (values) => values.some((x7) => x7) });
  function bidiIsolates(options = {}) {
    let extensions = [isolateMarks];
    if (options.alwaysIsolate)
      extensions.push(alwaysIsolate.of(true));
    return extensions;
  }
  var isolateMarks = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.always = view.state.facet(alwaysIsolate) || view.textDirection != Direction.LTR || view.state.facet(EditorView.perLineTextDirection);
      this.hasRTL = !this.always && textHasRTL(view.state.doc);
      this.tree = syntaxTree(view.state);
      this.decorations = this.always || this.hasRTL ? buildDeco(view, this.tree, this.always) : Decoration.none;
    }
    update(update) {
      let always = update.state.facet(alwaysIsolate) || update.view.textDirection != Direction.LTR || update.state.facet(EditorView.perLineTextDirection);
      if (!always && !this.hasRTL && changeAddsRTL(update.changes))
        this.hasRTL = true;
      if (!always && !this.hasRTL)
        return;
      let tree = syntaxTree(update.state);
      if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {
        this.tree = tree;
        this.always = always;
        this.decorations = buildDeco(update.view, tree, always);
      }
    }
  }, {
    provide: (plugin2) => {
      function access(view) {
        var _a2, _b;
        return (_b = (_a2 = view.plugin(plugin2)) === null || _a2 === void 0 ? void 0 : _a2.decorations) !== null && _b !== void 0 ? _b : Decoration.none;
      }
      return [
        EditorView.outerDecorations.of(access),
        Prec.lowest(EditorView.bidiIsolatedRanges.of(access))
      ];
    }
  });
  function buildDeco(view, tree, always) {
    let deco = new RangeSetBuilder();
    let ranges = view.visibleRanges;
    if (!always)
      ranges = clipRTLLines(ranges, view.state.doc);
    for (let { from: from2, to } of ranges) {
      tree.iterate({
        enter: (node2) => {
          let iso = node2.type.prop(NodeProp.isolate);
          if (iso)
            deco.add(node2.from, node2.to, marks[iso]);
        },
        from: from2,
        to
      });
    }
    return deco.finish();
  }
  function clipRTLLines(ranges, doc5) {
    let cur2 = doc5.iter(), pos = 0, result = [], last = null;
    for (let { from: from2, to } of ranges) {
      if (from2 != pos) {
        if (pos < from2)
          cur2.next(from2 - pos);
        pos = from2;
      }
      for (; ; ) {
        let start = pos, end = pos + cur2.value.length;
        if (!cur2.lineBreak && buildForLine(cur2.value)) {
          if (last && last.to > start - 10)
            last.to = Math.min(to, end);
          else
            result.push(last = { from: start, to: Math.min(to, end) });
        }
        if (pos >= to)
          break;
        pos = end;
        cur2.next();
      }
    }
    return result;
  }
  var marks = {
    rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
    ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
    auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
  };

  // node_modules/@codemirror/autocomplete/dist/index.js
  var CompletionContext = class {
    /**
    Create a new completion context. (Mostly useful for testing
    completion sources—in the editor, the extension will create
    these for you.)
    */
    constructor(state, pos, explicit) {
      this.state = state;
      this.pos = pos;
      this.explicit = explicit;
      this.abortListeners = [];
    }
    /**
    Get the extent, content, and (if there is a token) type of the
    token before `this.pos`.
    */
    tokenBefore(types2) {
      let token = syntaxTree(this.state).resolveInner(this.pos, -1);
      while (token && types2.indexOf(token.name) < 0)
        token = token.parent;
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
    matchBefore(expr) {
      let line = this.state.doc.lineAt(this.pos);
      let start = Math.max(line.from, this.pos - 250);
      let str = line.text.slice(start - line.from, this.pos - line.from);
      let found2 = str.search(ensureAnchor(expr, false));
      return found2 < 0 ? null : { from: start + found2, to: this.pos, text: str.slice(found2) };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
    get aborted() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    */
    addEventListener(type, listener) {
      if (type == "abort" && this.abortListeners)
        this.abortListeners.push(listener);
    }
  };
  function toSet(chars) {
    let flat = Object.keys(chars).join("");
    let words = /\w/.test(flat);
    if (words)
      flat = flat.replace(/\w/g, "");
    return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
    let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
    for (let { label } of options) {
      first[label[0]] = true;
      for (let i3 = 1; i3 < label.length; i3++)
        rest[label[i3]] = true;
    }
    let source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  function completeFromList(list4) {
    let options = list4.map((o2) => typeof o2 == "string" ? { label: o2 } : o2);
    let [validFor, match] = options.every((o2) => /^\w+$/.test(o2.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
    return (context) => {
      let token = context.matchBefore(match);
      return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
    };
  }
  function ifIn(nodes, source) {
    return (context) => {
      for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
        if (nodes.indexOf(pos.name) > -1)
          return source(context);
        if (pos.type.isTop)
          break;
      }
      return null;
    };
  }
  function ifNotIn(nodes, source) {
    return (context) => {
      for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
        if (nodes.indexOf(pos.name) > -1)
          return null;
        if (pos.type.isTop)
          break;
      }
      return source(context);
    };
  }
  var Option = class {
    constructor(completion, source, match, score2) {
      this.completion = completion;
      this.source = source;
      this.match = match;
      this.score = score2;
    }
  };
  function cur(state) {
    return state.selection.main.from;
  }
  function ensureAnchor(expr, start) {
    var _a2;
    let { source } = expr;
    let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
    if (!addStart && !addEnd)
      return expr;
    return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
  }
  var pickedCompletion = /* @__PURE__ */ Annotation.define();
  function insertCompletionText(state, text5, from2, to) {
    let { main } = state.selection, fromOff = from2 - main.from, toOff = to - main.from;
    return Object.assign(Object.assign({}, state.changeByRange((range) => {
      if (range != main && from2 != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from2, to))
        return { range };
      return {
        changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text5 },
        range: EditorSelection.cursor(range.from + fromOff + text5.length)
      };
    })), { scrollIntoView: true, userEvent: "input.complete" });
  }
  var SourceCache = /* @__PURE__ */ new WeakMap();
  function asSource(source) {
    if (!Array.isArray(source))
      return source;
    let known = SourceCache.get(source);
    if (!known)
      SourceCache.set(source, known = completeFromList(source));
    return known;
  }
  var startCompletionEffect = /* @__PURE__ */ StateEffect.define();
  var closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
  var FuzzyMatcher = class {
    constructor(pattern) {
      this.pattern = pattern;
      this.chars = [];
      this.folded = [];
      this.any = [];
      this.precise = [];
      this.byWord = [];
      this.score = 0;
      this.matched = [];
      for (let p6 = 0; p6 < pattern.length; ) {
        let char = codePointAt(pattern, p6), size = codePointSize(char);
        this.chars.push(char);
        let part = pattern.slice(p6, p6 + size), upper = part.toUpperCase();
        this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
        p6 += size;
      }
      this.astral = pattern.length != this.chars.length;
    }
    ret(score2, matched) {
      this.score = score2;
      this.matched = matched;
      return this;
    }
    // Matches a given word (completion) against the pattern (input).
    // Will return a boolean indicating whether there was a match and,
    // on success, set `this.score` to the score, `this.matched` to an
    // array of `from, to` pairs indicating the matched parts of `word`.
    //
    // The score is a number that is more negative the worse the match
    // is. See `Penalty` above.
    match(word) {
      if (this.pattern.length == 0)
        return this.ret(-100, []);
      if (word.length < this.pattern.length)
        return null;
      let { chars, folded, any, precise, byWord } = this;
      if (chars.length == 1) {
        let first = codePointAt(word, 0), firstSize = codePointSize(first);
        let score2 = firstSize == word.length ? 0 : -100;
        if (first == chars[0])
          ;
        else if (first == folded[0])
          score2 += -200;
        else
          return null;
        return this.ret(score2, [0, firstSize]);
      }
      let direct = word.indexOf(this.pattern);
      if (direct == 0)
        return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
      let len = chars.length, anyTo = 0;
      if (direct < 0) {
        for (let i3 = 0, e3 = Math.min(word.length, 200); i3 < e3 && anyTo < len; ) {
          let next = codePointAt(word, i3);
          if (next == chars[anyTo] || next == folded[anyTo])
            any[anyTo++] = i3;
          i3 += codePointSize(next);
        }
        if (anyTo < len)
          return null;
      }
      let preciseTo = 0;
      let byWordTo = 0, byWordFolded = false;
      let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
      let hasLower = /[a-z]/.test(word), wordAdjacent = true;
      for (let i3 = 0, e3 = Math.min(word.length, 200), prevType = 0; i3 < e3 && byWordTo < len; ) {
        let next = codePointAt(word, i3);
        if (direct < 0) {
          if (preciseTo < len && next == chars[preciseTo])
            precise[preciseTo++] = i3;
          if (adjacentTo < len) {
            if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
              if (adjacentTo == 0)
                adjacentStart = i3;
              adjacentEnd = i3 + 1;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        let ch, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 : ch != ch.toUpperCase() ? 2 : 0;
        if (!i3 || type == 1 && hasLower || prevType == 0 && type != 0) {
          if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true))
            byWord[byWordTo++] = i3;
          else if (byWord.length)
            wordAdjacent = false;
        }
        prevType = type;
        i3 += codePointSize(next);
      }
      if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
        return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0)
        return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
      if (direct > -1)
        return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
      if (adjacentTo == len)
        return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
      if (byWordTo == len)
        return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
      return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
    }
    result(score2, positions, word) {
      let result = [], i3 = 0;
      for (let pos of positions) {
        let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
        if (i3 && result[i3 - 1] == pos)
          result[i3 - 1] = to;
        else {
          result[i3++] = pos;
          result[i3++] = to;
        }
      }
      return this.ret(score2 - word.length, result);
    }
  };
  var StrictMatcher = class {
    constructor(pattern) {
      this.pattern = pattern;
      this.matched = [];
      this.score = 0;
      this.folded = pattern.toLowerCase();
    }
    match(word) {
      if (word.length < this.pattern.length)
        return null;
      let start = word.slice(0, this.pattern.length);
      let match = start == this.pattern ? 0 : start.toLowerCase() == this.folded ? -200 : null;
      if (match == null)
        return null;
      this.matched = [0, start.length];
      this.score = match + (word.length == this.pattern.length ? 0 : -100);
      return this;
    }
  };
  var completionConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        activateOnTyping: true,
        activateOnCompletion: () => false,
        activateOnTypingDelay: 100,
        selectOnOpen: true,
        override: null,
        closeOnBlur: true,
        maxRenderedOptions: 100,
        defaultKeymap: true,
        tooltipClass: () => "",
        optionClass: () => "",
        aboveCursor: false,
        icons: true,
        addToOptions: [],
        positionInfo: defaultPositionInfo,
        filterStrict: false,
        compareCompletions: (a2, b4) => a2.label.localeCompare(b4.label),
        interactionDelay: 75,
        updateSyncTime: 100
      }, {
        defaultKeymap: (a2, b4) => a2 && b4,
        closeOnBlur: (a2, b4) => a2 && b4,
        icons: (a2, b4) => a2 && b4,
        tooltipClass: (a2, b4) => (c5) => joinClass(a2(c5), b4(c5)),
        optionClass: (a2, b4) => (c5) => joinClass(a2(c5), b4(c5)),
        addToOptions: (a2, b4) => a2.concat(b4),
        filterStrict: (a2, b4) => a2 || b4
      });
    }
  });
  function joinClass(a2, b4) {
    return a2 ? b4 ? a2 + " " + b4 : a2 : b4;
  }
  function defaultPositionInfo(view, list4, option, info, space2, tooltip) {
    let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
    let side = "top", offset, maxWidth;
    let spaceLeft = list4.left - space2.left, spaceRight = space2.right - list4.right;
    let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
    if (left && spaceLeft < Math.min(infoWidth, spaceRight))
      left = false;
    else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
      left = true;
    if (infoWidth <= (left ? spaceLeft : spaceRight)) {
      offset = Math.max(space2.top, Math.min(option.top, space2.bottom - infoHeight)) - list4.top;
      maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
    } else {
      narrow = true;
      maxWidth = Math.min(
        400,
        (rtl ? list4.right : space2.right - list4.left) - 30
        /* Info.Margin */
      );
      let spaceBelow = space2.bottom - list4.bottom;
      if (spaceBelow >= infoHeight || spaceBelow > list4.top) {
        offset = option.bottom - list4.top;
      } else {
        side = "bottom";
        offset = list4.bottom - option.top;
      }
    }
    let scaleY = (list4.bottom - list4.top) / tooltip.offsetHeight;
    let scaleX = (list4.right - list4.left) / tooltip.offsetWidth;
    return {
      style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
      class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
    };
  }
  function optionContent(config2) {
    let content4 = config2.addToOptions.slice();
    if (config2.icons)
      content4.push({
        render(completion) {
          let icon = document.createElement("div");
          icon.classList.add("cm-completionIcon");
          if (completion.type)
            icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
          icon.setAttribute("aria-hidden", "true");
          return icon;
        },
        position: 20
      });
    content4.push({
      render(completion, _s, _v, match) {
        let labelElt = document.createElement("span");
        labelElt.className = "cm-completionLabel";
        let label = completion.displayLabel || completion.label, off = 0;
        for (let j6 = 0; j6 < match.length; ) {
          let from2 = match[j6++], to = match[j6++];
          if (from2 > off)
            labelElt.appendChild(document.createTextNode(label.slice(off, from2)));
          let span = labelElt.appendChild(document.createElement("span"));
          span.appendChild(document.createTextNode(label.slice(from2, to)));
          span.className = "cm-completionMatchedText";
          off = to;
        }
        if (off < label.length)
          labelElt.appendChild(document.createTextNode(label.slice(off)));
        return labelElt;
      },
      position: 50
    }, {
      render(completion) {
        if (!completion.detail)
          return null;
        let detailElt = document.createElement("span");
        detailElt.className = "cm-completionDetail";
        detailElt.textContent = completion.detail;
        return detailElt;
      },
      position: 80
    });
    return content4.sort((a2, b4) => a2.position - b4.position).map((a2) => a2.render);
  }
  function rangeAroundSelected(total, selected, max) {
    if (total <= max)
      return { from: 0, to: total };
    if (selected < 0)
      selected = 0;
    if (selected <= total >> 1) {
      let off2 = Math.floor(selected / max);
      return { from: off2 * max, to: (off2 + 1) * max };
    }
    let off = Math.floor((total - selected) / max);
    return { from: total - (off + 1) * max, to: total - off * max };
  }
  var CompletionTooltip = class {
    constructor(view, stateField, applyCompletion2) {
      this.view = view;
      this.stateField = stateField;
      this.applyCompletion = applyCompletion2;
      this.info = null;
      this.infoDestroy = null;
      this.placeInfoReq = {
        read: () => this.measureInfo(),
        write: (pos) => this.placeInfo(pos),
        key: this
      };
      this.space = null;
      this.currentClass = "";
      let cState = view.state.field(stateField);
      let { options, selected } = cState.open;
      let config2 = view.state.facet(completionConfig);
      this.optionContent = optionContent(config2);
      this.optionClass = config2.optionClass;
      this.tooltipClass = config2.tooltipClass;
      this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
      this.dom = document.createElement("div");
      this.dom.className = "cm-tooltip-autocomplete";
      this.updateTooltipClass(view.state);
      this.dom.addEventListener("mousedown", (e3) => {
        let { options: options2 } = view.state.field(stateField).open;
        for (let dom = e3.target, match; dom && dom != this.dom; dom = dom.parentNode) {
          if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options2.length) {
            this.applyCompletion(view, options2[+match[1]]);
            e3.preventDefault();
            return;
          }
        }
      });
      this.dom.addEventListener("focusout", (e3) => {
        let state = view.state.field(this.stateField, false);
        if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e3.relatedTarget != view.contentDOM)
          view.dispatch({ effects: closeCompletionEffect.of(null) });
      });
      this.showOptions(options, cState.id);
    }
    mount() {
      this.updateSel();
    }
    showOptions(options, id2) {
      if (this.list)
        this.list.remove();
      this.list = this.dom.appendChild(this.createListBox(options, id2, this.range));
      this.list.addEventListener("scroll", () => {
        if (this.info)
          this.view.requestMeasure(this.placeInfoReq);
      });
    }
    update(update) {
      var _a2;
      let cState = update.state.field(this.stateField);
      let prevState = update.startState.field(this.stateField);
      this.updateTooltipClass(update.state);
      if (cState != prevState) {
        let { options, selected, disabled } = cState.open;
        if (!prevState.open || prevState.open.options != options) {
          this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(options, cState.id);
        }
        this.updateSel();
        if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
          this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
      }
    }
    updateTooltipClass(state) {
      let cls = this.tooltipClass(state);
      if (cls != this.currentClass) {
        for (let c5 of this.currentClass.split(" "))
          if (c5)
            this.dom.classList.remove(c5);
        for (let c5 of cls.split(" "))
          if (c5)
            this.dom.classList.add(c5);
        this.currentClass = cls;
      }
    }
    positioned(space2) {
      this.space = space2;
      if (this.info)
        this.view.requestMeasure(this.placeInfoReq);
    }
    updateSel() {
      let cState = this.view.state.field(this.stateField), open = cState.open;
      if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.showOptions(open.options, cState.id);
      }
      if (this.updateSelectedOption(open.selected)) {
        this.destroyInfo();
        let { completion } = open.options[open.selected];
        let { info } = completion;
        if (!info)
          return;
        let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
        if (!infoResult)
          return;
        if ("then" in infoResult) {
          infoResult.then((obj) => {
            if (obj && this.view.state.field(this.stateField, false) == cState)
              this.addInfoPane(obj, completion);
          }).catch((e3) => logException(this.view.state, e3, "completion info"));
        } else {
          this.addInfoPane(infoResult, completion);
        }
      }
    }
    addInfoPane(content4, completion) {
      this.destroyInfo();
      let wrap3 = this.info = document.createElement("div");
      wrap3.className = "cm-tooltip cm-completionInfo";
      if (content4.nodeType != null) {
        wrap3.appendChild(content4);
        this.infoDestroy = null;
      } else {
        let { dom, destroy } = content4;
        wrap3.appendChild(dom);
        this.infoDestroy = destroy || null;
      }
      this.dom.appendChild(wrap3);
      this.view.requestMeasure(this.placeInfoReq);
    }
    updateSelectedOption(selected) {
      let set = null;
      for (let opt = this.list.firstChild, i3 = this.range.from; opt; opt = opt.nextSibling, i3++) {
        if (opt.nodeName != "LI" || !opt.id) {
          i3--;
        } else if (i3 == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected"))
            opt.removeAttribute("aria-selected");
        }
      }
      if (set)
        scrollIntoView2(this.list, set);
      return set;
    }
    measureInfo() {
      let sel = this.dom.querySelector("[aria-selected]");
      if (!sel || !this.info)
        return null;
      let listRect = this.dom.getBoundingClientRect();
      let infoRect = this.info.getBoundingClientRect();
      let selRect = sel.getBoundingClientRect();
      let space2 = this.space;
      if (!space2) {
        let win = this.dom.ownerDocument.defaultView || window;
        space2 = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
      }
      if (selRect.top > Math.min(space2.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space2.top, listRect.top) + 10)
        return null;
      return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space2, this.dom);
    }
    placeInfo(pos) {
      if (this.info) {
        if (pos) {
          if (pos.style)
            this.info.style.cssText = pos.style;
          this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
        } else {
          this.info.style.cssText = "top: -1e6px";
        }
      }
    }
    createListBox(options, id2, range) {
      const ul = document.createElement("ul");
      ul.id = id2;
      ul.setAttribute("role", "listbox");
      ul.setAttribute("aria-expanded", "true");
      ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
      let curSection = null;
      for (let i3 = range.from; i3 < range.to; i3++) {
        let { completion, match } = options[i3], { section } = completion;
        if (section) {
          let name2 = typeof section == "string" ? section : section.name;
          if (name2 != curSection && (i3 > range.from || range.from == 0)) {
            curSection = name2;
            if (typeof section != "string" && section.header) {
              ul.appendChild(section.header(section));
            } else {
              let header = ul.appendChild(document.createElement("completion-section"));
              header.textContent = name2;
            }
          }
        }
        const li = ul.appendChild(document.createElement("li"));
        li.id = id2 + "-" + i3;
        li.setAttribute("role", "option");
        let cls = this.optionClass(completion);
        if (cls)
          li.className = cls;
        for (let source of this.optionContent) {
          let node2 = source(completion, this.view.state, this.view, match);
          if (node2)
            li.appendChild(node2);
        }
      }
      if (range.from)
        ul.classList.add("cm-completionListIncompleteTop");
      if (range.to < options.length)
        ul.classList.add("cm-completionListIncompleteBottom");
      return ul;
    }
    destroyInfo() {
      if (this.info) {
        if (this.infoDestroy)
          this.infoDestroy();
        this.info.remove();
        this.info = null;
      }
    }
    destroy() {
      this.destroyInfo();
    }
  };
  function completionTooltip(stateField, applyCompletion2) {
    return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
  }
  function scrollIntoView2(container, element2) {
    let parent = container.getBoundingClientRect();
    let self2 = element2.getBoundingClientRect();
    let scaleY = parent.height / container.offsetHeight;
    if (self2.top < parent.top)
      container.scrollTop -= (parent.top - self2.top) / scaleY;
    else if (self2.bottom > parent.bottom)
      container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
  }
  function score(option) {
    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
  }
  function sortOptions(active, state) {
    let options = [];
    let sections = null;
    let addOption = (option) => {
      options.push(option);
      let { section } = option.completion;
      if (section) {
        if (!sections)
          sections = [];
        let name2 = typeof section == "string" ? section : section.name;
        if (!sections.some((s4) => s4.name == name2))
          sections.push(typeof section == "string" ? { name: name2 } : section);
      }
    };
    let conf = state.facet(completionConfig);
    for (let a2 of active)
      if (a2.hasResult()) {
        let getMatch = a2.result.getMatch;
        if (a2.result.filter === false) {
          for (let option of a2.result.options) {
            addOption(new Option(option, a2.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
          }
        } else {
          let pattern = state.sliceDoc(a2.from, a2.to), match;
          let matcher2 = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
          for (let option of a2.result.options)
            if (match = matcher2.match(option.label)) {
              let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
              addOption(new Option(option, a2.source, matched, match.score + (option.boost || 0)));
            }
        }
      }
    if (sections) {
      let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
      let cmp2 = (a2, b4) => {
        var _a2, _b;
        return ((_a2 = a2.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b = b4.rank) !== null && _b !== void 0 ? _b : 1e9) || (a2.name < b4.name ? -1 : 1);
      };
      for (let s4 of sections.sort(cmp2)) {
        pos -= 1e5;
        sectionOrder[s4.name] = pos;
      }
      for (let option of options) {
        let { section } = option.completion;
        if (section)
          option.score += sectionOrder[typeof section == "string" ? section : section.name];
      }
    }
    let result = [], prev = null;
    let compare2 = conf.compareCompletions;
    for (let opt of options.sort((a2, b4) => b4.score - a2.score || compare2(a2.completion, b4.completion))) {
      let cur2 = opt.completion;
      if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
        result.push(opt);
      else if (score(opt.completion) > score(prev))
        result[result.length - 1] = opt;
      prev = opt.completion;
    }
    return result;
  }
  var CompletionDialog = class _CompletionDialog {
    constructor(options, attrs, tooltip, timestamp, selected, disabled) {
      this.options = options;
      this.attrs = attrs;
      this.tooltip = tooltip;
      this.timestamp = timestamp;
      this.selected = selected;
      this.disabled = disabled;
    }
    setSelected(selected, id2) {
      return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id2, selected), this.tooltip, this.timestamp, selected, this.disabled);
    }
    static build(active, state, id2, prev, conf) {
      let options = sortOptions(active, state);
      if (!options.length) {
        return prev && active.some(
          (a2) => a2.state == 1
          /* State.Pending */
        ) ? new _CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
      }
      let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
      if (prev && prev.selected != selected && prev.selected != -1) {
        let selectedValue = prev.options[prev.selected].completion;
        for (let i3 = 0; i3 < options.length; i3++)
          if (options[i3].completion == selectedValue) {
            selected = i3;
            break;
          }
      }
      return new _CompletionDialog(options, makeAttrs(id2, selected), {
        pos: active.reduce((a2, b4) => b4.hasResult() ? Math.min(a2, b4.from) : a2, 1e8),
        create: createTooltip,
        above: conf.aboveCursor
      }, prev ? prev.timestamp : Date.now(), selected, false);
    }
    map(changes) {
      return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
    }
  };
  var CompletionState = class _CompletionState {
    constructor(active, id2, open) {
      this.active = active;
      this.id = id2;
      this.open = open;
    }
    static start() {
      return new _CompletionState(none2, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
    update(tr) {
      let { state } = tr, conf = state.facet(completionConfig);
      let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      let active = sources.map((source) => {
        let value = this.active.find((s4) => s4.source == source) || new ActiveSource(
          source,
          this.active.some(
            (a2) => a2.state != 0
            /* State.Inactive */
          ) ? 1 : 0
          /* State.Inactive */
        );
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every((a2, i3) => a2 == this.active[i3]))
        active = this.active;
      let open = this.open;
      if (open && tr.docChanged)
        open = open.map(tr.changes);
      if (tr.selection || active.some((a2) => a2.hasResult() && tr.changes.touchesRange(a2.from, a2.to)) || !sameResults(active, this.active))
        open = CompletionDialog.build(active, state, this.id, open, conf);
      else if (open && open.disabled && !active.some(
        (a2) => a2.state == 1
        /* State.Pending */
      ))
        open = null;
      if (!open && active.every(
        (a2) => a2.state != 1
        /* State.Pending */
      ) && active.some((a2) => a2.hasResult()))
        active = active.map((a2) => a2.hasResult() ? new ActiveSource(
          a2.source,
          0
          /* State.Inactive */
        ) : a2);
      for (let effect of tr.effects)
        if (effect.is(setSelectedEffect))
          open = open && open.setSelected(effect.value, this.id);
      return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
    }
    get tooltip() {
      return this.open ? this.open.tooltip : null;
    }
    get attrs() {
      return this.open ? this.open.attrs : baseAttrs;
    }
  };
  function sameResults(a2, b4) {
    if (a2 == b4)
      return true;
    for (let iA = 0, iB = 0; ; ) {
      while (iA < a2.length && !a2[iA].hasResult)
        iA++;
      while (iB < b4.length && !b4[iB].hasResult)
        iB++;
      let endA = iA == a2.length, endB = iB == b4.length;
      if (endA || endB)
        return endA == endB;
      if (a2[iA++].result != b4[iB++].result)
        return false;
    }
  }
  var baseAttrs = {
    "aria-autocomplete": "list"
  };
  function makeAttrs(id2, selected) {
    let result = {
      "aria-autocomplete": "list",
      "aria-haspopup": "listbox",
      "aria-controls": id2
    };
    if (selected > -1)
      result["aria-activedescendant"] = id2 + "-" + selected;
    return result;
  }
  var none2 = [];
  function getUserEvent(tr, conf) {
    if (tr.isUserEvent("input.complete")) {
      let completion = tr.annotation(pickedCompletion);
      if (completion && conf.activateOnCompletion(completion))
        return "input";
    }
    return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
  }
  var ActiveSource = class _ActiveSource {
    constructor(source, state, explicitPos = -1) {
      this.source = source;
      this.state = state;
      this.explicitPos = explicitPos;
    }
    hasResult() {
      return false;
    }
    update(tr, conf) {
      let event = getUserEvent(tr, conf), value = this;
      if (event)
        value = value.handleUserEvent(tr, event, conf);
      else if (tr.docChanged)
        value = value.handleChange(tr);
      else if (tr.selection && value.state != 0)
        value = new _ActiveSource(
          value.source,
          0
          /* State.Inactive */
        );
      for (let effect of tr.effects) {
        if (effect.is(startCompletionEffect))
          value = new _ActiveSource(value.source, 1, effect.value ? cur(tr.state) : -1);
        else if (effect.is(closeCompletionEffect))
          value = new _ActiveSource(
            value.source,
            0
            /* State.Inactive */
          );
        else if (effect.is(setActiveEffect)) {
          for (let active of effect.value)
            if (active.source == value.source)
              value = active;
        }
      }
      return value;
    }
    handleUserEvent(tr, type, conf) {
      return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new _ActiveSource(
        this.source,
        1
        /* State.Pending */
      );
    }
    handleChange(tr) {
      return tr.changes.touchesRange(cur(tr.startState)) ? new _ActiveSource(
        this.source,
        0
        /* State.Inactive */
      ) : this.map(tr.changes);
    }
    map(changes) {
      return changes.empty || this.explicitPos < 0 ? this : new _ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
    }
  };
  var ActiveResult = class _ActiveResult extends ActiveSource {
    constructor(source, explicitPos, result, from2, to) {
      super(source, 2, explicitPos);
      this.result = result;
      this.from = from2;
      this.to = to;
    }
    hasResult() {
      return true;
    }
    handleUserEvent(tr, type, conf) {
      var _a2;
      let result = this.result;
      if (result.map && !tr.changes.empty)
        result = result.map(result, tr.changes);
      let from2 = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
      let pos = cur(tr.state);
      if ((this.explicitPos < 0 ? pos <= from2 : pos < this.from) || pos > to || !result || type == "delete" && cur(tr.startState) == this.from)
        return new ActiveSource(
          this.source,
          type == "input" && conf.activateOnTyping ? 1 : 0
          /* State.Inactive */
        );
      let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);
      if (checkValid(result.validFor, tr.state, from2, to))
        return new _ActiveResult(this.source, explicitPos, result, from2, to);
      if (result.update && (result = result.update(result, from2, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
        return new _ActiveResult(this.source, explicitPos, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr.state));
      return new ActiveSource(this.source, 1, explicitPos);
    }
    handleChange(tr) {
      return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(
        this.source,
        0
        /* State.Inactive */
      ) : this.map(tr.changes);
    }
    map(mapping) {
      if (mapping.empty)
        return this;
      let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
      if (!result)
        return new ActiveSource(
          this.source,
          0
          /* State.Inactive */
        );
      return new _ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
    }
  };
  function checkValid(validFor, state, from2, to) {
    if (!validFor)
      return false;
    let text5 = state.sliceDoc(from2, to);
    return typeof validFor == "function" ? validFor(text5, from2, to, state) : ensureAnchor(validFor, true).test(text5);
  }
  var setActiveEffect = /* @__PURE__ */ StateEffect.define({
    map(sources, mapping) {
      return sources.map((s4) => s4.map(mapping));
    }
  });
  var setSelectedEffect = /* @__PURE__ */ StateEffect.define();
  var completionState = /* @__PURE__ */ StateField.define({
    create() {
      return CompletionState.start();
    },
    update(value, tr) {
      return value.update(tr);
    },
    provide: (f3) => [
      showTooltip.from(f3, (val) => val.tooltip),
      EditorView.contentAttributes.from(f3, (state) => state.attrs)
    ]
  });
  function applyCompletion(view, option) {
    const apply2 = option.completion.apply || option.completion.label;
    let result = view.state.field(completionState).active.find((a2) => a2.source == option.source);
    if (!(result instanceof ActiveResult))
      return false;
    if (typeof apply2 == "string")
      view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply2, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
    else
      apply2(view, option.completion, result.from, result.to);
    return true;
  }
  var createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
  function moveCompletionSelection(forward, by = "option") {
    return (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
        return false;
      let step = 1, tooltip;
      if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
        step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
      let { length } = cState.open.options;
      let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
      if (selected < 0)
        selected = by == "page" ? 0 : length - 1;
      else if (selected >= length)
        selected = by == "page" ? length - 1 : 0;
      view.dispatch({ effects: setSelectedEffect.of(selected) });
      return true;
    };
  }
  var acceptCompletion = (view) => {
    let cState = view.state.field(completionState, false);
    if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
      return false;
    return applyCompletion(view, cState.open.options[cState.open.selected]);
  };
  var startCompletion = (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState)
      return false;
    view.dispatch({ effects: startCompletionEffect.of(true) });
    return true;
  };
  var closeCompletion = (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.active.some(
      (a2) => a2.state != 0
      /* State.Inactive */
    ))
      return false;
    view.dispatch({ effects: closeCompletionEffect.of(null) });
    return true;
  };
  var RunningQuery = class {
    constructor(active, context) {
      this.active = active;
      this.context = context;
      this.time = Date.now();
      this.updates = [];
      this.done = void 0;
    }
  };
  var MaxUpdateCount = 50;
  var MinAbortTime = 1e3;
  var completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.debounceUpdate = -1;
      this.running = [];
      this.debounceAccept = -1;
      this.pendingStart = false;
      this.composing = 0;
      for (let active of view.state.field(completionState).active)
        if (active.state == 1)
          this.startQuery(active);
    }
    update(update) {
      let cState = update.state.field(completionState);
      let conf = update.state.facet(completionConfig);
      if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
        return;
      let doesReset = update.transactions.some((tr) => {
        return (tr.selection || tr.docChanged) && !getUserEvent(tr, conf);
      });
      for (let i3 = 0; i3 < this.running.length; i3++) {
        let query = this.running[i3];
        if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
          for (let handler of query.context.abortListeners) {
            try {
              handler();
            } catch (e3) {
              logException(this.view.state, e3);
            }
          }
          query.context.abortListeners = null;
          this.running.splice(i3--, 1);
        } else {
          query.updates.push(...update.transactions);
        }
      }
      if (this.debounceUpdate > -1)
        clearTimeout(this.debounceUpdate);
      if (update.transactions.some((tr) => tr.effects.some((e3) => e3.is(startCompletionEffect))))
        this.pendingStart = true;
      let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
      this.debounceUpdate = cState.active.some((a2) => a2.state == 1 && !this.running.some((q7) => q7.active.source == a2.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
      if (this.composing != 0)
        for (let tr of update.transactions) {
          if (getUserEvent(tr, conf) == "input")
            this.composing = 2;
          else if (this.composing == 2 && tr.selection)
            this.composing = 3;
        }
    }
    startUpdate() {
      this.debounceUpdate = -1;
      this.pendingStart = false;
      let { state } = this.view, cState = state.field(completionState);
      for (let active of cState.active) {
        if (active.state == 1 && !this.running.some((r4) => r4.active.source == active.source))
          this.startQuery(active);
      }
    }
    startQuery(active) {
      let { state } = this.view, pos = cur(state);
      let context = new CompletionContext(state, pos, active.explicitPos == pos);
      let pending = new RunningQuery(active, context);
      this.running.push(pending);
      Promise.resolve(active.source(context)).then((result) => {
        if (!pending.context.aborted) {
          pending.done = result || null;
          this.scheduleAccept();
        }
      }, (err) => {
        this.view.dispatch({ effects: closeCompletionEffect.of(null) });
        logException(this.view.state, err);
      });
    }
    scheduleAccept() {
      if (this.running.every((q7) => q7.done !== void 0))
        this.accept();
      else if (this.debounceAccept < 0)
        this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
    accept() {
      var _a2;
      if (this.debounceAccept > -1)
        clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      let updated = [];
      let conf = this.view.state.facet(completionConfig);
      for (let i3 = 0; i3 < this.running.length; i3++) {
        let query = this.running[i3];
        if (query.done === void 0)
          continue;
        this.running.splice(i3--, 1);
        if (query.done) {
          let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : cur(query.updates.length ? query.updates[0].startState : this.view.state));
          for (let tr of query.updates)
            active = active.update(tr, conf);
          if (active.hasResult()) {
            updated.push(active);
            continue;
          }
        }
        let current = this.view.state.field(completionState).active.find((a2) => a2.source == query.active.source);
        if (current && current.state == 1) {
          if (query.done == null) {
            let active = new ActiveSource(
              query.active.source,
              0
              /* State.Inactive */
            );
            for (let tr of query.updates)
              active = active.update(tr, conf);
            if (active.state != 1)
              updated.push(active);
          } else {
            this.startQuery(current);
          }
        }
      }
      if (updated.length)
        this.view.dispatch({ effects: setActiveEffect.of(updated) });
    }
  }, {
    eventHandlers: {
      blur(event) {
        let state = this.view.state.field(completionState, false);
        if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
          let dialog = state.open && getTooltip(this.view, state.open.tooltip);
          if (!dialog || !dialog.dom.contains(event.relatedTarget))
            setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
        }
      },
      compositionstart() {
        this.composing = 1;
      },
      compositionend() {
        if (this.composing == 3) {
          setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
        }
        this.composing = 0;
      }
    }
  });
  var windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
  var commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
    keydown(event, view) {
      let field = view.state.field(completionState, false);
      if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
        return false;
      let option = field.open.options[field.open.selected];
      let result = field.active.find((a2) => a2.source == option.source);
      let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
      if (commitChars && commitChars.indexOf(event.key) > -1)
        applyCompletion(view, option);
      return false;
    }
  }));
  var baseTheme3 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-tooltip.cm-tooltip-autocomplete": {
      "& > ul": {
        fontFamily: "monospace",
        whiteSpace: "nowrap",
        overflow: "hidden auto",
        maxWidth_fallback: "700px",
        maxWidth: "min(700px, 95vw)",
        minWidth: "250px",
        maxHeight: "10em",
        height: "100%",
        listStyle: "none",
        margin: 0,
        padding: 0,
        "& > li, & > completion-section": {
          padding: "1px 3px",
          lineHeight: 1.2
        },
        "& > li": {
          overflowX: "hidden",
          textOverflow: "ellipsis",
          cursor: "pointer"
        },
        "& > completion-section": {
          display: "list-item",
          borderBottom: "1px solid silver",
          paddingLeft: "0.5em",
          opacity: 0.7
        }
      }
    },
    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#17c",
      color: "white"
    },
    "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#777"
    },
    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
      background: "#347",
      color: "white"
    },
    "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
      background: "#444"
    },
    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
      content: '"\xB7\xB7\xB7"',
      opacity: 0.5,
      display: "block",
      textAlign: "center"
    },
    ".cm-tooltip.cm-completionInfo": {
      position: "absolute",
      padding: "3px 9px",
      width: "max-content",
      maxWidth: `${400}px`,
      boxSizing: "border-box"
    },
    ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
    ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
    ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
    ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
    "&light .cm-snippetField": { backgroundColor: "#00000022" },
    "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
    ".cm-snippetFieldPosition": {
      verticalAlign: "text-top",
      width: 0,
      height: "1.15em",
      display: "inline-block",
      margin: "0 -0.7px -.7em",
      borderLeft: "1.4px dotted #888"
    },
    ".cm-completionMatchedText": {
      textDecoration: "underline"
    },
    ".cm-completionDetail": {
      marginLeft: "0.5em",
      fontStyle: "italic"
    },
    ".cm-completionIcon": {
      fontSize: "90%",
      width: ".8em",
      display: "inline-block",
      textAlign: "center",
      paddingRight: ".6em",
      opacity: "0.6",
      boxSizing: "content-box"
    },
    ".cm-completionIcon-function, .cm-completionIcon-method": {
      "&:after": { content: "'\u0192'" }
    },
    ".cm-completionIcon-class": {
      "&:after": { content: "'\u25CB'" }
    },
    ".cm-completionIcon-interface": {
      "&:after": { content: "'\u25CC'" }
    },
    ".cm-completionIcon-variable": {
      "&:after": { content: "'\u{1D465}'" }
    },
    ".cm-completionIcon-constant": {
      "&:after": { content: "'\u{1D436}'" }
    },
    ".cm-completionIcon-type": {
      "&:after": { content: "'\u{1D461}'" }
    },
    ".cm-completionIcon-enum": {
      "&:after": { content: "'\u222A'" }
    },
    ".cm-completionIcon-property": {
      "&:after": { content: "'\u25A1'" }
    },
    ".cm-completionIcon-keyword": {
      "&:after": { content: "'\u{1F511}\uFE0E'" }
      // Disable emoji rendering
    },
    ".cm-completionIcon-namespace": {
      "&:after": { content: "'\u25A2'" }
    },
    ".cm-completionIcon-text": {
      "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
    }
  });
  var FieldPos = class {
    constructor(field, line, from2, to) {
      this.field = field;
      this.line = line;
      this.from = from2;
      this.to = to;
    }
  };
  var FieldRange = class _FieldRange {
    constructor(field, from2, to) {
      this.field = field;
      this.from = from2;
      this.to = to;
    }
    map(changes) {
      let from2 = changes.mapPos(this.from, -1, MapMode.TrackDel);
      let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
      return from2 == null || to == null ? null : new _FieldRange(this.field, from2, to);
    }
  };
  var Snippet = class _Snippet {
    constructor(lines, fieldPositions) {
      this.lines = lines;
      this.fieldPositions = fieldPositions;
    }
    instantiate(state, pos) {
      let text5 = [], lineStart = [pos];
      let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
      for (let line of this.lines) {
        if (text5.length) {
          let indent2 = baseIndent, tabs = /^\t*/.exec(line)[0].length;
          for (let i3 = 0; i3 < tabs; i3++)
            indent2 += state.facet(indentUnit);
          lineStart.push(pos + indent2.length - tabs);
          line = indent2 + line.slice(tabs);
        }
        text5.push(line);
        pos += line.length + 1;
      }
      let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
      return { text: text5, ranges };
    }
    static parse(template) {
      let fields = [];
      let lines = [], positions = [], m4;
      for (let line of template.split(/\r\n?|\n/)) {
        while (m4 = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
          let seq = m4[1] ? +m4[1] : null, name2 = m4[2] || m4[3] || "", found2 = -1;
          for (let i3 = 0; i3 < fields.length; i3++) {
            if (seq != null ? fields[i3].seq == seq : name2 ? fields[i3].name == name2 : false)
              found2 = i3;
          }
          if (found2 < 0) {
            let i3 = 0;
            while (i3 < fields.length && (seq == null || fields[i3].seq != null && fields[i3].seq < seq))
              i3++;
            fields.splice(i3, 0, { seq, name: name2 });
            found2 = i3;
            for (let pos of positions)
              if (pos.field >= found2)
                pos.field++;
          }
          positions.push(new FieldPos(found2, lines.length, m4.index, m4.index + name2.length));
          line = line.slice(0, m4.index) + name2 + line.slice(m4.index + m4[0].length);
        }
        for (let esc; esc = /\\([{}])/.exec(line); ) {
          line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
          for (let pos of positions)
            if (pos.line == lines.length && pos.from > esc.index) {
              pos.from--;
              pos.to--;
            }
        }
        lines.push(line);
      }
      return new _Snippet(lines, positions);
    }
  };
  var fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
    toDOM() {
      let span = document.createElement("span");
      span.className = "cm-snippetFieldPosition";
      return span;
    }
    ignoreEvent() {
      return false;
    }
  }() });
  var fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
  var ActiveSnippet = class _ActiveSnippet {
    constructor(ranges, active) {
      this.ranges = ranges;
      this.active = active;
      this.deco = Decoration.set(ranges.map((r4) => (r4.from == r4.to ? fieldMarker : fieldRange).range(r4.from, r4.to)));
    }
    map(changes) {
      let ranges = [];
      for (let r4 of this.ranges) {
        let mapped = r4.map(changes);
        if (!mapped)
          return null;
        ranges.push(mapped);
      }
      return new _ActiveSnippet(ranges, this.active);
    }
    selectionInsideField(sel) {
      return sel.ranges.every((range) => this.ranges.some((r4) => r4.field == this.active && r4.from <= range.from && r4.to >= range.to));
    }
  };
  var setActive = /* @__PURE__ */ StateEffect.define({
    map(value, changes) {
      return value && value.map(changes);
    }
  });
  var moveToField = /* @__PURE__ */ StateEffect.define();
  var snippetState = /* @__PURE__ */ StateField.define({
    create() {
      return null;
    },
    update(value, tr) {
      for (let effect of tr.effects) {
        if (effect.is(setActive))
          return effect.value;
        if (effect.is(moveToField) && value)
          return new ActiveSnippet(value.ranges, effect.value);
      }
      if (value && tr.docChanged)
        value = value.map(tr.changes);
      if (value && tr.selection && !value.selectionInsideField(tr.selection))
        value = null;
      return value;
    },
    provide: (f3) => EditorView.decorations.from(f3, (val) => val ? val.deco : Decoration.none)
  });
  function fieldSelection(ranges, field) {
    return EditorSelection.create(ranges.filter((r4) => r4.field == field).map((r4) => EditorSelection.range(r4.from, r4.to)));
  }
  function snippet(template) {
    let snippet2 = Snippet.parse(template);
    return (editor, completion, from2, to) => {
      let { text: text5, ranges } = snippet2.instantiate(editor.state, from2);
      let spec = {
        changes: { from: from2, to, insert: Text2.of(text5) },
        scrollIntoView: true,
        annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : void 0
      };
      if (ranges.length)
        spec.selection = fieldSelection(ranges, 0);
      if (ranges.some((r4) => r4.field > 0)) {
        let active = new ActiveSnippet(ranges, 0);
        let effects = spec.effects = [setActive.of(active)];
        if (editor.state.field(snippetState, false) === void 0)
          effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme3]));
      }
      editor.dispatch(editor.state.update(spec));
    };
  }
  function moveField(dir) {
    return ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active || dir < 0 && active.active == 0)
        return false;
      let next = active.active + dir, last = dir > 0 && !active.ranges.some((r4) => r4.field == next + dir);
      dispatch(state.update({
        selection: fieldSelection(active.ranges, next),
        effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next)),
        scrollIntoView: true
      }));
      return true;
    };
  }
  var clearSnippet = ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active)
      return false;
    dispatch(state.update({ effects: setActive.of(null) }));
    return true;
  };
  var nextSnippetField = /* @__PURE__ */ moveField(1);
  var prevSnippetField = /* @__PURE__ */ moveField(-1);
  function hasNextSnippetField(state) {
    let active = state.field(snippetState, false);
    return !!(active && active.ranges.some((r4) => r4.field == active.active + 1));
  }
  function hasPrevSnippetField(state) {
    let active = state.field(snippetState, false);
    return !!(active && active.active > 0);
  }
  var defaultSnippetKeymap = [
    { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
    { key: "Escape", run: clearSnippet }
  ];
  var snippetKeymap = /* @__PURE__ */ Facet.define({
    combine(maps) {
      return maps.length ? maps[0] : defaultSnippetKeymap;
    }
  });
  var addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
  function snippetCompletion(template, completion) {
    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
  }
  var snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
    mousedown(event, view) {
      let active = view.state.field(snippetState, false), pos;
      if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
        return false;
      let match = active.ranges.find((r4) => r4.from <= pos && r4.to >= pos);
      if (!match || match.field == active.active)
        return false;
      view.dispatch({
        selection: fieldSelection(active.ranges, match.field),
        effects: setActive.of(active.ranges.some((r4) => r4.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null),
        scrollIntoView: true
      });
      return true;
    }
  });
  function wordRE(wordChars) {
    let escaped = wordChars.replace(/[\]\-\\]/g, "\\$&");
    try {
      return new RegExp(`[\\p{Alphabetic}\\p{Number}_${escaped}]+`, "ug");
    } catch (_a2) {
      return new RegExp(`[w${escaped}]`, "g");
    }
  }
  function mapRE(re4, f3) {
    return new RegExp(f3(re4.source), re4.unicode ? "u" : "");
  }
  var wordCaches = /* @__PURE__ */ Object.create(null);
  function wordCache(wordChars) {
    return wordCaches[wordChars] || (wordCaches[wordChars] = /* @__PURE__ */ new WeakMap());
  }
  function storeWords(doc5, wordRE2, result, seen, ignoreAt) {
    for (let lines = doc5.iterLines(), pos = 0; !lines.next().done; ) {
      let { value } = lines, m4;
      wordRE2.lastIndex = 0;
      while (m4 = wordRE2.exec(value)) {
        if (!seen[m4[0]] && pos + m4.index != ignoreAt) {
          result.push({ type: "text", label: m4[0] });
          seen[m4[0]] = true;
          if (result.length >= 2e3)
            return;
        }
      }
      pos += value.length + 1;
    }
  }
  function collectWords(doc5, cache2, wordRE2, to, ignoreAt) {
    let big = doc5.length >= 1e3;
    let cached = big && cache2.get(doc5);
    if (cached)
      return cached;
    let result = [], seen = /* @__PURE__ */ Object.create(null);
    if (doc5.children) {
      let pos = 0;
      for (let ch of doc5.children) {
        if (ch.length >= 1e3) {
          for (let c5 of collectWords(ch, cache2, wordRE2, to - pos, ignoreAt - pos)) {
            if (!seen[c5.label]) {
              seen[c5.label] = true;
              result.push(c5);
            }
          }
        } else {
          storeWords(ch, wordRE2, result, seen, ignoreAt - pos);
        }
        pos += ch.length + 1;
      }
    } else {
      storeWords(doc5, wordRE2, result, seen, ignoreAt);
    }
    if (big && result.length < 2e3)
      cache2.set(doc5, result);
    return result;
  }
  var completeAnyWord = (context) => {
    let wordChars = context.state.languageDataAt("wordChars", context.pos).join("");
    let re4 = wordRE(wordChars);
    let token = context.matchBefore(mapRE(re4, (s4) => s4 + "$"));
    if (!token && !context.explicit)
      return null;
    let from2 = token ? token.from : context.pos;
    let options = collectWords(context.state.doc, wordCache(wordChars), re4, 5e4, from2);
    return { from: from2, options, validFor: mapRE(re4, (s4) => "^" + s4) };
  };
  var defaults2 = {
    brackets: ["(", "[", "{", "'", '"'],
    before: ")]}:;>",
    stringPrefixes: []
  };
  var closeBracketEffect = /* @__PURE__ */ StateEffect.define({
    map(value, mapping) {
      let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
      return mapped == null ? void 0 : mapped;
    }
  });
  var closedBracket = /* @__PURE__ */ new class extends RangeValue {
  }();
  closedBracket.startSide = 1;
  closedBracket.endSide = -1;
  var bracketState = /* @__PURE__ */ StateField.define({
    create() {
      return RangeSet.empty;
    },
    update(value, tr) {
      value = value.map(tr.changes);
      if (tr.selection) {
        let line = tr.state.doc.lineAt(tr.selection.main.head);
        value = value.update({ filter: (from2) => from2 >= line.from && from2 <= line.to });
      }
      for (let effect of tr.effects)
        if (effect.is(closeBracketEffect))
          value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
      return value;
    }
  });
  function closeBrackets() {
    return [inputHandler2, bracketState];
  }
  var definedClosing = "()[]{}<>";
  function closing(ch) {
    for (let i3 = 0; i3 < definedClosing.length; i3 += 2)
      if (definedClosing.charCodeAt(i3) == ch)
        return definedClosing.charAt(i3 + 1);
    return fromCodePoint(ch < 128 ? ch : ch + 1);
  }
  function config(state, pos) {
    return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
  }
  var android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
  var inputHandler2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from2, to, insert2) => {
    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
      return false;
    let sel = view.state.selection.main;
    if (insert2.length > 2 || insert2.length == 2 && codePointSize(codePointAt(insert2, 0)) == 1 || from2 != sel.from || to != sel.to)
      return false;
    let tr = insertBracket(view.state, insert2);
    if (!tr)
      return false;
    view.dispatch(tr);
    return true;
  });
  var deleteBracketPair = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults2.brackets;
    let dont = null, changes = state.changeByRange((range) => {
      if (range.empty) {
        let before = prevChar(state.doc, range.head);
        for (let token of tokens) {
          if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
            return {
              changes: { from: range.head - token.length, to: range.head + token.length },
              range: EditorSelection.cursor(range.head - token.length)
            };
        }
      }
      return { range: dont = range };
    });
    if (!dont)
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
    return !dont;
  };
  var closeBracketsKeymap = [
    { key: "Backspace", run: deleteBracketPair }
  ];
  function insertBracket(state, bracket2) {
    let conf = config(state, state.selection.main.head);
    let tokens = conf.brackets || defaults2.brackets;
    for (let tok of tokens) {
      let closed = closing(codePointAt(tok, 0));
      if (bracket2 == tok)
        return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
      if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
        return handleClose(state, tok, closed);
    }
    return null;
  }
  function closedBracketAt(state, pos) {
    let found2 = false;
    state.field(bracketState).between(0, state.doc.length, (from2) => {
      if (from2 == pos)
        found2 = true;
    });
    return found2;
  }
  function nextChar(doc5, pos) {
    let next = doc5.sliceString(pos, pos + 2);
    return next.slice(0, codePointSize(codePointAt(next, 0)));
  }
  function prevChar(doc5, pos) {
    let prev = doc5.sliceString(pos - 2, pos);
    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
  }
  function handleOpen(state, open, close2, closeBefore) {
    let dont = null, changes = state.changeByRange((range) => {
      if (!range.empty)
        return {
          changes: [{ insert: open, from: range.from }, { insert: close2, from: range.to }],
          effects: closeBracketEffect.of(range.to + open.length),
          range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
        };
      let next = nextChar(state.doc, range.head);
      if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
        return {
          changes: { insert: open + close2, from: range.head },
          effects: closeBracketEffect.of(range.head + open.length),
          range: EditorSelection.cursor(range.head + open.length)
        };
      return { range: dont = range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleClose(state, _open, close2) {
    let dont = null, changes = state.changeByRange((range) => {
      if (range.empty && nextChar(state.doc, range.head) == close2)
        return {
          changes: { from: range.head, to: range.head + close2.length, insert: close2 },
          range: EditorSelection.cursor(range.head + close2.length)
        };
      return dont = { range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function handleSame(state, token, allowTriple, config2) {
    let stringPrefixes = config2.stringPrefixes || defaults2.stringPrefixes;
    let dont = null, changes = state.changeByRange((range) => {
      if (!range.empty)
        return {
          changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
          effects: closeBracketEffect.of(range.to + token.length),
          range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
        };
      let pos = range.head, next = nextChar(state.doc, pos), start;
      if (next == token) {
        if (nodeStart(state, pos)) {
          return {
            changes: { insert: token + token, from: pos },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
        } else if (closedBracketAt(state, pos)) {
          let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
          let content4 = isTriple ? token + token + token : token;
          return {
            changes: { from: pos, to: pos + content4.length, insert: content4 },
            range: EditorSelection.cursor(pos + content4.length)
          };
        }
      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 && nodeStart(state, start)) {
        return {
          changes: { insert: token + token + token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
        if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
          return {
            changes: { insert: token + token, from: pos },
            effects: closeBracketEffect.of(pos + token.length),
            range: EditorSelection.cursor(pos + token.length)
          };
      }
      return { range: dont = range };
    });
    return dont ? null : state.update(changes, {
      scrollIntoView: true,
      userEvent: "input.type"
    });
  }
  function nodeStart(state, pos) {
    let tree = syntaxTree(state).resolveInner(pos + 1);
    return tree.parent && tree.from == pos;
  }
  function probablyInString(state, pos, quoteToken, prefixes) {
    let node2 = syntaxTree(state).resolveInner(pos, -1);
    let maxPrefix = prefixes.reduce((m4, p6) => Math.max(m4, p6.length), 0);
    for (let i3 = 0; i3 < 5; i3++) {
      let start = state.sliceDoc(node2.from, Math.min(node2.to, node2.from + quoteToken.length + maxPrefix));
      let quotePos = start.indexOf(quoteToken);
      if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
        let first = node2.firstChild;
        while (first && first.from == node2.from && first.to - first.from > quoteToken.length + quotePos) {
          if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
            return false;
          first = first.firstChild;
        }
        return true;
      }
      let parent = node2.to == pos && node2.parent;
      if (!parent)
        break;
      node2 = parent;
    }
    return false;
  }
  function canStartStringAt(state, pos, prefixes) {
    let charCat = state.charCategorizer(pos);
    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
      return pos;
    for (let prefix of prefixes) {
      let start = pos - prefix.length;
      if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
        return start;
    }
    return -1;
  }
  function autocompletion(config2 = {}) {
    return [
      commitCharacters,
      completionState,
      completionConfig.of(config2),
      completionPlugin,
      completionKeymapExt,
      baseTheme3
    ];
  }
  var completionKeymap = [
    { key: "Ctrl-Space", run: startCompletion },
    { key: "Escape", run: closeCompletion },
    { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
    { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
    { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
    { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
    { key: "Enter", run: acceptCompletion }
  ];
  var completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
  function completionStatus(state) {
    let cState = state.field(completionState, false);
    return cState && cState.active.some(
      (a2) => a2.state == 1
      /* State.Pending */
    ) ? "pending" : cState && cState.active.some(
      (a2) => a2.state != 0
      /* State.Inactive */
    ) ? "active" : null;
  }
  var completionArrayCache = /* @__PURE__ */ new WeakMap();
  function currentCompletions(state) {
    var _a2;
    let open = (_a2 = state.field(completionState, false)) === null || _a2 === void 0 ? void 0 : _a2.open;
    if (!open || open.disabled)
      return [];
    let completions = completionArrayCache.get(open.options);
    if (!completions)
      completionArrayCache.set(open.options, completions = open.options.map((o2) => o2.completion));
    return completions;
  }
  function selectedCompletion(state) {
    var _a2;
    let open = (_a2 = state.field(completionState, false)) === null || _a2 === void 0 ? void 0 : _a2.open;
    return open && !open.disabled && open.selected >= 0 ? open.options[open.selected].completion : null;
  }
  function selectedCompletionIndex(state) {
    var _a2;
    let open = (_a2 = state.field(completionState, false)) === null || _a2 === void 0 ? void 0 : _a2.open;
    return open && !open.disabled && open.selected >= 0 ? open.selected : null;
  }
  function setSelectedCompletion(index2) {
    return setSelectedEffect.of(index2);
  }

  // node_modules/@codemirror/commands/dist/index.js
  var dist_exports5 = {};
  __export(dist_exports5, {
    blockComment: () => blockComment,
    blockUncomment: () => blockUncomment,
    copyLineDown: () => copyLineDown,
    copyLineUp: () => copyLineUp,
    cursorCharBackward: () => cursorCharBackward,
    cursorCharForward: () => cursorCharForward,
    cursorCharLeft: () => cursorCharLeft,
    cursorCharRight: () => cursorCharRight,
    cursorDocEnd: () => cursorDocEnd,
    cursorDocStart: () => cursorDocStart,
    cursorGroupBackward: () => cursorGroupBackward,
    cursorGroupForward: () => cursorGroupForward,
    cursorGroupLeft: () => cursorGroupLeft,
    cursorGroupRight: () => cursorGroupRight,
    cursorLineBoundaryBackward: () => cursorLineBoundaryBackward,
    cursorLineBoundaryForward: () => cursorLineBoundaryForward,
    cursorLineBoundaryLeft: () => cursorLineBoundaryLeft,
    cursorLineBoundaryRight: () => cursorLineBoundaryRight,
    cursorLineDown: () => cursorLineDown,
    cursorLineEnd: () => cursorLineEnd,
    cursorLineStart: () => cursorLineStart,
    cursorLineUp: () => cursorLineUp,
    cursorMatchingBracket: () => cursorMatchingBracket,
    cursorPageDown: () => cursorPageDown,
    cursorPageUp: () => cursorPageUp,
    cursorSubwordBackward: () => cursorSubwordBackward,
    cursorSubwordForward: () => cursorSubwordForward,
    cursorSyntaxLeft: () => cursorSyntaxLeft,
    cursorSyntaxRight: () => cursorSyntaxRight,
    defaultKeymap: () => defaultKeymap,
    deleteCharBackward: () => deleteCharBackward,
    deleteCharBackwardStrict: () => deleteCharBackwardStrict,
    deleteCharForward: () => deleteCharForward,
    deleteGroupBackward: () => deleteGroupBackward,
    deleteGroupForward: () => deleteGroupForward,
    deleteLine: () => deleteLine,
    deleteLineBoundaryBackward: () => deleteLineBoundaryBackward,
    deleteLineBoundaryForward: () => deleteLineBoundaryForward,
    deleteToLineEnd: () => deleteToLineEnd,
    deleteToLineStart: () => deleteToLineStart,
    deleteTrailingWhitespace: () => deleteTrailingWhitespace,
    emacsStyleKeymap: () => emacsStyleKeymap,
    history: () => history,
    historyField: () => historyField,
    historyKeymap: () => historyKeymap,
    indentLess: () => indentLess,
    indentMore: () => indentMore,
    indentSelection: () => indentSelection,
    indentWithTab: () => indentWithTab,
    insertBlankLine: () => insertBlankLine,
    insertNewline: () => insertNewline,
    insertNewlineAndIndent: () => insertNewlineAndIndent,
    insertNewlineKeepIndent: () => insertNewlineKeepIndent,
    insertTab: () => insertTab,
    invertedEffects: () => invertedEffects,
    isolateHistory: () => isolateHistory,
    lineComment: () => lineComment,
    lineUncomment: () => lineUncomment,
    moveLineDown: () => moveLineDown,
    moveLineUp: () => moveLineUp,
    redo: () => redo,
    redoDepth: () => redoDepth,
    redoSelection: () => redoSelection,
    selectAll: () => selectAll,
    selectCharBackward: () => selectCharBackward,
    selectCharForward: () => selectCharForward,
    selectCharLeft: () => selectCharLeft,
    selectCharRight: () => selectCharRight,
    selectDocEnd: () => selectDocEnd,
    selectDocStart: () => selectDocStart,
    selectGroupBackward: () => selectGroupBackward,
    selectGroupForward: () => selectGroupForward,
    selectGroupLeft: () => selectGroupLeft,
    selectGroupRight: () => selectGroupRight,
    selectLine: () => selectLine,
    selectLineBoundaryBackward: () => selectLineBoundaryBackward,
    selectLineBoundaryForward: () => selectLineBoundaryForward,
    selectLineBoundaryLeft: () => selectLineBoundaryLeft,
    selectLineBoundaryRight: () => selectLineBoundaryRight,
    selectLineDown: () => selectLineDown,
    selectLineEnd: () => selectLineEnd,
    selectLineStart: () => selectLineStart,
    selectLineUp: () => selectLineUp,
    selectMatchingBracket: () => selectMatchingBracket,
    selectPageDown: () => selectPageDown,
    selectPageUp: () => selectPageUp,
    selectParentSyntax: () => selectParentSyntax,
    selectSubwordBackward: () => selectSubwordBackward,
    selectSubwordForward: () => selectSubwordForward,
    selectSyntaxLeft: () => selectSyntaxLeft,
    selectSyntaxRight: () => selectSyntaxRight,
    simplifySelection: () => simplifySelection,
    splitLine: () => splitLine,
    standardKeymap: () => standardKeymap,
    toggleBlockComment: () => toggleBlockComment,
    toggleBlockCommentByLine: () => toggleBlockCommentByLine,
    toggleComment: () => toggleComment,
    toggleLineComment: () => toggleLineComment,
    transposeChars: () => transposeChars,
    undo: () => undo,
    undoDepth: () => undoDepth,
    undoSelection: () => undoSelection
  });
  var toggleComment = (target) => {
    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line.from);
    return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
  };
  function command(f3, option) {
    return ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let tr = f3(option, state);
      if (!tr)
        return false;
      dispatch(state.update(tr));
      return true;
    };
  }
  var toggleLineComment = /* @__PURE__ */ command(
    changeLineComment,
    0
    /* CommentOption.Toggle */
  );
  var lineComment = /* @__PURE__ */ command(
    changeLineComment,
    1
    /* CommentOption.Comment */
  );
  var lineUncomment = /* @__PURE__ */ command(
    changeLineComment,
    2
    /* CommentOption.Uncomment */
  );
  var toggleBlockComment = /* @__PURE__ */ command(
    changeBlockComment,
    0
    /* CommentOption.Toggle */
  );
  var blockComment = /* @__PURE__ */ command(
    changeBlockComment,
    1
    /* CommentOption.Comment */
  );
  var blockUncomment = /* @__PURE__ */ command(
    changeBlockComment,
    2
    /* CommentOption.Uncomment */
  );
  var toggleBlockCommentByLine = /* @__PURE__ */ command(
    (o2, s4) => changeBlockComment(o2, s4, selectedLineRanges(s4)),
    0
    /* CommentOption.Toggle */
  );
  function getConfig(state, pos) {
    let data = state.languageDataAt("commentTokens", pos);
    return data.length ? data[0] : {};
  }
  var SearchMargin = 50;
  function findBlockComment(state, { open, close: close2 }, from2, to) {
    let textBefore = state.sliceDoc(from2 - SearchMargin, from2);
    let textAfter = state.sliceDoc(to, to + SearchMargin);
    let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
    let beforeOff = textBefore.length - spaceBefore;
    if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close2.length) == close2) {
      return {
        open: { pos: from2 - spaceBefore, margin: spaceBefore && 1 },
        close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
      };
    }
    let startText, endText;
    if (to - from2 <= 2 * SearchMargin) {
      startText = endText = state.sliceDoc(from2, to);
    } else {
      startText = state.sliceDoc(from2, from2 + SearchMargin);
      endText = state.sliceDoc(to - SearchMargin, to);
    }
    let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
    let endOff = endText.length - endSpace - close2.length;
    if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close2.length) == close2) {
      return {
        open: {
          pos: from2 + startSpace + open.length,
          margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
        },
        close: {
          pos: to - endSpace - close2.length,
          margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
        }
      };
    }
    return null;
  }
  function selectedLineRanges(state) {
    let ranges = [];
    for (let r4 of state.selection.ranges) {
      let fromLine = state.doc.lineAt(r4.from);
      let toLine = r4.to <= fromLine.to ? fromLine : state.doc.lineAt(r4.to);
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last].to > fromLine.from)
        ranges[last].to = toLine.to;
      else
        ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
    }
    return ranges;
  }
  function changeBlockComment(option, state, ranges = state.selection.ranges) {
    let tokens = ranges.map((r4) => getConfig(state, r4.from).block);
    if (!tokens.every((c5) => c5))
      return null;
    let comments = ranges.map((r4, i3) => findBlockComment(state, tokens[i3], r4.from, r4.to));
    if (option != 2 && !comments.every((c5) => c5)) {
      return { changes: state.changes(ranges.map((range, i3) => {
        if (comments[i3])
          return [];
        return [{ from: range.from, insert: tokens[i3].open + " " }, { from: range.to, insert: " " + tokens[i3].close }];
      })) };
    } else if (option != 1 && comments.some((c5) => c5)) {
      let changes = [];
      for (let i3 = 0, comment2; i3 < comments.length; i3++)
        if (comment2 = comments[i3]) {
          let token = tokens[i3], { open, close: close2 } = comment2;
          changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close2.pos - close2.margin, to: close2.pos + token.close.length });
        }
      return { changes };
    }
    return null;
  }
  function changeLineComment(option, state, ranges = state.selection.ranges) {
    let lines = [];
    let prevLine = -1;
    for (let { from: from2, to } of ranges) {
      let startI = lines.length, minIndent = 1e9;
      let token = getConfig(state, from2).line;
      if (!token)
        continue;
      for (let pos = from2; pos <= to; ) {
        let line = state.doc.lineAt(pos);
        if (line.from > prevLine && (from2 == to || to > line.from)) {
          prevLine = line.from;
          let indent2 = /^\s*/.exec(line.text)[0].length;
          let empty4 = indent2 == line.length;
          let comment2 = line.text.slice(indent2, indent2 + token.length) == token ? indent2 : -1;
          if (indent2 < line.text.length && indent2 < minIndent)
            minIndent = indent2;
          lines.push({ line, comment: comment2, token, indent: indent2, empty: empty4, single: false });
        }
        pos = line.to + 1;
      }
      if (minIndent < 1e9) {
        for (let i3 = startI; i3 < lines.length; i3++)
          if (lines[i3].indent < lines[i3].line.text.length)
            lines[i3].indent = minIndent;
      }
      if (lines.length == startI + 1)
        lines[startI].single = true;
    }
    if (option != 2 && lines.some((l5) => l5.comment < 0 && (!l5.empty || l5.single))) {
      let changes = [];
      for (let { line, token, indent: indent2, empty: empty4, single } of lines)
        if (single || !empty4)
          changes.push({ from: line.from + indent2, insert: token + " " });
      let changeSet = state.changes(changes);
      return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
    } else if (option != 1 && lines.some((l5) => l5.comment >= 0)) {
      let changes = [];
      for (let { line, comment: comment2, token } of lines)
        if (comment2 >= 0) {
          let from2 = line.from + comment2, to = from2 + token.length;
          if (line.text[to - line.from] == " ")
            to++;
          changes.push({ from: from2, to });
        }
      return { changes };
    }
    return null;
  }
  var fromHistory = /* @__PURE__ */ Annotation.define();
  var isolateHistory = /* @__PURE__ */ Annotation.define();
  var invertedEffects = /* @__PURE__ */ Facet.define();
  var historyConfig = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        minDepth: 100,
        newGroupDelay: 500,
        joinToEvent: (_t2, isAdjacent2) => isAdjacent2
      }, {
        minDepth: Math.max,
        newGroupDelay: Math.min,
        joinToEvent: (a2, b4) => (tr, adj) => a2(tr, adj) || b4(tr, adj)
      });
    }
  });
  var historyField_ = /* @__PURE__ */ StateField.define({
    create() {
      return HistoryState.empty;
    },
    update(state, tr) {
      let config2 = tr.state.facet(historyConfig);
      let fromHist = tr.annotation(fromHistory);
      if (fromHist) {
        let item = HistEvent.fromTransaction(tr, fromHist.selection), from2 = fromHist.side;
        let other = from2 == 0 ? state.undone : state.done;
        if (item)
          other = updateBranch(other, other.length, config2.minDepth, item);
        else
          other = addSelection(other, tr.startState.selection);
        return new HistoryState(from2 == 0 ? fromHist.rest : other, from2 == 0 ? other : fromHist.rest);
      }
      let isolate = tr.annotation(isolateHistory);
      if (isolate == "full" || isolate == "before")
        state = state.isolate();
      if (tr.annotation(Transaction.addToHistory) === false)
        return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
      let event = HistEvent.fromTransaction(tr);
      let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
      if (event)
        state = state.addChanges(event, time, userEvent, config2, tr);
      else if (tr.selection)
        state = state.addSelection(tr.startState.selection, time, userEvent, config2.newGroupDelay);
      if (isolate == "full" || isolate == "after")
        state = state.isolate();
      return state;
    },
    toJSON(value) {
      return { done: value.done.map((e3) => e3.toJSON()), undone: value.undone.map((e3) => e3.toJSON()) };
    },
    fromJSON(json) {
      return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
    }
  });
  function history(config2 = {}) {
    return [
      historyField_,
      historyConfig.of(config2),
      EditorView.domEventHandlers({
        beforeinput(e3, view) {
          let command2 = e3.inputType == "historyUndo" ? undo : e3.inputType == "historyRedo" ? redo : null;
          if (!command2)
            return false;
          e3.preventDefault();
          return command2(view);
        }
      })
    ];
  }
  var historyField = historyField_;
  function cmd(side, selection) {
    return function({ state, dispatch }) {
      if (!selection && state.readOnly)
        return false;
      let historyState = state.field(historyField_, false);
      if (!historyState)
        return false;
      let tr = historyState.pop(side, state, selection);
      if (!tr)
        return false;
      dispatch(tr);
      return true;
    };
  }
  var undo = /* @__PURE__ */ cmd(0, false);
  var redo = /* @__PURE__ */ cmd(1, false);
  var undoSelection = /* @__PURE__ */ cmd(0, true);
  var redoSelection = /* @__PURE__ */ cmd(1, true);
  function depth(side) {
    return function(state) {
      let histState = state.field(historyField_, false);
      if (!histState)
        return 0;
      let branch = side == 0 ? histState.done : histState.undone;
      return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
    };
  }
  var undoDepth = /* @__PURE__ */ depth(
    0
    /* BranchName.Done */
  );
  var redoDepth = /* @__PURE__ */ depth(
    1
    /* BranchName.Undone */
  );
  var HistEvent = class _HistEvent {
    constructor(changes, effects, mapped, startSelection, selectionsAfter) {
      this.changes = changes;
      this.effects = effects;
      this.mapped = mapped;
      this.startSelection = startSelection;
      this.selectionsAfter = selectionsAfter;
    }
    setSelAfter(after) {
      return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
    }
    toJSON() {
      var _a2, _b, _c;
      return {
        changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
        selectionsAfter: this.selectionsAfter.map((s4) => s4.toJSON())
      };
    }
    static fromJSON(json) {
      return new _HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
    }
    // This does not check `addToHistory` and such, it assumes the
    // transaction needs to be converted to an item. Returns null when
    // there are no changes or effects in the transaction.
    static fromTransaction(tr, selection) {
      let effects = none3;
      for (let invert of tr.startState.facet(invertedEffects)) {
        let result = invert(tr);
        if (result.length)
          effects = effects.concat(result);
      }
      if (!effects.length && tr.changes.empty)
        return null;
      return new _HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection || tr.startState.selection, none3);
    }
    static selection(selections) {
      return new _HistEvent(void 0, none3, void 0, void 0, selections);
    }
  };
  function updateBranch(branch, to, maxLen, newEvent) {
    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
    let newBranch = branch.slice(start, to);
    newBranch.push(newEvent);
    return newBranch;
  }
  function isAdjacent(a2, b4) {
    let ranges = [], isAdjacent2 = false;
    a2.iterChangedRanges((f3, t4) => ranges.push(f3, t4));
    b4.iterChangedRanges((_f, _t2, f3, t4) => {
      for (let i3 = 0; i3 < ranges.length; ) {
        let from2 = ranges[i3++], to = ranges[i3++];
        if (t4 >= from2 && f3 <= to)
          isAdjacent2 = true;
      }
    });
    return isAdjacent2;
  }
  function eqSelectionShape(a2, b4) {
    return a2.ranges.length == b4.ranges.length && a2.ranges.filter((r4, i3) => r4.empty != b4.ranges[i3].empty).length === 0;
  }
  function conc(a2, b4) {
    return !a2.length ? b4 : !b4.length ? a2 : a2.concat(b4);
  }
  var none3 = [];
  var MaxSelectionsPerEvent = 200;
  function addSelection(branch, selection) {
    if (!branch.length) {
      return [HistEvent.selection([selection])];
    } else {
      let lastEvent = branch[branch.length - 1];
      let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
      if (sels.length && sels[sels.length - 1].eq(selection))
        return branch;
      sels.push(selection);
      return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
    }
  }
  function popSelection(branch) {
    let last = branch[branch.length - 1];
    let newBranch = branch.slice();
    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
    return newBranch;
  }
  function addMappingToBranch(branch, mapping) {
    if (!branch.length)
      return branch;
    let length = branch.length, selections = none3;
    while (length) {
      let event = mapEvent(branch[length - 1], mapping, selections);
      if (event.changes && !event.changes.empty || event.effects.length) {
        let result = branch.slice(0, length);
        result[length - 1] = event;
        return result;
      } else {
        mapping = event.mapped;
        length--;
        selections = event.selectionsAfter;
      }
    }
    return selections.length ? [HistEvent.selection(selections)] : none3;
  }
  function mapEvent(event, mapping, extraSelections) {
    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s4) => s4.map(mapping)) : none3, extraSelections);
    if (!event.changes)
      return HistEvent.selection(selections);
    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
  }
  var joinableUserEvent = /^(input\.type|delete)($|\.)/;
  var HistoryState = class _HistoryState {
    constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
      this.done = done;
      this.undone = undone;
      this.prevTime = prevTime;
      this.prevUserEvent = prevUserEvent;
    }
    isolate() {
      return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
    }
    addChanges(event, time, userEvent, config2, tr) {
      let done = this.done, lastEvent = done[done.length - 1];
      if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
      userEvent == "input.type.compose")) {
        done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none3));
      } else {
        done = updateBranch(done, done.length, config2.minDepth, event);
      }
      return new _HistoryState(done, none3, time, userEvent);
    }
    addSelection(selection, time, userEvent, newGroupDelay) {
      let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none3;
      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
        return this;
      return new _HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
    }
    addMapping(mapping) {
      return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
    }
    pop(side, state, onlySelection) {
      let branch = side == 0 ? this.done : this.undone;
      if (branch.length == 0)
        return null;
      let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
      if (onlySelection && event.selectionsAfter.length) {
        return state.update({
          selection: event.selectionsAfter[event.selectionsAfter.length - 1],
          annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
          userEvent: side == 0 ? "select.undo" : "select.redo",
          scrollIntoView: true
        });
      } else if (!event.changes) {
        return null;
      } else {
        let rest = branch.length == 1 ? none3 : branch.slice(0, branch.length - 1);
        if (event.mapped)
          rest = addMappingToBranch(rest, event.mapped);
        return state.update({
          changes: event.changes,
          selection: event.startSelection,
          effects: event.effects,
          annotations: fromHistory.of({ side, rest, selection }),
          filter: false,
          userEvent: side == 0 ? "undo" : "redo",
          scrollIntoView: true
        });
      }
    }
  };
  HistoryState.empty = /* @__PURE__ */ new HistoryState(none3, none3);
  var historyKeymap = [
    { key: "Mod-z", run: undo, preventDefault: true },
    { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
    { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
    { key: "Mod-u", run: undoSelection, preventDefault: true },
    { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
  ];
  function updateSel(sel, by) {
    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
  }
  function setSel(state, selection) {
    return state.update({ selection, scrollIntoView: true, userEvent: "select" });
  }
  function moveSel({ state, dispatch }, how) {
    let selection = updateSel(state.selection, how);
    if (selection.eq(state.selection, true))
      return false;
    dispatch(setSel(state, selection));
    return true;
  }
  function rangeEnd(range, forward) {
    return EditorSelection.cursor(forward ? range.to : range.from);
  }
  function cursorByChar(view, forward) {
    return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
  }
  function ltrAtCursor(view) {
    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
  }
  var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
  var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
  var cursorCharForward = (view) => cursorByChar(view, true);
  var cursorCharBackward = (view) => cursorByChar(view, false);
  function cursorByGroup(view, forward) {
    return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
  }
  var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
  var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
  var cursorGroupForward = (view) => cursorByGroup(view, true);
  var cursorGroupBackward = (view) => cursorByGroup(view, false);
  var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
  function moveBySubword(view, range, forward) {
    let categorize = view.state.charCategorizer(range.from);
    let cat = CharCategory.Space, pos = range.from, steps = 0;
    let done = false, sawUpper = false, sawLower = false;
    let step = (next) => {
      if (done)
        return false;
      pos += forward ? next.length : -next.length;
      let nextCat = categorize(next), ahead;
      if (nextCat == CharCategory.Word && next.charCodeAt(0) < 128 && /[\W_]/.test(next))
        nextCat = -1;
      if (cat == CharCategory.Space)
        cat = nextCat;
      if (cat != nextCat)
        return false;
      if (cat == CharCategory.Word) {
        if (next.toLowerCase() == next) {
          if (!forward && sawUpper)
            return false;
          sawLower = true;
        } else if (sawLower) {
          if (forward)
            return false;
          done = true;
        } else {
          if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word && ahead.toLowerCase() == ahead)
            return false;
          sawUpper = true;
        }
      }
      steps++;
      return true;
    };
    let end = view.moveByChar(range, forward, (start) => {
      step(start);
      return step;
    });
    if (segmenter && cat == CharCategory.Word && end.from == range.from + steps * (forward ? 1 : -1)) {
      let from2 = Math.min(range.head, end.head), to = Math.max(range.head, end.head);
      let skipped = view.state.sliceDoc(from2, to);
      if (skipped.length > 1 && /[\u4E00-\uffff]/.test(skipped)) {
        let segments = Array.from(segmenter.segment(skipped));
        if (segments.length > 1) {
          if (forward)
            return EditorSelection.cursor(range.head + segments[1].index, -1);
          return EditorSelection.cursor(end.head + segments[segments.length - 1].index, 1);
        }
      }
    }
    return end;
  }
  function cursorBySubword(view, forward) {
    return moveSel(view, (range) => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));
  }
  var cursorSubwordForward = (view) => cursorBySubword(view, true);
  var cursorSubwordBackward = (view) => cursorBySubword(view, false);
  function interestingNode(state, node2, bracketProp) {
    if (node2.type.prop(bracketProp))
      return true;
    let len = node2.to - node2.from;
    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node2.from, node2.to))) || node2.firstChild;
  }
  function moveBySyntax(state, start, forward) {
    let pos = syntaxTree(state).resolveInner(start.head);
    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
    for (let at4 = start.head; ; ) {
      let next = forward ? pos.childAfter(at4) : pos.childBefore(at4);
      if (!next)
        break;
      if (interestingNode(state, next, bracketProp))
        pos = next;
      else
        at4 = forward ? next.to : next.from;
    }
    let bracket2 = pos.type.prop(bracketProp), match, newPos;
    if (bracket2 && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
      newPos = forward ? match.end.to : match.end.from;
    else
      newPos = forward ? pos.to : pos.from;
    return EditorSelection.cursor(newPos, forward ? -1 : 1);
  }
  var cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  var cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function cursorByLine(view, forward) {
    return moveSel(view, (range) => {
      if (!range.empty)
        return rangeEnd(range, forward);
      let moved = view.moveVertically(range, forward);
      return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
    });
  }
  var cursorLineUp = (view) => cursorByLine(view, false);
  var cursorLineDown = (view) => cursorByLine(view, true);
  function pageInfo(view) {
    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
    let marginTop = 0, marginBottom = 0, height;
    if (selfScroll) {
      for (let source of view.state.facet(EditorView.scrollMargins)) {
        let margins = source(view);
        if (margins === null || margins === void 0 ? void 0 : margins.top)
          marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
        if (margins === null || margins === void 0 ? void 0 : margins.bottom)
          marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
      }
      height = view.scrollDOM.clientHeight - marginTop - marginBottom;
    } else {
      height = (view.dom.ownerDocument.defaultView || window).innerHeight;
    }
    return {
      marginTop,
      marginBottom,
      selfScroll,
      height: Math.max(view.defaultLineHeight, height - 5)
    };
  }
  function cursorByPage(view, forward) {
    let page = pageInfo(view);
    let { state } = view, selection = updateSel(state.selection, (range) => {
      return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
    });
    if (selection.eq(state.selection))
      return false;
    let effect;
    if (page.selfScroll) {
      let startPos = view.coordsAtPos(state.selection.main.head);
      let scrollRect = view.scrollDOM.getBoundingClientRect();
      let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
      if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
        effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
    }
    view.dispatch(setSel(state, selection), { effects: effect });
    return true;
  }
  var cursorPageUp = (view) => cursorByPage(view, false);
  var cursorPageDown = (view) => cursorByPage(view, true);
  function moveByLineBoundary(view, start, forward) {
    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
      moved = view.moveToLineBoundary(start, forward, false);
    if (!forward && moved.head == line.from && line.length) {
      let space2 = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
      if (space2 && start.head != line.from + space2)
        moved = EditorSelection.cursor(line.from + space2);
    }
    return moved;
  }
  var cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
  var cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
  var cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  var cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
  var cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
  var cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
  function toMatchingBracket(state, dispatch, extend3) {
    let found2 = false, selection = updateSel(state.selection, (range) => {
      let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
      if (!matching || !matching.end)
        return range;
      found2 = true;
      let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
      return extend3 ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
    });
    if (!found2)
      return false;
    dispatch(setSel(state, selection));
    return true;
  }
  var cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
  var selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);
  function extendSel(view, how) {
    let selection = updateSel(view.state.selection, (range) => {
      let head = how(range);
      return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
    });
    if (selection.eq(view.state.selection))
      return false;
    view.dispatch(setSel(view.state, selection));
    return true;
  }
  function selectByChar(view, forward) {
    return extendSel(view, (range) => view.moveByChar(range, forward));
  }
  var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
  var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
  var selectCharForward = (view) => selectByChar(view, true);
  var selectCharBackward = (view) => selectByChar(view, false);
  function selectByGroup(view, forward) {
    return extendSel(view, (range) => view.moveByGroup(range, forward));
  }
  var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
  var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
  var selectGroupForward = (view) => selectByGroup(view, true);
  var selectGroupBackward = (view) => selectByGroup(view, false);
  function selectBySubword(view, forward) {
    return extendSel(view, (range) => moveBySubword(view, range, forward));
  }
  var selectSubwordForward = (view) => selectBySubword(view, true);
  var selectSubwordBackward = (view) => selectBySubword(view, false);
  var selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
  var selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
  function selectByLine(view, forward) {
    return extendSel(view, (range) => view.moveVertically(range, forward));
  }
  var selectLineUp = (view) => selectByLine(view, false);
  var selectLineDown = (view) => selectByLine(view, true);
  function selectByPage(view, forward) {
    return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
  }
  var selectPageUp = (view) => selectByPage(view, false);
  var selectPageDown = (view) => selectByPage(view, true);
  var selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
  var selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
  var selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
  var selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
  var selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
  var selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
  var cursorDocStart = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: 0 }));
    return true;
  };
  var cursorDocEnd = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.doc.length }));
    return true;
  };
  var selectDocStart = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
    return true;
  };
  var selectDocEnd = ({ state, dispatch }) => {
    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
    return true;
  };
  var selectAll = ({ state, dispatch }) => {
    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
    return true;
  };
  var selectLine = ({ state, dispatch }) => {
    let ranges = selectedLineBlocks(state).map(({ from: from2, to }) => EditorSelection.range(from2, Math.min(to + 1, state.doc.length)));
    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
    return true;
  };
  var selectParentSyntax = ({ state, dispatch }) => {
    let selection = updateSel(state.selection, (range) => {
      var _a2;
      let stack = syntaxTree(state).resolveStack(range.from, 1);
      for (let cur2 = stack; cur2; cur2 = cur2.next) {
        let { node: node2 } = cur2;
        if ((node2.from < range.from && node2.to >= range.to || node2.to > range.to && node2.from <= range.from) && ((_a2 = node2.parent) === null || _a2 === void 0 ? void 0 : _a2.parent))
          return EditorSelection.range(node2.to, node2.from);
      }
      return range;
    });
    dispatch(setSel(state, selection));
    return true;
  };
  var simplifySelection = ({ state, dispatch }) => {
    let cur2 = state.selection, selection = null;
    if (cur2.ranges.length > 1)
      selection = EditorSelection.create([cur2.main]);
    else if (!cur2.main.empty)
      selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
    if (!selection)
      return false;
    dispatch(setSel(state, selection));
    return true;
  };
  function deleteBy(target, by) {
    if (target.state.readOnly)
      return false;
    let event = "delete.selection", { state } = target;
    let changes = state.changeByRange((range) => {
      let { from: from2, to } = range;
      if (from2 == to) {
        let towards = by(range);
        if (towards < from2) {
          event = "delete.backward";
          towards = skipAtomic(target, towards, false);
        } else if (towards > from2) {
          event = "delete.forward";
          towards = skipAtomic(target, towards, true);
        }
        from2 = Math.min(from2, towards);
        to = Math.max(to, towards);
      } else {
        from2 = skipAtomic(target, from2, false);
        to = skipAtomic(target, to, true);
      }
      return from2 == to ? { range } : { changes: { from: from2, to }, range: EditorSelection.cursor(from2, from2 < range.head ? -1 : 1) };
    });
    if (changes.changes.empty)
      return false;
    target.dispatch(state.update(changes, {
      scrollIntoView: true,
      userEvent: event,
      effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
    }));
    return true;
  }
  function skipAtomic(target, pos, forward) {
    if (target instanceof EditorView)
      for (let ranges of target.state.facet(EditorView.atomicRanges).map((f3) => f3(target)))
        ranges.between(pos, pos, (from2, to) => {
          if (from2 < pos && to > pos)
            pos = forward ? to : from2;
        });
    return pos;
  }
  var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
    let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
    if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "	")
        return pos - 1;
      let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
      for (let i3 = 0; i3 < drop && before[before.length - 1 - i3] == " "; i3++)
        pos--;
      targetPos = pos;
    } else {
      targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
      if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
        targetPos += forward ? 1 : -1;
      else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
        targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
    }
    return targetPos;
  });
  var deleteCharBackward = (view) => deleteByChar(view, false, true);
  var deleteCharBackwardStrict = (view) => deleteByChar(view, false, false);
  var deleteCharForward = (view) => deleteByChar(view, true, false);
  var deleteByGroup = (target, forward) => deleteBy(target, (range) => {
    let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
    let categorize = state.charCategorizer(pos);
    for (let cat = null; ; ) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
          pos += forward ? 1 : -1;
        break;
      }
      let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
      let nextChar2 = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      let nextCat = categorize(nextChar2);
      if (cat != null && nextCat != cat)
        break;
      if (nextChar2 != " " || pos != range.head)
        cat = nextCat;
      pos = next;
    }
    return pos;
  });
  var deleteGroupBackward = (target) => deleteByGroup(target, false);
  var deleteGroupForward = (target) => deleteByGroup(target, true);
  var deleteToLineEnd = (view) => deleteBy(view, (range) => {
    let lineEnd = view.lineBlockAt(range.head).to;
    return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
  });
  var deleteToLineStart = (view) => deleteBy(view, (range) => {
    let lineStart = view.lineBlockAt(range.head).from;
    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
  });
  var deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
    let lineStart = view.moveToLineBoundary(range, false).head;
    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
  });
  var deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
    let lineStart = view.moveToLineBoundary(range, true).head;
    return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
  });
  var deleteTrailingWhitespace = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = [];
    for (let pos = 0, prev = "", iter = state.doc.iter(); ; ) {
      iter.next();
      if (iter.lineBreak || iter.done) {
        let trailing = prev.search(/\s+$/);
        if (trailing > -1)
          changes.push({ from: pos - (prev.length - trailing), to: pos });
        if (iter.done)
          break;
        prev = "";
      } else {
        prev = iter.value;
      }
      pos += iter.value.length;
    }
    if (!changes.length)
      return false;
    dispatch(state.update({ changes, userEvent: "delete" }));
    return true;
  };
  var splitLine = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      return {
        changes: { from: range.from, to: range.to, insert: Text2.of(["", ""]) },
        range: EditorSelection.cursor(range.from)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
  var transposeChars = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      if (!range.empty || range.from == 0 || range.from == state.doc.length)
        return { range };
      let pos = range.from, line = state.doc.lineAt(pos);
      let from2 = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
      let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
      return {
        changes: { from: from2, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from2, pos)) },
        range: EditorSelection.cursor(to)
      };
    });
    if (changes.changes.empty)
      return false;
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
    return true;
  };
  function selectedLineBlocks(state) {
    let blocks = [], upto = -1;
    for (let range of state.selection.ranges) {
      let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from)
        endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        let prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
      }
      upto = endLine.number + 1;
    }
    return blocks;
  }
  function moveLine(state, dispatch, forward) {
    if (state.readOnly)
      return false;
    let changes = [], ranges = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward ? block.to == state.doc.length : block.from == 0)
        continue;
      let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      let size = nextLine.length + 1;
      if (forward) {
        changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
        for (let r4 of block.ranges)
          ranges.push(EditorSelection.range(Math.min(state.doc.length, r4.anchor + size), Math.min(state.doc.length, r4.head + size)));
      } else {
        changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
        for (let r4 of block.ranges)
          ranges.push(EditorSelection.range(r4.anchor - size, r4.head - size));
      }
    }
    if (!changes.length)
      return false;
    dispatch(state.update({
      changes,
      scrollIntoView: true,
      selection: EditorSelection.create(ranges, state.selection.mainIndex),
      userEvent: "move.line"
    }));
    return true;
  }
  var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
  var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
  function copyLine(state, dispatch, forward) {
    if (state.readOnly)
      return false;
    let changes = [];
    for (let block of selectedLineBlocks(state)) {
      if (forward)
        changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
      else
        changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
    }
    dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
    return true;
  }
  var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
  var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
  var deleteLine = (view) => {
    if (view.state.readOnly)
      return false;
    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from: from2, to }) => {
      if (from2 > 0)
        from2--;
      else if (to < state.doc.length)
        to++;
      return { from: from2, to };
    }));
    let selection = updateSel(state.selection, (range) => {
      let dist2 = void 0;
      if (view.lineWrapping) {
        let block = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
        if (pos)
          dist2 = block.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
      }
      return view.moveVertically(range, true, dist2);
    }).map(changes);
    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
    return true;
  };
  var insertNewline = ({ state, dispatch }) => {
    dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
  var insertNewlineKeepIndent = ({ state, dispatch }) => {
    dispatch(state.update(state.changeByRange((range) => {
      let indent2 = /^\s*/.exec(state.doc.lineAt(range.from).text)[0];
      return {
        changes: { from: range.from, to: range.to, insert: state.lineBreak + indent2 },
        range: EditorSelection.cursor(range.from + indent2.length + 1)
      };
    }), { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
  function isBetweenBrackets(state, pos) {
    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
      return { from: pos, to: pos };
    let context = syntaxTree(state).resolveInner(pos);
    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
    if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
      return { from: before.to, to: after.from };
    return null;
  }
  var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
  var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
  function newlineAndIndent(atEof) {
    return ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let changes = state.changeByRange((range) => {
        let { from: from2, to } = range, line = state.doc.lineAt(from2);
        let explode = !atEof && from2 == to && isBetweenBrackets(state, from2);
        if (atEof)
          from2 = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
        let cx = new IndentContext(state, { simulateBreak: from2, simulateDoubleBreak: !!explode });
        let indent2 = getIndentation(cx, from2);
        if (indent2 == null)
          indent2 = countColumn(/^\s*/.exec(state.doc.lineAt(from2).text)[0], state.tabSize);
        while (to < line.to && /\s/.test(line.text[to - line.from]))
          to++;
        if (explode)
          ({ from: from2, to } = explode);
        else if (from2 > line.from && from2 < line.from + 100 && !/\S/.test(line.text.slice(0, from2)))
          from2 = line.from;
        let insert2 = ["", indentString(state, indent2)];
        if (explode)
          insert2.push(indentString(state, cx.lineIndent(line.from, -1)));
        return {
          changes: { from: from2, to, insert: Text2.of(insert2) },
          range: EditorSelection.cursor(from2 + 1 + insert2[1].length)
        };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
    };
  }
  function changeBySelectedLine(state, f3) {
    let atLine = -1;
    return state.changeByRange((range) => {
      let changes = [];
      for (let pos = range.from; pos <= range.to; ) {
        let line = state.doc.lineAt(pos);
        if (line.number > atLine && (range.empty || range.to > line.from)) {
          f3(line, changes, range);
          atLine = line.number;
        }
        pos = line.to + 1;
      }
      let changeSet = state.changes(changes);
      return {
        changes,
        range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
      };
    });
  }
  var indentSelection = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let updated = /* @__PURE__ */ Object.create(null);
    let context = new IndentContext(state, { overrideIndentation: (start) => {
      let found2 = updated[start];
      return found2 == null ? -1 : found2;
    } });
    let changes = changeBySelectedLine(state, (line, changes2, range) => {
      let indent2 = getIndentation(context, line.from);
      if (indent2 == null)
        return;
      if (!/\S/.test(line.text))
        indent2 = 0;
      let cur2 = /^\s*/.exec(line.text)[0];
      let norm = indentString(state, indent2);
      if (cur2 != norm || range.from < line.from + cur2.length) {
        updated[line.from] = indent2;
        changes2.push({ from: line.from, to: line.from + cur2.length, insert: norm });
      }
    });
    if (!changes.changes.empty)
      dispatch(state.update(changes, { userEvent: "indent" }));
    return true;
  };
  var indentMore = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      changes.push({ from: line.from, insert: state.facet(indentUnit) });
    }), { userEvent: "input.indent" }));
    return true;
  };
  var indentLess = ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
      let space2 = /^\s*/.exec(line.text)[0];
      if (!space2)
        return;
      let col = countColumn(space2, state.tabSize), keep = 0;
      let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
      while (keep < space2.length && keep < insert2.length && space2.charCodeAt(keep) == insert2.charCodeAt(keep))
        keep++;
      changes.push({ from: line.from + keep, to: line.from + space2.length, insert: insert2.slice(keep) });
    }), { userEvent: "delete.dedent" }));
    return true;
  };
  var insertTab = ({ state, dispatch }) => {
    if (state.selection.ranges.some((r4) => !r4.empty))
      return indentMore({ state, dispatch });
    dispatch(state.update(state.replaceSelection("	"), { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
  var emacsStyleKeymap = [
    { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
    { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
    { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
    { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
    { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
    { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
    { key: "Ctrl-d", run: deleteCharForward },
    { key: "Ctrl-h", run: deleteCharBackward },
    { key: "Ctrl-k", run: deleteToLineEnd },
    { key: "Ctrl-Alt-h", run: deleteGroupBackward },
    { key: "Ctrl-o", run: splitLine },
    { key: "Ctrl-t", run: transposeChars },
    { key: "Ctrl-v", run: cursorPageDown }
  ];
  var standardKeymap = /* @__PURE__ */ [
    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
    { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
    { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
    { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
    { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
    { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
    { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
    { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
    { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
    { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
    { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
    { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
    { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
    { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
    { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
    { key: "Enter", run: insertNewlineAndIndent },
    { key: "Mod-a", run: selectAll },
    { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
    { key: "Delete", run: deleteCharForward },
    { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
    { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
    { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
    { mac: "Mod-Delete", run: deleteLineBoundaryForward }
  ].concat(/* @__PURE__ */ emacsStyleKeymap.map((b4) => ({ mac: b4.key, run: b4.run, shift: b4.shift })));
  var defaultKeymap = /* @__PURE__ */ [
    { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
    { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
    { key: "Alt-ArrowUp", run: moveLineUp },
    { key: "Shift-Alt-ArrowUp", run: copyLineUp },
    { key: "Alt-ArrowDown", run: moveLineDown },
    { key: "Shift-Alt-ArrowDown", run: copyLineDown },
    { key: "Escape", run: simplifySelection },
    { key: "Mod-Enter", run: insertBlankLine },
    { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
    { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
    { key: "Mod-[", run: indentLess },
    { key: "Mod-]", run: indentMore },
    { key: "Mod-Alt-\\", run: indentSelection },
    { key: "Shift-Mod-k", run: deleteLine },
    { key: "Shift-Mod-\\", run: cursorMatchingBracket },
    { key: "Mod-/", run: toggleComment },
    { key: "Alt-A", run: toggleBlockComment }
  ].concat(standardKeymap);
  var indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

  // node_modules/@codemirror/lang-javascript/dist/index.js
  var dist_exports6 = {};
  __export(dist_exports6, {
    autoCloseTags: () => autoCloseTags,
    completionPath: () => completionPath,
    esLint: () => esLint,
    javascript: () => javascript,
    javascriptLanguage: () => javascriptLanguage,
    jsxLanguage: () => jsxLanguage,
    localCompletionSource: () => localCompletionSource,
    scopeCompletionSource: () => scopeCompletionSource,
    snippets: () => snippets,
    tsxLanguage: () => tsxLanguage,
    typescriptLanguage: () => typescriptLanguage,
    typescriptSnippets: () => typescriptSnippets
  });

  // node_modules/@lezer/lr/dist/index.js
  var Stack = class _Stack {
    /**
    @internal
    */
    constructor(p6, stack, state, reducePos, pos, score2, buffer, bufferBase, curContext, lookAhead = 0, parent) {
      this.p = p6;
      this.stack = stack;
      this.state = state;
      this.reducePos = reducePos;
      this.pos = pos;
      this.score = score2;
      this.buffer = buffer;
      this.bufferBase = bufferBase;
      this.curContext = curContext;
      this.lookAhead = lookAhead;
      this.parent = parent;
    }
    /**
    @internal
    */
    toString() {
      return `[${this.stack.filter((_3, i3) => i3 % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
    }
    // Start an empty stack
    /**
    @internal
    */
    static start(p6, state, pos = 0) {
      let cx = p6.parser.context;
      return new _Stack(p6, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
    }
    /**
    The stack's current [context](#lr.ContextTracker) value, if
    any. Its type will depend on the context tracker's type
    parameter, or it will be `null` if there is no context
    tracker.
    */
    get context() {
      return this.curContext ? this.curContext.context : null;
    }
    // Push a state onto the stack, tracking its start position as well
    // as the buffer base at that point.
    /**
    @internal
    */
    pushState(state, start) {
      this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
      this.state = state;
    }
    // Apply a reduce action
    /**
    @internal
    */
    reduce(action) {
      var _a2;
      let depth2 = action >> 19, type = action & 65535;
      let { parser: parser2 } = this.p;
      let dPrec = parser2.dynamicPrecedence(type);
      if (dPrec)
        this.score += dPrec;
      if (depth2 == 0) {
        this.pushState(parser2.getGoto(this.state, type, true), this.reducePos);
        if (type < parser2.minRepeatTerm)
          this.storeNode(type, this.reducePos, this.reducePos, 4, true);
        this.reduceContext(type, this.reducePos);
        return;
      }
      let base2 = this.stack.length - (depth2 - 1) * 3 - (action & 262144 ? 6 : 0);
      let start = base2 ? this.stack[base2 - 2] : this.p.ranges[0].from, size = this.reducePos - start;
      if (size >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
        if (start == this.p.lastBigReductionStart) {
          this.p.bigReductionCount++;
          this.p.lastBigReductionSize = size;
        } else if (this.p.lastBigReductionSize < size) {
          this.p.bigReductionCount = 1;
          this.p.lastBigReductionStart = start;
          this.p.lastBigReductionSize = size;
        }
      }
      let bufferBase = base2 ? this.stack[base2 - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
      if (type < parser2.minRepeatTerm || action & 131072) {
        let pos = parser2.stateFlag(
          this.state,
          1
          /* StateFlag.Skipped */
        ) ? this.pos : this.reducePos;
        this.storeNode(type, start, pos, count + 4, true);
      }
      if (action & 262144) {
        this.state = this.stack[base2];
      } else {
        let baseStateID = this.stack[base2 - 3];
        this.state = parser2.getGoto(baseStateID, type, true);
      }
      while (this.stack.length > base2)
        this.stack.pop();
      this.reduceContext(type, start);
    }
    // Shift a value into the buffer
    /**
    @internal
    */
    storeNode(term, start, end, size = 4, isReduce = false) {
      if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
        let cur2 = this, top2 = this.buffer.length;
        if (top2 == 0 && cur2.parent) {
          top2 = cur2.bufferBase - cur2.parent.bufferBase;
          cur2 = cur2.parent;
        }
        if (top2 > 0 && cur2.buffer[top2 - 4] == 0 && cur2.buffer[top2 - 1] > -1) {
          if (start == end)
            return;
          if (cur2.buffer[top2 - 2] >= start) {
            cur2.buffer[top2 - 2] = end;
            return;
          }
        }
      }
      if (!isReduce || this.pos == end) {
        this.buffer.push(term, start, end, size);
      } else {
        let index2 = this.buffer.length;
        if (index2 > 0 && this.buffer[index2 - 4] != 0)
          while (index2 > 0 && this.buffer[index2 - 2] > end) {
            this.buffer[index2] = this.buffer[index2 - 4];
            this.buffer[index2 + 1] = this.buffer[index2 - 3];
            this.buffer[index2 + 2] = this.buffer[index2 - 2];
            this.buffer[index2 + 3] = this.buffer[index2 - 1];
            index2 -= 4;
            if (size > 4)
              size -= 4;
          }
        this.buffer[index2] = term;
        this.buffer[index2 + 1] = start;
        this.buffer[index2 + 2] = end;
        this.buffer[index2 + 3] = size;
      }
    }
    // Apply a shift action
    /**
    @internal
    */
    shift(action, type, start, end) {
      if (action & 131072) {
        this.pushState(action & 65535, this.pos);
      } else if ((action & 262144) == 0) {
        let nextState = action, { parser: parser2 } = this.p;
        if (end > this.pos || type <= parser2.maxNode) {
          this.pos = end;
          if (!parser2.stateFlag(
            nextState,
            1
            /* StateFlag.Skipped */
          ))
            this.reducePos = end;
        }
        this.pushState(nextState, start);
        this.shiftContext(type, start);
        if (type <= parser2.maxNode)
          this.buffer.push(type, start, end, 4);
      } else {
        this.pos = end;
        this.shiftContext(type, start);
        if (type <= this.p.parser.maxNode)
          this.buffer.push(type, start, end, 4);
      }
    }
    // Apply an action
    /**
    @internal
    */
    apply(action, next, nextStart, nextEnd) {
      if (action & 65536)
        this.reduce(action);
      else
        this.shift(action, next, nextStart, nextEnd);
    }
    // Add a prebuilt (reused) node into the buffer.
    /**
    @internal
    */
    useNode(value, next) {
      let index2 = this.p.reused.length - 1;
      if (index2 < 0 || this.p.reused[index2] != value) {
        this.p.reused.push(value);
        index2++;
      }
      let start = this.pos;
      this.reducePos = this.pos = start + value.length;
      this.pushState(next, start);
      this.buffer.push(
        index2,
        start,
        this.reducePos,
        -1
        /* size == -1 means this is a reused value */
      );
      if (this.curContext)
        this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
    }
    // Split the stack. Due to the buffer sharing and the fact
    // that `this.stack` tends to stay quite shallow, this isn't very
    // expensive.
    /**
    @internal
    */
    split() {
      let parent = this;
      let off = parent.buffer.length;
      while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
        off -= 4;
      let buffer = parent.buffer.slice(off), base2 = parent.bufferBase + off;
      while (parent && base2 == parent.bufferBase)
        parent = parent.parent;
      return new _Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base2, this.curContext, this.lookAhead, parent);
    }
    // Try to recover from an error by 'deleting' (ignoring) one token.
    /**
    @internal
    */
    recoverByDelete(next, nextEnd) {
      let isNode = next <= this.p.parser.maxNode;
      if (isNode)
        this.storeNode(next, this.pos, nextEnd, 4);
      this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
      this.pos = this.reducePos = nextEnd;
      this.score -= 190;
    }
    /**
    Check if the given term would be able to be shifted (optionally
    after some reductions) on this stack. This can be useful for
    external tokenizers that want to make sure they only provide a
    given token when it applies.
    */
    canShift(term) {
      for (let sim = new SimulatedStack(this); ; ) {
        let action = this.p.parser.stateSlot(
          sim.state,
          4
          /* ParseState.DefaultReduce */
        ) || this.p.parser.hasAction(sim.state, term);
        if (action == 0)
          return false;
        if ((action & 65536) == 0)
          return true;
        sim.reduce(action);
      }
    }
    // Apply up to Recover.MaxNext recovery actions that conceptually
    // inserts some missing token or rule.
    /**
    @internal
    */
    recoverByInsert(next) {
      if (this.stack.length >= 300)
        return [];
      let nextStates = this.p.parser.nextStates(this.state);
      if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
        let best = [];
        for (let i3 = 0, s4; i3 < nextStates.length; i3 += 2) {
          if ((s4 = nextStates[i3 + 1]) != this.state && this.p.parser.hasAction(s4, next))
            best.push(nextStates[i3], s4);
        }
        if (this.stack.length < 120)
          for (let i3 = 0; best.length < 4 << 1 && i3 < nextStates.length; i3 += 2) {
            let s4 = nextStates[i3 + 1];
            if (!best.some((v4, i4) => i4 & 1 && v4 == s4))
              best.push(nextStates[i3], s4);
          }
        nextStates = best;
      }
      let result = [];
      for (let i3 = 0; i3 < nextStates.length && result.length < 4; i3 += 2) {
        let s4 = nextStates[i3 + 1];
        if (s4 == this.state)
          continue;
        let stack = this.split();
        stack.pushState(s4, this.pos);
        stack.storeNode(0, stack.pos, stack.pos, 4, true);
        stack.shiftContext(nextStates[i3], this.pos);
        stack.reducePos = this.pos;
        stack.score -= 200;
        result.push(stack);
      }
      return result;
    }
    // Force a reduce, if possible. Return false if that can't
    // be done.
    /**
    @internal
    */
    forceReduce() {
      let { parser: parser2 } = this.p;
      let reduce = parser2.stateSlot(
        this.state,
        5
        /* ParseState.ForcedReduce */
      );
      if ((reduce & 65536) == 0)
        return false;
      if (!parser2.validAction(this.state, reduce)) {
        let depth2 = reduce >> 19, term = reduce & 65535;
        let target = this.stack.length - depth2 * 3;
        if (target < 0 || parser2.getGoto(this.stack[target], term, false) < 0) {
          let backup = this.findForcedReduction();
          if (backup == null)
            return false;
          reduce = backup;
        }
        this.storeNode(0, this.pos, this.pos, 4, true);
        this.score -= 100;
      }
      this.reducePos = this.pos;
      this.reduce(reduce);
      return true;
    }
    /**
    Try to scan through the automaton to find some kind of reduction
    that can be applied. Used when the regular ForcedReduce field
    isn't a valid action. @internal
    */
    findForcedReduction() {
      let { parser: parser2 } = this.p, seen = [];
      let explore = (state, depth2) => {
        if (seen.includes(state))
          return;
        seen.push(state);
        return parser2.allActions(state, (action) => {
          if (action & (262144 | 131072))
            ;
          else if (action & 65536) {
            let rDepth = (action >> 19) - depth2;
            if (rDepth > 1) {
              let term = action & 65535, target = this.stack.length - rDepth * 3;
              if (target >= 0 && parser2.getGoto(this.stack[target], term, false) >= 0)
                return rDepth << 19 | 65536 | term;
            }
          } else {
            let found2 = explore(action, depth2 + 1);
            if (found2 != null)
              return found2;
          }
        });
      };
      return explore(this.state, 0);
    }
    /**
    @internal
    */
    forceAll() {
      while (!this.p.parser.stateFlag(
        this.state,
        2
        /* StateFlag.Accepting */
      )) {
        if (!this.forceReduce()) {
          this.storeNode(0, this.pos, this.pos, 4, true);
          break;
        }
      }
      return this;
    }
    /**
    Check whether this state has no further actions (assumed to be a direct descendant of the
    top state, since any other states must be able to continue
    somehow). @internal
    */
    get deadEnd() {
      if (this.stack.length != 3)
        return false;
      let { parser: parser2 } = this.p;
      return parser2.data[parser2.stateSlot(
        this.state,
        1
        /* ParseState.Actions */
      )] == 65535 && !parser2.stateSlot(
        this.state,
        4
        /* ParseState.DefaultReduce */
      );
    }
    /**
    Restart the stack (put it back in its start state). Only safe
    when this.stack.length == 3 (state is directly below the top
    state). @internal
    */
    restart() {
      this.storeNode(0, this.pos, this.pos, 4, true);
      this.state = this.stack[0];
      this.stack.length = 0;
    }
    /**
    @internal
    */
    sameState(other) {
      if (this.state != other.state || this.stack.length != other.stack.length)
        return false;
      for (let i3 = 0; i3 < this.stack.length; i3 += 3)
        if (this.stack[i3] != other.stack[i3])
          return false;
      return true;
    }
    /**
    Get the parser used by this stack.
    */
    get parser() {
      return this.p.parser;
    }
    /**
    Test whether a given dialect (by numeric ID, as exported from
    the terms file) is enabled.
    */
    dialectEnabled(dialectID) {
      return this.p.parser.dialect.flags[dialectID];
    }
    shiftContext(term, start) {
      if (this.curContext)
        this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    reduceContext(term, start) {
      if (this.curContext)
        this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
    }
    /**
    @internal
    */
    emitContext() {
      let last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -3)
        this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
    }
    /**
    @internal
    */
    emitLookAhead() {
      let last = this.buffer.length - 1;
      if (last < 0 || this.buffer[last] != -4)
        this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
    }
    updateContext(context) {
      if (context != this.curContext.context) {
        let newCx = new StackContext(this.curContext.tracker, context);
        if (newCx.hash != this.curContext.hash)
          this.emitContext();
        this.curContext = newCx;
      }
    }
    /**
    @internal
    */
    setLookAhead(lookAhead) {
      if (lookAhead > this.lookAhead) {
        this.emitLookAhead();
        this.lookAhead = lookAhead;
      }
    }
    /**
    @internal
    */
    close() {
      if (this.curContext && this.curContext.tracker.strict)
        this.emitContext();
      if (this.lookAhead > 0)
        this.emitLookAhead();
    }
  };
  var StackContext = class {
    constructor(tracker, context) {
      this.tracker = tracker;
      this.context = context;
      this.hash = tracker.strict ? tracker.hash(context) : 0;
    }
  };
  var SimulatedStack = class {
    constructor(start) {
      this.start = start;
      this.state = start.state;
      this.stack = start.stack;
      this.base = this.stack.length;
    }
    reduce(action) {
      let term = action & 65535, depth2 = action >> 19;
      if (depth2 == 0) {
        if (this.stack == this.start.stack)
          this.stack = this.stack.slice();
        this.stack.push(this.state, 0, 0);
        this.base += 3;
      } else {
        this.base -= (depth2 - 1) * 3;
      }
      let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
      this.state = goto;
    }
  };
  var StackBufferCursor = class _StackBufferCursor {
    constructor(stack, pos, index2) {
      this.stack = stack;
      this.pos = pos;
      this.index = index2;
      this.buffer = stack.buffer;
      if (this.index == 0)
        this.maybeNext();
    }
    static create(stack, pos = stack.bufferBase + stack.buffer.length) {
      return new _StackBufferCursor(stack, pos, pos - stack.bufferBase);
    }
    maybeNext() {
      let next = this.stack.parent;
      if (next != null) {
        this.index = this.stack.bufferBase - next.bufferBase;
        this.stack = next;
        this.buffer = next.buffer;
      }
    }
    get id() {
      return this.buffer[this.index - 4];
    }
    get start() {
      return this.buffer[this.index - 3];
    }
    get end() {
      return this.buffer[this.index - 2];
    }
    get size() {
      return this.buffer[this.index - 1];
    }
    next() {
      this.index -= 4;
      this.pos -= 4;
      if (this.index == 0)
        this.maybeNext();
    }
    fork() {
      return new _StackBufferCursor(this.stack, this.pos, this.index);
    }
  };
  function decodeArray(input, Type = Uint16Array) {
    if (typeof input != "string")
      return input;
    let array = null;
    for (let pos = 0, out = 0; pos < input.length; ) {
      let value = 0;
      for (; ; ) {
        let next = input.charCodeAt(pos++), stop = false;
        if (next == 126) {
          value = 65535;
          break;
        }
        if (next >= 92)
          next--;
        if (next >= 34)
          next--;
        let digit = next - 32;
        if (digit >= 46) {
          digit -= 46;
          stop = true;
        }
        value += digit;
        if (stop)
          break;
        value *= 46;
      }
      if (array)
        array[out++] = value;
      else
        array = new Type(value);
    }
    return array;
  }
  var CachedToken = class {
    constructor() {
      this.start = -1;
      this.value = -1;
      this.end = -1;
      this.extended = -1;
      this.lookAhead = 0;
      this.mask = 0;
      this.context = 0;
    }
  };
  var nullToken = new CachedToken();
  var InputStream = class {
    /**
    @internal
    */
    constructor(input, ranges) {
      this.input = input;
      this.ranges = ranges;
      this.chunk = "";
      this.chunkOff = 0;
      this.chunk2 = "";
      this.chunk2Pos = 0;
      this.next = -1;
      this.token = nullToken;
      this.rangeIndex = 0;
      this.pos = this.chunkPos = ranges[0].from;
      this.range = ranges[0];
      this.end = ranges[ranges.length - 1].to;
      this.readNext();
    }
    /**
    @internal
    */
    resolveOffset(offset, assoc) {
      let range = this.range, index2 = this.rangeIndex;
      let pos = this.pos + offset;
      while (pos < range.from) {
        if (!index2)
          return null;
        let next = this.ranges[--index2];
        pos -= range.from - next.to;
        range = next;
      }
      while (assoc < 0 ? pos > range.to : pos >= range.to) {
        if (index2 == this.ranges.length - 1)
          return null;
        let next = this.ranges[++index2];
        pos += next.from - range.to;
        range = next;
      }
      return pos;
    }
    /**
    @internal
    */
    clipPos(pos) {
      if (pos >= this.range.from && pos < this.range.to)
        return pos;
      for (let range of this.ranges)
        if (range.to > pos)
          return Math.max(pos, range.from);
      return this.end;
    }
    /**
    Look at a code unit near the stream position. `.peek(0)` equals
    `.next`, `.peek(-1)` gives you the previous character, and so
    on.
    
    Note that looking around during tokenizing creates dependencies
    on potentially far-away content, which may reduce the
    effectiveness incremental parsing—when looking forward—or even
    cause invalid reparses when looking backward more than 25 code
    units, since the library does not track lookbehind.
    */
    peek(offset) {
      let idx = this.chunkOff + offset, pos, result;
      if (idx >= 0 && idx < this.chunk.length) {
        pos = this.pos + offset;
        result = this.chunk.charCodeAt(idx);
      } else {
        let resolved = this.resolveOffset(offset, 1);
        if (resolved == null)
          return -1;
        pos = resolved;
        if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
          result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
        } else {
          let i3 = this.rangeIndex, range = this.range;
          while (range.to <= pos)
            range = this.ranges[++i3];
          this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
          if (pos + this.chunk2.length > range.to)
            this.chunk2 = this.chunk2.slice(0, range.to - pos);
          result = this.chunk2.charCodeAt(0);
        }
      }
      if (pos >= this.token.lookAhead)
        this.token.lookAhead = pos + 1;
      return result;
    }
    /**
    Accept a token. By default, the end of the token is set to the
    current stream position, but you can pass an offset (relative to
    the stream position) to change that.
    */
    acceptToken(token, endOffset = 0) {
      let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
      if (end == null || end < this.token.start)
        throw new RangeError("Token end out of bounds");
      this.token.value = token;
      this.token.end = end;
    }
    /**
    Accept a token ending at a specific given position.
    */
    acceptTokenTo(token, endPos) {
      this.token.value = token;
      this.token.end = endPos;
    }
    getChunk() {
      if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
        let { chunk, chunkPos } = this;
        this.chunk = this.chunk2;
        this.chunkPos = this.chunk2Pos;
        this.chunk2 = chunk;
        this.chunk2Pos = chunkPos;
        this.chunkOff = this.pos - this.chunkPos;
      } else {
        this.chunk2 = this.chunk;
        this.chunk2Pos = this.chunkPos;
        let nextChunk = this.input.chunk(this.pos);
        let end = this.pos + nextChunk.length;
        this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
        this.chunkPos = this.pos;
        this.chunkOff = 0;
      }
    }
    readNext() {
      if (this.chunkOff >= this.chunk.length) {
        this.getChunk();
        if (this.chunkOff == this.chunk.length)
          return this.next = -1;
      }
      return this.next = this.chunk.charCodeAt(this.chunkOff);
    }
    /**
    Move the stream forward N (defaults to 1) code units. Returns
    the new value of [`next`](#lr.InputStream.next).
    */
    advance(n5 = 1) {
      this.chunkOff += n5;
      while (this.pos + n5 >= this.range.to) {
        if (this.rangeIndex == this.ranges.length - 1)
          return this.setDone();
        n5 -= this.range.to - this.pos;
        this.range = this.ranges[++this.rangeIndex];
        this.pos = this.range.from;
      }
      this.pos += n5;
      if (this.pos >= this.token.lookAhead)
        this.token.lookAhead = this.pos + 1;
      return this.readNext();
    }
    setDone() {
      this.pos = this.chunkPos = this.end;
      this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
      this.chunk = "";
      return this.next = -1;
    }
    /**
    @internal
    */
    reset(pos, token) {
      if (token) {
        this.token = token;
        token.start = pos;
        token.lookAhead = pos + 1;
        token.value = token.extended = -1;
      } else {
        this.token = nullToken;
      }
      if (this.pos != pos) {
        this.pos = pos;
        if (pos == this.end) {
          this.setDone();
          return this;
        }
        while (pos < this.range.from)
          this.range = this.ranges[--this.rangeIndex];
        while (pos >= this.range.to)
          this.range = this.ranges[++this.rangeIndex];
        if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
          this.chunkOff = pos - this.chunkPos;
        } else {
          this.chunk = "";
          this.chunkOff = 0;
        }
        this.readNext();
      }
      return this;
    }
    /**
    @internal
    */
    read(from2, to) {
      if (from2 >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
        return this.chunk.slice(from2 - this.chunkPos, to - this.chunkPos);
      if (from2 >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
        return this.chunk2.slice(from2 - this.chunk2Pos, to - this.chunk2Pos);
      if (from2 >= this.range.from && to <= this.range.to)
        return this.input.read(from2, to);
      let result = "";
      for (let r4 of this.ranges) {
        if (r4.from >= to)
          break;
        if (r4.to > from2)
          result += this.input.read(Math.max(r4.from, from2), Math.min(r4.to, to));
      }
      return result;
    }
  };
  var TokenGroup = class {
    constructor(data, id2) {
      this.data = data;
      this.id = id2;
    }
    token(input, stack) {
      let { parser: parser2 } = stack.p;
      readToken2(this.data, input, stack, this.id, parser2.data, parser2.tokenPrecTable);
    }
  };
  TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  var LocalTokenGroup = class {
    constructor(data, precTable, elseToken) {
      this.precTable = precTable;
      this.elseToken = elseToken;
      this.data = typeof data == "string" ? decodeArray(data) : data;
    }
    token(input, stack) {
      let start = input.pos, skipped = 0;
      for (; ; ) {
        let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
        readToken2(this.data, input, stack, 0, this.data, this.precTable);
        if (input.token.value > -1)
          break;
        if (this.elseToken == null)
          return;
        if (!atEof)
          skipped++;
        if (nextPos == null)
          break;
        input.reset(nextPos, input.token);
      }
      if (skipped) {
        input.reset(start, input.token);
        input.acceptToken(this.elseToken, skipped);
      }
    }
  };
  LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
  var ExternalTokenizer = class {
    /**
    Create a tokenizer. The first argument is the function that,
    given an input stream, scans for the types of tokens it
    recognizes at the stream's position, and calls
    [`acceptToken`](#lr.InputStream.acceptToken) when it finds
    one.
    */
    constructor(token, options = {}) {
      this.token = token;
      this.contextual = !!options.contextual;
      this.fallback = !!options.fallback;
      this.extend = !!options.extend;
    }
  };
  function readToken2(data, input, stack, group, precTable, precOffset) {
    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
    scan:
      for (; ; ) {
        if ((groupMask & data[state]) == 0)
          break;
        let accEnd = data[state + 1];
        for (let i3 = state + 3; i3 < accEnd; i3 += 2)
          if ((data[i3 + 1] & groupMask) > 0) {
            let term = data[i3];
            if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
              input.acceptToken(term);
              break;
            }
          }
        let next = input.next, low = 0, high = data[state + 2];
        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535) {
          state = data[accEnd + high * 3 - 1];
          continue scan;
        }
        for (; low < high; ) {
          let mid = low + high >> 1;
          let index2 = accEnd + mid + (mid << 1);
          let from2 = data[index2], to = data[index2 + 1] || 65536;
          if (next < from2)
            high = mid;
          else if (next >= to)
            low = mid + 1;
          else {
            state = data[index2 + 2];
            input.advance();
            continue scan;
          }
        }
        break;
      }
  }
  function findOffset(data, start, term) {
    for (let i3 = start, next; (next = data[i3]) != 65535; i3++)
      if (next == term)
        return i3 - start;
    return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
    let iPrev = findOffset(tableData, tableOffset, prev);
    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }
  var verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
  var stackIDs = null;
  function cutAt(tree, pos, side) {
    let cursor = tree.cursor(IterMode.IncludeAnonymous);
    cursor.moveTo(pos);
    for (; ; ) {
      if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
        for (; ; ) {
          if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
            return side < 0 ? Math.max(0, Math.min(
              cursor.to - 1,
              pos - 25
              /* Safety.Margin */
            )) : Math.min(tree.length, Math.max(
              cursor.from + 1,
              pos + 25
              /* Safety.Margin */
            ));
          if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
            break;
          if (!cursor.parent())
            return side < 0 ? 0 : tree.length;
        }
    }
  }
  var FragmentCursor = class {
    constructor(fragments, nodeSet2) {
      this.fragments = fragments;
      this.nodeSet = nodeSet2;
      this.i = 0;
      this.fragment = null;
      this.safeFrom = -1;
      this.safeTo = -1;
      this.trees = [];
      this.start = [];
      this.index = [];
      this.nextFragment();
    }
    nextFragment() {
      let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
      if (fr) {
        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
        while (this.trees.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
        }
        this.trees.push(fr.tree);
        this.start.push(-fr.offset);
        this.index.push(0);
        this.nextStart = this.safeFrom;
      } else {
        this.nextStart = 1e9;
      }
    }
    // `pos` must be >= any previously given `pos` for this cursor
    nodeAt(pos) {
      if (pos < this.nextStart)
        return null;
      while (this.fragment && this.safeTo <= pos)
        this.nextFragment();
      if (!this.fragment)
        return null;
      for (; ; ) {
        let last = this.trees.length - 1;
        if (last < 0) {
          this.nextFragment();
          return null;
        }
        let top2 = this.trees[last], index2 = this.index[last];
        if (index2 == top2.children.length) {
          this.trees.pop();
          this.start.pop();
          this.index.pop();
          continue;
        }
        let next = top2.children[index2];
        let start = this.start[last] + top2.positions[index2];
        if (start > pos) {
          this.nextStart = start;
          return null;
        }
        if (next instanceof Tree) {
          if (start == pos) {
            if (start < this.safeFrom)
              return null;
            let end = start + next.length;
            if (end <= this.safeTo) {
              let lookAhead = next.prop(NodeProp.lookAhead);
              if (!lookAhead || end + lookAhead < this.fragment.to)
                return next;
            }
          }
          this.index[last]++;
          if (start + next.length >= Math.max(this.safeFrom, pos)) {
            this.trees.push(next);
            this.start.push(start);
            this.index.push(0);
          }
        } else {
          this.index[last]++;
          this.nextStart = start + next.length;
        }
      }
    }
  };
  var TokenCache = class {
    constructor(parser2, stream) {
      this.stream = stream;
      this.tokens = [];
      this.mainToken = null;
      this.actions = [];
      this.tokens = parser2.tokenizers.map((_3) => new CachedToken());
    }
    getActions(stack) {
      let actionIndex = 0;
      let main = null;
      let { parser: parser2 } = stack.p, { tokenizers } = parser2;
      let mask = parser2.stateSlot(
        stack.state,
        3
        /* ParseState.TokenizerMask */
      );
      let context = stack.curContext ? stack.curContext.hash : 0;
      let lookAhead = 0;
      for (let i3 = 0; i3 < tokenizers.length; i3++) {
        if ((1 << i3 & mask) == 0)
          continue;
        let tokenizer = tokenizers[i3], token = this.tokens[i3];
        if (main && !tokenizer.fallback)
          continue;
        if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
          this.updateCachedToken(token, tokenizer, stack);
          token.mask = mask;
          token.context = context;
        }
        if (token.lookAhead > token.end + 25)
          lookAhead = Math.max(token.lookAhead, lookAhead);
        if (token.value != 0) {
          let startIndex = actionIndex;
          if (token.extended > -1)
            actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
          actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
          if (!tokenizer.extend) {
            main = token;
            if (actionIndex > startIndex)
              break;
          }
        }
      }
      while (this.actions.length > actionIndex)
        this.actions.pop();
      if (lookAhead)
        stack.setLookAhead(lookAhead);
      if (!main && stack.pos == this.stream.end) {
        main = new CachedToken();
        main.value = stack.p.parser.eofTerm;
        main.start = main.end = stack.pos;
        actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
      }
      this.mainToken = main;
      return this.actions;
    }
    getMainToken(stack) {
      if (this.mainToken)
        return this.mainToken;
      let main = new CachedToken(), { pos, p: p6 } = stack;
      main.start = pos;
      main.end = Math.min(pos + 1, p6.stream.end);
      main.value = pos == p6.stream.end ? p6.parser.eofTerm : 0;
      return main;
    }
    updateCachedToken(token, tokenizer, stack) {
      let start = this.stream.clipPos(stack.pos);
      tokenizer.token(this.stream.reset(start, token), stack);
      if (token.value > -1) {
        let { parser: parser2 } = stack.p;
        for (let i3 = 0; i3 < parser2.specialized.length; i3++)
          if (parser2.specialized[i3] == token.value) {
            let result = parser2.specializers[i3](this.stream.read(token.start, token.end), stack);
            if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
              if ((result & 1) == 0)
                token.value = result >> 1;
              else
                token.extended = result >> 1;
              break;
            }
          }
      } else {
        token.value = 0;
        token.end = this.stream.clipPos(start + 1);
      }
    }
    putAction(action, token, end, index2) {
      for (let i3 = 0; i3 < index2; i3 += 3)
        if (this.actions[i3] == action)
          return index2;
      this.actions[index2++] = action;
      this.actions[index2++] = token;
      this.actions[index2++] = end;
      return index2;
    }
    addActions(stack, token, end, index2) {
      let { state } = stack, { parser: parser2 } = stack.p, { data } = parser2;
      for (let set = 0; set < 2; set++) {
        for (let i3 = parser2.stateSlot(
          state,
          set ? 2 : 1
          /* ParseState.Actions */
        ); ; i3 += 3) {
          if (data[i3] == 65535) {
            if (data[i3 + 1] == 1) {
              i3 = pair(data, i3 + 2);
            } else {
              if (index2 == 0 && data[i3 + 1] == 2)
                index2 = this.putAction(pair(data, i3 + 2), token, end, index2);
              break;
            }
          }
          if (data[i3] == token)
            index2 = this.putAction(pair(data, i3 + 1), token, end, index2);
        }
      }
      return index2;
    }
  };
  var Parse2 = class {
    constructor(parser2, input, fragments, ranges) {
      this.parser = parser2;
      this.input = input;
      this.ranges = ranges;
      this.recovering = 0;
      this.nextStackID = 9812;
      this.minStackPos = 0;
      this.reused = [];
      this.stoppedAt = null;
      this.lastBigReductionStart = -1;
      this.lastBigReductionSize = 0;
      this.bigReductionCount = 0;
      this.stream = new InputStream(input, ranges);
      this.tokens = new TokenCache(parser2, this.stream);
      this.topTerm = parser2.top[1];
      let { from: from2 } = ranges[0];
      this.stacks = [Stack.start(this, parser2.top[0], from2)];
      this.fragments = fragments.length && this.stream.end - from2 > parser2.bufferLength * 4 ? new FragmentCursor(fragments, parser2.nodeSet) : null;
    }
    get parsedPos() {
      return this.minStackPos;
    }
    // Move the parser forward. This will process all parse stacks at
    // `this.pos` and try to advance them to a further position. If no
    // stack for such a position is found, it'll start error-recovery.
    //
    // When the parse is finished, this will return a syntax tree. When
    // not, it returns `null`.
    advance() {
      let stacks = this.stacks, pos = this.minStackPos;
      let newStacks = this.stacks = [];
      let stopped, stoppedTokens;
      if (this.bigReductionCount > 300 && stacks.length == 1) {
        let [s4] = stacks;
        while (s4.forceReduce() && s4.stack.length && s4.stack[s4.stack.length - 2] >= this.lastBigReductionStart) {
        }
        this.bigReductionCount = this.lastBigReductionSize = 0;
      }
      for (let i3 = 0; i3 < stacks.length; i3++) {
        let stack = stacks[i3];
        for (; ; ) {
          this.tokens.mainToken = null;
          if (stack.pos > pos) {
            newStacks.push(stack);
          } else if (this.advanceStack(stack, newStacks, stacks)) {
            continue;
          } else {
            if (!stopped) {
              stopped = [];
              stoppedTokens = [];
            }
            stopped.push(stack);
            let tok = this.tokens.getMainToken(stack);
            stoppedTokens.push(tok.value, tok.end);
          }
          break;
        }
      }
      if (!newStacks.length) {
        let finished = stopped && findFinished(stopped);
        if (finished) {
          if (verbose)
            console.log("Finish with " + this.stackID(finished));
          return this.stackToTree(finished);
        }
        if (this.parser.strict) {
          if (verbose && stopped)
            console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
          throw new SyntaxError("No parse at " + pos);
        }
        if (!this.recovering)
          this.recovering = 5;
      }
      if (this.recovering && stopped) {
        let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
        if (finished) {
          if (verbose)
            console.log("Force-finish " + this.stackID(finished));
          return this.stackToTree(finished.forceAll());
        }
      }
      if (this.recovering) {
        let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
        if (newStacks.length > maxRemaining) {
          newStacks.sort((a2, b4) => b4.score - a2.score);
          while (newStacks.length > maxRemaining)
            newStacks.pop();
        }
        if (newStacks.some((s4) => s4.reducePos > pos))
          this.recovering--;
      } else if (newStacks.length > 1) {
        outer:
          for (let i3 = 0; i3 < newStacks.length - 1; i3++) {
            let stack = newStacks[i3];
            for (let j6 = i3 + 1; j6 < newStacks.length; j6++) {
              let other = newStacks[j6];
              if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
                if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                  newStacks.splice(j6--, 1);
                } else {
                  newStacks.splice(i3--, 1);
                  continue outer;
                }
              }
            }
          }
        if (newStacks.length > 12)
          newStacks.splice(
            12,
            newStacks.length - 12
            /* Rec.MaxStackCount */
          );
      }
      this.minStackPos = newStacks[0].pos;
      for (let i3 = 1; i3 < newStacks.length; i3++)
        if (newStacks[i3].pos < this.minStackPos)
          this.minStackPos = newStacks[i3].pos;
      return null;
    }
    stopAt(pos) {
      if (this.stoppedAt != null && this.stoppedAt < pos)
        throw new RangeError("Can't move stoppedAt forward");
      this.stoppedAt = pos;
    }
    // Returns an updated version of the given stack, or null if the
    // stack can't advance normally. When `split` and `stacks` are
    // given, stacks split off by ambiguous operations will be pushed to
    // `split`, or added to `stacks` if they move `pos` forward.
    advanceStack(stack, stacks, split2) {
      let start = stack.pos, { parser: parser2 } = this;
      let base2 = verbose ? this.stackID(stack) + " -> " : "";
      if (this.stoppedAt != null && start > this.stoppedAt)
        return stack.forceReduce() ? stack : null;
      if (this.fragments) {
        let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
        for (let cached = this.fragments.nodeAt(start); cached; ) {
          let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser2.getGoto(stack.state, cached.type.id) : -1;
          if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
            stack.useNode(cached, match);
            if (verbose)
              console.log(base2 + this.stackID(stack) + ` (via reuse of ${parser2.getName(cached.type.id)})`);
            return true;
          }
          if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
            break;
          let inner = cached.children[0];
          if (inner instanceof Tree && cached.positions[0] == 0)
            cached = inner;
          else
            break;
        }
      }
      let defaultReduce = parser2.stateSlot(
        stack.state,
        4
        /* ParseState.DefaultReduce */
      );
      if (defaultReduce > 0) {
        stack.reduce(defaultReduce);
        if (verbose)
          console.log(base2 + this.stackID(stack) + ` (via always-reduce ${parser2.getName(
            defaultReduce & 65535
            /* Action.ValueMask */
          )})`);
        return true;
      }
      if (stack.stack.length >= 8400) {
        while (stack.stack.length > 6e3 && stack.forceReduce()) {
        }
      }
      let actions = this.tokens.getActions(stack);
      for (let i3 = 0; i3 < actions.length; ) {
        let action = actions[i3++], term = actions[i3++], end = actions[i3++];
        let last = i3 == actions.length || !split2;
        let localStack = last ? stack : stack.split();
        let main = this.tokens.mainToken;
        localStack.apply(action, term, main ? main.start : localStack.pos, end);
        if (verbose)
          console.log(base2 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser2.getName(
            action & 65535
            /* Action.ValueMask */
          )}`} for ${parser2.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
        if (last)
          return true;
        else if (localStack.pos > start)
          stacks.push(localStack);
        else
          split2.push(localStack);
      }
      return false;
    }
    // Advance a given stack forward as far as it will go. Returns the
    // (possibly updated) stack if it got stuck, or null if it moved
    // forward and was given to `pushStackDedup`.
    advanceFully(stack, newStacks) {
      let pos = stack.pos;
      for (; ; ) {
        if (!this.advanceStack(stack, null, null))
          return false;
        if (stack.pos > pos) {
          pushStackDedup(stack, newStacks);
          return true;
        }
      }
    }
    runRecovery(stacks, tokens, newStacks) {
      let finished = null, restarted = false;
      for (let i3 = 0; i3 < stacks.length; i3++) {
        let stack = stacks[i3], token = tokens[i3 << 1], tokenEnd = tokens[(i3 << 1) + 1];
        let base2 = verbose ? this.stackID(stack) + " -> " : "";
        if (stack.deadEnd) {
          if (restarted)
            continue;
          restarted = true;
          stack.restart();
          if (verbose)
            console.log(base2 + this.stackID(stack) + " (restarted)");
          let done = this.advanceFully(stack, newStacks);
          if (done)
            continue;
        }
        let force = stack.split(), forceBase = base2;
        for (let j6 = 0; force.forceReduce() && j6 < 10; j6++) {
          if (verbose)
            console.log(forceBase + this.stackID(force) + " (via force-reduce)");
          let done = this.advanceFully(force, newStacks);
          if (done)
            break;
          if (verbose)
            forceBase = this.stackID(force) + " -> ";
        }
        for (let insert2 of stack.recoverByInsert(token)) {
          if (verbose)
            console.log(base2 + this.stackID(insert2) + " (via recover-insert)");
          this.advanceFully(insert2, newStacks);
        }
        if (this.stream.end > stack.pos) {
          if (tokenEnd == stack.pos) {
            tokenEnd++;
            token = 0;
          }
          stack.recoverByDelete(token, tokenEnd);
          if (verbose)
            console.log(base2 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
          pushStackDedup(stack, newStacks);
        } else if (!finished || finished.score < stack.score) {
          finished = stack;
        }
      }
      return finished;
    }
    // Convert the stack's buffer to a syntax tree.
    stackToTree(stack) {
      stack.close();
      return Tree.build({
        buffer: StackBufferCursor.create(stack),
        nodeSet: this.parser.nodeSet,
        topID: this.topTerm,
        maxBufferLength: this.parser.bufferLength,
        reused: this.reused,
        start: this.ranges[0].from,
        length: stack.pos - this.ranges[0].from,
        minRepeatType: this.parser.minRepeatTerm
      });
    }
    stackID(stack) {
      let id2 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
      if (!id2)
        stackIDs.set(stack, id2 = String.fromCodePoint(this.nextStackID++));
      return id2 + stack;
    }
  };
  function pushStackDedup(stack, newStacks) {
    for (let i3 = 0; i3 < newStacks.length; i3++) {
      let other = newStacks[i3];
      if (other.pos == stack.pos && other.sameState(stack)) {
        if (newStacks[i3].score < stack.score)
          newStacks[i3] = stack;
        return;
      }
    }
    newStacks.push(stack);
  }
  var Dialect = class {
    constructor(source, flags, disabled) {
      this.source = source;
      this.flags = flags;
      this.disabled = disabled;
    }
    allows(term) {
      return !this.disabled || this.disabled[term] == 0;
    }
  };
  var id = (x7) => x7;
  var ContextTracker = class {
    /**
    Define a context tracker.
    */
    constructor(spec) {
      this.start = spec.start;
      this.shift = spec.shift || id;
      this.reduce = spec.reduce || id;
      this.reuse = spec.reuse || id;
      this.hash = spec.hash || (() => 0);
      this.strict = spec.strict !== false;
    }
  };
  var LRParser = class _LRParser extends Parser {
    /**
    @internal
    */
    constructor(spec) {
      super();
      this.wrappers = [];
      if (spec.version != 14)
        throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
      let nodeNames = spec.nodeNames.split(" ");
      this.minRepeatTerm = nodeNames.length;
      for (let i3 = 0; i3 < spec.repeatNodeCount; i3++)
        nodeNames.push("");
      let topTerms = Object.keys(spec.topRules).map((r4) => spec.topRules[r4][1]);
      let nodeProps = [];
      for (let i3 = 0; i3 < nodeNames.length; i3++)
        nodeProps.push([]);
      function setProp(nodeID, prop, value) {
        nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
      }
      if (spec.nodeProps)
        for (let propSpec of spec.nodeProps) {
          let prop = propSpec[0];
          if (typeof prop == "string")
            prop = NodeProp[prop];
          for (let i3 = 1; i3 < propSpec.length; ) {
            let next = propSpec[i3++];
            if (next >= 0) {
              setProp(next, prop, propSpec[i3++]);
            } else {
              let value = propSpec[i3 + -next];
              for (let j6 = -next; j6 > 0; j6--)
                setProp(propSpec[i3++], prop, value);
              i3++;
            }
          }
        }
      this.nodeSet = new NodeSet(nodeNames.map((name2, i3) => NodeType.define({
        name: i3 >= this.minRepeatTerm ? void 0 : name2,
        id: i3,
        props: nodeProps[i3],
        top: topTerms.indexOf(i3) > -1,
        error: i3 == 0,
        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i3) > -1
      })));
      if (spec.propSources)
        this.nodeSet = this.nodeSet.extend(...spec.propSources);
      this.strict = false;
      this.bufferLength = DefaultBufferLength;
      let tokenArray = decodeArray(spec.tokenData);
      this.context = spec.context;
      this.specializerSpecs = spec.specialized || [];
      this.specialized = new Uint16Array(this.specializerSpecs.length);
      for (let i3 = 0; i3 < this.specializerSpecs.length; i3++)
        this.specialized[i3] = this.specializerSpecs[i3].term;
      this.specializers = this.specializerSpecs.map(getSpecializer);
      this.states = decodeArray(spec.states, Uint32Array);
      this.data = decodeArray(spec.stateData);
      this.goto = decodeArray(spec.goto);
      this.maxTerm = spec.maxTerm;
      this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
      this.topRules = spec.topRules;
      this.dialects = spec.dialects || {};
      this.dynamicPrecedences = spec.dynamicPrecedences || null;
      this.tokenPrecTable = spec.tokenPrec;
      this.termNames = spec.termNames || null;
      this.maxNode = this.nodeSet.types.length - 1;
      this.dialect = this.parseDialect();
      this.top = this.topRules[Object.keys(this.topRules)[0]];
    }
    createParse(input, fragments, ranges) {
      let parse2 = new Parse2(this, input, fragments, ranges);
      for (let w7 of this.wrappers)
        parse2 = w7(parse2, input, fragments, ranges);
      return parse2;
    }
    /**
    Get a goto table entry @internal
    */
    getGoto(state, term, loose = false) {
      let table = this.goto;
      if (term >= table[0])
        return -1;
      for (let pos = table[term + 1]; ; ) {
        let groupTag = table[pos++], last = groupTag & 1;
        let target = table[pos++];
        if (last && loose)
          return target;
        for (let end = pos + (groupTag >> 1); pos < end; pos++)
          if (table[pos] == state)
            return target;
        if (last)
          return -1;
      }
    }
    /**
    Check if this state has an action for a given terminal @internal
    */
    hasAction(state, terminal) {
      let data = this.data;
      for (let set = 0; set < 2; set++) {
        for (let i3 = this.stateSlot(
          state,
          set ? 2 : 1
          /* ParseState.Actions */
        ), next; ; i3 += 3) {
          if ((next = data[i3]) == 65535) {
            if (data[i3 + 1] == 1)
              next = data[i3 = pair(data, i3 + 2)];
            else if (data[i3 + 1] == 2)
              return pair(data, i3 + 2);
            else
              break;
          }
          if (next == terminal || next == 0)
            return pair(data, i3 + 1);
        }
      }
      return 0;
    }
    /**
    @internal
    */
    stateSlot(state, slot) {
      return this.states[state * 6 + slot];
    }
    /**
    @internal
    */
    stateFlag(state, flag) {
      return (this.stateSlot(
        state,
        0
        /* ParseState.Flags */
      ) & flag) > 0;
    }
    /**
    @internal
    */
    validAction(state, action) {
      return !!this.allActions(state, (a2) => a2 == action ? true : null);
    }
    /**
    @internal
    */
    allActions(state, action) {
      let deflt = this.stateSlot(
        state,
        4
        /* ParseState.DefaultReduce */
      );
      let result = deflt ? action(deflt) : void 0;
      for (let i3 = this.stateSlot(
        state,
        1
        /* ParseState.Actions */
      ); result == null; i3 += 3) {
        if (this.data[i3] == 65535) {
          if (this.data[i3 + 1] == 1)
            i3 = pair(this.data, i3 + 2);
          else
            break;
        }
        result = action(pair(this.data, i3 + 1));
      }
      return result;
    }
    /**
    Get the states that can follow this one through shift actions or
    goto jumps. @internal
    */
    nextStates(state) {
      let result = [];
      for (let i3 = this.stateSlot(
        state,
        1
        /* ParseState.Actions */
      ); ; i3 += 3) {
        if (this.data[i3] == 65535) {
          if (this.data[i3 + 1] == 1)
            i3 = pair(this.data, i3 + 2);
          else
            break;
        }
        if ((this.data[i3 + 2] & 65536 >> 16) == 0) {
          let value = this.data[i3 + 1];
          if (!result.some((v4, i4) => i4 & 1 && v4 == value))
            result.push(this.data[i3], value);
        }
      }
      return result;
    }
    /**
    Configure the parser. Returns a new parser instance that has the
    given settings modified. Settings not provided in `config` are
    kept from the original parser.
    */
    configure(config2) {
      let copy2 = Object.assign(Object.create(_LRParser.prototype), this);
      if (config2.props)
        copy2.nodeSet = this.nodeSet.extend(...config2.props);
      if (config2.top) {
        let info = this.topRules[config2.top];
        if (!info)
          throw new RangeError(`Invalid top rule name ${config2.top}`);
        copy2.top = info;
      }
      if (config2.tokenizers)
        copy2.tokenizers = this.tokenizers.map((t4) => {
          let found2 = config2.tokenizers.find((r4) => r4.from == t4);
          return found2 ? found2.to : t4;
        });
      if (config2.specializers) {
        copy2.specializers = this.specializers.slice();
        copy2.specializerSpecs = this.specializerSpecs.map((s4, i3) => {
          let found2 = config2.specializers.find((r4) => r4.from == s4.external);
          if (!found2)
            return s4;
          let spec = Object.assign(Object.assign({}, s4), { external: found2.to });
          copy2.specializers[i3] = getSpecializer(spec);
          return spec;
        });
      }
      if (config2.contextTracker)
        copy2.context = config2.contextTracker;
      if (config2.dialect)
        copy2.dialect = this.parseDialect(config2.dialect);
      if (config2.strict != null)
        copy2.strict = config2.strict;
      if (config2.wrap)
        copy2.wrappers = copy2.wrappers.concat(config2.wrap);
      if (config2.bufferLength != null)
        copy2.bufferLength = config2.bufferLength;
      return copy2;
    }
    /**
    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
    are registered for this parser.
    */
    hasWrappers() {
      return this.wrappers.length > 0;
    }
    /**
    Returns the name associated with a given term. This will only
    work for all terms when the parser was generated with the
    `--names` option. By default, only the names of tagged terms are
    stored.
    */
    getName(term) {
      return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
    }
    /**
    The eof term id is always allocated directly after the node
    types. @internal
    */
    get eofTerm() {
      return this.maxNode + 1;
    }
    /**
    The type of top node produced by the parser.
    */
    get topNode() {
      return this.nodeSet.types[this.top[1]];
    }
    /**
    @internal
    */
    dynamicPrecedence(term) {
      let prec2 = this.dynamicPrecedences;
      return prec2 == null ? 0 : prec2[term] || 0;
    }
    /**
    @internal
    */
    parseDialect(dialect) {
      let values = Object.keys(this.dialects), flags = values.map(() => false);
      if (dialect)
        for (let part of dialect.split(" ")) {
          let id2 = values.indexOf(part);
          if (id2 >= 0)
            flags[id2] = true;
        }
      let disabled = null;
      for (let i3 = 0; i3 < values.length; i3++)
        if (!flags[i3]) {
          for (let j6 = this.dialects[values[i3]], id2; (id2 = this.data[j6++]) != 65535; )
            (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id2] = 1;
        }
      return new Dialect(dialect, flags, disabled);
    }
    /**
    Used by the output of the parser generator. Not available to
    user code. @hide
    */
    static deserialize(spec) {
      return new _LRParser(spec);
    }
  };
  function pair(data, off) {
    return data[off] | data[off + 1] << 16;
  }
  function findFinished(stacks) {
    let best = null;
    for (let stack of stacks) {
      let stopped = stack.p.stoppedAt;
      if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
        stack.state,
        2
        /* StateFlag.Accepting */
      ) && (!best || best.score < stack.score))
        best = stack;
    }
    return best;
  }
  function getSpecializer(spec) {
    if (spec.external) {
      let mask = spec.extend ? 1 : 0;
      return (value, stack) => spec.external(value, stack) << 1 | mask;
    }
    return spec.get;
  }

  // node_modules/@lezer/javascript/dist/index.js
  var noSemi = 310;
  var incdec = 1;
  var incdecPrefix = 2;
  var JSXStartTag = 3;
  var insertSemi = 311;
  var spaces = 313;
  var newline = 314;
  var LineComment = 4;
  var BlockComment = 5;
  var Dialect_jsx = 0;
  var space = [
    9,
    10,
    11,
    12,
    13,
    32,
    133,
    160,
    5760,
    8192,
    8193,
    8194,
    8195,
    8196,
    8197,
    8198,
    8199,
    8200,
    8201,
    8202,
    8232,
    8233,
    8239,
    8287,
    12288
  ];
  var braceR = 125;
  var semicolon = 59;
  var slash = 47;
  var star = 42;
  var plus = 43;
  var minus = 45;
  var lt = 60;
  var comma = 44;
  var trackNewline = new ContextTracker({
    start: false,
    shift(context, term) {
      return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
    },
    strict: false
  });
  var insertSemicolon = new ExternalTokenizer((input, stack) => {
    let { next } = input;
    if (next == braceR || next == -1 || stack.context)
      input.acceptToken(insertSemi);
  }, { contextual: true, fallback: true });
  var noSemicolon = new ExternalTokenizer((input, stack) => {
    let { next } = input, after;
    if (space.indexOf(next) > -1)
      return;
    if (next == slash && ((after = input.peek(1)) == slash || after == star))
      return;
    if (next != braceR && next != semicolon && next != -1 && !stack.context)
      input.acceptToken(noSemi);
  }, { contextual: true });
  var incdecToken = new ExternalTokenizer((input, stack) => {
    let { next } = input;
    if (next == plus || next == minus) {
      input.advance();
      if (next == input.next) {
        input.advance();
        let mayPostfix = !stack.context && stack.canShift(incdec);
        input.acceptToken(mayPostfix ? incdec : incdecPrefix);
      }
    }
  }, { contextual: true });
  function identifierChar(ch, start) {
    return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch == 95 || ch >= 192 || !start && ch >= 48 && ch <= 57;
  }
  var jsx = new ExternalTokenizer((input, stack) => {
    if (input.next != lt || !stack.dialectEnabled(Dialect_jsx))
      return;
    input.advance();
    if (input.next == slash)
      return;
    let back = 0;
    while (space.indexOf(input.next) > -1) {
      input.advance();
      back++;
    }
    if (identifierChar(input.next, true)) {
      input.advance();
      back++;
      while (identifierChar(input.next, false)) {
        input.advance();
        back++;
      }
      while (space.indexOf(input.next) > -1) {
        input.advance();
        back++;
      }
      if (input.next == comma)
        return;
      for (let i3 = 0; ; i3++) {
        if (i3 == 7) {
          if (!identifierChar(input.next, true))
            return;
          break;
        }
        if (input.next != "extends".charCodeAt(i3))
          break;
        input.advance();
        back++;
      }
    }
    input.acceptToken(JSXStartTag, -back);
  });
  var jsHighlight = styleTags({
    "get set async static": tags.modifier,
    "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
    "in of await yield void typeof delete instanceof": tags.operatorKeyword,
    "let var const using function class extends": tags.definitionKeyword,
    "import export from": tags.moduleKeyword,
    "with debugger as new": tags.keyword,
    TemplateString: tags.special(tags.string),
    super: tags.atom,
    BooleanLiteral: tags.bool,
    this: tags.self,
    null: tags.null,
    Star: tags.modifier,
    VariableName: tags.variableName,
    "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags.function(tags.variableName),
    VariableDefinition: tags.definition(tags.variableName),
    Label: tags.labelName,
    PropertyName: tags.propertyName,
    PrivatePropertyName: tags.special(tags.propertyName),
    "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
    "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
    "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
    PropertyDefinition: tags.definition(tags.propertyName),
    PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
    UpdateOp: tags.updateOperator,
    "LineComment Hashbang": tags.lineComment,
    BlockComment: tags.blockComment,
    Number: tags.number,
    String: tags.string,
    Escape: tags.escape,
    ArithOp: tags.arithmeticOperator,
    LogicOp: tags.logicOperator,
    BitOp: tags.bitwiseOperator,
    CompareOp: tags.compareOperator,
    RegExp: tags.regexp,
    Equals: tags.definitionOperator,
    Arrow: tags.function(tags.punctuation),
    ": Spread": tags.punctuation,
    "( )": tags.paren,
    "[ ]": tags.squareBracket,
    "{ }": tags.brace,
    "InterpolationStart InterpolationEnd": tags.special(tags.brace),
    ".": tags.derefOperator,
    ", ;": tags.separator,
    "@": tags.meta,
    TypeName: tags.typeName,
    TypeDefinition: tags.definition(tags.typeName),
    "type enum interface implements namespace module declare": tags.definitionKeyword,
    "abstract global Privacy readonly override": tags.modifier,
    "is keyof unique infer": tags.operatorKeyword,
    JSXAttributeValue: tags.attributeValue,
    JSXText: tags.content,
    "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
    "JSXIdentifier JSXNameSpacedName": tags.tagName,
    "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
    "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
  });
  var spec_identifier = { __proto__: null, export: 18, as: 23, from: 31, default: 34, async: 39, function: 40, extends: 52, this: 56, true: 64, false: 64, null: 76, void: 80, typeof: 84, super: 102, new: 136, delete: 154, yield: 163, await: 167, class: 172, public: 229, private: 229, protected: 229, readonly: 231, instanceof: 250, satisfies: 253, in: 254, const: 256, import: 288, keyof: 341, unique: 345, infer: 351, is: 387, abstract: 407, implements: 409, type: 411, let: 414, var: 416, using: 419, interface: 425, enum: 429, namespace: 435, module: 437, declare: 441, global: 445, for: 464, of: 473, while: 476, with: 480, do: 484, if: 488, else: 490, switch: 494, case: 500, try: 506, catch: 510, finally: 514, return: 518, throw: 522, break: 526, continue: 530, debugger: 534 };
  var spec_word = { __proto__: null, async: 123, get: 125, set: 127, declare: 189, public: 191, private: 191, protected: 191, static: 193, abstract: 195, override: 197, readonly: 203, accessor: 205, new: 391 };
  var spec_LessThan = { __proto__: null, "<": 145 };
  var parser = LRParser.deserialize({
    version: 14,
    states: "$=dO%TQ^OOO%[Q^OOO'_Q`OOP(lOWOOO*zQ?NdO'#ChO+RO!bO'#CiO+aO#tO'#CiO+oO!0LbO'#D^O.QQ^O'#DdO.bQ^O'#DoO%[Q^O'#DzO0fQ^O'#ESOOQ?Mr'#E['#E[O1PQWO'#EXOOQO'#Em'#EmOOQO'#If'#IfO1XQWO'#GnO1dQWO'#ElO1iQWO'#ElO3kQ?NdO'#JjO6[Q?NdO'#JkO6xQWO'#F[O6}Q&jO'#FrOOQ?Mr'#Fd'#FdO7YO,YO'#FdO7hQ7[O'#FyO9UQWO'#FxOOQ?Mr'#Jk'#JkOOQ?Mp'#Jj'#JjO9ZQWO'#GrOOQU'#KW'#KWO9fQWO'#ISO9kQ?MxO'#ITOOQU'#JX'#JXOOQU'#IX'#IXQ`Q^OOO`Q^OOO9sQMnO'#DsO9zQ^O'#EOO:RQ^O'#EQO9aQWO'#GnO:YQ7[O'#CnO:hQWO'#EkO:sQWO'#EvO:xQ7[O'#FcO;gQWO'#GnOOQO'#KX'#KXO;lQWO'#KXO;zQWO'#GvO;zQWO'#GwO;zQWO'#GyO9aQWO'#G|O<qQWO'#HPO>YQWO'#CdO>jQWO'#H]O>rQWO'#HcO>rQWO'#HeO`Q^O'#HgO>rQWO'#HiO>rQWO'#HlO>wQWO'#HrO>|Q?MyO'#HxO%[Q^O'#HzO?XQ?MyO'#H|O?dQ?MyO'#IOO9kQ?MxO'#IQO?oQ?NdO'#ChO@qQ`O'#DiQOQWOOO%[Q^O'#EQOAXQWO'#ETO:YQ7[O'#EkOAdQWO'#EkOAoQpO'#FcOOQU'#Cf'#CfOOQ?Mp'#Dn'#DnOOQ?Mp'#Jn'#JnO%[Q^O'#JnOOQO'#Jr'#JrOOQO'#Ic'#IcOBoQ`O'#EdOOQ?Mp'#Ec'#EcOOQ?Mp'#Ju'#JuOCkQ?NQO'#EdOCuQ`O'#EWOOQO'#Jq'#JqODZQ`O'#JrOEhQ`O'#EWOCuQ`O'#EdPEuO#@ItO'#CaPOOO)CDv)CDvOOOO'#IY'#IYOFQO!bO,59TOOQ?Mr,59T,59TOOOO'#IZ'#IZOF`O#tO,59TO%[Q^O'#D`OOOO'#I]'#I]OFnO!0LbO,59xOOQ?Mr,59x,59xOF|Q^O'#I^OGaQWO'#JlOIcQrO'#JlO+}Q^O'#JlOIjQWO,5:OOJQQWO'#EmOJ_QWO'#J{OJjQWO'#JzOJjQWO'#JzOJrQWO,5;ZOJwQWO'#JyOOQ?Mv,5:Z,5:ZOKOQ^O,5:ZOMPQ?NdO,5:fOMpQWO,5:nONZQ?MxO'#JxONbQWO'#JwO9ZQWO'#JwONvQWO'#JwO! OQWO,5;YO! TQWO'#JwO!#]QrO'#JkOOQ?Mr'#Ch'#ChO%[Q^O'#ESO!#{QpO,5:sOOQO'#Js'#JsOOQO-E<d-E<dO9aQWO,5=YO!$cQWO,5=YO!$hQ^O,5;WO!&kQ7[O'#EhO!(UQWO,5;WO!)tQ7[O'#DtO!){Q^O'#DyO!*VQ`O,5;aO!*_Q`O,5;aO%[Q^O,5;aOOQU'#FS'#FSOOQU'#FU'#FUO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bO%[Q^O,5;bOOQU'#FY'#FYO!*mQ^O,5;sOOQ?Mr,5;x,5;xOOQ?Mr,5;y,5;yO!,pQWO,5;yOOQ?Mr,5;z,5;zO%[Q^O'#IjO!,xQ?MxO,5<fO!&kQ7[O,5;bO!-gQ7[O,5;bO%[Q^O,5;vO!-nQ&jO'#FhO!.kQ&jO'#KPO!.VQ&jO'#KPO!.rQ&jO'#KPOOQO'#KP'#KPO!/WQ&jO,5<QOOOS,5<^,5<^O!/iQ^O'#FtOOOS'#Ii'#IiO7YO,YO,5<OO!/pQ&jO'#FvOOQ?Mr,5<O,5<OO!0aQ!LQO'#CuOOQ?Mr'#Cy'#CyO!0tQWO'#CyO!0yO!0LbO'#C}O!1gQ7[O,5<cO!1nQWO,5<eO!3ZQ$ISO'#GTO!3hQWO'#GUO!3mQWO'#GUO!5]Q$ISO'#GYO!6XQ`O'#G^OOQO'#Gi'#GiO!(ZQ7[O'#GhOOQO'#Gk'#GkO!(ZQ7[O'#GjO!6zQ!LQO'#JeOOQ?Mr'#Je'#JeO!7UQWO'#JdO!7dQWO'#JcO!7lQWO'#CtOOQ?Mr'#Cw'#CwOOQ?Mr'#DR'#DROOQ?Mr'#DT'#DTO1SQWO'#DVO!(ZQ7[O'#F{O!(ZQ7[O'#F}O!7tQWO'#GPO!7yQWO'#GQO!3mQWO'#GWO!(ZQ7[O'#G]O!8OQWO'#EnO!8mQWO,5<dOOQ?Mp'#Cq'#CqO!8uQWO'#EoO!9oQ`O'#EpOOQ?Mp'#Jy'#JyO!9vQ?MxO'#KYO9kQ?MxO,5=^O`Q^O,5>nOOQU'#Ja'#JaOOQU,5>o,5>oOOQU-E<V-E<VO!;xQ?NdO,5:_O!9jQ`O,5:]O!>fQ?NdO,5:jO%[Q^O,5:jO!APQ?NdO,5:lOOQO,5@s,5@sO!ApQ7[O,5=YO!BOQ?MxO'#JbO9UQWO'#JbO!BaQ?MxO,59YO!BlQ`O,59YO!BtQ7[O,59YO:YQ7[O,59YO!CPQWO,5;WO!CXQWO'#H[O!CmQWO'#K]O%[Q^O,5;{O!9jQ`O,5;}O!CuQWO,5=uO!CzQWO,5=uO!DPQWO,5=uO9kQ?MxO,5=uO;zQWO,5=eOOQO'#Cu'#CuO!D_Q`O,5=bO!DgQ7[O,5=cO!DrQWO,5=eO!DwQpO,5=hO!EPQWO'#KXO>wQWO'#HRO9aQWO'#HTO!EUQWO'#HTO:YQ7[O'#HVO!EZQWO'#HVOOQU,5=k,5=kO!E`QWO'#HWO!EqQWO'#CnO!EvQWO,59OO!FQQWO,59OO!HVQ^O,59OOOQU,59O,59OO!HgQ?MxO,59OO%[Q^O,59OO!JrQ^O'#H_OOQU'#H`'#H`OOQU'#Ha'#HaO`Q^O,5=wO!KYQWO,5=wO`Q^O,5=}O`Q^O,5>PO!K_QWO,5>RO`Q^O,5>TO!KdQWO,5>WO!KiQ^O,5>^OOQU,5>d,5>dO%[Q^O,5>dO9kQ?MxO,5>fOOQU,5>h,5>hO# sQWO,5>hOOQU,5>j,5>jO# sQWO,5>jOOQU,5>l,5>lO#!aQ`O'#D[O%[Q^O'#JnO#!kQ`O'#JnO##YQ`O'#DjO##kQ`O'#DjO#%|Q^O'#DjO#&TQWO'#JmO#&]QWO,5:TO#&bQWO'#EqO#&pQWO'#J|O#&xQWO,5;[O#&}Q`O'#DjO#'[Q`O'#EVOOQ?Mr,5:o,5:oO%[Q^O,5:oO#'cQWO,5:oO>wQWO,5;VO!BlQ`O,5;VO!BtQ7[O,5;VO:YQ7[O,5;VO#'kQWO,5@YO#'pQ(CWO,5:sOOQO-E<a-E<aO#(vQ?NQO,5;OOCuQ`O,5:rO#)QQ`O,5:rOCuQ`O,5;OO!BaQ?MxO,5:rOOQ?Mp'#Eg'#EgOOQO,5;O,5;OO%[Q^O,5;OO#)_Q?MxO,5;OO#)jQ?MxO,5;OO!BlQ`O,5:rOOQO,5;U,5;UO#)xQ?MxO,5;OPOOO'#IW'#IWP#*^O#@ItO,58{POOO,58{,58{OOOO-E<W-E<WOOQ?Mr1G.o1G.oOOOO-E<X-E<XO#*iQpO,59zOOOO-E<Z-E<ZOOQ?Mr1G/d1G/dO#*nQrO,5>xO+}Q^O,5>xOOQO,5?O,5?OO#*xQ^O'#I^OOQO-E<[-E<[O#+VQWO,5@WO#+_QrO,5@WO#+fQWO,5@fOOQ?Mr1G/j1G/jO%[Q^O,5@gO#+nQWO'#IdOOQO-E<b-E<bO#+fQWO,5@fOOQ?Mp1G0u1G0uOOQ?Mv1G/u1G/uOOQ?Mv1G0Y1G0YO%[Q^O,5@dO#,SQ?MxO,5@dO#,eQ?MxO,5@dO#,lQWO,5@cO9ZQWO,5@cO#,tQWO,5@cO#-SQWO'#IgO#,lQWO,5@cOOQ?Mp1G0t1G0tO!*VQ`O,5:uO!*bQ`O,5:uOOQO,5:w,5:wO#-tQWO,5:wO#-|Q7[O1G2tO9aQWO1G2tOOQ?Mr1G0r1G0rO#.[Q?NdO1G0rO#/aQ?NbO,5;SOOQ?Mr'#GS'#GSO#/}Q?NdO'#JeO!$hQ^O1G0rO#2VQ7[O'#JoO#2aQWO,5:`O#2fQrO'#JpO%[Q^O'#JpO#2pQWO,5:eOOQ?Mr'#D['#D[OOQ?Mr1G0{1G0{O%[Q^O1G0{OOQ?Mr1G1e1G1eO#2uQWO1G0{O#5^Q?NdO1G0|O#5eQ?NdO1G0|O#8OQ?NdO1G0|O#8VQ?NdO1G0|O#:aQ?NdO1G0|O#:wQ?NdO1G0|O#=qQ?NdO1G0|O#=xQ?NdO1G0|O#@]Q?NdO1G0|O#@jQ?NdO1G0|O#BhQ?NdO1G0|O#EhQ07bO'#ChO#GfQ07bO1G1_O#GmQ07bO'#JkO!,sQWO1G1eO#G}Q?NdO,5?UOOQ?Mp-E<h-E<hO#HqQ?NdO1G0|OOQ?Mr1G0|1G0|O#J|Q?NdO1G1bO#KpQ&jO,5<UO#KxQ&jO,5<VO#LQQ&jO'#FmO#LiQWO'#FlOOQO'#KQ'#KQOOQO'#Ih'#IhO#LnQ&jO1G1lOOQ?Mr1G1l1G1lOOOS1G1w1G1wO#MPQ07bO'#JjO#MZQWO,5<`O!*mQ^O,5<`OOOS-E<g-E<gOOQ?Mr1G1j1G1jO#M`Q`O'#KPOOQ?Mr,5<b,5<bO#MhQ`O,5<bOOQ?Mr,59e,59eO!&kQ7[O'#DPOOOO'#I['#I[O#MmO!0LbO,59iOOQ?Mr,59i,59iO%[Q^O1G1}O!7yQWO'#IlO#MxQ7[O,5<vOOQ?Mr,5<s,5<sO!(ZQ7[O'#IoO#NhQ7[O,5=SO!(ZQ7[O'#IqO$ ZQ7[O,5=UO!&kQ7[O,5=WOOQO1G2P1G2PO$ eQpO'#CqO$ xQ$ISO'#EoO$!wQ`O'#G^O$#eQpO,5<oO$#lQWO'#KTO9ZQWO'#KTO$#zQWO,5<qO!(ZQ7[O,5<pO$$PQWO'#GVO$$bQWO,5<pO$$gQpO'#GSO$$tQpO'#KUO$%OQWO'#KUO!&kQ7[O'#KUO$%TQWO,5<tO$%YQ`O'#G_O!6SQ`O'#G_O$%kQWO'#GaO$%pQWO'#GcO!3mQWO'#GfO$%uQ?MxO'#InO$&QQ`O,5<xOOQ?Mv,5<x,5<xO$&XQ`O'#G_O$&gQ`O'#G`O$&oQ`O'#G`O$&tQ7[O,5=SO$'UQ7[O,5=UOOQ?Mr,5=X,5=XO!(ZQ7[O,5@OO!(ZQ7[O,5@OO$'fQWO'#IsO$'qQWO,5?}O$'yQWO,59`O$(jQ7[O,59qOOQ?Mr,59q,59qO$)]Q7[O,5<gO$*OQ7[O,5<iO@iQWO,5<kOOQ?Mr,5<l,5<lO$*YQWO,5<rO$*_Q7[O,5<wO$*oQWO'#JwO!$hQ^O1G2OO$*tQWO1G2OO9ZQWO'#JzO9ZQWO'#EqO%[Q^O'#EqO9ZQWO'#IuO$*yQ?MxO,5@tOOQU1G2x1G2xOOQU1G4Y1G4YOOQ?Mr1G/y1G/yO!,pQWO1G/yOOQ?Mr1G/w1G/wO$-OQ?NdO1G0UOOQU1G2t1G2tO!&kQ7[O1G2tO%[Q^O1G2tO#.PQWO1G2tO$/SQ7[O'#EhOOQ?Mp,5?|,5?|O$/^Q?MxO,5?|OOQU1G.t1G.tO!BaQ?MxO1G.tO!BlQ`O1G.tO!BtQ7[O1G.tO$/oQWO1G0rO$/tQWO'#ChO$0PQWO'#K^O$0XQWO,5=vO$0^QWO'#K^O$0cQWO'#K^O$0qQWO'#I{O$1PQWO,5@wO$1XQrO1G1gOOQ?Mr1G1i1G1iO9aQWO1G3aO@iQWO1G3aO$1`QWO1G3aO$1eQWO1G3aOOQU1G3a1G3aO!DrQWO1G3PO!&kQ7[O1G2|O$1jQWO1G2|OOQU1G2}1G2}O!&kQ7[O1G2}O$1oQWO1G2}O$1wQ`O'#G{OOQU1G3P1G3PO!6SQ`O'#IwO!DwQpO1G3SOOQU1G3S1G3SOOQU,5=m,5=mO$2PQ7[O,5=oO9aQWO,5=oO$%pQWO,5=qO9UQWO,5=qO!BlQ`O,5=qO!BtQ7[O,5=qO:YQ7[O,5=qO$2_QWO'#K[O$2jQWO,5=rOOQU1G.j1G.jO$2oQ?MxO1G.jO@iQWO1G.jO$2zQWO1G.jO9kQ?MxO1G.jO$5PQrO,5@yO$5aQWO,5@yO9ZQWO,5@yO$5lQ^O,5=yO$5sQWO,5=yOOQU1G3c1G3cO`Q^O1G3cOOQU1G3i1G3iOOQU1G3k1G3kO>rQWO1G3mO$5xQ^O1G3oO$9|Q^O'#HnOOQU1G3r1G3rO$:ZQWO'#HtO>wQWO'#HvOOQU1G3x1G3xO$:cQ^O1G3xO9kQ?MxO1G4OOOQU1G4Q1G4QOOQ?Mp'#GZ'#GZO9kQ?MxO1G4SO9kQ?MxO1G4UO$>jQWO,5@YO!*mQ^O,5;]O9ZQWO,5;]O>wQWO,5:UO!*mQ^O,5:UO!BlQ`O,5:UO$>oQ07bO,5:UOOQO,5;],5;]O$>yQ`O'#I_O$?aQWO,5@XOOQ?Mr1G/o1G/oO$?iQ`O'#IeO$?sQWO,5@hOOQ?Mp1G0v1G0vO##kQ`O,5:UOOQO'#Ib'#IbO$?{Q`O,5:qOOQ?Mv,5:q,5:qO#'fQWO1G0ZOOQ?Mr1G0Z1G0ZO%[Q^O1G0ZOOQ?Mr1G0q1G0qO>wQWO1G0qO!BlQ`O1G0qO!BtQ7[O1G0qOOQ?Mp1G5t1G5tO!BaQ?MxO1G0^OOQO1G0j1G0jO%[Q^O1G0jO$@SQ?MxO1G0jO$@_Q?MxO1G0jO!BlQ`O1G0^OCuQ`O1G0^O$@mQ?MxO1G0jOOQO1G0^1G0^O$ARQ?NdO1G0jPOOO-E<U-E<UPOOO1G.g1G.gOOOO1G/f1G/fO$A]QpO,5<fO$AeQrO1G4dOOQO1G4j1G4jO%[Q^O,5>xO$AoQWO1G5rO$AwQWO1G6QO$BPQrO1G6RO9ZQWO,5?OO$BZQ?NdO1G6OO%[Q^O1G6OO$BkQ?MxO1G6OO$B|QWO1G5}O$B|QWO1G5}O9ZQWO1G5}O$CUQWO,5?RO9ZQWO,5?ROOQO,5?R,5?RO$CjQWO,5?RO$*oQWO,5?ROOQO-E<e-E<eOOQO1G0a1G0aOOQO1G0c1G0cO!,sQWO1G0cOOQU7+(`7+(`O!&kQ7[O7+(`O%[Q^O7+(`O$CxQWO7+(`O$DTQ7[O7+(`O$DcQ?NdO,5=SO$FnQ?NdO,5=UO$HyQ?NdO,5=SO$K[Q?NdO,5=UO$MmQ?NdO,59qO% uQ?NdO,5<gO%$QQ?NdO,5<iO%&]Q?NdO,5<wOOQ?Mr7+&^7+&^O%(nQ?NdO7+&^O%)bQ7[O'#I`O%)lQWO,5@ZOOQ?Mr1G/z1G/zO%)tQ^O'#IaO%*RQWO,5@[O%*ZQrO,5@[OOQ?Mr1G0P1G0PO%*eQWO7+&gOOQ?Mr7+&g7+&gO%*jQ07bO,5:fO%[Q^O7+&yO%*tQ07bO,5:_O%+RQ07bO,5:jO%+]Q07bO,5:lOOQ?Mr7+'P7+'POOQO1G1p1G1pOOQO1G1q1G1qO%+gQtO,5<XO!*mQ^O,5<WOOQO-E<f-E<fOOQ?Mr7+'W7+'WOOOS7+'c7+'cOOOS1G1z1G1zO%+rQWO1G1zOOQ?Mr1G1|1G1|O%+wQpO,59kOOOO-E<Y-E<YOOQ?Mr1G/T1G/TO%,OQ?NdO7+'iOOQ?Mr,5?W,5?WO%,rQpO,5?WOOQ?Mr1G2b1G2bP!&kQ7[O'#IlPOQ?Mr-E<j-E<jO%-bQ7[O,5?ZOOQ?Mr-E<m-E<mO%.TQ7[O,5?]OOQ?Mr-E<o-E<oO%._QpO1G2rO%.fQpO'#CqO%.|Q7[O'#JzO%/TQ^O'#EqOOQ?Mr1G2Z1G2ZO%/_QWO'#IkO%/sQWO,5@oO%/sQWO,5@oO%/{QWO,5@oO%0WQWO,5@oOOQO1G2]1G2]O%0fQ7[O1G2[O!(ZQ7[O1G2[O%0vQ$ISO'#ImO%1TQWO,5@pO!&kQ7[O,5@pO%1]QpO,5@pOOQ?Mr1G2`1G2`OOQ?Mp,5<y,5<yOOQ?Mp,5<z,5<zO$*oQWO,5<zOCfQWO,5<zO!BlQ`O,5<yOOQO'#Gb'#GbO%1gQWO,5<{OOQ?Mp,5<},5<}O$*oQWO,5=QOOQO,5?Y,5?YOOQO-E<l-E<lOOQ?Mv1G2d1G2dO!6SQ`O,5<yO%1oQWO,5<zO$%kQWO,5<{O!6SQ`O,5<zO!(ZQ7[O'#IoO%2cQ7[O1G2nO!(ZQ7[O'#IqO%3UQ7[O1G2pO%3`Q7[O1G5jO%3jQ7[O1G5jOOQO,5?_,5?_OOQO-E<q-E<qOOQO1G.z1G.zO!9jQ`O,59sO%[Q^O,59sO%3wQWO1G2VO!(ZQ7[O1G2^O%3|Q?NdO7+'jOOQ?Mr7+'j7+'jO!$hQ^O7+'jO%4pQWO,5;]OOQ?Mp,5?a,5?aOOQ?Mp-E<s-E<sOOQ?Mr7+%e7+%eO%4uQpO'#KVO#'fQWO7+(`O%5PQrO7+(`O$C{QWO7+(`O%5WQ?NbO'#ChO%5kQ?NbO,5=OO%6]QWO,5=OOOQ?Mp1G5h1G5hOOQU7+$`7+$`O!BaQ?MxO7+$`O!BlQ`O7+$`O!$hQ^O7+&^O%6bQWO'#IzO%6yQWO,5@xOOQO1G3b1G3bO9aQWO,5@xO%6yQWO,5@xO%7RQWO,5@xOOQO,5?g,5?gOOQO-E<y-E<yOOQ?Mr7+'R7+'RO%7WQWO7+({O9kQ?MxO7+({O9aQWO7+({O@iQWO7+({OOQU7+(k7+(kO%7]Q?NbO7+(hO!&kQ7[O7+(hO%7gQpO7+(iOOQU7+(i7+(iO!&kQ7[O7+(iO%7nQWO'#KZO%7yQWO,5=gOOQO,5?c,5?cOOQO-E<u-E<uOOQU7+(n7+(nO%9YQ`O'#HUOOQU1G3Z1G3ZO!&kQ7[O1G3ZO%[Q^O1G3ZO%9aQWO1G3ZO%9lQ7[O1G3ZO9kQ?MxO1G3]O$%pQWO1G3]O9UQWO1G3]O!BlQ`O1G3]O!BtQ7[O1G3]O%9zQWO'#IyO%:`QWO,5@vO%:hQ`O,5@vOOQ?Mp1G3^1G3^OOQU7+$U7+$UO@iQWO7+$UO9kQ?MxO7+$UO%:sQWO7+$UO%[Q^O1G6eO%[Q^O1G6fO%:xQ?MxO1G6eO%;SQ^O1G3eO%;ZQWO1G3eO%;`Q^O1G3eOOQU7+(}7+(}O9kQ?MxO7+)XO`Q^O7+)ZOOQU'#Ka'#KaOOQU'#I|'#I|O%;gQ^O,5>YOOQU,5>Y,5>YO%[Q^O'#HoO%;tQWO'#HqOOQU,5>`,5>`O9ZQWO,5>`OOQU,5>b,5>bOOQU7+)d7+)dOOQU7+)j7+)jOOQU7+)n7+)nOOQU7+)p7+)pO%;yQ`O1G5tO%<_Q07bO1G0wO%<iQWO1G0wOOQO1G/p1G/pO%<tQ07bO1G/pO>wQWO1G/pO!*mQ^O'#DjOOQO,5>y,5>yOOQO-E<]-E<]OOQO,5?P,5?POOQO-E<c-E<cO!BlQ`O1G/pOOQO-E<`-E<`OOQ?Mv1G0]1G0]OOQ?Mr7+%u7+%uO#'fQWO7+%uOOQ?Mr7+&]7+&]O>wQWO7+&]O!BlQ`O7+&]OOQO7+%x7+%xO$ARQ?NdO7+&UOOQO7+&U7+&UO%[Q^O7+&UO%=OQ?MxO7+&UO!BaQ?MxO7+%xO!BlQ`O7+%xO%=ZQ?MxO7+&UO%=iQ?NdO7++jO%[Q^O7++jO%=yQWO7++iO%=yQWO7++iOOQO1G4m1G4mO9ZQWO1G4mO%>RQWO1G4mOOQO7+%}7+%}O#'fQWO<<KzO%5PQrO<<KzO%>aQWO<<KzOOQU<<Kz<<KzO!&kQ7[O<<KzO%[Q^O<<KzO%>iQWO<<KzO%>tQ?NdO,5?ZO%APQ?NdO,5?]O%C[Q?NdO1G2[O%EmQ?NdO1G2nO%GxQ?NdO1G2pO%JTQ7[O,5>zOOQO-E<^-E<^O%J_QrO,5>{O%[Q^O,5>{OOQO-E<_-E<_O%JiQWO1G5vOOQ?Mr<<JR<<JRO%JqQ07bO1G0rO%L{Q07bO1G0|O%MSQ07bO1G0|O& WQ07bO1G0|O& _Q07bO1G0|O&#SQ07bO1G0|O&#jQ07bO1G0|O&%}Q07bO1G0|O&&UQ07bO1G0|O&(SQ07bO1G0|O&(aQ07bO1G0|O&*_Q07bO1G0|O&*rQ?NdO<<JeO&+wQ07bO1G0|O&-mQ07bO'#JeO&/pQ07bO1G1bO&/}Q07bO1G0UO!*mQ^O'#FoOOQO'#KR'#KROOQO1G1s1G1sO&0XQWO1G1rO&0^Q07bO,5?UOOOS7+'f7+'fOOOO1G/V1G/VOOQ?Mr1G4r1G4rO!(ZQ7[O7+(^O&2nQrO'#ChO&2xQWO,5?VO9ZQWO,5?VOOQO-E<i-E<iO&3WQWO1G6ZO&3WQWO1G6ZO&3`QWO1G6ZO&3kQ7[O7+'vO&3{QpO,5?XO&4VQWO,5?XO!&kQ7[O,5?XOOQO-E<k-E<kO&4[QpO1G6[O&4fQWO1G6[OOQ?Mp1G2f1G2fO$*oQWO1G2fOOQ?Mp1G2e1G2eO&4nQWO1G2gO!&kQ7[O1G2gOOQ?Mp1G2l1G2lO!BlQ`O1G2eOCfQWO1G2fO&4sQWO1G2gO&4{QWO1G2fO&5oQ7[O,5?ZOOQ?Mr-E<n-E<nO&6bQ7[O,5?]OOQ?Mr-E<p-E<pO!(ZQ7[O7++UOOQ?Mr1G/_1G/_O&6lQWO1G/_OOQ?Mr7+'q7+'qO&6qQ7[O7+'xO&7RQ?NdO<<KUOOQ?Mr<<KU<<KUO&7uQWO1G0wO!&kQ7[O'#ItO&7zQWO,5@qO!&kQ7[O1G2jOOQU<<Gz<<GzO!BaQ?MxO<<GzO&8SQ?NdO<<IxOOQ?Mr<<Ix<<IxOOQO,5?f,5?fO&8vQWO,5?fO&8{QWO,5?fOOQO-E<x-E<xO&9ZQWO1G6dO&9ZQWO1G6dO9aQWO1G6dO@iQWO<<LgOOQU<<Lg<<LgO&9cQWO<<LgO9kQ?MxO<<LgOOQU<<LS<<LSO%7]Q?NbO<<LSOOQU<<LT<<LTO%7gQpO<<LTO&9hQ`O'#IvO&9sQWO,5@uO!*mQ^O,5@uOOQU1G3R1G3RO%/TQ^O'#JnOOQO'#Ix'#IxO9kQ?MxO'#IxO&9{Q`O,5=pOOQU,5=p,5=pO&:SQ`O'#EdO&:hQWO7+(uO&:mQWO7+(uOOQU7+(u7+(uO!&kQ7[O7+(uO%[Q^O7+(uO&:uQWO7+(uOOQU7+(w7+(wO9kQ?MxO7+(wO$%pQWO7+(wO9UQWO7+(wO!BlQ`O7+(wO&;QQWO,5?eOOQO-E<w-E<wOOQO'#HX'#HXO&;]QWO1G6bO9kQ?MxO<<GpOOQU<<Gp<<GpO@iQWO<<GpO&;eQWO7+,PO&;jQWO7+,QO%[Q^O7+,PO%[Q^O7+,QOOQU7+)P7+)PO&;oQWO7+)PO&;tQ^O7+)PO&;{QWO7+)POOQU<<Ls<<LsOOQU<<Lu<<LuOOQU-E<z-E<zOOQU1G3t1G3tO&<QQWO,5>ZOOQU,5>],5>]O&<VQWO1G3zO9ZQWO7+&cO!*mQ^O7+&cOOQO7+%[7+%[O&<[Q07bO1G6RO>wQWO7+%[OOQ?Mr<<Ia<<IaOOQ?Mr<<Iw<<IwO>wQWO<<IwOOQO<<Ip<<IpO$ARQ?NdO<<IpO%[Q^O<<IpOOQO<<Id<<IdO!BaQ?MxO<<IdO&<fQ?MxO<<IpO&<qQ?NdO<= UO&=RQWO<= TOOQO7+*X7+*XO9ZQWO7+*XOOQUANAfANAfO&=ZQWOANAfO!&kQ7[OANAfO#'fQWOANAfO%5PQrOANAfO%[Q^OANAfO&=cQ?NdO7+'vO&?tQ?NdO,5?ZO&BPQ?NdO,5?]O&D[Q?NdO7+'xO&FmQrO1G4gO&FwQ07bO7+&^O&H{Q07bO,5=SO&KSQ07bO,5=UO&KdQ07bO,5=SO&KtQ07bO,5=UO&LUQ07bO,59qO&NXQ07bO,5<gO'![Q07bO,5<iO'$_Q07bO,5<wO'&TQ07bO7+'iO'&bQ07bO7+'jO'&oQWO,5<ZOOQO7+'^7+'^O'&tQ7[O<<KxOOQO1G4q1G4qO'&{QWO1G4qO''WQWO1G4qO''fQWO7++uO''fQWO7++uO!&kQ7[O1G4sO''nQpO1G4sO''xQWO7++vOOQ?Mp7+(Q7+(QO$*oQWO7+(RO'(QQpO7+(ROOQ?Mp7+(P7+(PO$*oQWO7+(QO'(XQWO7+(RO!&kQ7[O7+(ROCfQWO7+(QO'(^Q7[O<<NpOOQ?Mr7+$y7+$yO'(hQpO,5?`OOQO-E<r-E<rO'(rQ?NbO7+(UOOQUAN=fAN=fO9aQWO1G5QOOQO1G5Q1G5QO')SQWO1G5QO')XQWO7+,OO')XQWO7+,OO9kQ?MxOANBRO@iQWOANBROOQUANBRANBROOQUANAnANAnOOQUANAoANAoO')aQWO,5?bOOQO-E<t-E<tO')lQ07bO1G6aOOQO,5?d,5?dOOQO-E<v-E<vOOQU1G3[1G3[O%/TQ^O,5<{OOQU<<La<<LaO!&kQ7[O<<LaO&:hQWO<<LaO')vQWO<<LaO%[Q^O<<LaOOQU<<Lc<<LcO9kQ?MxO<<LcO$%pQWO<<LcO9UQWO<<LcO'*OQ`O1G5PO'*ZQWO7++|OOQUAN=[AN=[O9kQ?MxOAN=[OOQU<= k<= kOOQU<= l<= lO'*cQWO<= kO'*hQWO<= lOOQU<<Lk<<LkO'*mQWO<<LkO'*rQ^O<<LkOOQU1G3u1G3uO>wQWO7+)fO'*yQWO<<I}O'+UQ07bO<<I}OOQO<<Hv<<HvOOQ?MrAN?cAN?cOOQOAN?[AN?[O$ARQ?NdOAN?[OOQOAN?OAN?OO%[Q^OAN?[OOQO<<Ms<<MsOOQUG27QG27QO!&kQ7[OG27QO#'fQWOG27QO'+`QWOG27QO%5PQrOG27QO'+hQ07bO<<JeO'+uQ07bO1G2[O'-kQ07bO,5?ZO'/nQ07bO,5?]O'1qQ07bO1G2nO'3tQ07bO1G2pO'5wQ07bO<<KUO'6UQ07bO<<IxOOQO1G1u1G1uO!(ZQ7[OANAdOOQO7+*]7+*]O'6cQWO7+*]O'6nQWO<= aO'6vQpO7+*_OOQ?Mp<<Km<<KmO$*oQWO<<KmOOQ?Mp<<Kl<<KlO'7QQpO<<KmO$*oQWO<<KlOOQO7+*l7+*lO9aQWO7+*lO'7XQWO<= jOOQUG27mG27mO9kQ?MxOG27mO!*mQ^O1G4|O'7aQWO7++{O&:hQWOANA{OOQUANA{ANA{O!&kQ7[OANA{O'7iQWOANA{OOQUANA}ANA}O9kQ?MxOANA}O$%pQWOANA}OOQO'#HY'#HYOOQO7+*k7+*kOOQUG22vG22vOOQUANEVANEVOOQUANEWANEWOOQUANBVANBVO'7qQWOANBVOOQU<<MQ<<MQO!*mQ^OAN?iOOQOG24vG24vO$ARQ?NdOG24vO#'fQWOLD,lOOQULD,lLD,lO!&kQ7[OLD,lO'7vQWOLD,lO'8OQ07bO7+'vO'9tQ07bO,5?ZO';wQ07bO,5?]O'=zQ07bO7+'xO'?pQ7[OG27OOOQO<<Mw<<MwOOQ?MpANAXANAXO$*oQWOANAXOOQ?MpANAWANAWOOQO<<NW<<NWOOQULD-XLD-XO'@QQ07bO7+*hOOQUG27gG27gO&:hQWOG27gO!&kQ7[OG27gOOQUG27iG27iO9kQ?MxOG27iOOQUG27qG27qO'@[Q07bOG25TOOQOLD*bLD*bOOQU!$(!W!$(!WO#'fQWO!$(!WO!&kQ7[O!$(!WO'@fQ?NdOG27OOOQ?MpG26sG26sOOQULD-RLD-RO&:hQWOLD-ROOQULD-TLD-TOOQU!)9Er!)9ErO#'fQWO!)9ErOOQU!$(!m!$(!mOOQU!.K;^!.K;^O'BwQ07bOG27OO!*mQ^O'#DzO1PQWO'#EXO'DmQrO'#JjO'DtQMnO'#DsO'D{Q^O'#EOO'ESQrO'#ChO'GjQrO'#ChO!*mQ^O'#EQO'GzQ^O,5;WO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O,5;bO!*mQ^O'#IjO'I}QWO,5<fO'JVQ7[O,5;bO'KpQ7[O,5;bO!*mQ^O,5;vO!&kQ7[O'#GhO'JVQ7[O'#GhO!&kQ7[O'#GjO'JVQ7[O'#GjO1SQWO'#DVO1SQWO'#DVO!&kQ7[O'#F{O'JVQ7[O'#F{O!&kQ7[O'#F}O'JVQ7[O'#F}O!&kQ7[O'#G]O'JVQ7[O'#G]O!*mQ^O,5:jO'KwQ`O'#D[O!*mQ^O,5@gO'GzQ^O1G0rO'LRQ07bO'#ChO!*mQ^O1G1}O!&kQ7[O'#IoO'JVQ7[O'#IoO!&kQ7[O'#IqO'JVQ7[O'#IqO'L]QpO'#CqO!&kQ7[O,5<pO'JVQ7[O,5<pO'GzQ^O1G2OO!*mQ^O7+&yO!&kQ7[O1G2[O'JVQ7[O1G2[O!&kQ7[O'#IoO'JVQ7[O'#IoO!&kQ7[O'#IqO'JVQ7[O'#IqO!&kQ7[O1G2^O'JVQ7[O1G2^O'GzQ^O7+'jO'GzQ^O7+&^O!&kQ7[OANAdO'JVQ7[OANAdO'LpQWO'#ElO'LuQWO'#ElO'L}QWO'#F[O'MSQWO'#EvO'MXQWO'#J{O'MdQWO'#JyO'MoQWO,5;WO'MtQ7[O,5<cO'M{QWO'#GUO'NQQWO'#GUO'NVQWO,5<dO'N_QWO,5;WO'NgQ07bO1G1_O'NnQWO,5<pO'NsQWO,5<pO'NxQWO,5<rO'N}QWO,5<rO( SQWO1G2OO( XQWO1G0rO( ^Q7[O<<KxO( eQ7[O<<KxO7hQ7[O'#FyO9UQWO'#FxOAdQWO'#EkO!*mQ^O,5;sO!3mQWO'#GUO!3mQWO'#GUO!3mQWO'#GWO!3mQWO'#GWO!(ZQ7[O7+(^O!(ZQ7[O7+(^O%._QpO1G2rO%._QpO1G2rO!&kQ7[O,5=WO!&kQ7[O,5=W",
    stateData: "(!i~O'uOS'vOSSOS'wRQ~OPYOQYORfOX!VO`qOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O#t!PO$U|O%c}O%e!QO%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO%t!UO&Q!WO&W!XO&Y!YO&[!ZO&^![O&a!]O&g!^O&m!_O&o!`O&q!aO&s!bO&u!cO'|SO(OTO(RUO(YVO(h[O(viO~OVtO~P`OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~O`!wOo!nO!P!oO!_!yO!`!vO!a!vO!|:lO#Q!pO#R!pO#S!xO#T!pO#U!pO#X!zO#Y!zO'}!lO(OTO(RUO(]!mO(h!sO~O'w!{O~OP[XZ[X`[Xn[X|[X}[X!P[X!Y[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X's[X(Y[X(j[X(q[X(r[X~O!d$}X~P(qO^!}O(O#PO(P!}O(Q#PO~O^#QO(Q#PO(R#PO(S#QO~Ot#SO!R#TO(Z#TO([#VO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|:pO(OTO(RUO(YVO(h[O(viO~O!X#ZO!Y#WO!V(`P!V(nP~P+}O!Z#cO~P`OPYOQYORfOc!jOd!iOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO(OTO(RUO(YVO(h[O(viO~Ol#mO!X#iO!|]O#f#lO#g#iO'|:qO!k(kP~P.iO!l#oO'|#nO~O!x#sO!|]O%c#tO~O#h#uO~O!d#vO#h#uO~OP$^OZ$eOn$RO|#zO}#{O!P#|O!Y$bO!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O`(^X's(^X'q(^X!k(^X!V(^X![(^X%d(^X!d(^X~P1qO#]$fO$P$fOP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X![(_X%d(_X~O`(_X!j(_X's(_X'q(_X!V(_X!k(_Xr(_X!d(_X~P4XO#]$fO~O$Z$hO$]$gO$d$mO~ORfO![$nO$g$oO$i$qO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz%[O!P$|O![$}O!f%aO!l$yO#g%bO$U%_O$p%]O$r%^O$u%`O'|$sO(OTO(RUO(Y$vO(q%OO(r%QOf(VP~O!l%cO~O!P%fO![%gO'|%eO~O!d%kO~O`%lO's%lO~O|%pO~P%[O'}!lO~P%[O%i%tO~P%[Og%WO!l%cO'|%eO'}!lO~Od%{O!l%cO'|%eO~O#s$TO~O|&QO![%}O!l&PO%e&TO'|%eO'}!lO(OTO(RUO_)PP~O!x#sO~O%n&VO!P({X![({X'|({X~O'|&WO~O!u&]O#t!PO%e!QO%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO~Oc&bOd&aO!x&_O%c&`O%v&^O~P<POc&eOdyO![&dO!u&]O!xxO!|]O#t!PO%c}O%g!OO%h!OO%i!OO%l!RO%n!SO%q!TO%r!TO%t!UO~Oa&hO#]&kO%e&fO'}!lO~P=UO!l&lO!u&pO~O!l#oO~O![XO~O`%lO'r&xO's%lO~O`%lO'r&{O's%lO~O`%lO'r&}O's%lO~O'q[X!V[Xr[X!k[X&U[X![[X%d[X!d[X~P(qO!_'[O!`'TO!a'TO'}!lO(OTO(RUO~Oo'RO!P'QO!X'UO(]'PO!Z(aP!Z(pP~P@]Oj'_O![']O'|%eO~Od'dO!l%cO'|%eO~O|&QO!l&PO~Oo!nO!P!oO!|:lO#Q!pO#R!pO#T!pO#U!pO'}!lO(OTO(RUO(]!mO(h!sO~O!_'jO!`'iO!a'iO#S!pO#X'kO#Y'kO~PAwO`%lOg%WO!d#vO!l%cO's%lO(j'mO~O!p'qO#]'oO~PCVOo!nO!P!oO(OTO(RUO(]!mO(h!sO~O![XOo(fX!P(fX!_(fX!`(fX!a(fX!|(fX#Q(fX#R(fX#S(fX#T(fX#U(fX#X(fX#Y(fX'}(fX(O(fX(R(fX(](fX(h(fX~O!`'iO!a'iO'}!lO~PCuO'x'uO'y'uO'z'wO~O^!}O(O'yO(P!}O(Q'yO~O^#QO(Q'yO(R'yO(S#QO~Ot#SO!R#TO(Z#TO(['}O~O!X(PO!V'QX!V'WX!Y'QX!Y'WX~P+}O!Y(RO!V(`X~OP$^OZ$eOn$RO|#zO}#{O!P#|O!Y(RO!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O!V(`X~PGiO!V(WO~O!V(mX!Y(mX!d(mX!k(mX(j(mX~O#](mX#h#aX!Z(mX~PIoO#](XO!V(oX!Y(oX~O!Y(YO!V(nX~O!V(]O~O#]$fO~PIoO!Z(^O~P`O|#zO}#{O!P#|O!j#xO!l#yO(YVOP!naZ!nan!na!Y!na!i!na!p!na#k!na#l!na#m!na#n!na#o!na#p!na#q!na#r!na#s!na#u!na#w!na#y!na#z!na(j!na(q!na(r!na~O`!na's!na'q!na!V!na!k!nar!na![!na%d!na!d!na~PKVO!k(_O~O!d#vO#](`O(j'mO!Y(lX`(lX's(lX~O!k(lX~PMuO!P%fO![%gO!|]O#f(eO#g(dO'|%eO~O!Y(fO!k(kX~O!k(hO~O!P%fO![%gO#g(dO'|%eO~OP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!j(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X~O!d#vO!k(_X~P! cO|(iO}(jO!j#xO!l#yO!|!{a!P!{a~O!x!{a%c!{a![!{a#f!{a#g!{a'|!{a~P!#gO!x(nO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![XO!fuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~O#h(tO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz%[O!P$|O![$}O!f%aO!l$yO#g%bO$U%_O$p%]O$r%^O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~Of(cP~P!(ZO!X(xO!k(dP~P%[O(](zO(h[O~O!P(|O!l#yO(](zO(h[O~OP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![!eO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO'|)[O(OTO(RUO(YVO(h[O(v<dO~O})_O!l#yO~O!Y$bO`$na's$na'q$na!k$na!V$na![$na%d$na!d$na~O#t)cO~P!&kO|)fO!d)eO![$[X$X$[X$Z$[X$]$[X$d$[X~O!d)eO![(sX$X(sX$Z(sX$](sX$d(sX~O|)fO~P!.VO|)fO![(sX$X(sX$Z(sX$](sX$d(sX~O![)hO$X)lO$Z)gO$])gO$d)mO~O!X)pO~P!*mO$Z$hO$]$gO$d)tO~Oj$vX|$vX!P$vX!j$vX(q$vX(r$vX~OfiXf$vXjiX!YiX#]iX~P!/{Oo)vO~Ot)wO(Z)xO([)zO~Oj*TO|)|O!P)}O(q%OO(r%QO~Of){O~P!1UOf*UO~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P*WO![*XO!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O(OTO(RUO(Y$vO(q%OO(r%QO~O!X*[O'|*VO!k(wP~P!1sO#h*^O~O!l*_O~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O'|*aO(OTO(RUO(Y$vO(q%OO(r%QO~O!X*dO!V(xP~P!3rOn*pO!P*hO!_*nO!`*gO!a*gO!l*_O#X*oO%Z*jO'}!lO(]!mO~O!Z*mO~P!5gO!j#xOj(XX|(XX!P(XX(q(XX(r(XX!Y(XX#](XX~Of(XX#}(XX~P!6`Oj*uO#]*tOf(WX!Y(WX~O!Y*vOf(VX~O'|&WOf(VP~O!l*}O~O'|(rO~Ol+RO!P%fO!X#iO![%gO!|]O#f#lO#g#iO'|%eO!k(kP~O!d#vO#h+SO~O!P%fO!X+UO!Y(YO![%gO'|%eO!V(nP~Oo'XO!P+WO!X+VO(OTO(RUO(](zO~O!Z(pP~P!9ZO!Y+XO`(|X's(|X~OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO#z$ZO(YVO(j$[O(q#}O(r$OO~O`!ga!Y!ga's!ga'q!ga!V!ga!k!gar!ga![!ga%d!ga!d!ga~P!:RO|#zO}#{O!P#|O!j#xO!l#yO(YVOP!raZ!ran!ra!Y!ra!i!ra!p!ra#k!ra#l!ra#m!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#u!ra#w!ra#y!ra#z!ra(j!ra(q!ra(r!ra~O`!ra's!ra'q!ra!V!ra!k!rar!ra![!ra%d!ra!d!ra~P!<lO|#zO}#{O!P#|O!j#xO!l#yO(YVOP!taZ!tan!ta!Y!ta!i!ta!p!ta#k!ta#l!ta#m!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#u!ta#w!ta#y!ta#z!ta(j!ta(q!ta(r!ta~O`!ta's!ta'q!ta!V!ta!k!tar!ta![!ta%d!ta!d!ta~P!?VOg%WOj+cO![']O%d+bO~O!d+eO`(UX![(UX's(UX!Y(UX~O`%lO![XO's%lO~Og%WO!l%cO~Og%WO!l%cO'|%eO~O!d#vO#h(tO~Oa+pO%e+qO'|+mO(OTO(RUO!Z)QP~O!Y+rO_)PX~OZ+vO~O_+wO~O![%}O'|%eO'}!lO_)PP~Og%WO#]+|O~Og%WOj,PO![$}O~O![,RO~O|,TO![XO~O%i%tO~O!x,YO~Od,_O~Oa,`O'|#nO(OTO(RUO!Z)OP~Od%{O~O%e!QO'|&WO~P=UOZ,eO_,dO~OPYOQYORfOczOdyOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO!fuO!lZO!oYO!pYO!qYO!svO!xxO!|]O%c}O(OTO(RUO(YVO(h[O(viO~O![!eO!u!gO$U!kO'|!dO~P!FYO_,dO`%lO's%lO~OPYOQYORfOc!jOd!iOlkOnYOokOpkOvkOxYOzYO!PWO!TkO!UkO![!eO!fuO!lZO!oYO!pYO!qYO!svO!x!hO$U!kO'|!dO(OTO(RUO(YVO(h[O(viO~O`,jO!uwO#t!OO%g!OO%h!OO%i!OO~P!HrO!l&lO~O&W,pO~O![,rO~O&i,tO&k,uOP&faQ&faR&faX&fa`&fac&fad&fal&fan&fao&fap&fav&fax&faz&fa!P&fa!T&fa!U&fa![&fa!f&fa!l&fa!o&fa!p&fa!q&fa!s&fa!u&fa!x&fa!|&fa#t&fa$U&fa%c&fa%e&fa%g&fa%h&fa%i&fa%l&fa%n&fa%q&fa%r&fa%t&fa&Q&fa&W&fa&Y&fa&[&fa&^&fa&a&fa&g&fa&m&fa&o&fa&q&fa&s&fa&u&fa'q&fa'|&fa(O&fa(R&fa(Y&fa(h&fa(v&fa!Z&fa&_&faa&fa&d&fa~O'|,zO~Og!bX!Y!OX!Z!OX!d!OX!d!bX!l!bX#]!OX~O!Y!bX!Z!bX~P# xO!d-PO#]-OOg(bX!Y#eX!Y(bX!Z#eX!Z(bX!d(bX!l(bX~Og%WO!d-RO!l%cO!Y!^X!Z!^X~Oo!nO!P!oO(OTO(RUO(]!mO~OP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![!eO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO(OTO(RUO(YVO(h[O(v<dO~O'|;fO~P##|O!Y-VO!Z(aX~O!Z-XO~O!d-PO#]-OO!Y#eX!Z#eX~O!Y-YO!Z(pX~O!Z-[O~O!`-]O!a-]O'}!lO~P##kO!Z-`O~P'_Oj-cO![']O~O!V-hO~Oo!{a!_!{a!`!{a!a!{a#Q!{a#R!{a#S!{a#T!{a#U!{a#X!{a#Y!{a'}!{a(O!{a(R!{a(]!{a(h!{a~P!#gO!p-mO#]-kO~PCVO!`-oO!a-oO'}!lO~PCuO`%lO#]-kO's%lO~O`%lO!d#vO#]-kO's%lO~O`%lO!d#vO!p-mO#]-kO's%lO(j'mO~O'x'uO'y'uO'z-tO~Or-uO~O!V'Qa!Y'Qa~P!:RO!X-yO!V'QX!Y'QX~P%[O!Y(RO!V(`a~O!V(`a~PGiO!Y(YO!V(na~O!P%fO!X-}O![%gO'|%eO!V'WX!Y'WX~O#].PO!Y(la!k(la`(la's(la~O!d#vO~P#,SO!Y(fO!k(ka~O!P%fO![%gO#g.TO'|%eO~Ol.YO!P%fO!X.VO![%gO!|]O#f.XO#g.VO'|%eO!Y'ZX!k'ZX~O}.^O!l#yO~Og%WOj.aO![']O%d.`O~O`#`i!Y#`i's#`i'q#`i!V#`i!k#`ir#`i![#`i%d#`i!d#`i~P!:ROj<pO|)|O!P)}O(q%OO(r%QO~O#h#[a`#[a#]#[a's#[a!Y#[a!k#[a![#[a!V#[a~P#/OO#h(XXP(XXZ(XX`(XXn(XX}(XX!i(XX!l(XX!p(XX#k(XX#l(XX#m(XX#n(XX#o(XX#p(XX#q(XX#r(XX#s(XX#u(XX#w(XX#y(XX#z(XX's(XX(Y(XX(j(XX!k(XX!V(XX'q(XXr(XX![(XX%d(XX!d(XX~P!6`O!Y.nOf(cX~P!1UOf.pO~O!Y.qO!k(dX~P!:RO!k.tO~O!V.vO~OP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O(YVOZ#ji`#jin#ji!Y#ji!i#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#k#ji~P#2zO#k$PO~P#2zOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO(YVOZ#ji`#ji!Y#ji!i#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~On#ji~P#5lOn$RO~P#5lOP$^On$RO|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO(YVO`#ji!Y#ji#u#ji#w#ji#y#ji#z#ji's#ji(j#ji(q#ji(r#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~OZ#ji!i#ji#p#ji#q#ji#r#ji#s#ji~P#8^OZ$eO!i$TO#p$TO#q$TO#r$dO#s$TO~P#8^OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO(YVO(r$OO`#ji!Y#ji#y#ji#z#ji's#ji(j#ji(q#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#w$WO~P#;_O#w#ji~P#;_OP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO(YVO`#ji!Y#ji#y#ji#z#ji's#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~O#w#ji(q#ji(r#ji~P#>PO#w$WO(q#}O(r$OO~P#>POP$^OZ$eOn$RO|#zO}#{O!P#|O!i$TO!j#xO!l#yO!p$^O#k$PO#l$QO#m$QO#n$QO#o$SO#p$TO#q$TO#r$dO#s$TO#u$UO#w$WO#y$YO(YVO(q#}O(r$OO~O`#ji!Y#ji#z#ji's#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~P#@wOP[XZ[Xn[X|[X}[X!P[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X!Y[X!Z[X~O#}[X~P#CbOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O#z;OO(YVO(j$[O(q#}O(r$OO~O#}.xO~P#EoO#];TO$P;TO#}(_X!Z(_X~P! cO`'^a!Y'^a's'^a'q'^a!k'^a!V'^ar'^a!['^a%d'^a!d'^a~P!:ROP#jiZ#ji`#jin#ji}#ji!Y#ji!i#ji!j#ji!l#ji!p#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji's#ji(Y#ji(j#ji'q#ji!V#ji!k#jir#ji![#ji%d#ji!d#ji~P#/OO`$Oi!Y$Oi's$Oi'q$Oi!V$Oi!k$Oir$Oi![$Oi%d$Oi!d$Oi~P!:RO$Z.}O$].}O~O$Z/OO$]/OO~O!d)eO#]/PO![$aX$X$aX$Z$aX$]$aX$d$aX~O!X/QO~O![)hO$X/SO$Z)gO$])gO$d/TO~O!Y;PO!Z(^X~P#EoO!Z/UO~O!d)eO$d(sX~O$d/WO~Ot)wO(Z)xO([/ZO~O!V/_O~P!&kO(q%OOj%[a|%[a!P%[a(r%[a!Y%[a#]%[a~Of%[a#}%[a~P#NPO(r%QOj%^a|%^a!P%^a(q%^a!Y%^a#]%^a~Of%^a#}%^a~P#NrO!YeX!deX!keX!k$vX(jeX~P!/{O!X/hO!Y(YO'|/gO!V(nP!V(xP~P!1sOn*pO!_*nO!`*gO!a*gO!l*_O#X*oO%Z*jO'}!lO~Oo'XO!P/iO!X+VO!Z*mO(OTO(RUO(];cO!Z(pP~P$!]O!k/jO~P#/OO!Y/kO!d#vO(j'mO!k(wX~O!k/pO~O!P%fO!X*[O![%gO'|%eO!k(wP~O#h/rO~O!V$vX!Y$vX!d$}X~P!/{O!Y/sO!V(xX~P#/OO!d/uO~O!V/wO~Og%WOn/{O!d#vO!l%cO(j'mO~O'|/}O~O!d+eO~O`%lO!Y0RO's%lO~O!Z0TO~P!5gO!`0UO!a0UO'}!lO(]!mO~O!P0WO(]!mO~O#X0XO~Of%[a!Y%[a#]%[a#}%[a~P!1UOf%^a!Y%^a#]%^a#}%^a~P!1UO'|&WOf'gX!Y'gX~O!Y*vOf(Va~Of0bO~O|0cO}0cO!P0dOjya(qya(rya!Yya#]ya~Ofya#}ya~P$(OO|)|O!P)}Oj$oa(q$oa(r$oa!Y$oa#]$oa~Of$oa#}$oa~P$(tO|)|O!P)}Oj$qa(q$qa(r$qa!Y$qa#]$qa~Of$qa#}$qa~P$)gO#h0fO~Of%Pa!Y%Pa#]%Pa#}%Pa~P!1UO!d#vO~O#h0iO~O!Y+XO`(|a's(|a~O|#zO}#{O!P#|O!j#xO!l#yO(YVOP!riZ!rin!ri!Y!ri!i!ri!p!ri#k!ri#l!ri#m!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#u!ri#w!ri#y!ri#z!ri(j!ri(q!ri(r!ri~O`!ri's!ri'q!ri!V!ri!k!rir!ri![!ri%d!ri!d!ri~P$+UOg%WOn$uOo$tOp$tOv%YOx%ZOz;YO!P$|O![$}O!f<jO!l$yO#g;`O$U%_O$p;[O$r;^O$u%`O(OTO(RUO(Y$vO(q%OO(r%QO~Ol0sO'|0rO~P$-oO!d+eO`(Ua![(Ua's(Ua!Y(Ua~O#h0yO~OZ[X!YeX!ZeX~O!Y0zO!Z)QX~O!Z0|O~OZ0}O~Oa1PO'|+mO(OTO(RUO~O![%}O'|%eO_'oX!Y'oX~O!Y+rO_)Pa~O!k1SO~P!:ROZ1VO~O_1WO~O#]1ZO~Oj1^O![$}O~O(](zO!Z(}P~Og%WOj1gO![1dO%d1fO~OZ1qO!Y1oO!Z)OX~O!Z1rO~O_1tO`%lO's%lO~O'|#nO(OTO(RUO~O#]$fO$P$fOP(_XZ(_Xn(_X|(_X}(_X!P(_X!Y(_X!i(_X!l(_X!p(_X#k(_X#l(_X#m(_X#n(_X#o(_X#p(_X#q(_X#r(_X#u(_X#w(_X#y(_X#z(_X(Y(_X(j(_X(q(_X(r(_X~O#s1wO&U1xO`(_X!j(_X~P$3VO#]$fO#s1wO&U1xO~O`1zO~P%[O`1|O~O&_2POP&]iQ&]iR&]iX&]i`&]ic&]id&]il&]in&]io&]ip&]iv&]ix&]iz&]i!P&]i!T&]i!U&]i![&]i!f&]i!l&]i!o&]i!p&]i!q&]i!s&]i!u&]i!x&]i!|&]i#t&]i$U&]i%c&]i%e&]i%g&]i%h&]i%i&]i%l&]i%n&]i%q&]i%r&]i%t&]i&Q&]i&W&]i&Y&]i&[&]i&^&]i&a&]i&g&]i&m&]i&o&]i&q&]i&s&]i&u&]i'q&]i'|&]i(O&]i(R&]i(Y&]i(h&]i(v&]i!Z&]ia&]i&d&]i~Oa2VO!Z2TO&d2UO~P`O![XO!l2XO~O&k,uOP&fiQ&fiR&fiX&fi`&fic&fid&fil&fin&fio&fip&fiv&fix&fiz&fi!P&fi!T&fi!U&fi![&fi!f&fi!l&fi!o&fi!p&fi!q&fi!s&fi!u&fi!x&fi!|&fi#t&fi$U&fi%c&fi%e&fi%g&fi%h&fi%i&fi%l&fi%n&fi%q&fi%r&fi%t&fi&Q&fi&W&fi&Y&fi&[&fi&^&fi&a&fi&g&fi&m&fi&o&fi&q&fi&s&fi&u&fi'q&fi'|&fi(O&fi(R&fi(Y&fi(h&fi(v&fi!Z&fi&_&fia&fi&d&fi~O!V2_O~O!Y!^a!Z!^a~P#EoOo!nO!P!oO!X2eO(]!mO!Y'RX!Z'RX~P@]O!Y-VO!Z(aa~O!Y'XX!Z'XX~P!9ZO!Y-YO!Z(pa~O!Z2lO~P'_O`%lO#]2uO's%lO~O`%lO!d#vO#]2uO's%lO~O`%lO!d#vO!p2yO#]2uO's%lO(j'mO~O`%lO's%lO~P!:RO!Y$bOr$na~O!V'Qi!Y'Qi~P!:RO!Y(RO!V(`i~O!Y(YO!V(ni~O!V(oi!Y(oi~P!:RO!Y(li!k(li`(li's(li~P!:RO#]2{O!Y(li!k(li`(li's(li~O!Y(fO!k(ki~O!P%fO![%gO!|]O#f3QO#g3PO'|%eO~O!P%fO![%gO#g3PO'|%eO~Oj3XO![']O%d3WO~Og%WOj3XO![']O%d3WO~O#h%[aP%[aZ%[a`%[an%[a}%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a's%[a(Y%[a(j%[a!k%[a!V%[a'q%[ar%[a![%[a%d%[a!d%[a~P#NPO#h%^aP%^aZ%^a`%^an%^a}%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a's%^a(Y%^a(j%^a!k%^a!V%^a'q%^ar%^a![%^a%d%^a!d%^a~P#NrO#h%[aP%[aZ%[a`%[an%[a}%[a!Y%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a's%[a(Y%[a(j%[a!k%[a!V%[a'q%[a#]%[ar%[a![%[a%d%[a!d%[a~P#/OO#h%^aP%^aZ%^a`%^an%^a}%^a!Y%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a's%^a(Y%^a(j%^a!k%^a!V%^a'q%^a#]%^ar%^a![%^a%d%^a!d%^a~P#/OO#hyaPyaZya`yanya!iya!jya!lya!pya#kya#lya#mya#nya#oya#pya#qya#rya#sya#uya#wya#yya#zya'sya(Yya(jya!kya!Vya'qyarya![ya%dya!dya~P$(OO#h$oaP$oaZ$oa`$oan$oa}$oa!i$oa!j$oa!l$oa!p$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#q$oa#r$oa#s$oa#u$oa#w$oa#y$oa#z$oa's$oa(Y$oa(j$oa!k$oa!V$oa'q$oar$oa![$oa%d$oa!d$oa~P$(tO#h$qaP$qaZ$qa`$qan$qa}$qa!i$qa!j$qa!l$qa!p$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa's$qa(Y$qa(j$qa!k$qa!V$qa'q$qar$qa![$qa%d$qa!d$qa~P$)gO#h%PaP%PaZ%Pa`%Pan%Pa}%Pa!Y%Pa!i%Pa!j%Pa!l%Pa!p%Pa#k%Pa#l%Pa#m%Pa#n%Pa#o%Pa#p%Pa#q%Pa#r%Pa#s%Pa#u%Pa#w%Pa#y%Pa#z%Pa's%Pa(Y%Pa(j%Pa!k%Pa!V%Pa'q%Pa#]%Par%Pa![%Pa%d%Pa!d%Pa~P#/OO`#`q!Y#`q's#`q'q#`q!V#`q!k#`qr#`q![#`q%d#`q!d#`q~P!:ROf'SX!Y'SX~P!(ZO!Y.nOf(ca~O!X3cO!Y'TX!k'TX~P%[O!Y.qO!k(da~O!Y.qO!k(da~P!:RO!V3fO~O#}!na!Z!na~PKVO#}!ga!Y!ga!Z!ga~P#EoO#}!ra!Z!ra~P!<lO#}!ta!Z!ta~P!?VORfO![3xO$b3yO~O!Z3}O~Or4OO~P#/OO`$kq!Y$kq's$kq'q$kq!V$kq!k$kqr$kq![$kq%d$kq!d$kq~P!:RO!V4PO~P#/OO|)|O!P)}O(r%QOj'ca(q'ca!Y'ca#]'ca~Of'ca#}'ca~P%,yO|)|O!P)}Oj'ea(q'ea(r'ea!Y'ea#]'ea~Of'ea#}'ea~P%-lO(j$[O~P#/OO!VeX!V$vX!YeX!Y$vX!d$}X#]eX~P!/{O'|;lO~P!1sOlkO'|4RO~P.iO!P%fO!X4TO![%gO'|%eO!Y'_X!k'_X~O!Y/kO!k(wa~O!Y/kO!d#vO!k(wa~O!Y/kO!d#vO(j'mO!k(wa~Of$xi!Y$xi#]$xi#}$xi~P!1UO!X4]O!V'aX!Y'aX~P!3rO!Y/sO!V(xa~O!Y/sO!V(xa~P#/OO!d#vO#s4eO~On4hO!d#vO(j'mO~O(q%OOj%[i|%[i!P%[i(r%[i!Y%[i#]%[i~Of%[i#}%[i~P%1zO(r%QOj%^i|%^i!P%^i(q%^i!Y%^i#]%^i~Of%^i#}%^i~P%2mOf(Wi!Y(Wi~P!1UO#]4oOf(Wi!Y(Wi~P!1UO!k4rO~O`$lq!Y$lq's$lq'q$lq!V$lq!k$lqr$lq![$lq%d$lq!d$lq~P!:RO!V4vO~O!Y4wO![(yX~P#/OO!j#xO~P4XO`$vX![$vX%X[X's$vX!Y$vX~P!/{O%X4yO`kXjkX|kX!PkX![kX'skX(qkX(rkX!YkX~O%X4yO~Oa5PO%e5QO'|+mO(OTO(RUO!Y'nX!Z'nX~O!Y0zO!Z)Qa~OZ5UO~O_5VO~O`%lO's%lO~P#/OO![$}O~P#/OO!Y5_O#]5aO!Z(}X~O!Z5bO~Oo!nO!P5cO!_!yO!`!vO!a!vO!|:lO#Q!pO#R!pO#S!pO#T!pO#U!pO#X5hO#Y!zO'}!lO(OTO(RUO(]!mO(h!sO~O!Z5gO~P%8OOj5mO![1dO%d5lO~Og%WOj5mO![1dO%d5lO~Oa5tO'|#nO(OTO(RUO!Y'mX!Z'mX~O!Y1oO!Z)Oa~O(OTO(RUO(]5vO~O_5zO~O#s5}O&U6OO~PMuO!k6PO~P%[O`6RO~O`6RO~P%[Oa2VO!Z6WO&d2UO~P`O!d6YO~O!d6[Og(bi!Y(bi!Z(bi!d(bi!l(bi~O!Y#ei!Z#ei~P#EoO#]6]O!Y#ei!Z#ei~O!Y!^i!Z!^i~P#EoO`%lO#]6fO's%lO~O`%lO!d#vO#]6fO's%lO~O!Y(lq!k(lq`(lq's(lq~P!:RO!Y(fO!k(kq~O!P%fO![%gO#g6mO'|%eO~O![']O%d6pO~Oj6sO![']O%d6pO~O#h'caP'caZ'ca`'can'ca}'ca!i'ca!j'ca!l'ca!p'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#s'ca#u'ca#w'ca#y'ca#z'ca's'ca(Y'ca(j'ca!k'ca!V'ca'q'car'ca!['ca%d'ca!d'ca~P%,yO#h'eaP'eaZ'ea`'ean'ea}'ea!i'ea!j'ea!l'ea!p'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea's'ea(Y'ea(j'ea!k'ea!V'ea'q'ear'ea!['ea%d'ea!d'ea~P%-lO#h$xiP$xiZ$xi`$xin$xi}$xi!Y$xi!i$xi!j$xi!l$xi!p$xi#k$xi#l$xi#m$xi#n$xi#o$xi#p$xi#q$xi#r$xi#s$xi#u$xi#w$xi#y$xi#z$xi's$xi(Y$xi(j$xi!k$xi!V$xi'q$xi#]$xir$xi![$xi%d$xi!d$xi~P#/OO#h%[iP%[iZ%[i`%[in%[i}%[i!i%[i!j%[i!l%[i!p%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#q%[i#r%[i#s%[i#u%[i#w%[i#y%[i#z%[i's%[i(Y%[i(j%[i!k%[i!V%[i'q%[ir%[i![%[i%d%[i!d%[i~P%1zO#h%^iP%^iZ%^i`%^in%^i}%^i!i%^i!j%^i!l%^i!p%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i's%^i(Y%^i(j%^i!k%^i!V%^i'q%^ir%^i![%^i%d%^i!d%^i~P%2mOf'Sa!Y'Sa~P!1UO!Y'Ta!k'Ta~P!:RO!Y.qO!k(di~O#}#`i!Y#`i!Z#`i~P#EoOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O(YVOZ#jin#ji!i#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~O#k#ji~P%KOO#k:tO~P%KOOP$^O|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO(YVOZ#ji!i#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~On#ji~P%MZOn:vO~P%MZOP$^On:vO|#zO}#{O!P#|O!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO(YVO#u#ji#w#ji#y#ji#z#ji#}#ji(j#ji(q#ji(r#ji!Y#ji!Z#ji~OZ#ji!i#ji#p#ji#q#ji#r#ji#s#ji~P& fOZ;SO!i:xO#p:xO#q:xO#r;RO#s:xO~P& fOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO(YVO(r$OO#y#ji#z#ji#}#ji(j#ji(q#ji!Y#ji!Z#ji~O#w:{O~P&$QO#w#ji~P&$QOP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO(YVO#y#ji#z#ji#}#ji(j#ji!Y#ji!Z#ji~O#w#ji(q#ji(r#ji~P&&]O#w:{O(q#}O(r$OO~P&&]OP$^OZ;SOn:vO|#zO}#{O!P#|O!i:xO!j#xO!l#yO!p$^O#k:tO#l:uO#m:uO#n:uO#o:wO#p:xO#q:xO#r;RO#s:xO#u:yO#w:{O#y:}O(YVO(q#}O(r$OO~O#z#ji#}#ji(j#ji!Y#ji!Z#ji~P&(nO`#{y!Y#{y's#{y'q#{y!V#{y!k#{yr#{y![#{y%d#{y!d#{y~P!:ROj<qO|)|O!P)}O(q%OO(r%QO~OP#jiZ#jin#ji}#ji!i#ji!j#ji!l#ji!p#ji#k#ji#l#ji#m#ji#n#ji#o#ji#p#ji#q#ji#r#ji#s#ji#u#ji#w#ji#y#ji#z#ji#}#ji(Y#ji(j#ji!Y#ji!Z#ji~P&+fO!j#xOP(XXZ(XXj(XXn(XX|(XX}(XX!P(XX!i(XX!l(XX!p(XX#k(XX#l(XX#m(XX#n(XX#o(XX#p(XX#q(XX#r(XX#s(XX#u(XX#w(XX#y(XX#z(XX#}(XX(Y(XX(j(XX(q(XX(r(XX!Y(XX!Z(XX~O#}$Oi!Y$Oi!Z$Oi~P#EoO#}!ri!Z!ri~P$+UO!Z7VO~O!Y'^a!Z'^a~P#EoOP[XZ[Xn[X|[X}[X!P[X!V[X!Y[X!i[X!j[X!l[X!p[X#][X#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X~O!d%UX#s%UX~P&0hO!d#vO(j'mO!Y'_a!k'_a~O!Y/kO!k(wi~O!Y/kO!d#vO!k(wi~Of$xq!Y$xq#]$xq#}$xq~P!1UO!V'aa!Y'aa~P#/OO!d7^O~O!Y/sO!V(xi~P#/OO!Y/sO!V(xi~O!V7bO~O!d#vO#s7gO~On7hO!d#vO(j'mO~O|)|O!P)}O(r%QOj'da(q'da!Y'da#]'da~Of'da#}'da~P&5WO|)|O!P)}Oj'fa(q'fa(r'fa!Y'fa#]'fa~Of'fa#}'fa~P&5yO!V7jO~Of$zq!Y$zq#]$zq#}$zq~P!1UO`$ly!Y$ly's$ly'q$ly!V$ly!k$lyr$ly![$ly%d$ly!d$ly~P!:RO!d6[O~O!Y4wO![(ya~O`#`y!Y#`y's#`y'q#`y!V#`y!k#`yr#`y![#`y%d#`y!d#`y~P!:ROZ7oO~Oa7qO'|+mO(OTO(RUO~O!Y0zO!Z)Qi~O_7uO~O(](zO!Y'jX!Z'jX~O!Y5_O!Z(}a~O!Z8OO~P%8OOo!nO!P8PO(OTO(RUO(]!mO(h!sO~O![1dO~O![1dO%d8RO~Oj8UO![1dO%d8RO~OZ8ZO!Y'ma!Z'ma~O!Y1oO!Z)Oi~O!k8_O~O!k8`O~O!k8cO~O!k8cO~P%[O`8eO~O!d8fO~O!k8gO~O!Y(oi!Z(oi~P#EoO`%lO#]8oO's%lO~O!Y(ly!k(ly`(ly's(ly~P!:RO!Y(fO!k(ky~O![']O%d8rO~O#h$xqP$xqZ$xq`$xqn$xq}$xq!Y$xq!i$xq!j$xq!l$xq!p$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#q$xq#r$xq#s$xq#u$xq#w$xq#y$xq#z$xq's$xq(Y$xq(j$xq!k$xq!V$xq'q$xq#]$xqr$xq![$xq%d$xq!d$xq~P#/OO#h'daP'daZ'da`'dan'da}'da!i'da!j'da!l'da!p'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#s'da#u'da#w'da#y'da#z'da's'da(Y'da(j'da!k'da!V'da'q'dar'da!['da%d'da!d'da~P&5WO#h'faP'faZ'fa`'fan'fa}'fa!i'fa!j'fa!l'fa!p'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa's'fa(Y'fa(j'fa!k'fa!V'fa'q'far'fa!['fa%d'fa!d'fa~P&5yO#h$zqP$zqZ$zq`$zqn$zq}$zq!Y$zq!i$zq!j$zq!l$zq!p$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq's$zq(Y$zq(j$zq!k$zq!V$zq'q$zq#]$zqr$zq![$zq%d$zq!d$zq~P#/OO!Y'Ti!k'Ti~P!:RO#}#`q!Y#`q!Z#`q~P#EoO(q%OOP%[aZ%[an%[a}%[a!i%[a!j%[a!l%[a!p%[a#k%[a#l%[a#m%[a#n%[a#o%[a#p%[a#q%[a#r%[a#s%[a#u%[a#w%[a#y%[a#z%[a#}%[a(Y%[a(j%[a!Y%[a!Z%[a~Oj%[a|%[a!P%[a(r%[a~P&GUO(r%QOP%^aZ%^an%^a}%^a!i%^a!j%^a!l%^a!p%^a#k%^a#l%^a#m%^a#n%^a#o%^a#p%^a#q%^a#r%^a#s%^a#u%^a#w%^a#y%^a#z%^a#}%^a(Y%^a(j%^a!Y%^a!Z%^a~Oj%^a|%^a!P%^a(q%^a~P&I]Oj<qO|)|O!P)}O(r%QO~P&GUOj<qO|)|O!P)}O(q%OO~P&I]O|0cO}0cO!P0dOPyaZyajyanya!iya!jya!lya!pya#kya#lya#mya#nya#oya#pya#qya#rya#sya#uya#wya#yya#zya#}ya(Yya(jya(qya(rya!Yya!Zya~O|)|O!P)}OP$oaZ$oaj$oan$oa}$oa!i$oa!j$oa!l$oa!p$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#q$oa#r$oa#s$oa#u$oa#w$oa#y$oa#z$oa#}$oa(Y$oa(j$oa(q$oa(r$oa!Y$oa!Z$oa~O|)|O!P)}OP$qaZ$qaj$qan$qa}$qa!i$qa!j$qa!l$qa!p$qa#k$qa#l$qa#m$qa#n$qa#o$qa#p$qa#q$qa#r$qa#s$qa#u$qa#w$qa#y$qa#z$qa#}$qa(Y$qa(j$qa(q$qa(r$qa!Y$qa!Z$qa~OP%PaZ%Pan%Pa}%Pa!i%Pa!j%Pa!l%Pa!p%Pa#k%Pa#l%Pa#m%Pa#n%Pa#o%Pa#p%Pa#q%Pa#r%Pa#s%Pa#u%Pa#w%Pa#y%Pa#z%Pa#}%Pa(Y%Pa(j%Pa!Y%Pa!Z%Pa~P&+fO#}$kq!Y$kq!Z$kq~P#EoO#}$lq!Y$lq!Z$lq~P#EoO!Z9OO~O#}9PO~P!1UO!d#vO!Y'_i!k'_i~O!d#vO(j'mO!Y'_i!k'_i~O!Y/kO!k(wq~O!V'ai!Y'ai~P#/OO!Y/sO!V(xq~O!V9VO~P#/OO!V9VO~Of(Wy!Y(Wy~P!1UO!Y'ha!['ha~P#/OO`%Wq![%Wq's%Wq!Y%Wq~P#/OOZ9[O~O!Y0zO!Z)Qq~O#]9`O!Y'ja!Z'ja~O!Y5_O!Z(}i~P#EoO![1dO%d9dO~O(OTO(RUO(]9iO~O!Y1oO!Z)Oq~O!k9lO~O!k9mO~O!k9nO~O!k9nO~P%[O#]9qO!Y#ey!Z#ey~O!Y#ey!Z#ey~P#EoO![']O%d9vO~O#}#{y!Y#{y!Z#{y~P#EoOP$xiZ$xin$xi}$xi!i$xi!j$xi!l$xi!p$xi#k$xi#l$xi#m$xi#n$xi#o$xi#p$xi#q$xi#r$xi#s$xi#u$xi#w$xi#y$xi#z$xi#}$xi(Y$xi(j$xi!Y$xi!Z$xi~P&+fO|)|O!P)}O(r%QOP'caZ'caj'can'ca}'ca!i'ca!j'ca!l'ca!p'ca#k'ca#l'ca#m'ca#n'ca#o'ca#p'ca#q'ca#r'ca#s'ca#u'ca#w'ca#y'ca#z'ca#}'ca(Y'ca(j'ca(q'ca!Y'ca!Z'ca~O|)|O!P)}OP'eaZ'eaj'ean'ea}'ea!i'ea!j'ea!l'ea!p'ea#k'ea#l'ea#m'ea#n'ea#o'ea#p'ea#q'ea#r'ea#s'ea#u'ea#w'ea#y'ea#z'ea#}'ea(Y'ea(j'ea(q'ea(r'ea!Y'ea!Z'ea~O(q%OOP%[iZ%[ij%[in%[i|%[i}%[i!P%[i!i%[i!j%[i!l%[i!p%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#q%[i#r%[i#s%[i#u%[i#w%[i#y%[i#z%[i#}%[i(Y%[i(j%[i(r%[i!Y%[i!Z%[i~O(r%QOP%^iZ%^ij%^in%^i|%^i}%^i!P%^i!i%^i!j%^i!l%^i!p%^i#k%^i#l%^i#m%^i#n%^i#o%^i#p%^i#q%^i#r%^i#s%^i#u%^i#w%^i#y%^i#z%^i#}%^i(Y%^i(j%^i(q%^i!Y%^i!Z%^i~O#}$ly!Y$ly!Z$ly~P#EoO#}#`y!Y#`y!Z#`y~P#EoO!d#vO!Y'_q!k'_q~O!Y/kO!k(wy~O!V'aq!Y'aq~P#/OO!V:PO~P#/OO!Y0zO!Z)Qy~O!Y5_O!Z(}q~O![1dO%d:WO~O!k:ZO~O![']O%d:`O~OP$xqZ$xqn$xq}$xq!i$xq!j$xq!l$xq!p$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#q$xq#r$xq#s$xq#u$xq#w$xq#y$xq#z$xq#}$xq(Y$xq(j$xq!Y$xq!Z$xq~P&+fO|)|O!P)}O(r%QOP'daZ'daj'dan'da}'da!i'da!j'da!l'da!p'da#k'da#l'da#m'da#n'da#o'da#p'da#q'da#r'da#s'da#u'da#w'da#y'da#z'da#}'da(Y'da(j'da(q'da!Y'da!Z'da~O|)|O!P)}OP'faZ'faj'fan'fa}'fa!i'fa!j'fa!l'fa!p'fa#k'fa#l'fa#m'fa#n'fa#o'fa#p'fa#q'fa#r'fa#s'fa#u'fa#w'fa#y'fa#z'fa#}'fa(Y'fa(j'fa(q'fa(r'fa!Y'fa!Z'fa~OP$zqZ$zqn$zq}$zq!i$zq!j$zq!l$zq!p$zq#k$zq#l$zq#m$zq#n$zq#o$zq#p$zq#q$zq#r$zq#s$zq#u$zq#w$zq#y$zq#z$zq#}$zq(Y$zq(j$zq!Y$zq!Z$zq~P&+fOf%`!Z!Y%`!Z#]%`!Z#}%`!Z~P!1UO!Y'jq!Z'jq~P#EoO!Y#e!Z!Z#e!Z~P#EoO#h%`!ZP%`!ZZ%`!Z`%`!Zn%`!Z}%`!Z!Y%`!Z!i%`!Z!j%`!Z!l%`!Z!p%`!Z#k%`!Z#l%`!Z#m%`!Z#n%`!Z#o%`!Z#p%`!Z#q%`!Z#r%`!Z#s%`!Z#u%`!Z#w%`!Z#y%`!Z#z%`!Z's%`!Z(Y%`!Z(j%`!Z!k%`!Z!V%`!Z'q%`!Z#]%`!Zr%`!Z![%`!Z%d%`!Z!d%`!Z~P#/OOP%`!ZZ%`!Zn%`!Z}%`!Z!i%`!Z!j%`!Z!l%`!Z!p%`!Z#k%`!Z#l%`!Z#m%`!Z#n%`!Z#o%`!Z#p%`!Z#q%`!Z#r%`!Z#s%`!Z#u%`!Z#w%`!Z#y%`!Z#z%`!Z#}%`!Z(Y%`!Z(j%`!Z!Y%`!Z!Z%`!Z~P&+fOr(^X~P1qO|%pO~P!*mO'}!lO~P!*mO!VeX!YeX#]eX~P&0hOP[XZ[Xn[X|[X}[X!P[X!Y[X!YeX!i[X!j[X!l[X!p[X#][X#]eX#heX#k[X#l[X#m[X#n[X#o[X#p[X#q[X#r[X#s[X#u[X#w[X#y[X#z[X$P[X(Y[X(j[X(q[X(r[X~O!deX!k[X!keX(jeX~P'EaOP:kOQ:kORfOc<fOd!iOlkOn:kOokOpkOvkOx:kOz:kO!PWO!TkO!UkO![XO!f:nO!lZO!o:kO!p:kO!q:kO!s:oO!u:rO!x!hO$U!kO'|)[O(OTO(RUO(YVO(h[O(v<dO~O!Y;PO!Z$na~Og%WOl%XOn$uOo$tOp$tOv%YOx%ZOz;ZO!P$|O![$}O!f<kO!l$yO#g;aO$U%_O$p;]O$r;_O$u%`O'|(rO(OTO(RUO(Y$vO(q%OO(r%QO~O#t)cO~P'JVOn!bX(j!bX~P# xO!Z[X!ZeX~P'EaO!VeX!V$vX!YeX!Y$vX#]eX~P!/{O#h:sO~O!d#vO#h:sO~O#];TO~O#s:xO~O#];dO!Y(oX!Z(oX~O#];TO!Y(mX!Z(mX~O#h;eO~Of;gO~P!1UO#h;mO~O#h;nO~O!d#vO#h;oO~O!d#vO#h;eO~O#};pO~P#EoO#h;qO~O#h;rO~O#h;wO~O#h;xO~O#h;yO~O#h;zO~O#};{O~P!1UO#};|O~P!1UO!j#Q#R#T#U#X#f#g#r(v$p$r$u%X%c%d%e%l%n%q%r%t%v~'wS#l!U'u'}#mo#k#nn|'v$Z'v'|$](]~",
    goto: "$4d)UPPPPP)VPP)YP)kP*{/QPPPP5xPP6`PP<V?lP@PP@PPPP@PPBPP@PP@PP@PPBTPPBYPBwPGpPPPGtPPPPGtJvPPPJ|KxPGtPGtNWPPPP!!fGtPPPGtPGtP!$tGtP!(Z!)]!)fP!*Y!*^!*YPPPPP!-j!)]PP!-z!.tP!1hGtGt!1m!4x!9`!9`!=^PPP!=fGtPPPPPPPPPPP!@tP!BRPPGt!CdPGtPGtGtGtGtPGt!DvP!HPP!KUP!KY!Kd!Kh!KhP!G|P!Kl!KlP!NqP!NuGtGt!N{#$P@PP@PP@P@PP#%]@P@P#'g@P#*V@P#,Z@P@P#,y#/V#/V#/[#/e#/V#/nP#/VP@P#0W@P#3w@P@P5xPPP#7nPPP#8X#8XP#8XP#8o#8XPP#8uP#8lP#8l#9Y#8l#9t#9z5u)Y#9})YP#:U#:U#:UP)YP)YP)YP)YPP)YP#:[#:_P#:_)YP#:cP#:fP)YP)YP)YP)YP)YP)Y)YPP#:l#:r#:}#;T#;Z#;a#;g#;u#;{#<R#<]#<c#<m#<}#=T#=u#>X#>_#>e#>s#?Y#@w#AV#A^#Br#CQ#Dl#Dz#EQ#EW#E^#Eh#En#Et#FO#Fb#FhPPPPPPPPPP#FnPPPPPPP#Gc#Jj#Ky#LQ#LYPPPP$#`$&W$,p$,s$,v$-c$-f$-i$-p$-xP$.OP$.l$.p$/h$0v$0{$1cPP$1h$1n$1rP$1u$1y$1}$2s$3[$3s$3w$3z$3}$4T$4W$4[$4`R!|RoqOXst!Z#d%k&o&q&r&t,m,r2P2SY!vQ']-_1d5fQ%rvQ%zyQ&R|Q&g!VS'T!e-VQ'c!iS'i!r!yU*g$}*X*lQ+k%{Q+x&TQ,^&aQ-]'[Q-g'dQ-o'jQ0U*nQ1n,_R;b:o%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W,j,m,r-c-k-y.P.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3c5c5m5}6O6R6f8P8U8e8oS#q]:l!r)^$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ*y%[Q+p%}Q,`&dQ,g&lQ.h;YQ0p+cQ0t+eQ1P+qQ1v,eQ3T.aQ5P0zQ5t1oQ6r3XQ7O;ZQ7q5QR8u6s'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gt!nQ!r!v!y!z'T'[']'i'j'k-V-]-_-o1d5f5h$z$ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ&U|Q'R!eU'X%g*X-YQ+p%}Q,`&dQ0e*}Q1P+qQ1U+wQ1u,dQ1v,eQ5P0zQ5Y1WQ5t1oQ5w1qQ5x1tQ7q5QQ7t5VQ8^5zQ9_7uR9j8ZrnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SR,b&h&x^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<f<g[#]WZ#W#Z'U(P!b%hm#h#i#l$y%c%f(Y(d(e(f*W*[*_+U+V+X,i-P-}.T.U.V.X/h/k2X3P3Q4T6[6mQ%uxQ%yyS&O|&TQ&[!TQ'`!hQ'b!iQ(m#sS+j%z%{Q+n%}Q,X&_Q,]&aS-f'c'dQ.c(nQ0x+kQ1O+qQ1Q+rQ1T+vQ1i,YS1m,^,_Q2q-gQ5O0zQ5S0}Q5X1VQ5s1nQ7p5QQ7s5UQ9Z7oR:R9[!O${i#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m!S%wy!i!u%y%z%{'S'b'c'd'h'r*f+j+k-S-f-g-n/|0x2j2q2x4gQ+d%uQ+}&XQ,Q&YQ,[&aQ.b(mQ1h,XU1l,],^,_Q3Y.cQ5n1iS5r1m1nQ8Y5s#[<h#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo<i;R;S;V;X;];_;a;i;k;n;r;t;v;x;|W%Ui%W*v<dS&X!Q&fQ&Y!RQ&Z!SR+{&V${%Ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qT)x$v)yV*z%[;Y;ZW'X!e%g*X-YS({#z#{Q+_%pQ+u&QS.[(i(jQ1_,RQ4p0cR7y5_'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g$i$ac#Y#e%o%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.y.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZT#TV#U'PkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ'V!eR2f-Vv!nQ!e!r!v!y!z'T'[']'i'j'k-V-]-_-o1d5f5hU*f$}*X*lS/|*g*nQ0V*oQ1a,TQ4g0UR4j0XnqOXst!Z#d%k&o&q&r&t,m,r2P2SQ&v!^Q's!xS(o#u:sQ+h%xQ,V&[Q,W&^Q-d'aQ-q'lS.l(t;eS0h+S;oQ0v+iQ1c,UQ2W,tQ2Y,uQ2b-QQ2o-eQ2r-iS4u0i;yQ4z0wS4}0y;zQ6^2dQ6b2pQ6g2wQ7n4{Q8j6`Q8k6cQ8n6hR9p8g$d$`c#Y#e%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZS(l#p'fU*s%S(s3uS+^%o.yQ3U0pQ6o3TQ8t6rR9w8u$d$_c#Y#e%q%s(O(U(p(w)P)Q)R)S)T)U)V)W)X)Y)Z)])`)d)n+`+t-T-r-w-|.O.m.s.w.z.{/[0g2`2c2s2z3b3g3h3i3j3k3l3m3n3o3p3q3r3s3v3w3|4t4|6_6e6j6x6y7S7T7{8i8m8v8|8}9s:T:[:m<ZS(k#p'fS(}#{$`S+]%o.yS.](j(lQ.|)_Q0m+^R3R.^'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS#q]:lQ&q!XQ&r!YQ&t![Q&u!]R2O,pQ'^!hQ+a%uQ-b'`S._(m+dQ2m-aW3V.b.c0o0qQ6a2nU6n3S3U3YS8q6o6qS9u8s8tS:^9t9wQ:f:_R:i:gU!wQ']-_T5d1d5f!Q_OXZ`st!V!Z#d#h%c%k&f&h&o&q&r&t(f,m,r.U2P2S]!pQ!r']-_1d5fT#q]:l%[{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oS({#z#{S.[(i(j!s<Q$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gm!tQ!r!v!y!z']'i'j'k-_-o1d5f5hQ'q!uS(b#g1yS-m'h'tQ/n*ZQ/z*fQ2y-pQ4X/oS4b/{0VQ7Y4SS7e4h4jQ9R7ZR9Y7hQ#wbQ'p!uS(a#g1yS(c#m+RQ+T%dQ+f%vQ+l%|U-l'h'q'tQ.Q(bQ/m*ZQ/y*fQ0P*iQ0u+gQ1j,ZS2v-m-pQ3O.YS4W/n/oS4a/z0VQ4d0OQ4f0QQ5p1kQ6i2yQ7X4SQ7]4XS7a4b4jQ7f4iQ8W5qS9Q7Y7ZQ9U7bQ9W7eQ9g8XQ9}9RQ:O9VQ:Q9YQ:Y9hQ:b:PQ<T<OQ<`<XR<a<YV!wQ']-_%[aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oS#wz!j!r;}$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<T<f%[bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oQ%dj!S%vy!i!u%y%z%{'S'b'c'd'h'r*f+j+k-S-f-g-n/|0x2j2q2x4gS%|z!jQ+g%wQ,Z&aW1k,[,],^,_U5q1l1m1nS8X5r5sQ9h8Y!r<O$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ<X<eR<Y<f%OeOPXYstuvw!Z!`!g!o#S#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8oY#bWZ#W#Z(P!b%hm#h#i#l$y%c%f(Y(d(e(f*W*[*_+U+V+X,i-P-}.T.U.V.X/h/k2X3P3Q4T6[6mQ,h&l!p<P$]$n)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gR<S'UU'Y!e%g*XR2h-Y%QdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W,j,m,r-c-k-y.P.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3c5c5m5}6O6R6f8P8U8e8o!r)^$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gQ,g&lQ0p+cQ3T.aQ6r3XR8u6s!b$Vc#Y%o(O(U(p(w)Y)Z)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:m!P:z)])n-T.y2`2c3g3q3r3v3|6_6y7S7T7{8i8v8|8}:T:[<Z!f$Xc#Y%o(O(U(p(w)V)W)Y)Z)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:m!T:|)])n-T.y2`2c3g3n3o3q3r3v3|6_6y7S7T7{8i8v8|8}:T:[<Z!^$]c#Y%o(O(U(p(w)`)d+t-r-w-|.O.m.s/[0g2s2z3b3s4t4|6e6j6x8m9s:mQ4Q/fz<g)])n-T.y2`2c3g3v3|6_6y7S7T7{8i8v8|8}:T:[<ZQ<l<nR<m<o'OkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gS$oh$pR3y/P'VgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/P/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$kf$qQ$ifS)g$l)kR)s$qT$jf$qT)i$l)k'VhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$]$b$f$n$p%k%r&P&h&k&l&o&q&r&t&x'Q'U'_'o(P(R(X(`(t(x(|)p){+S+W+c,j,m,r-O-R-c-k-y.P.a.q.x/P/Q/i0d0i0y1g1w1x1z1|2P2S2U2e2u2{3X3c3x5a5c5m5}6O6R6]6f6s8P8U8e8o9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<gT$oh$pQ$rhR)r$p%[jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#y#|$P$Q$R$S$T$U$V$W$X$Y$Z$b$f%k%r&P&h&k&l&o&q&r&t&x'Q'_'o(P(R(X(`(t(x(|){+S+W+c,j,m,r-c-k-y.P.a.q.x/i0d0i0y1g1w1x1z1|2P2S2U2u2{3X3c5c5m5}6O6R6f6s8P8U8e8o!s<e$]$n'U)p-O-R/Q2e3x5a6]9`9q:k:n:o:r:s:t:u:v:w:x:y:z:{:|:};O;P;T;b;d;e;g;o;p;y;z<g#elOPXZst!Z!`!o#S#d#o#|$n%k&h&k&l&o&q&r&t&x'Q'_(|)p+W+c,j,m,r-c.a/Q/i0d1g1w1x1z1|2P2S2U3X3x5c5m5}6O6R6s8P8U8e!O%Si#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m#[(s#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qQ+O%`Q/])|o3u;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!O$zi#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mQ*`${U*i$}*X*lQ+P%aQ0Q*j#[<V#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn<W;R;S;V;X;];_;a;i;k;n;r;t;v;x;|Q<[<hQ<]<iQ<^<jR<_<k!O%Si#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<m#[(s#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qo3u;R;S;V;X;];_;a;i;k;n;r;t;v;x;|noOXst!Z#d%k&o&q&r&t,m,r2P2SS*c$|*WQ,{&{Q,|&}R4[/s$z%Ti#v#x$d$e$y$|%P%R%]%^%b)w)}*P*R*T*W*^*d*t*u+b+e+|,P.`.n/`/h/r/s/u0Y0[0f1Z1^1f3W4Q4]4e4o4w4y5l6p7^7g8R8r9P9d9v:W:`;R;S;U;V;W;X;[;];^;_;`;a;h;i;j;k;m;n;q;r;s;t;u;v;w;x;{;|<d<l<m<p<qQ,O&YQ1],QQ5]1[R7x5^V*k$}*X*lU*k$}*X*lT5e1d5fU0O*h/i5cT4i0W8PQ+f%vQ0P*iQ0u+gQ1j,ZQ5p1kQ8W5qQ9g8XR:Y9h!O%Pi#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mr*P$w(u*Q*r+Q/q0^0_3`4Y4s7W7i9|<U<b<cS0Y*q0Z#[;U#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;V;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!^;h(q)b*Y*b.d.g.k/X/^/f/v0n1Y1[3]4Z4_5[5^6t6w7_7c7k7m9T9X:a<n<o`;i3t6z6}7R8w9x9{:jS;s.f3^T;t6|8z!O%Ri#x%P%R%]%^%b*P*R*^*t*u.n/r0Y0[0f4Q4o9P<d<l<mv*R$w(u*S*q+Q/b/q0^0_3`4Y4k4s7W7i9|<U<b<cS0[*r0]#[;W#v$d$e$y$|)w)}*T*W*d+b+e+|,P.`/`/h/s/u1Z1^1f3W4]4e4w4y5l6p7^7g8R8r9d9v:W:`;U;W;[;^;`;h;j;m;q;s;u;w;{<p<qn;X;R;S;V;X;];_;a;i;k;n;r;t;v;x;|!b;j(q)b*Y*b.e.f.k/X/^/f/v0n1Y1[3Z3]4Z4_5[5^6t6u6w7_7c7k7m9T9X:a<n<od;k3t6{6|7R8w8x9x9y9{:jS;u.g3_T;v6}8{rnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SQ&c!UR,j&lrnOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SR&c!UQ,S&ZR1X+{snOXst!V!Z#d%k&f&o&q&r&t,m,r2P2SQ1e,XS5k1h1iU8Q5i5j5nS9c8S8TS:U9b9eQ:c:VR:h:dQ&j!VR,c&fR5w1qS&O|&TR1Q+rQ&o!WR,m&pR,s&uT2Q,r2SR,w&vQ,v&vR2Z,wQ'v!{R-s'vSsOtQ#dXT%ns#dQ#OTR'x#OQ#RUR'z#RQ)y$vR/Y)yQ#UVR'|#UQ#XWU(S#X(T-zQ(T#YR-z(UQ-W'VR2g-WQ.o(uR3a.oQ.r(wS3d.r3eR3e.sQ-_']R2k-_Y!rQ']-_1d5fR'g!rU#_W%f*WU(Z#_([-{Q([#`R-{(VQ-Z'YR2i-Zt`OXst!V!Z#d%k&f&h&o&q&r&t,m,r2P2SS#hZ%cU#r`#h.UR.U(fQ(g#jQ.R(cW.Z(g.R2|6kQ2|.SR6k2}Q)k$lR/R)kQ$phR)q$pQ$ccU)a$c-v;QQ-v:mR;Q)nQ/l*ZW4U/l4V7[9SU4V/m/n/oS7[4W4XR9S7]$X*O$w(q(u)b*Y*b*q*r*{*|+Q.f.g.i.j.k/X/^/b/d/f/q/v0^0_0n1Y1[3Z3[3]3`3t4Y4Z4_4k4m4s5[5^6t6u6v6w6|6}7P7Q7R7W7_7c7i7k7m8w8x8y9T9X9x9y9z9{9|:a:j<U<b<c<n<oQ/t*bU4^/t4`7`Q4`/vR7`4_S*l$}*XR0S*lr*Q$w(u*q*r+Q/q0^0_3`4Y4s7W7i9|<U<b<c!^.d(q)b*Y*b.f.g.k/X/^/f/v0n1Y1[3]4Z4_5[5^6t6w7_7c7k7m9T9X:a<n<oU/c*Q.d6za6z3t6|6}7R8w9x9{:jQ0Z*qQ3^.fU4l0Z3^8zR8z6|v*S$w(u*q*r+Q/b/q0^0_3`4Y4k4s7W7i9|<U<b<c!b.e(q)b*Y*b.f.g.k/X/^/f/v0n1Y1[3Z3]4Z4_5[5^6t6u6w7_7c7k7m9T9X:a<n<oU/e*S.e6{e6{3t6|6}7R8w8x9x9y9{:jQ0]*rQ3_.gU4n0]3_8{R8{6}Q*w%VR0a*wQ4x0nR7l4xQ+Y%iR0l+YQ5`1_S7z5`9aR9a7{Q,U&[R1b,UQ5f1dR7}5fQ1p,`S5u1p8[R8[5wQ0{+nW5R0{5T7r9]Q5T1OQ7r5SR9]7sQ+s&OR1R+sQ2S,rR6V2SYrOXst#dQ&s!ZQ+[%kQ,l&oQ,n&qQ,o&rQ,q&tQ1},mS2Q,r2SR6U2PQ%mpQ&w!_Q&z!aQ&|!bQ'O!cQ'n!uQ+Z%jQ+h%xQ+z&UQ,b&jQ,y&yW-j'h'p'q'tQ-q'lQ0R*kQ0v+iS1s,c,fQ2[,xQ2],{Q2^,|Q2r-iW2t-l-m-p-rQ4z0wQ5W1UQ5Z1YQ5o1jQ5y1uQ6T2OU6d2s2v2yQ6g2wQ7n4{Q7v5YQ7w5[Q7|5eQ8V5pQ8]5xS8l6e6iQ8n6hQ9^7tQ9f8WQ9k8^Q9r8mQ:S9_Q:X9gQ:]9sR:e:YQ%xyQ'a!iQ'l!uU+i%y%z%{Q-Q'SU-e'b'c'dS-i'h'rQ/x*fS0w+j+kQ2d-SS2p-f-gQ2w-nQ4c/|Q4{0xQ6`2jQ6c2qQ6h2xR7d4gS$xi<dR*x%WU%Vi%W<dR0`*vQ$wiS(q#v+eQ(u#xS)b$d$eQ*Y$yS*b$|*WQ*q%PQ*r%RQ*{%]Q*|%^Q+Q%bQ.f;UQ.g;WQ.i;[Q.j;^Q.k;`Q/X)wS/^)}/`Q/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*uh0n+b.`1f3W5l6p8R8r9d9v:W:`Q1Y+|Q1[,PQ3Z;hQ3[;jQ3];mQ3`.nS3t;R;SQ4Y/rQ4Z/sQ4_/uQ4k0YQ4m0[Q4s0fQ5[1ZQ5^1^Q6t;qQ6u;sQ6v;uQ6w;wQ6|;VQ6};XQ7P;]Q7Q;_Q7R;aQ7W4QQ7_4]Q7c4eQ7i4oQ7k4wQ7m4yQ8w;nQ8x;iQ8y;kQ9T7^Q9X7gQ9x;rQ9y;tQ9z;vQ9{;xQ9|9PQ:a;{Q:j;|Q<U<dQ<b<lQ<c<mQ<n<pR<o<qnpOXst!Z#d%k&o&q&r&t,m,r2P2SQ!fPS#fZ#oQ&y!`U'e!o5c8PQ'{#SQ)O#|Q)o$nS,f&h&kQ,k&lQ,x&xQ,}'QQ-a'_Q.u(|Q/V)pS0j+W/iQ0q+cQ1{,jQ2n-cQ3U.aQ3{/QQ4q0dQ5j1gQ5{1wQ5|1xQ6Q1zQ6S1|Q6X2UQ6o3XQ7U3xQ8T5mQ8a5}Q8b6OQ8d6RQ8t6sQ9e8UR9o8e#YcOPXZst!Z!`!o#d#o#|%k&h&k&l&o&q&r&t&x'Q'_(|+W+c,j,m,r-c.a/i0d1g1w1x1z1|2P2S2U3X5c5m5}6O6R6s8P8U8eQ#YWQ#eYQ%ouQ%qvS%sw!gS(O#W(RQ(U#ZQ(p#uQ(w#yQ)P$PQ)Q$QQ)R$RQ)S$SQ)T$TQ)U$UQ)V$VQ)W$WQ)X$XQ)Y$YQ)Z$ZQ)]$]Q)`$bQ)d$fW)n$n)p/Q3xQ+`%rQ+t&PS-T'U2eQ-r'oS-w(P-yQ-|(XQ.O(`Q.m(tQ.s(xQ.w:kQ.y:nQ.z:oQ.{:rQ/[){Q0g+SQ2`-OQ2c-RQ2s-kQ2z.PQ3b.qQ3g:sQ3h:tQ3i:uQ3j:vQ3k:wQ3l:xQ3m:yQ3n:zQ3o:{Q3p:|Q3q:}Q3r;OQ3s.xQ3v;TQ3w;bQ3|;PQ4t0iQ4|0yQ6_;dQ6e2uQ6j2{Q6x3cQ6y;eQ7S;gQ7T;oQ7{5aQ8i6]Q8m6fQ8v;pQ8|;yQ8};zQ9s8oQ:T9`Q:[9qQ:m#SR<Z<gR#[WR'W!el!tQ!r!v!y!z']'i'j'k-_-o1d5f5hS'S!e-VS-S'T'[R2j-]R(v#xR(y#yQ!fQT-^']-_]!qQ!r']-_1d5fQ#p]R'f:lY!uQ']-_1d5fQ'h!rS'r!v!yS't!z5hS-n'i'jQ-p'kR2x-oT#kZ%cS#jZ%cS%im,iU(c#h#i#lS.S(d(eQ.W(fQ0k+XQ2}.TU3O.U.V.XS6l3P3QR8p6md#^W#W#Z%f(P(Y*W+U-}/hr#gZm#h#i#l%c(d(e(f+X.T.U.V.X3P3Q6mS*Z$y*_Q/o*[Q1y,iQ2a-PQ4S/kQ6Z2XQ7Z4TQ8h6[T<R'U+VV#aW%f*WU#`W%f*WS(Q#W(YU(V#Z+U/hS-U'U+VT-x(P-}V'Z!e%g*XQ$lfR)u$qT)j$l)kR3z/PT*]$y*_T*e$|*WQ0o+bQ3S.`Q5i1fQ6q3WQ8S5lQ8s6pQ9b8RQ9t8rQ:V9dQ:_9vQ:d:WR:g:`nqOXst!Z#d%k&o&q&r&t,m,r2P2SQ&i!VR,b&ftmOXst!U!V!Z#d%k&f&o&q&r&t,m,r2P2SR,i&lT%jm,iR1`,RR,a&dQ&S|R+y&TR+o%}T&m!W&pT&n!W&pT2R,r2S",
    nodeNames: "\u26A0 ArithOp ArithOp JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
    maxTerm: 373,
    context: trackNewline,
    nodeProps: [
      ["isolate", -8, 4, 5, 13, 33, 35, 48, 50, 52, ""],
      ["group", -26, 8, 16, 18, 65, 202, 206, 210, 211, 213, 216, 219, 229, 231, 237, 239, 241, 243, 246, 252, 258, 260, 262, 264, 266, 268, 269, "Statement", -33, 12, 13, 28, 31, 32, 38, 48, 51, 52, 54, 59, 67, 69, 76, 80, 82, 84, 85, 107, 108, 117, 118, 135, 138, 140, 141, 142, 143, 145, 146, 165, 166, 168, "Expression", -23, 27, 29, 33, 37, 39, 41, 169, 171, 173, 174, 176, 177, 178, 180, 181, 182, 184, 185, 186, 196, 198, 200, 201, "Type", -3, 88, 100, 106, "ClassItem"],
      ["openedBy", 22, "<", 34, "InterpolationStart", 53, "[", 57, "{", 73, "(", 158, "JSXStartCloseTag"],
      ["closedBy", 23, ">", 36, "InterpolationEnd", 47, "]", 58, "}", 74, ")", 163, "JSXEndTag"]
    ],
    propSources: [jsHighlight],
    skippedNodes: [0, 4, 5, 272],
    repeatNodeCount: 37,
    tokenData: "$HR07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$.S!c!}Er!}#O$/^#O#P$0h#P#Q$6P#Q#R$7Z#R#SEr#S#T$8h#T#o$9r#o#p$>S#p#q$>x#q#r$@Y#r#s$Af#s$f%Z$f$g+g$g#BYEr#BY#BZ$Bp#BZ$ISEr$IS$I_$Bp$I_$I|Er$I|$I}$E{$I}$JO$E{$JO$JTEr$JT$JU$Bp$JU$KVEr$KV$KW$Bp$KW&FUEr&FU&FV$Bp&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$Bp?HUOEr(n%d_$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$g&j(S!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(S!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$g&j(PpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(PpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$g&j(Pp(S!b'u0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(Q#S$g&j'v0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$g&j(Pp(S!b'v0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$g&j!p),Q(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#u(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#u(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(O':f$g&j(S!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$g&j(S!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$g&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$b`$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$b``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$b`$g&j(S!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(S!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$b`(S!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$g&j(Pp(S!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__VS$g&j(Pp(S!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]VS$g&j(S!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXVS$g&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSVSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWVS(S!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]VS$g&j(PpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWVS(PpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYVS(Pp(S!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$g&j(h%1l(Pp(S!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$g&j(Pp(S!b$Z#t'|,2j(]$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$g&j(Pp(S!b$Z#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$g&j(Pp(S!b#m(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$g&j$P(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(r+JY$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$g&j#y(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(R';W$g&j(PpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$g&j(PpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$g&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$b`$g&j(PpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(PpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$b`(PpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$g&j(Pp(S!b'}%&f#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$g&j(Pp(S!b#k(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$g&j(Pp(S!bn+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!Y+Jf$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$g&j(Pp(S!b|.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_!X!L^$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$g&j(Pp(S!b#l(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$g&j(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$g&j(S!b!U7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$g&j!U7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$g&j!U7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!U7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!U7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$g&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$g&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$g&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$g&j(S!b!U7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(S!b!U7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(S!b!U7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(S!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$g&j(S!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$g&j(Pp!U7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$g&j(Pp!U7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Pp!U7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Pp!U7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(PpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$g&j(PpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$g&j(Pp(S!b!U7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Pp(S!b!U7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Pp(S!b!U7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Pp(S!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$g&j(Pp(S!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$g&j(Pp(S!b'w0/l!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$g&j(Pp(S!bS0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$g&j(S!bS0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$g&jS0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iSS0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(S!bS0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$g&j(PpS0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(PpS0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Pp(S!bS0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$g&j$P(Ch(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$X#t$g&j(Pp(S!b!U7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$g&j(Pp(S!bo'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!d$b$g&j#})Lv(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_`l$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^g#)`!i-<U(Pp(S!b(v7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$i&j(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#o(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$P(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#p(Ch(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#]*!Y$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#h(Cl$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vaf!*r#p(Ch$d#|$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#p(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#o(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#o(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n$*`c(j(Ct$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$+k!P!^%Z!^!_*g!_!a%Z!a!b$,u!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!f$+v_},Hv$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$-Q`$g&j#z(Ch(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$.__!|$Ip$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$/i_!P0,v$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$0mZ$g&jO!^$1`!^!_$1v!_#i$1`#i#j$1{#j#l$1`#l#m$3n#m#o$1`#o#p$1v#p;'S$1`;'S;=`$5y<%lO$1`(n$1gT^#S$g&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$1{O^#S(n$2Q[$g&jO!Q&c!Q![$2v![!^&c!_!c&c!c!i$2v!i#T&c#T#Z$2v#Z#o&c#o#p$5^#p;'S&c;'S;=`&w<%lO&c(n$2{Z$g&jO!Q&c!Q![$3n![!^&c!_!c&c!c!i$3n!i#T&c#T#Z$3n#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3sZ$g&jO!Q&c!Q![$4f![!^&c!_!c&c!c!i$4f!i#T&c#T#Z$4f#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$4kZ$g&jO!Q&c!Q![$1`![!^&c!_!c&c!c!i$1`!i#T&c#T#Z$1`#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$5aR!Q![$5j!c!i$5j#T#Z$5j#S$5mS!Q![$5j!c!i$5j#T#Z$5j#q#r$1v(n$5|P;=`<%l$1`#1[$6[_!V#)l$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$7f`#w(Ch$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$8s_$g&j(Pp(S!b(Y+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$:Rk$g&j(Pp(S!b'|,2j$]#t(]$I[OY%ZYZ&cZr%Zrs&}st%Ztu$9ruw%Zwx(rx}%Z}!O$;v!O!Q%Z!Q![$9r![!^%Z!^!_*g!_!c%Z!c!}$9r!}#O%Z#O#P&c#P#R%Z#R#S$9r#S#T%Z#T#o$9r#o#p*g#p$g%Z$g;'S$9r;'S;=`$=|<%lO$9r+d$<Rk$g&j(Pp(S!b$]#tOY%ZYZ&cZr%Zrs&}st%Ztu$;vuw%Zwx(rx}%Z}!O$;v!O!Q%Z!Q![$;v![!^%Z!^!_*g!_!c%Z!c!}$;v!}#O%Z#O#P&c#P#R%Z#R#S$;v#S#T%Z#T#o$;v#o#p*g#p$g%Z$g;'S$;v;'S;=`$=v<%lO$;v+d$=yP;=`<%l$;v07[$>PP;=`<%l$9r#Jf$>]X![#Hb(Pp(S!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$?Ta(q+JY$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$,u#q;'S%Z;'S;=`+a<%lO%Z(Kd$@g_!Z(Cdr`$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$Aq_!q7`$g&j(Pp(S!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$CR|$g&j(Pp(S!b'u0/l$Z#t'|,2j(]$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$Bp#BZ$ISEr$IS$I_$Bp$I_$JTEr$JT$JU$Bp$JU$KVEr$KV$KW$Bp$KW&FUEr&FU&FV$Bp&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$Bp?HUOEr07[$F^k$g&j(Pp(S!b'v0/l$Z#t'|,2j(]$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
    tokenizers: [noSemicolon, incdecToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOt~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!R~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO([~~", 141, 333), new LocalTokenGroup("j~RQYZXz{^~^O'y~~aP!P!Qd~iO'z~~", 25, 316)],
    topRules: { "Script": [0, 6], "SingleExpression": [1, 270], "SingleClassItem": [2, 271] },
    dialects: { jsx: 0, ts: 14840 },
    dynamicPrecedences: { "70": 1, "80": 1, "82": 1, "166": 1, "194": 1 },
    specialized: [{ term: 320, get: (value) => spec_identifier[value] || -1 }, { term: 335, get: (value) => spec_word[value] || -1 }, { term: 71, get: (value) => spec_LessThan[value] || -1 }],
    tokenPrec: 14864
  });

  // node_modules/@codemirror/lang-javascript/dist/index.js
  var snippets = [
    /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
      label: "function",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
      label: "for",
      detail: "loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
      label: "for",
      detail: "of loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
      label: "do",
      detail: "loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
      label: "while",
      detail: "loop",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
      label: "try",
      detail: "/ catch block",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
      label: "if",
      detail: "block",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
      label: "if",
      detail: "/ else block",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
      label: "class",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
      label: "import",
      detail: "named",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
      label: "import",
      detail: "default",
      type: "keyword"
    })
  ];
  var typescriptSnippets = /* @__PURE__ */ snippets.concat([
    /* @__PURE__ */ snippetCompletion("interface ${name} {\n	${}\n}", {
      label: "interface",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("type ${name} = ${type}", {
      label: "type",
      detail: "definition",
      type: "keyword"
    }),
    /* @__PURE__ */ snippetCompletion("enum ${name} {\n	${}\n}", {
      label: "enum",
      detail: "definition",
      type: "keyword"
    })
  ]);
  var cache = /* @__PURE__ */ new NodeWeakMap();
  var ScopeNodes = /* @__PURE__ */ new Set([
    "Script",
    "Block",
    "FunctionExpression",
    "FunctionDeclaration",
    "ArrowFunction",
    "MethodDeclaration",
    "ForStatement"
  ]);
  function defID(type) {
    return (node2, def) => {
      let id2 = node2.node.getChild("VariableDefinition");
      if (id2)
        def(id2, type);
      return true;
    };
  }
  var functionContext = ["FunctionDeclaration"];
  var gatherCompletions = {
    FunctionDeclaration: /* @__PURE__ */ defID("function"),
    ClassDeclaration: /* @__PURE__ */ defID("class"),
    ClassExpression: () => true,
    EnumDeclaration: /* @__PURE__ */ defID("constant"),
    TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
    NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
    VariableDefinition(node2, def) {
      if (!node2.matchContext(functionContext))
        def(node2, "variable");
    },
    TypeDefinition(node2, def) {
      def(node2, "type");
    },
    __proto__: null
  };
  function getScope(doc5, node2) {
    let cached = cache.get(node2);
    if (cached)
      return cached;
    let completions = [], top2 = true;
    function def(node3, type) {
      let name2 = doc5.sliceString(node3.from, node3.to);
      completions.push({ label: name2, type });
    }
    node2.cursor(IterMode.IncludeAnonymous).iterate((node3) => {
      if (top2) {
        top2 = false;
      } else if (node3.name) {
        let gather = gatherCompletions[node3.name];
        if (gather && gather(node3, def) || ScopeNodes.has(node3.name))
          return false;
      } else if (node3.to - node3.from > 8192) {
        for (let c5 of getScope(doc5, node3.node))
          completions.push(c5);
        return false;
      }
    });
    cache.set(node2, completions);
    return completions;
  }
  var Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
  var dontComplete = [
    "TemplateString",
    "String",
    "RegExp",
    "LineComment",
    "BlockComment",
    "VariableDefinition",
    "TypeDefinition",
    "Label",
    "PropertyDefinition",
    "PropertyName",
    "PrivatePropertyDefinition",
    "PrivatePropertyName",
    ".",
    "?."
  ];
  function localCompletionSource(context) {
    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (dontComplete.indexOf(inner.name) > -1)
      return null;
    let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
    if (!isWord && !context.explicit)
      return null;
    let options = [];
    for (let pos = inner; pos; pos = pos.parent) {
      if (ScopeNodes.has(pos.name))
        options = options.concat(getScope(context.state.doc, pos));
    }
    return {
      options,
      from: isWord ? inner.from : context.pos,
      validFor: Identifier
    };
  }
  function pathFor(read, member, name2) {
    var _a2;
    let path3 = [];
    for (; ; ) {
      let obj = member.firstChild, prop;
      if ((obj === null || obj === void 0 ? void 0 : obj.name) == "VariableName") {
        path3.push(read(obj));
        return { path: path3.reverse(), name: name2 };
      } else if ((obj === null || obj === void 0 ? void 0 : obj.name) == "MemberExpression" && ((_a2 = prop = obj.lastChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "PropertyName") {
        path3.push(read(prop));
        member = obj;
      } else {
        return null;
      }
    }
  }
  function completionPath(context) {
    let read = (node2) => context.state.doc.sliceString(node2.from, node2.to);
    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (inner.name == "PropertyName") {
      return pathFor(read, inner.parent, read(inner));
    } else if ((inner.name == "." || inner.name == "?.") && inner.parent.name == "MemberExpression") {
      return pathFor(read, inner.parent, "");
    } else if (dontComplete.indexOf(inner.name) > -1) {
      return null;
    } else if (inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(read(inner))) {
      return { path: [], name: read(inner) };
    } else if (inner.name == "MemberExpression") {
      return pathFor(read, inner, "");
    } else {
      return context.explicit ? { path: [], name: "" } : null;
    }
  }
  function enumeratePropertyCompletions(obj, top2) {
    let options = [], seen = /* @__PURE__ */ new Set();
    for (let depth2 = 0; ; depth2++) {
      for (let name2 of (Object.getOwnPropertyNames || Object.keys)(obj)) {
        if (!/^[a-zA-Z_$\xaa-\uffdc][\w$\xaa-\uffdc]*$/.test(name2) || seen.has(name2))
          continue;
        seen.add(name2);
        let value;
        try {
          value = obj[name2];
        } catch (_3) {
          continue;
        }
        options.push({
          label: name2,
          type: typeof value == "function" ? /^[A-Z]/.test(name2) ? "class" : top2 ? "function" : "method" : top2 ? "variable" : "property",
          boost: -depth2
        });
      }
      let next = Object.getPrototypeOf(obj);
      if (!next)
        return options;
      obj = next;
    }
  }
  function scopeCompletionSource(scope) {
    let cache2 = /* @__PURE__ */ new Map();
    return (context) => {
      let path3 = completionPath(context);
      if (!path3)
        return null;
      let target = scope;
      for (let step of path3.path) {
        target = target[step];
        if (!target)
          return null;
      }
      let options = cache2.get(target);
      if (!options)
        cache2.set(target, options = enumeratePropertyCompletions(target, !path3.path.length));
      return {
        from: context.pos - path3.name.length,
        options,
        validFor: Identifier
      };
    };
  }
  var javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
    name: "javascript",
    parser: /* @__PURE__ */ parser.configure({
      props: [
        /* @__PURE__ */ indentNodeProp.add({
          IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
          TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
          LabeledStatement: flatIndent,
          SwitchBody: (context) => {
            let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
            return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
          },
          Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
          ArrowFunction: (cx) => cx.baseIndent + cx.unit,
          "TemplateString BlockComment": () => null,
          "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^{/ }),
          JSXElement(context) {
            let closed = /^\s*<\//.test(context.textAfter);
            return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
          },
          JSXEscape(context) {
            let closed = /\s*\}/.test(context.textAfter);
            return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
          },
          "JSXOpenTag JSXSelfClosingTag"(context) {
            return context.column(context.node.from) + context.unit;
          }
        }),
        /* @__PURE__ */ foldNodeProp.add({
          "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
          BlockComment(tree) {
            return { from: tree.from + 2, to: tree.to - 2 };
          }
        })
      ]
    }),
    languageData: {
      closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
      commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
      indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
      wordChars: "$"
    }
  });
  var jsxSublanguage = {
    test: (node2) => /^JSX/.test(node2.name),
    facet: /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
  };
  var typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" }, "typescript");
  var jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
    dialect: "jsx",
    props: [/* @__PURE__ */ sublanguageProp.add((n5) => n5.isTop ? [jsxSublanguage] : void 0)]
  });
  var tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
    dialect: "jsx ts",
    props: [/* @__PURE__ */ sublanguageProp.add((n5) => n5.isTop ? [jsxSublanguage] : void 0)]
  }, "typescript");
  var kwCompletion = (name2) => ({ label: name2, type: "keyword" });
  var keywords = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion);
  var typescriptKeywords = /* @__PURE__ */ keywords.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(kwCompletion));
  function javascript(config2 = {}) {
    let lang = config2.jsx ? config2.typescript ? tsxLanguage : jsxLanguage : config2.typescript ? typescriptLanguage : javascriptLanguage;
    let completions = config2.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets.concat(keywords);
    return new LanguageSupport(lang, [
      javascriptLanguage.data.of({
        autocomplete: ifNotIn(dontComplete, completeFromList(completions))
      }),
      javascriptLanguage.data.of({
        autocomplete: localCompletionSource
      }),
      config2.jsx ? autoCloseTags : []
    ]);
  }
  function findOpenTag(node2) {
    for (; ; ) {
      if (node2.name == "JSXOpenTag" || node2.name == "JSXSelfClosingTag" || node2.name == "JSXFragmentTag")
        return node2;
      if (node2.name == "JSXEscape" || !node2.parent)
        return null;
      node2 = node2.parent;
    }
  }
  function elementName(doc5, tree, max = doc5.length) {
    for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
      if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" || ch.name == "JSXMemberExpression")
        return doc5.sliceString(ch.from, Math.min(ch.to, max));
    }
    return "";
  }
  var android2 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
  var autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from2, to, text5, defaultInsert) => {
    if ((android2 ? view.composing : view.compositionStarted) || view.state.readOnly || from2 != to || text5 != ">" && text5 != "/" || !javascriptLanguage.isActiveAt(view.state, from2, -1))
      return false;
    let base2 = defaultInsert(), { state } = base2;
    let closeTags = state.changeByRange((range) => {
      var _a2;
      let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name2;
      if (around.name == "JSXStartTag")
        around = around.parent;
      if (state.doc.sliceString(head - 1, head) != text5 || around.name == "JSXAttributeValue" && around.to > head)
        ;
      else if (text5 == ">" && around.name == "JSXFragmentTag") {
        return { range, changes: { from: head, insert: `</>` } };
      } else if (text5 == "/" && around.name == "JSXStartCloseTag") {
        let empty4 = around.parent, base3 = empty4.parent;
        if (base3 && empty4.from == head - 2 && ((name2 = elementName(state.doc, base3.firstChild, head)) || ((_a2 = base3.firstChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "JSXFragmentTag")) {
          let insert2 = `${name2}>`;
          return { range: EditorSelection.cursor(head + insert2.length, -1), changes: { from: head, insert: insert2 } };
        }
      } else if (text5 == ">") {
        let openTag = findOpenTag(around);
        if (openTag && openTag.name == "JSXOpenTag" && !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) && (name2 = elementName(state.doc, openTag, head)))
          return { range, changes: { from: head, insert: `</${name2}>` } };
      }
      return { range };
    });
    if (closeTags.changes.empty)
      return false;
    view.dispatch([
      base2,
      state.update(closeTags, { userEvent: "input.complete", scrollIntoView: true })
    ]);
    return true;
  });
  function esLint(eslint, config2) {
    if (!config2) {
      config2 = {
        parserOptions: { ecmaVersion: 2019, sourceType: "module" },
        env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
        rules: {}
      };
      eslint.getRules().forEach((desc, name2) => {
        if (desc.meta.docs.recommended)
          config2.rules[name2] = 2;
      });
    }
    return (view) => {
      let { state } = view, found2 = [];
      for (let { from: from2, to } of javascriptLanguage.findRegions(state)) {
        let fromLine = state.doc.lineAt(from2), offset = { line: fromLine.number - 1, col: from2 - fromLine.from, pos: from2 };
        for (let d6 of eslint.verify(state.sliceDoc(from2, to), config2))
          found2.push(translateDiagnostic(d6, state.doc, offset));
      }
      return found2;
    };
  }
  function mapPos(line, col, doc5, offset) {
    return doc5.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
  }
  function translateDiagnostic(input, doc5, offset) {
    let start = mapPos(input.line, input.column, doc5, offset);
    let result = {
      from: start,
      to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc5, offset) : start,
      message: input.message,
      source: input.ruleId ? "eslint:" + input.ruleId : "eslint",
      severity: input.severity == 1 ? "warning" : "error"
    };
    if (input.fix) {
      let { range, text: text5 } = input.fix, from2 = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
      result.actions = [{
        name: "fix",
        apply(view, start2) {
          view.dispatch({ changes: { from: start2 + from2, to: start2 + to, insert: text5 }, scrollIntoView: true });
        }
      }];
    }
    return result;
  }

  // node_modules/@codemirror/search/dist/index.js
  var dist_exports7 = {};
  __export(dist_exports7, {
    RegExpCursor: () => RegExpCursor,
    SearchCursor: () => SearchCursor,
    SearchQuery: () => SearchQuery,
    closeSearchPanel: () => closeSearchPanel,
    findNext: () => findNext,
    findPrevious: () => findPrevious,
    getSearchQuery: () => getSearchQuery,
    gotoLine: () => gotoLine,
    highlightSelectionMatches: () => highlightSelectionMatches,
    openSearchPanel: () => openSearchPanel,
    replaceAll: () => replaceAll,
    replaceNext: () => replaceNext,
    search: () => search,
    searchKeymap: () => searchKeymap,
    searchPanelOpen: () => searchPanelOpen,
    selectMatches: () => selectMatches,
    selectNextOccurrence: () => selectNextOccurrence,
    selectSelectionMatches: () => selectSelectionMatches,
    setSearchQuery: () => setSearchQuery
  });

  // node_modules/crelt/index.js
  function crelt() {
    var elt = arguments[0];
    if (typeof elt == "string")
      elt = document.createElement(elt);
    var i3 = 1, next = arguments[1];
    if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
      for (var name2 in next)
        if (Object.prototype.hasOwnProperty.call(next, name2)) {
          var value = next[name2];
          if (typeof value == "string")
            elt.setAttribute(name2, value);
          else if (value != null)
            elt[name2] = value;
        }
      i3++;
    }
    for (; i3 < arguments.length; i3++)
      add(elt, arguments[i3]);
    return elt;
  }
  function add(elt, child) {
    if (typeof child == "string") {
      elt.appendChild(document.createTextNode(child));
    } else if (child == null) {
    } else if (child.nodeType != null) {
      elt.appendChild(child);
    } else if (Array.isArray(child)) {
      for (var i3 = 0; i3 < child.length; i3++)
        add(elt, child[i3]);
    } else {
      throw new RangeError("Unsupported child node: " + child);
    }
  }

  // node_modules/@codemirror/search/dist/index.js
  var basicNormalize = typeof String.prototype.normalize == "function" ? (x7) => x7.normalize("NFKD") : (x7) => x7;
  var SearchCursor = class {
    /**
    Create a text cursor. The query is the search string, `from` to
    `to` provides the region to search.
    
    When `normalize` is given, it will be called, on both the query
    string and the content it is matched against, before comparing.
    You can, for example, create a case-insensitive search by
    passing `s => s.toLowerCase()`.
    
    Text is always normalized with
    [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
    (when supported).
    */
    constructor(text5, query, from2 = 0, to = text5.length, normalize3, test) {
      this.test = test;
      this.value = { from: 0, to: 0 };
      this.done = false;
      this.matches = [];
      this.buffer = "";
      this.bufferPos = 0;
      this.iter = text5.iterRange(from2, to);
      this.bufferStart = from2;
      this.normalize = normalize3 ? (x7) => normalize3(basicNormalize(x7)) : basicNormalize;
      this.query = this.normalize(query);
    }
    peek() {
      if (this.bufferPos == this.buffer.length) {
        this.bufferStart += this.buffer.length;
        this.iter.next();
        if (this.iter.done)
          return -1;
        this.bufferPos = 0;
        this.buffer = this.iter.value;
      }
      return codePointAt(this.buffer, this.bufferPos);
    }
    /**
    Look for the next match. Updates the iterator's
    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
    at least once before using the cursor.
    */
    next() {
      while (this.matches.length)
        this.matches.pop();
      return this.nextOverlapping();
    }
    /**
    The `next` method will ignore matches that partially overlap a
    previous match. This method behaves like `next`, but includes
    such matches.
    */
    nextOverlapping() {
      for (; ; ) {
        let next = this.peek();
        if (next < 0) {
          this.done = true;
          return this;
        }
        let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
        this.bufferPos += codePointSize(next);
        let norm = this.normalize(str);
        for (let i3 = 0, pos = start; ; i3++) {
          let code3 = norm.charCodeAt(i3);
          let match = this.match(code3, pos, this.bufferPos + this.bufferStart);
          if (i3 == norm.length - 1) {
            if (match) {
              this.value = match;
              return this;
            }
            break;
          }
          if (pos == start && i3 < str.length && str.charCodeAt(i3) == code3)
            pos++;
        }
      }
    }
    match(code3, pos, end) {
      let match = null;
      for (let i3 = 0; i3 < this.matches.length; i3 += 2) {
        let index2 = this.matches[i3], keep = false;
        if (this.query.charCodeAt(index2) == code3) {
          if (index2 == this.query.length - 1) {
            match = { from: this.matches[i3 + 1], to: end };
          } else {
            this.matches[i3]++;
            keep = true;
          }
        }
        if (!keep) {
          this.matches.splice(i3, 2);
          i3 -= 2;
        }
      }
      if (this.query.charCodeAt(0) == code3) {
        if (this.query.length == 1)
          match = { from: pos, to: end };
        else
          this.matches.push(1, pos);
      }
      if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
        match = null;
      return match;
    }
  };
  if (typeof Symbol != "undefined")
    SearchCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  var empty = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") };
  var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
  var RegExpCursor = class {
    /**
    Create a cursor that will search the given range in the given
    document. `query` should be the raw pattern (as you'd pass it to
    `new RegExp`).
    */
    constructor(text5, query, options, from2 = 0, to = text5.length) {
      this.text = text5;
      this.to = to;
      this.curLine = "";
      this.done = false;
      this.value = empty;
      if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
        return new MultilineRegExpCursor(text5, query, options, from2, to);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.iter = text5.iter();
      let startLine = text5.lineAt(from2);
      this.curLineStart = startLine.from;
      this.matchPos = toCharEnd(text5, from2);
      this.getLine(this.curLineStart);
    }
    getLine(skip) {
      this.iter.next(skip);
      if (this.iter.lineBreak) {
        this.curLine = "";
      } else {
        this.curLine = this.iter.value;
        if (this.curLineStart + this.curLine.length > this.to)
          this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
        this.iter.next();
      }
    }
    nextLine() {
      this.curLineStart = this.curLineStart + this.curLine.length + 1;
      if (this.curLineStart > this.to)
        this.curLine = "";
      else
        this.getLine(0);
    }
    /**
    Move to the next match, if there is one.
    */
    next() {
      for (let off = this.matchPos - this.curLineStart; ; ) {
        this.re.lastIndex = off;
        let match = this.matchPos <= this.to && this.re.exec(this.curLine);
        if (match) {
          let from2 = this.curLineStart + match.index, to = from2 + match[0].length;
          this.matchPos = toCharEnd(this.text, to + (from2 == to ? 1 : 0));
          if (from2 == this.curLineStart + this.curLine.length)
            this.nextLine();
          if ((from2 < to || from2 > this.value.to) && (!this.test || this.test(from2, to, match))) {
            this.value = { from: from2, to, match };
            return this;
          }
          off = this.matchPos - this.curLineStart;
        } else if (this.curLineStart + this.curLine.length < this.to) {
          this.nextLine();
          off = 0;
        } else {
          this.done = true;
          return this;
        }
      }
    }
  };
  var flattened = /* @__PURE__ */ new WeakMap();
  var FlattenedDoc = class _FlattenedDoc {
    constructor(from2, text5) {
      this.from = from2;
      this.text = text5;
    }
    get to() {
      return this.from + this.text.length;
    }
    static get(doc5, from2, to) {
      let cached = flattened.get(doc5);
      if (!cached || cached.from >= to || cached.to <= from2) {
        let flat = new _FlattenedDoc(from2, doc5.sliceString(from2, to));
        flattened.set(doc5, flat);
        return flat;
      }
      if (cached.from == from2 && cached.to == to)
        return cached;
      let { text: text5, from: cachedFrom } = cached;
      if (cachedFrom > from2) {
        text5 = doc5.sliceString(from2, cachedFrom) + text5;
        cachedFrom = from2;
      }
      if (cached.to < to)
        text5 += doc5.sliceString(cached.to, to);
      flattened.set(doc5, new _FlattenedDoc(cachedFrom, text5));
      return new _FlattenedDoc(from2, text5.slice(from2 - cachedFrom, to - cachedFrom));
    }
  };
  var MultilineRegExpCursor = class {
    constructor(text5, query, options, from2, to) {
      this.text = text5;
      this.to = to;
      this.done = false;
      this.value = empty;
      this.matchPos = toCharEnd(text5, from2);
      this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
      this.test = options === null || options === void 0 ? void 0 : options.test;
      this.flat = FlattenedDoc.get(text5, from2, this.chunkEnd(
        from2 + 5e3
        /* Chunk.Base */
      ));
    }
    chunkEnd(pos) {
      return pos >= this.to ? this.to : this.text.lineAt(pos).to;
    }
    next() {
      for (; ; ) {
        let off = this.re.lastIndex = this.matchPos - this.flat.from;
        let match = this.re.exec(this.flat.text);
        if (match && !match[0] && match.index == off) {
          this.re.lastIndex = off + 1;
          match = this.re.exec(this.flat.text);
        }
        if (match) {
          let from2 = this.flat.from + match.index, to = from2 + match[0].length;
          if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from2, to, match))) {
            this.value = { from: from2, to, match };
            this.matchPos = toCharEnd(this.text, to + (from2 == to ? 1 : 0));
            return this;
          }
        }
        if (this.flat.to == this.to) {
          this.done = true;
          return this;
        }
        this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
      }
    }
  };
  if (typeof Symbol != "undefined") {
    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
      return this;
    };
  }
  function validRegExp(source) {
    try {
      new RegExp(source, baseFlags);
      return true;
    } catch (_a2) {
      return false;
    }
  }
  function toCharEnd(text5, pos) {
    if (pos >= text5.length)
      return pos;
    let line = text5.lineAt(pos), next;
    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 56320 && next < 57344)
      pos++;
    return pos;
  }
  function createLineDialog(view) {
    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
    let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
    let dom = crelt("form", {
      class: "cm-gotoLine",
      onkeydown: (event) => {
        if (event.keyCode == 27) {
          event.preventDefault();
          view.dispatch({ effects: dialogEffect.of(false) });
          view.focus();
        } else if (event.keyCode == 13) {
          event.preventDefault();
          go();
        }
      },
      onsubmit: (event) => {
        event.preventDefault();
        go();
      }
    }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
    function go() {
      let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
      if (!match)
        return;
      let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
      let [, sign, ln, cl, percent] = match;
      let col = cl ? +cl.slice(1) : 0;
      let line2 = ln ? +ln : startLine.number;
      if (ln && percent) {
        let pc = line2 / 100;
        if (sign)
          pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
        line2 = Math.round(state.doc.lines * pc);
      } else if (ln && sign) {
        line2 = line2 * (sign == "-" ? -1 : 1) + startLine.number;
      }
      let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line2)));
      let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
      view.dispatch({
        effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: "center" })],
        selection
      });
      view.focus();
    }
    return { dom };
  }
  var dialogEffect = /* @__PURE__ */ StateEffect.define();
  var dialogField = /* @__PURE__ */ StateField.define({
    create() {
      return true;
    },
    update(value, tr) {
      for (let e3 of tr.effects)
        if (e3.is(dialogEffect))
          value = e3.value;
      return value;
    },
    provide: (f3) => showPanel.from(f3, (val) => val ? createLineDialog : null)
  });
  var gotoLine = (view) => {
    let panel = getPanel(view, createLineDialog);
    if (!panel) {
      let effects = [dialogEffect.of(true)];
      if (view.state.field(dialogField, false) == null)
        effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
      view.dispatch({ effects });
      panel = getPanel(view, createLineDialog);
    }
    if (panel)
      panel.dom.querySelector("input").select();
    return true;
  };
  var baseTheme$13 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-panel.cm-gotoLine": {
      padding: "2px 6px 4px",
      "& label": { fontSize: "80%" }
    }
  });
  var defaultHighlightOptions = {
    highlightWordAroundCursor: false,
    minSelectionLength: 1,
    maxMatches: 100,
    wholeWords: false
  };
  var highlightConfig = /* @__PURE__ */ Facet.define({
    combine(options) {
      return combineConfig(options, defaultHighlightOptions, {
        highlightWordAroundCursor: (a2, b4) => a2 || b4,
        minSelectionLength: Math.min,
        maxMatches: Math.min
      });
    }
  });
  function highlightSelectionMatches(options) {
    let ext = [defaultTheme, matchHighlighter];
    if (options)
      ext.push(highlightConfig.of(options));
    return ext;
  }
  var matchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch" });
  var mainMatchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
  function insideWordBoundaries(check, state, from2, to) {
    return (from2 == 0 || check(state.sliceDoc(from2 - 1, from2)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
  }
  function insideWord(check, state, from2, to) {
    return check(state.sliceDoc(from2, from2 + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
  }
  var matchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.getDeco(view);
    }
    update(update) {
      if (update.selectionSet || update.docChanged || update.viewportChanged)
        this.decorations = this.getDeco(update.view);
    }
    getDeco(view) {
      let conf = view.state.facet(highlightConfig);
      let { state } = view, sel = state.selection;
      if (sel.ranges.length > 1)
        return Decoration.none;
      let range = sel.main, query, check = null;
      if (range.empty) {
        if (!conf.highlightWordAroundCursor)
          return Decoration.none;
        let word = state.wordAt(range.head);
        if (!word)
          return Decoration.none;
        check = state.charCategorizer(range.head);
        query = state.sliceDoc(word.from, word.to);
      } else {
        let len = range.to - range.from;
        if (len < conf.minSelectionLength || len > 200)
          return Decoration.none;
        if (conf.wholeWords) {
          query = state.sliceDoc(range.from, range.to);
          check = state.charCategorizer(range.head);
          if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
            return Decoration.none;
        } else {
          query = state.sliceDoc(range.from, range.to);
          if (!query)
            return Decoration.none;
        }
      }
      let deco = [];
      for (let part of view.visibleRanges) {
        let cursor = new SearchCursor(state.doc, query, part.from, part.to);
        while (!cursor.next().done) {
          let { from: from2, to } = cursor.value;
          if (!check || insideWordBoundaries(check, state, from2, to)) {
            if (range.empty && from2 <= range.from && to >= range.to)
              deco.push(mainMatchDeco.range(from2, to));
            else if (from2 >= range.to || to <= range.from)
              deco.push(matchDeco.range(from2, to));
            if (deco.length > conf.maxMatches)
              return Decoration.none;
          }
        }
      }
      return Decoration.set(deco);
    }
  }, {
    decorations: (v4) => v4.decorations
  });
  var defaultTheme = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
    ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
  });
  var selectWord = ({ state, dispatch }) => {
    let { selection } = state;
    let newSel = EditorSelection.create(selection.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
    if (newSel.eq(selection))
      return false;
    dispatch(state.update({ selection: newSel }));
    return true;
  };
  function findNextOccurrence(state, query) {
    let { main, ranges } = state.selection;
    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
      cursor.next();
      if (cursor.done) {
        if (cycled)
          return null;
        cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
        cycled = true;
      } else {
        if (cycled && ranges.some((r4) => r4.from == cursor.value.from))
          continue;
        if (fullWord) {
          let word2 = state.wordAt(cursor.value.from);
          if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
            continue;
        }
        return cursor.value;
      }
    }
  }
  var selectNextOccurrence = ({ state, dispatch }) => {
    let { ranges } = state.selection;
    if (ranges.some((sel) => sel.from === sel.to))
      return selectWord({ state, dispatch });
    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
    if (state.selection.ranges.some((r4) => state.sliceDoc(r4.from, r4.to) != searchedText))
      return false;
    let range = findNextOccurrence(state, searchedText);
    if (!range)
      return false;
    dispatch(state.update({
      selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
      effects: EditorView.scrollIntoView(range.to)
    }));
    return true;
  };
  var searchConfigFacet = /* @__PURE__ */ Facet.define({
    combine(configs) {
      return combineConfig(configs, {
        top: false,
        caseSensitive: false,
        literal: false,
        regexp: false,
        wholeWord: false,
        createPanel: (view) => new SearchPanel(view),
        scrollToMatch: (range) => EditorView.scrollIntoView(range)
      });
    }
  });
  function search(config2) {
    return config2 ? [searchConfigFacet.of(config2), searchExtensions] : searchExtensions;
  }
  var SearchQuery = class {
    /**
    Create a query object.
    */
    constructor(config2) {
      this.search = config2.search;
      this.caseSensitive = !!config2.caseSensitive;
      this.literal = !!config2.literal;
      this.regexp = !!config2.regexp;
      this.replace = config2.replace || "";
      this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
      this.unquoted = this.unquote(this.search);
      this.wholeWord = !!config2.wholeWord;
    }
    /**
    @internal
    */
    unquote(text5) {
      return this.literal ? text5 : text5.replace(/\\([nrt\\])/g, (_3, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "	" : "\\");
    }
    /**
    Compare this query to another query.
    */
    eq(other) {
      return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
    }
    /**
    @internal
    */
    create() {
      return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
    }
    /**
    Get a search cursor for this query, searching through the given
    range in the given state.
    */
    getCursor(state, from2 = 0, to) {
      let st3 = state.doc ? state : EditorState.create({ doc: state });
      if (to == null)
        to = st3.doc.length;
      return this.regexp ? regexpCursor(this, st3, from2, to) : stringCursor(this, st3, from2, to);
    }
  };
  var QueryType2 = class {
    constructor(spec) {
      this.spec = spec;
    }
  };
  function stringCursor(spec, state, from2, to) {
    return new SearchCursor(state.doc, spec.unquoted, from2, to, spec.caseSensitive ? void 0 : (x7) => x7.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
  }
  function stringWordTest(doc5, categorizer) {
    return (from2, to, buf, bufPos) => {
      if (bufPos > from2 || bufPos + buf.length < to) {
        bufPos = Math.max(0, from2 - 2);
        buf = doc5.sliceString(bufPos, Math.min(doc5.length, to + 2));
      }
      return (categorizer(charBefore(buf, from2 - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from2 - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
    };
  }
  var StringQuery = class extends QueryType2 {
    constructor(spec) {
      super(spec);
    }
    nextMatch(state, curFrom, curTo) {
      let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
      if (cursor.done)
        cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
      return cursor.done ? null : cursor.value;
    }
    // Searching in reverse is, rather than implementing an inverted search
    // cursor, done by scanning chunk after chunk forward.
    prevMatchInRange(state, from2, to) {
      for (let pos = to; ; ) {
        let start = Math.max(from2, pos - 1e4 - this.spec.unquoted.length);
        let cursor = stringCursor(this.spec, state, start, pos), range = null;
        while (!cursor.nextOverlapping().done)
          range = cursor.value;
        if (range)
          return range;
        if (start == from2)
          return null;
        pos -= 1e4;
      }
    }
    prevMatch(state, curFrom, curTo) {
      return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
    }
    getReplacement(_result) {
      return this.spec.unquote(this.spec.replace);
    }
    matchAll(state, limit) {
      let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit)
          return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
    highlight(state, from2, to, add2) {
      let cursor = stringCursor(this.spec, state, Math.max(0, from2 - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
      while (!cursor.next().done)
        add2(cursor.value.from, cursor.value.to);
    }
  };
  function regexpCursor(spec, state, from2, to) {
    return new RegExpCursor(state.doc, spec.search, {
      ignoreCase: !spec.caseSensitive,
      test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
    }, from2, to);
  }
  function charBefore(str, index2) {
    return str.slice(findClusterBreak(str, index2, false), index2);
  }
  function charAfter(str, index2) {
    return str.slice(index2, findClusterBreak(str, index2));
  }
  function regexpWordTest(categorizer) {
    return (_from, _to, match) => !match[0].length || (categorizer(charBefore(match.input, match.index)) != CharCategory.Word || categorizer(charAfter(match.input, match.index)) != CharCategory.Word) && (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word || categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
  }
  var RegExpQuery = class extends QueryType2 {
    nextMatch(state, curFrom, curTo) {
      let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
      if (cursor.done)
        cursor = regexpCursor(this.spec, state, 0, curFrom).next();
      return cursor.done ? null : cursor.value;
    }
    prevMatchInRange(state, from2, to) {
      for (let size = 1; ; size++) {
        let start = Math.max(
          from2,
          to - size * 1e4
          /* FindPrev.ChunkSize */
        );
        let cursor = regexpCursor(this.spec, state, start, to), range = null;
        while (!cursor.next().done)
          range = cursor.value;
        if (range && (start == from2 || range.from > start + 10))
          return range;
        if (start == from2)
          return null;
      }
    }
    prevMatch(state, curFrom, curTo) {
      return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
    }
    getReplacement(result) {
      return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (m4, i3) => i3 == "$" ? "$" : i3 == "&" ? result.match[0] : i3 != "0" && +i3 < result.match.length ? result.match[i3] : m4);
    }
    matchAll(state, limit) {
      let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit)
          return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
    highlight(state, from2, to, add2) {
      let cursor = regexpCursor(this.spec, state, Math.max(
        0,
        from2 - 250
        /* RegExp.HighlightMargin */
      ), Math.min(to + 250, state.doc.length));
      while (!cursor.next().done)
        add2(cursor.value.from, cursor.value.to);
    }
  };
  var setSearchQuery = /* @__PURE__ */ StateEffect.define();
  var togglePanel = /* @__PURE__ */ StateEffect.define();
  var searchState = /* @__PURE__ */ StateField.define({
    create(state) {
      return new SearchState(defaultQuery(state).create(), null);
    },
    update(value, tr) {
      for (let effect of tr.effects) {
        if (effect.is(setSearchQuery))
          value = new SearchState(effect.value.create(), value.panel);
        else if (effect.is(togglePanel))
          value = new SearchState(value.query, effect.value ? createSearchPanel : null);
      }
      return value;
    },
    provide: (f3) => showPanel.from(f3, (val) => val.panel)
  });
  function getSearchQuery(state) {
    let curState = state.field(searchState, false);
    return curState ? curState.query.spec : defaultQuery(state);
  }
  function searchPanelOpen(state) {
    var _a2;
    return ((_a2 = state.field(searchState, false)) === null || _a2 === void 0 ? void 0 : _a2.panel) != null;
  }
  var SearchState = class {
    constructor(query, panel) {
      this.query = query;
      this.panel = panel;
    }
  };
  var matchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
  var selectedMatchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
  var searchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = this.highlight(view.state.field(searchState));
    }
    update(update) {
      let state = update.state.field(searchState);
      if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
        this.decorations = this.highlight(state);
    }
    highlight({ query, panel }) {
      if (!panel || !query.spec.valid)
        return Decoration.none;
      let { view } = this;
      let builder = new RangeSetBuilder();
      for (let i3 = 0, ranges = view.visibleRanges, l5 = ranges.length; i3 < l5; i3++) {
        let { from: from2, to } = ranges[i3];
        while (i3 < l5 - 1 && to > ranges[i3 + 1].from - 2 * 250)
          to = ranges[++i3].to;
        query.highlight(view.state, from2, to, (from3, to2) => {
          let selected = view.state.selection.ranges.some((r4) => r4.from == from3 && r4.to == to2);
          builder.add(from3, to2, selected ? selectedMatchMark : matchMark);
        });
      }
      return builder.finish();
    }
  }, {
    decorations: (v4) => v4.decorations
  });
  function searchCommand(f3) {
    return (view) => {
      let state = view.state.field(searchState, false);
      return state && state.query.spec.valid ? f3(view, state) : openSearchPanel(view);
    };
  }
  var findNext = /* @__PURE__ */ searchCommand((view, { query }) => {
    let { to } = view.state.selection.main;
    let next = query.nextMatch(view.state, to, to);
    if (!next)
      return false;
    let selection = EditorSelection.single(next.from, next.to);
    let config2 = view.state.facet(searchConfigFacet);
    view.dispatch({
      selection,
      effects: [announceMatch(view, next), config2.scrollToMatch(selection.main, view)],
      userEvent: "select.search"
    });
    selectSearchInput(view);
    return true;
  });
  var findPrevious = /* @__PURE__ */ searchCommand((view, { query }) => {
    let { state } = view, { from: from2 } = state.selection.main;
    let prev = query.prevMatch(state, from2, from2);
    if (!prev)
      return false;
    let selection = EditorSelection.single(prev.from, prev.to);
    let config2 = view.state.facet(searchConfigFacet);
    view.dispatch({
      selection,
      effects: [announceMatch(view, prev), config2.scrollToMatch(selection.main, view)],
      userEvent: "select.search"
    });
    selectSearchInput(view);
    return true;
  });
  var selectMatches = /* @__PURE__ */ searchCommand((view, { query }) => {
    let ranges = query.matchAll(view.state, 1e3);
    if (!ranges || !ranges.length)
      return false;
    view.dispatch({
      selection: EditorSelection.create(ranges.map((r4) => EditorSelection.range(r4.from, r4.to))),
      userEvent: "select.search.matches"
    });
    return true;
  });
  var selectSelectionMatches = ({ state, dispatch }) => {
    let sel = state.selection;
    if (sel.ranges.length > 1 || sel.main.empty)
      return false;
    let { from: from2, to } = sel.main;
    let ranges = [], main = 0;
    for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from2, to)); !cur2.next().done; ) {
      if (ranges.length > 1e3)
        return false;
      if (cur2.value.from == from2)
        main = ranges.length;
      ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
    }
    dispatch(state.update({
      selection: EditorSelection.create(ranges, main),
      userEvent: "select.search.matches"
    }));
    return true;
  };
  var replaceNext = /* @__PURE__ */ searchCommand((view, { query }) => {
    let { state } = view, { from: from2, to } = state.selection.main;
    if (state.readOnly)
      return false;
    let next = query.nextMatch(state, from2, from2);
    if (!next)
      return false;
    let changes = [], selection, replacement;
    let effects = [];
    if (next.from == from2 && next.to == to) {
      replacement = state.toText(query.getReplacement(next));
      changes.push({ from: next.from, to: next.to, insert: replacement });
      next = query.nextMatch(state, next.from, next.to);
      effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from2).number) + "."));
    }
    if (next) {
      let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
      selection = EditorSelection.single(next.from - off, next.to - off);
      effects.push(announceMatch(view, next));
      effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
    }
    view.dispatch({
      changes,
      selection,
      effects,
      userEvent: "input.replace"
    });
    return true;
  });
  var replaceAll = /* @__PURE__ */ searchCommand((view, { query }) => {
    if (view.state.readOnly)
      return false;
    let changes = query.matchAll(view.state, 1e9).map((match) => {
      let { from: from2, to } = match;
      return { from: from2, to, insert: query.getReplacement(match) };
    });
    if (!changes.length)
      return false;
    let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
    view.dispatch({
      changes,
      effects: EditorView.announce.of(announceText),
      userEvent: "input.replace.all"
    });
    return true;
  });
  function createSearchPanel(view) {
    return view.state.facet(searchConfigFacet).createPanel(view);
  }
  function defaultQuery(state, fallback) {
    var _a2, _b, _c, _d, _e3;
    let sel = state.selection.main;
    let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
    if (fallback && !selText)
      return fallback;
    let config2 = state.facet(searchConfigFacet);
    return new SearchQuery({
      search: ((_a2 = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a2 !== void 0 ? _a2 : config2.literal) ? selText : selText.replace(/\n/g, "\\n"),
      caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config2.caseSensitive,
      literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config2.literal,
      regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config2.regexp,
      wholeWord: (_e3 = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e3 !== void 0 ? _e3 : config2.wholeWord
    });
  }
  function getSearchInput(view) {
    let panel = getPanel(view, createSearchPanel);
    return panel && panel.dom.querySelector("[main-field]");
  }
  function selectSearchInput(view) {
    let input = getSearchInput(view);
    if (input && input == view.root.activeElement)
      input.select();
  }
  var openSearchPanel = (view) => {
    let state = view.state.field(searchState, false);
    if (state && state.panel) {
      let searchInput = getSearchInput(view);
      if (searchInput && searchInput != view.root.activeElement) {
        let query = defaultQuery(view.state, state.query.spec);
        if (query.valid)
          view.dispatch({ effects: setSearchQuery.of(query) });
        searchInput.focus();
        searchInput.select();
      }
    } else {
      view.dispatch({ effects: [
        togglePanel.of(true),
        state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
      ] });
    }
    return true;
  };
  var closeSearchPanel = (view) => {
    let state = view.state.field(searchState, false);
    if (!state || !state.panel)
      return false;
    let panel = getPanel(view, createSearchPanel);
    if (panel && panel.dom.contains(view.root.activeElement))
      view.focus();
    view.dispatch({ effects: togglePanel.of(false) });
    return true;
  };
  var searchKeymap = [
    { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
    { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
    { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
    { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
    { key: "Mod-Shift-l", run: selectSelectionMatches },
    { key: "Mod-Alt-g", run: gotoLine },
    { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
  ];
  var SearchPanel = class {
    constructor(view) {
      this.view = view;
      let query = this.query = view.state.field(searchState).query.spec;
      this.commit = this.commit.bind(this);
      this.searchField = crelt("input", {
        value: query.search,
        placeholder: phrase(view, "Find"),
        "aria-label": phrase(view, "Find"),
        class: "cm-textfield",
        name: "search",
        form: "",
        "main-field": "true",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.replaceField = crelt("input", {
        value: query.replace,
        placeholder: phrase(view, "Replace"),
        "aria-label": phrase(view, "Replace"),
        class: "cm-textfield",
        name: "replace",
        form: "",
        onchange: this.commit,
        onkeyup: this.commit
      });
      this.caseField = crelt("input", {
        type: "checkbox",
        name: "case",
        form: "",
        checked: query.caseSensitive,
        onchange: this.commit
      });
      this.reField = crelt("input", {
        type: "checkbox",
        name: "re",
        form: "",
        checked: query.regexp,
        onchange: this.commit
      });
      this.wordField = crelt("input", {
        type: "checkbox",
        name: "word",
        form: "",
        checked: query.wholeWord,
        onchange: this.commit
      });
      function button(name2, onclick, content4) {
        return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content4);
      }
      this.dom = crelt("div", { onkeydown: (e3) => this.keydown(e3), class: "cm-search" }, [
        this.searchField,
        button("next", () => findNext(view), [phrase(view, "next")]),
        button("prev", () => findPrevious(view), [phrase(view, "previous")]),
        button("select", () => selectMatches(view), [phrase(view, "all")]),
        crelt("label", null, [this.caseField, phrase(view, "match case")]),
        crelt("label", null, [this.reField, phrase(view, "regexp")]),
        crelt("label", null, [this.wordField, phrase(view, "by word")]),
        ...view.state.readOnly ? [] : [
          crelt("br"),
          this.replaceField,
          button("replace", () => replaceNext(view), [phrase(view, "replace")]),
          button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
        ],
        crelt("button", {
          name: "close",
          onclick: () => closeSearchPanel(view),
          "aria-label": phrase(view, "close"),
          type: "button"
        }, ["\xD7"])
      ]);
    }
    commit() {
      let query = new SearchQuery({
        search: this.searchField.value,
        caseSensitive: this.caseField.checked,
        regexp: this.reField.checked,
        wholeWord: this.wordField.checked,
        replace: this.replaceField.value
      });
      if (!query.eq(this.query)) {
        this.query = query;
        this.view.dispatch({ effects: setSearchQuery.of(query) });
      }
    }
    keydown(e3) {
      if (runScopeHandlers(this.view, e3, "search-panel")) {
        e3.preventDefault();
      } else if (e3.keyCode == 13 && e3.target == this.searchField) {
        e3.preventDefault();
        (e3.shiftKey ? findPrevious : findNext)(this.view);
      } else if (e3.keyCode == 13 && e3.target == this.replaceField) {
        e3.preventDefault();
        replaceNext(this.view);
      }
    }
    update(update) {
      for (let tr of update.transactions)
        for (let effect of tr.effects) {
          if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
            this.setQuery(effect.value);
        }
    }
    setQuery(query) {
      this.query = query;
      this.searchField.value = query.search;
      this.replaceField.value = query.replace;
      this.caseField.checked = query.caseSensitive;
      this.reField.checked = query.regexp;
      this.wordField.checked = query.wholeWord;
    }
    mount() {
      this.searchField.select();
    }
    get pos() {
      return 80;
    }
    get top() {
      return this.view.state.facet(searchConfigFacet).top;
    }
  };
  function phrase(view, phrase2) {
    return view.state.phrase(phrase2);
  }
  var AnnounceMargin = 30;
  var Break = /[\s\.,:;?!]/;
  function announceMatch(view, { from: from2, to }) {
    let line = view.state.doc.lineAt(from2), lineEnd = view.state.doc.lineAt(to).to;
    let start = Math.max(line.from, from2 - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
    let text5 = view.state.sliceDoc(start, end);
    if (start != line.from) {
      for (let i3 = 0; i3 < AnnounceMargin; i3++)
        if (!Break.test(text5[i3 + 1]) && Break.test(text5[i3])) {
          text5 = text5.slice(i3);
          break;
        }
    }
    if (end != lineEnd) {
      for (let i3 = text5.length - 1; i3 > text5.length - AnnounceMargin; i3--)
        if (!Break.test(text5[i3 - 1]) && Break.test(text5[i3])) {
          text5 = text5.slice(0, i3);
          break;
        }
    }
    return EditorView.announce.of(`${view.state.phrase("current match")}. ${text5} ${view.state.phrase("on line")} ${line.number}.`);
  }
  var baseTheme4 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-panel.cm-search": {
      padding: "2px 6px 4px",
      position: "relative",
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "4px",
        backgroundColor: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      },
      "& input, & button, & label": {
        margin: ".2em .6em .2em 0"
      },
      "& input[type=checkbox]": {
        marginRight: ".2em"
      },
      "& label": {
        fontSize: "80%",
        whiteSpace: "pre"
      }
    },
    "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
    "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
    "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
    "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
  });
  var searchExtensions = [
    searchState,
    /* @__PURE__ */ Prec.low(searchHighlighter),
    baseTheme4
  ];

  // node_modules/codemirror/dist/index.js
  var dist_exports8 = {};
  __export(dist_exports8, {
    EditorView: () => EditorView,
    basicSetup: () => basicSetup,
    minimalSetup: () => minimalSetup
  });

  // node_modules/@codemirror/lint/dist/index.js
  var SelectedDiagnostic = class {
    constructor(from2, to, diagnostic) {
      this.from = from2;
      this.to = to;
      this.diagnostic = diagnostic;
    }
  };
  var LintState = class _LintState {
    constructor(diagnostics, panel, selected) {
      this.diagnostics = diagnostics;
      this.panel = panel;
      this.selected = selected;
    }
    static init(diagnostics, panel, state) {
      let markedDiagnostics = diagnostics;
      let diagnosticFilter = state.facet(lintConfig).markerFilter;
      if (diagnosticFilter)
        markedDiagnostics = diagnosticFilter(markedDiagnostics, state);
      let ranges = Decoration.set(markedDiagnostics.map((d6) => {
        return d6.from == d6.to || d6.from == d6.to - 1 && state.doc.lineAt(d6.from).to == d6.from ? Decoration.widget({
          widget: new DiagnosticWidget(d6),
          diagnostic: d6
        }).range(d6.from) : Decoration.mark({
          attributes: { class: "cm-lintRange cm-lintRange-" + d6.severity + (d6.markClass ? " " + d6.markClass : "") },
          diagnostic: d6,
          inclusive: true
        }).range(d6.from, d6.to);
      }), true);
      return new _LintState(ranges, panel, findDiagnostic(ranges));
    }
  };
  function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
    let found2 = null;
    diagnostics.between(after, 1e9, (from2, to, { spec }) => {
      if (diagnostic && spec.diagnostic != diagnostic)
        return;
      found2 = new SelectedDiagnostic(from2, to, spec.diagnostic);
      return false;
    });
    return found2;
  }
  function hideTooltip(tr, tooltip) {
    let from2 = tooltip.pos, to = tooltip.end || from2;
    let result = tr.state.facet(lintConfig).hideOn(tr, from2, to);
    if (result != null)
      return result;
    let line = tr.startState.doc.lineAt(tooltip.pos);
    return !!(tr.effects.some((e3) => e3.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
  }
  function maybeEnableLint(state, effects) {
    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
  }
  var setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
  var togglePanel2 = /* @__PURE__ */ StateEffect.define();
  var movePanelSelection = /* @__PURE__ */ StateEffect.define();
  var lintState = /* @__PURE__ */ StateField.define({
    create() {
      return new LintState(Decoration.none, null, null);
    },
    update(value, tr) {
      if (tr.docChanged) {
        let mapped = value.diagnostics.map(tr.changes), selected = null;
        if (value.selected) {
          let selPos = tr.changes.mapPos(value.selected.from, 1);
          selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
        }
        value = new LintState(mapped, value.panel, selected);
      }
      for (let effect of tr.effects) {
        if (effect.is(setDiagnosticsEffect)) {
          value = LintState.init(effect.value, value.panel, tr.state);
        } else if (effect.is(togglePanel2)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
      return value;
    },
    provide: (f3) => [
      showPanel.from(f3, (val) => val.panel),
      EditorView.decorations.from(f3, (s4) => s4.diagnostics)
    ]
  });
  var activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active", inclusive: true });
  function lintTooltip(view, pos, side) {
    let { diagnostics } = view.state.field(lintState);
    let found2 = [], stackStart = 2e8, stackEnd = 0;
    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from2, to, { spec }) => {
      if (pos >= from2 && pos <= to && (from2 == to || (pos > from2 || side > 0) && (pos < to || side < 0))) {
        found2.push(spec.diagnostic);
        stackStart = Math.min(from2, stackStart);
        stackEnd = Math.max(to, stackEnd);
      }
    });
    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
    if (diagnosticFilter)
      found2 = diagnosticFilter(found2, view.state);
    if (!found2.length)
      return null;
    return {
      pos: stackStart,
      end: stackEnd,
      above: view.state.doc.lineAt(stackStart).to < stackEnd,
      create() {
        return { dom: diagnosticsTooltip(view, found2) };
      }
    };
  }
  function diagnosticsTooltip(view, diagnostics) {
    return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d6) => renderDiagnostic(view, d6, false)));
  }
  var openLintPanel = (view) => {
    let field = view.state.field(lintState, false);
    if (!field || !field.panel)
      view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel2.of(true)]) });
    let panel = getPanel(view, LintPanel.open);
    if (panel)
      panel.dom.querySelector(".cm-panel-lint ul").focus();
    return true;
  };
  var closeLintPanel = (view) => {
    let field = view.state.field(lintState, false);
    if (!field || !field.panel)
      return false;
    view.dispatch({ effects: togglePanel2.of(false) });
    return true;
  };
  var nextDiagnostic = (view) => {
    let field = view.state.field(lintState, false);
    if (!field)
      return false;
    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
    if (!next.value) {
      next = field.diagnostics.iter(0);
      if (!next.value || next.from == sel.from && next.to == sel.to)
        return false;
    }
    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
    return true;
  };
  var lintKeymap = [
    { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
    { key: "F8", run: nextDiagnostic }
  ];
  var lintConfig = /* @__PURE__ */ Facet.define({
    combine(input) {
      return Object.assign({ sources: input.map((i3) => i3.source).filter((x7) => x7 != null) }, combineConfig(input.map((i3) => i3.config), {
        delay: 750,
        markerFilter: null,
        tooltipFilter: null,
        needsRefresh: null,
        hideOn: () => null
      }, {
        needsRefresh: (a2, b4) => !a2 ? b4 : !b4 ? a2 : (u5) => a2(u5) || b4(u5)
      }));
    }
  });
  function assignKeys(actions) {
    let assigned = [];
    if (actions)
      actions:
        for (let { name: name2 } of actions) {
          for (let i3 = 0; i3 < name2.length; i3++) {
            let ch = name2[i3];
            if (/[a-zA-Z]/.test(ch) && !assigned.some((c5) => c5.toLowerCase() == ch.toLowerCase())) {
              assigned.push(ch);
              continue actions;
            }
          }
          assigned.push("");
        }
    return assigned;
  }
  function renderDiagnostic(view, diagnostic, inPanel) {
    var _a2;
    let keys3 = inPanel ? assignKeys(diagnostic.actions) : [];
    return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i3) => {
      let fired = false, click = (e3) => {
        e3.preventDefault();
        if (fired)
          return;
        fired = true;
        let found2 = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
        if (found2)
          action.apply(view, found2.from, found2.to);
      };
      let { name: name2 } = action, keyIndex = keys3[i3] ? name2.indexOf(keys3[i3]) : -1;
      let nameElt = keyIndex < 0 ? name2 : [
        name2.slice(0, keyIndex),
        crelt("u", name2.slice(keyIndex, keyIndex + 1)),
        name2.slice(keyIndex + 1)
      ];
      return crelt("button", {
        type: "button",
        class: "cm-diagnosticAction",
        onclick: click,
        onmousedown: click,
        "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys3[i3]})"`}.`
      }, nameElt);
    }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
  }
  var DiagnosticWidget = class extends WidgetType {
    constructor(diagnostic) {
      super();
      this.diagnostic = diagnostic;
    }
    eq(other) {
      return other.diagnostic == this.diagnostic;
    }
    toDOM() {
      return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
    }
  };
  var PanelItem = class {
    constructor(view, diagnostic) {
      this.diagnostic = diagnostic;
      this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
      this.dom = renderDiagnostic(view, diagnostic, true);
      this.dom.id = this.id;
      this.dom.setAttribute("role", "option");
    }
  };
  var LintPanel = class _LintPanel {
    constructor(view) {
      this.view = view;
      this.items = [];
      let onkeydown = (event) => {
        if (event.keyCode == 27) {
          closeLintPanel(this.view);
          this.view.focus();
        } else if (event.keyCode == 38 || event.keyCode == 33) {
          this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
        } else if (event.keyCode == 40 || event.keyCode == 34) {
          this.moveSelection((this.selectedIndex + 1) % this.items.length);
        } else if (event.keyCode == 36) {
          this.moveSelection(0);
        } else if (event.keyCode == 35) {
          this.moveSelection(this.items.length - 1);
        } else if (event.keyCode == 13) {
          this.view.focus();
        } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
          let { diagnostic } = this.items[this.selectedIndex], keys3 = assignKeys(diagnostic.actions);
          for (let i3 = 0; i3 < keys3.length; i3++)
            if (keys3[i3].toUpperCase().charCodeAt(0) == event.keyCode) {
              let found2 = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
              if (found2)
                diagnostic.actions[i3].apply(view, found2.from, found2.to);
            }
        } else {
          return;
        }
        event.preventDefault();
      };
      let onclick = (event) => {
        for (let i3 = 0; i3 < this.items.length; i3++) {
          if (this.items[i3].dom.contains(event.target))
            this.moveSelection(i3);
        }
      };
      this.list = crelt("ul", {
        tabIndex: 0,
        role: "listbox",
        "aria-label": this.view.state.phrase("Diagnostics"),
        onkeydown,
        onclick
      });
      this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
        type: "button",
        name: "close",
        "aria-label": this.view.state.phrase("close"),
        onclick: () => closeLintPanel(this.view)
      }, "\xD7"));
      this.update();
    }
    get selectedIndex() {
      let selected = this.view.state.field(lintState).selected;
      if (!selected)
        return -1;
      for (let i3 = 0; i3 < this.items.length; i3++)
        if (this.items[i3].diagnostic == selected.diagnostic)
          return i3;
      return -1;
    }
    update() {
      let { diagnostics, selected } = this.view.state.field(lintState);
      let i3 = 0, needsSync = false, newSelectedItem = null;
      diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
        let found2 = -1, item;
        for (let j6 = i3; j6 < this.items.length; j6++)
          if (this.items[j6].diagnostic == spec.diagnostic) {
            found2 = j6;
            break;
          }
        if (found2 < 0) {
          item = new PanelItem(this.view, spec.diagnostic);
          this.items.splice(i3, 0, item);
          needsSync = true;
        } else {
          item = this.items[found2];
          if (found2 > i3) {
            this.items.splice(i3, found2 - i3);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i3++;
      });
      while (i3 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
          write: ({ sel, panel }) => {
            let scaleY = panel.height / this.list.offsetHeight;
            if (sel.top < panel.top)
              this.list.scrollTop -= (panel.top - sel.top) / scaleY;
            else if (sel.bottom > panel.bottom)
              this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
          }
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync)
        this.sync();
    }
    sync() {
      let domPos = this.list.firstChild;
      function rm3() {
        let prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      for (let item of this.items) {
        if (item.dom.parentNode == this.list) {
          while (domPos != item.dom)
            rm3();
          domPos = item.dom.nextSibling;
        } else {
          this.list.insertBefore(item.dom, domPos);
        }
      }
      while (domPos)
        rm3();
    }
    moveSelection(selectedIndex) {
      if (this.selectedIndex < 0)
        return;
      let field = this.view.state.field(lintState);
      let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection)
        return;
      this.view.dispatch({
        selection: { anchor: selection.from, head: selection.to },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
    static open(view) {
      return new _LintPanel(view);
    }
  };
  function svg(content4, attrs = `viewBox="0 0 40 40"`) {
    return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content4)}</svg>')`;
  }
  function underline(color2) {
    return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color2}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
  }
  var baseTheme5 = /* @__PURE__ */ EditorView.baseTheme({
    ".cm-diagnostic": {
      padding: "3px 6px 3px 8px",
      marginLeft: "-1px",
      display: "block",
      whiteSpace: "pre-wrap"
    },
    ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
    ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
    ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
    ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
    ".cm-diagnosticAction": {
      font: "inherit",
      border: "none",
      padding: "2px 4px",
      backgroundColor: "#444",
      color: "white",
      borderRadius: "3px",
      marginLeft: "8px",
      cursor: "pointer"
    },
    ".cm-diagnosticSource": {
      fontSize: "70%",
      opacity: 0.7
    },
    ".cm-lintRange": {
      backgroundPosition: "left bottom",
      backgroundRepeat: "repeat-x",
      paddingBottom: "0.7px"
    },
    ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
    ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
    ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
    ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
    ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
    ".cm-tooltip-lint": {
      padding: 0,
      margin: 0
    },
    ".cm-lintPoint": {
      position: "relative",
      "&:after": {
        content: '""',
        position: "absolute",
        bottom: 0,
        left: "-2px",
        borderLeft: "3px solid transparent",
        borderRight: "3px solid transparent",
        borderBottom: "4px solid #d11"
      }
    },
    ".cm-lintPoint-warning": {
      "&:after": { borderBottomColor: "orange" }
    },
    ".cm-lintPoint-info": {
      "&:after": { borderBottomColor: "#999" }
    },
    ".cm-lintPoint-hint": {
      "&:after": { borderBottomColor: "#66d" }
    },
    ".cm-panel.cm-panel-lint": {
      position: "relative",
      "& ul": {
        maxHeight: "100px",
        overflowY: "auto",
        "& [aria-selected]": {
          backgroundColor: "#ddd",
          "& u": { textDecoration: "underline" }
        },
        "&:focus [aria-selected]": {
          background_fallback: "#bdf",
          backgroundColor: "Highlight",
          color_fallback: "white",
          color: "HighlightText"
        },
        "& u": { textDecoration: "none" },
        padding: 0,
        margin: 0
      },
      "& [name=close]": {
        position: "absolute",
        top: "0",
        right: "2px",
        background: "inherit",
        border: "none",
        font: "inherit",
        padding: 0,
        margin: 0
      }
    }
  });
  var lintExtensions = [
    lintState,
    /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
      let { selected, panel } = state.field(lintState);
      return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
        activeMark.range(selected.from, selected.to)
      ]);
    }),
    /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
    baseTheme5
  ];

  // node_modules/codemirror/dist/index.js
  var basicSetup = /* @__PURE__ */ (() => [
    lineNumbers(),
    highlightActiveLineGutter(),
    highlightSpecialChars(),
    history(),
    foldGutter(),
    drawSelection(),
    dropCursor(),
    EditorState.allowMultipleSelections.of(true),
    indentOnInput(),
    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
    bracketMatching(),
    closeBrackets(),
    autocompletion(),
    rectangularSelection(),
    crosshairCursor(),
    highlightActiveLine(),
    highlightSelectionMatches(),
    keymap.of([
      ...closeBracketsKeymap,
      ...defaultKeymap,
      ...searchKeymap,
      ...historyKeymap,
      ...foldKeymap,
      ...completionKeymap,
      ...lintKeymap
    ])
  ])();
  var minimalSetup = /* @__PURE__ */ (() => [
    highlightSpecialChars(),
    history(),
    drawSelection(),
    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
    keymap.of([
      ...defaultKeymap,
      ...historyKeymap
    ])
  ])();

  // node_modules/@milkdown/core/lib/index.es.js
  var index_es_exports = {};
  __export(index_es_exports, {
    CommandManager: () => Ke,
    CommandsReady: () => J3,
    ConfigReady: () => L3,
    Editor: () => Oe,
    EditorStateReady: () => q4,
    EditorStatus: () => pt,
    EditorViewReady: () => ne,
    InitReady: () => M4,
    ParserReady: () => W2,
    SchemaReady: () => R3,
    SerializerReady: () => $,
    commands: () => Ae,
    commandsCtx: () => je,
    commandsTimerCtx: () => me,
    config: () => ot,
    createCmdKey: () => Et,
    defaultValueCtx: () => re,
    editorCtx: () => ke,
    editorState: () => _e,
    editorStateCtx: () => V2,
    editorStateOptionsCtx: () => se,
    editorStateTimerCtx: () => ie5,
    editorView: () => ze,
    editorViewCtx: () => H3,
    editorViewOptionsCtx: () => ae,
    editorViewTimerCtx: () => oe,
    getDoc: () => ct,
    init: () => at,
    initTimerCtx: () => G3,
    inputRulesCtx: () => ue,
    markViewCtx: () => ye,
    marksCtx: () => Z2,
    nodeViewCtx: () => fe,
    nodesCtx: () => X,
    parser: () => Ve,
    parserCtx: () => Y,
    parserTimerCtx: () => x4,
    prosePluginsCtx: () => N2,
    remarkCtx: () => P3,
    remarkPluginsCtx: () => pe,
    remarkStringifyOptionsCtx: () => Q2,
    rootAttrsCtx: () => ge,
    rootCtx: () => ce,
    rootDOMCtx: () => we,
    schema: () => Ee,
    schemaCtx: () => b2,
    schemaTimerCtx: () => U3,
    serializer: () => Ne,
    serializerCtx: () => te,
    serializerTimerCtx: () => ee
  });

  // node_modules/@milkdown/exception/lib/index.es.js
  var n = /* @__PURE__ */ ((e3) => (e3.docTypeError = "docTypeError", e3.contextNotFound = "contextNotFound", e3.timerNotFound = "timerNotFound", e3.ctxCallOutOfScope = "ctxCallOutOfScope", e3.createNodeInParserFail = "createNodeInParserFail", e3.stackOverFlow = "stackOverFlow", e3.parserMatchError = "parserMatchError", e3.serializerMatchError = "serializerMatchError", e3.getAtomFromSchemaFail = "getAtomFromSchemaFail", e3.expectDomTypeError = "expectDomTypeError", e3.callCommandBeforeEditorView = "callCommandBeforeEditorView", e3.missingRootElement = "missingRootElement", e3.missingNodeInSchema = "missingNodeInSchema", e3.missingMarkInSchema = "missingMarkInSchema", e3.ctxNotBind = "ctxNotBind", e3.missingYjsDoc = "missingYjsDoc", e3))(n || {});
  var t2 = class extends Error {
    constructor(o2, a2) {
      super(a2), this.name = "MilkdownError", this.code = o2;
    }
  };
  var u = (e3, o2) => typeof o2 == "function" ? "[Function]" : o2;
  var i = (e3) => JSON.stringify(e3, u);
  function l(e3) {
    return new t2(n.docTypeError, `Doc type error, unsupported type: ${i(e3)}`);
  }
  function d(e3) {
    return new t2(n.contextNotFound, `Context "${e3}" not found, do you forget to inject it?`);
  }
  function f(e3) {
    return new t2(n.timerNotFound, `Timer "${e3}" not found, do you forget to record it?`);
  }
  function p() {
    return new t2(n.ctxCallOutOfScope, "Should not call a context out of the plugin.");
  }
  function g(...e3) {
    const o2 = e3.reduce((a2, c5) => {
      if (!c5)
        return a2;
      const s4 = (r4) => Array.isArray(r4) ? r4.map((m4) => s4(m4)).join(", ") : r4.toJSON ? i(r4.toJSON()) : r4.spec ? i(r4.spec) : r4.toString();
      return `${a2}, ${s4(c5)}`;
    }, "Create prosemirror node from remark failed in parser");
    return new t2(n.createNodeInParserFail, o2);
  }
  function h() {
    return new t2(n.stackOverFlow, "Stack over flow, cannot pop on an empty stack.");
  }
  function w(e3) {
    return new t2(n.parserMatchError, `Cannot match target parser for node: ${i(e3)}.`);
  }
  function F(e3) {
    return new t2(n.serializerMatchError, `Cannot match target serializer for node: ${i(e3)}.`);
  }
  function S(e3) {
    return new t2(n.expectDomTypeError, `Expect to be a dom, but get: ${i(e3)}.`);
  }
  function y() {
    return new t2(
      n.callCommandBeforeEditorView,
      "You're trying to call a command before editor view initialized, make sure to get commandManager from ctx after editor view has been initialized"
    );
  }
  function M(e3) {
    return new t2(
      n.missingNodeInSchema,
      `Missing node in schema, milkdown cannot find "${e3}" in schema.`
    );
  }
  function x(e3) {
    return new t2(
      n.missingMarkInSchema,
      `Missing mark in schema, milkdown cannot find "${e3}" in schema.`
    );
  }

  // node_modules/@milkdown/ctx/lib/index.es.js
  var P = (o2, s4, i3) => {
    if (!s4.has(o2))
      throw TypeError("Cannot " + i3);
  };
  var e = (o2, s4, i3) => (P(o2, s4, "read from private field"), i3 ? i3.call(o2) : s4.get(o2));
  var a = (o2, s4, i3) => {
    if (s4.has(o2))
      throw TypeError("Cannot add the same private member more than once");
    s4 instanceof WeakSet ? s4.add(o2) : s4.set(o2, i3);
  };
  var n2 = (o2, s4, i3, r4) => (P(o2, s4, "write to private field"), r4 ? r4.call(o2, i3) : s4.set(o2, i3), i3);
  var G = class {
    constructor() {
      this.sliceMap = /* @__PURE__ */ new Map(), this.get = (s4) => {
        const i3 = typeof s4 == "string" ? [...this.sliceMap.values()].find((r4) => r4.type.name === s4) : this.sliceMap.get(s4.id);
        if (!i3) {
          const r4 = typeof s4 == "string" ? s4 : s4.name;
          throw d(r4);
        }
        return i3;
      }, this.remove = (s4) => {
        const i3 = typeof s4 == "string" ? [...this.sliceMap.values()].find((r4) => r4.type.name === s4) : this.sliceMap.get(s4.id);
        i3 && this.sliceMap.delete(i3.type.id);
      }, this.has = (s4) => typeof s4 == "string" ? [...this.sliceMap.values()].some((i3) => i3.type.name === s4) : this.sliceMap.has(s4.id);
    }
  };
  var u2;
  var m;
  var y2;
  var V = class {
    /// @internal
    constructor(s4, i3, r4) {
      a(this, u2, void 0);
      a(this, m, void 0);
      a(this, y2, void 0);
      n2(this, u2, []), n2(this, y2, () => {
        e(this, u2).forEach((t4) => t4(e(this, m)));
      }), this.set = (t4) => {
        n2(this, m, t4), e(this, y2).call(this);
      }, this.get = () => e(this, m), this.update = (t4) => {
        n2(this, m, t4(e(this, m))), e(this, y2).call(this);
      }, this.type = r4, n2(this, m, i3), s4.set(r4.id, this);
    }
    /// Add a watcher for changes in the slice.
    /// Returns a function to remove the watcher.
    on(s4) {
      return e(this, u2).push(s4), () => {
        n2(this, u2, e(this, u2).filter((i3) => i3 !== s4));
      };
    }
    /// Add a one-time watcher for changes in the slice.
    /// The watcher will be removed after it is called.
    /// Returns a function to remove the watcher.
    once(s4) {
      const i3 = this.on((r4) => {
        s4(r4), i3();
      });
      return i3;
    }
    /// Remove a watcher.
    off(s4) {
      n2(this, u2, e(this, u2).filter((i3) => i3 !== s4));
    }
    /// Remove all watchers.
    offAll() {
      n2(this, u2, []);
    }
  };
  u2 = /* @__PURE__ */ new WeakMap(), m = /* @__PURE__ */ new WeakMap(), y2 = /* @__PURE__ */ new WeakMap();
  var W = class {
    /// Create a slice type with a default value and a name.
    /// The name should be unique in the container.
    constructor(s4, i3) {
      this.id = Symbol(`Context-${i3}`), this.name = i3, this._defaultValue = s4, this._typeInfo = () => {
        throw p();
      };
    }
    /// Create a slice with a container.
    /// You can also pass a value to override the default value.
    create(s4, i3 = this._defaultValue) {
      return new V(s4, i3, this);
    }
  };
  var H = (o2, s4) => new W(o2, s4);
  var D;
  var x2;
  var R;
  var w2;
  var S2;
  var f2;
  var M2;
  var T;
  var j;
  var _ = class {
    /// Create an inspector with container, clock and metadata.
    constructor(s4, i3, r4) {
      a(this, D, void 0);
      a(this, x2, void 0);
      a(this, R, void 0);
      a(this, w2, void 0);
      a(this, S2, void 0);
      a(this, f2, void 0);
      a(this, M2, void 0);
      a(this, T, void 0);
      a(this, j, void 0);
      n2(this, w2, /* @__PURE__ */ new Set()), n2(this, S2, /* @__PURE__ */ new Set()), n2(this, f2, /* @__PURE__ */ new Map()), n2(this, M2, /* @__PURE__ */ new Map()), this.read = () => ({
        metadata: e(this, D),
        injectedSlices: [...e(this, w2)].map((t4) => ({
          name: typeof t4 == "string" ? t4 : t4.name,
          value: e(this, T).call(this, t4)
        })),
        consumedSlices: [...e(this, S2)].map((t4) => ({
          name: typeof t4 == "string" ? t4 : t4.name,
          value: e(this, T).call(this, t4)
        })),
        recordedTimers: [...e(this, f2)].map(([t4, { duration: h3 }]) => ({
          name: t4.name,
          duration: h3,
          status: e(this, j).call(this, t4)
        })),
        waitTimers: [...e(this, M2)].map(([t4, { duration: h3 }]) => ({
          name: t4.name,
          duration: h3,
          status: e(this, j).call(this, t4)
        }))
      }), this.onRecord = (t4) => {
        e(this, f2).set(t4, { start: Date.now(), duration: 0 });
      }, this.onClear = (t4) => {
        e(this, f2).delete(t4);
      }, this.onDone = (t4) => {
        const h3 = e(this, f2).get(t4);
        h3 && (h3.duration = Date.now() - h3.start);
      }, this.onWait = (t4, h3) => {
        const v4 = Date.now();
        h3.finally(() => {
          e(this, M2).set(t4, { duration: Date.now() - v4 });
        });
      }, this.onInject = (t4) => {
        e(this, w2).add(t4);
      }, this.onRemove = (t4) => {
        e(this, w2).delete(t4);
      }, this.onUse = (t4) => {
        e(this, S2).add(t4);
      }, n2(this, T, (t4) => e(this, x2).get(t4).get()), n2(this, j, (t4) => e(this, R).get(t4).status), n2(this, x2, s4), n2(this, R, i3), n2(this, D, r4);
    }
  };
  D = /* @__PURE__ */ new WeakMap(), x2 = /* @__PURE__ */ new WeakMap(), R = /* @__PURE__ */ new WeakMap(), w2 = /* @__PURE__ */ new WeakMap(), S2 = /* @__PURE__ */ new WeakMap(), f2 = /* @__PURE__ */ new WeakMap(), M2 = /* @__PURE__ */ new WeakMap(), T = /* @__PURE__ */ new WeakMap(), j = /* @__PURE__ */ new WeakMap();
  var d2;
  var l2;
  var b;
  var c;
  var L = class L2 {
    /// Create a ctx object with container and clock.
    constructor(s4, i3, r4) {
      a(this, d2, void 0);
      a(this, l2, void 0);
      a(this, b, void 0);
      a(this, c, void 0);
      this.produce = (t4) => t4 && Object.keys(t4).length ? new L2(e(this, d2), e(this, l2), __spreadValues({}, t4)) : this, this.inject = (t4, h3) => {
        var O4;
        const v4 = t4.create(e(this, d2).sliceMap);
        return h3 != null && v4.set(h3), (O4 = e(this, c)) == null || O4.onInject(t4), this;
      }, this.remove = (t4) => {
        var h3;
        return e(this, d2).remove(t4), (h3 = e(this, c)) == null || h3.onRemove(t4), this;
      }, this.record = (t4) => {
        var h3;
        return t4.create(e(this, l2).store), (h3 = e(this, c)) == null || h3.onRecord(t4), this;
      }, this.clearTimer = (t4) => {
        var h3;
        return e(this, l2).remove(t4), (h3 = e(this, c)) == null || h3.onClear(t4), this;
      }, this.isInjected = (t4) => e(this, d2).has(t4), this.isRecorded = (t4) => e(this, l2).has(t4), this.use = (t4) => {
        var h3;
        return (h3 = e(this, c)) == null || h3.onUse(t4), e(this, d2).get(t4);
      }, this.get = (t4) => this.use(t4).get(), this.set = (t4, h3) => this.use(t4).set(h3), this.update = (t4, h3) => this.use(t4).update(h3), this.timer = (t4) => e(this, l2).get(t4), this.done = (t4) => {
        var h3;
        this.timer(t4).done(), (h3 = e(this, c)) == null || h3.onDone(t4);
      }, this.wait = (t4) => {
        var v4;
        const h3 = this.timer(t4).start();
        return (v4 = e(this, c)) == null || v4.onWait(t4, h3), h3;
      }, this.waitTimers = (t4) => __async(this, null, function* () {
        yield Promise.all(this.get(t4).map((h3) => this.wait(h3)));
      }), n2(this, d2, s4), n2(this, l2, i3), n2(this, b, r4), r4 && n2(this, c, new _(s4, i3, r4));
    }
    /// Get metadata of the ctx.
    get meta() {
      return e(this, b);
    }
    /// Get the inspector of the ctx.
    get inspector() {
      return e(this, c);
    }
  };
  d2 = /* @__PURE__ */ new WeakMap(), l2 = /* @__PURE__ */ new WeakMap(), b = /* @__PURE__ */ new WeakMap(), c = /* @__PURE__ */ new WeakMap();
  var U = L;
  var J = class {
    constructor() {
      this.store = /* @__PURE__ */ new Map(), this.get = (s4) => {
        const i3 = this.store.get(s4.id);
        if (!i3)
          throw f(s4.name);
        return i3;
      }, this.remove = (s4) => {
        this.store.delete(s4.id);
      }, this.has = (s4) => this.store.has(s4.id);
    }
  };
  var C2;
  var g2;
  var E;
  var p2;
  var I;
  var k;
  var q = class {
    /// @internal
    constructor(s4, i3) {
      a(this, C2, void 0);
      a(this, g2, void 0);
      a(this, E, void 0);
      a(this, p2, void 0);
      a(this, I, void 0);
      a(this, k, void 0);
      n2(this, C2, null), n2(this, g2, null), n2(this, p2, "pending"), this.start = () => {
        var _a2;
        return (_a2 = e(this, C2)) != null ? _a2 : n2(this, C2, new Promise((r4, t4) => {
          n2(this, g2, (h3) => {
            h3 instanceof CustomEvent && h3.detail.id === e(this, E) && (n2(this, p2, "resolved"), e(this, I).call(this), h3.stopImmediatePropagation(), r4());
          }), e(this, k).call(this, () => {
            e(this, p2) === "pending" && n2(this, p2, "rejected"), e(this, I).call(this), t4(new Error(`Timing ${this.type.name} timeout.`));
          }), n2(this, p2, "pending"), addEventListener(this.type.name, e(this, g2));
        })), e(this, C2);
      }, this.done = () => {
        const r4 = new CustomEvent(this.type.name, { detail: { id: e(this, E) } });
        dispatchEvent(r4);
      }, n2(this, I, () => {
        e(this, g2) && removeEventListener(this.type.name, e(this, g2));
      }), n2(this, k, (r4) => {
        setTimeout(() => {
          r4();
        }, this.type.timeout);
      }), n2(this, E, Symbol(i3.name)), this.type = i3, s4.set(i3.id, this);
    }
    /// The status of the timer.
    /// Can be `pending`, `resolved` or `rejected`.
    get status() {
      return e(this, p2);
    }
  };
  C2 = /* @__PURE__ */ new WeakMap(), g2 = /* @__PURE__ */ new WeakMap(), E = /* @__PURE__ */ new WeakMap(), p2 = /* @__PURE__ */ new WeakMap(), I = /* @__PURE__ */ new WeakMap(), k = /* @__PURE__ */ new WeakMap();
  var A = class {
    /// Create a timer type with a name and a timeout.
    /// The name should be unique in the clock.
    constructor(s4, i3 = 3e3) {
      this.create = (r4) => new q(r4, this), this.id = Symbol(`Timer-${s4}`), this.name = s4, this.timeout = i3;
    }
  };
  var K = (o2, s4 = 3e3) => new A(o2, s4);

  // node_modules/orderedmap/dist/index.js
  function OrderedMap(content4) {
    this.content = content4;
  }
  OrderedMap.prototype = {
    constructor: OrderedMap,
    find: function(key) {
      for (var i3 = 0; i3 < this.content.length; i3 += 2)
        if (this.content[i3] === key)
          return i3;
      return -1;
    },
    // :: (string) → ?any
    // Retrieve the value stored under `key`, or return undefined when
    // no such key exists.
    get: function(key) {
      var found2 = this.find(key);
      return found2 == -1 ? void 0 : this.content[found2 + 1];
    },
    // :: (string, any, ?string) → OrderedMap
    // Create a new map by replacing the value of `key` with a new
    // value, or adding a binding to the end of the map. If `newKey` is
    // given, the key of the binding will be replaced with that key.
    update: function(key, value, newKey) {
      var self2 = newKey && newKey != key ? this.remove(newKey) : this;
      var found2 = self2.find(key), content4 = self2.content.slice();
      if (found2 == -1) {
        content4.push(newKey || key, value);
      } else {
        content4[found2 + 1] = value;
        if (newKey)
          content4[found2] = newKey;
      }
      return new OrderedMap(content4);
    },
    // :: (string) → OrderedMap
    // Return a map with the given key removed, if it existed.
    remove: function(key) {
      var found2 = this.find(key);
      if (found2 == -1)
        return this;
      var content4 = this.content.slice();
      content4.splice(found2, 2);
      return new OrderedMap(content4);
    },
    // :: (string, any) → OrderedMap
    // Add a new key to the start of the map.
    addToStart: function(key, value) {
      return new OrderedMap([key, value].concat(this.remove(key).content));
    },
    // :: (string, any) → OrderedMap
    // Add a new key to the end of the map.
    addToEnd: function(key, value) {
      var content4 = this.remove(key).content.slice();
      content4.push(key, value);
      return new OrderedMap(content4);
    },
    // :: (string, string, any) → OrderedMap
    // Add a key after the given key. If `place` is not found, the new
    // key is added to the end.
    addBefore: function(place, key, value) {
      var without = this.remove(key), content4 = without.content.slice();
      var found2 = without.find(place);
      content4.splice(found2 == -1 ? content4.length : found2, 0, key, value);
      return new OrderedMap(content4);
    },
    // :: ((key: string, value: any))
    // Call the given function for each key/value pair in the map, in
    // order.
    forEach: function(f3) {
      for (var i3 = 0; i3 < this.content.length; i3 += 2)
        f3(this.content[i3], this.content[i3 + 1]);
    },
    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a new map by prepending the keys in this map that don't
    // appear in `map` before the keys in `map`.
    prepend: function(map6) {
      map6 = OrderedMap.from(map6);
      if (!map6.size)
        return this;
      return new OrderedMap(map6.content.concat(this.subtract(map6).content));
    },
    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a new map by appending the keys in this map that don't
    // appear in `map` after the keys in `map`.
    append: function(map6) {
      map6 = OrderedMap.from(map6);
      if (!map6.size)
        return this;
      return new OrderedMap(this.subtract(map6).content.concat(map6.content));
    },
    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a map containing all the keys in this map that don't
    // appear in `map`.
    subtract: function(map6) {
      var result = this;
      map6 = OrderedMap.from(map6);
      for (var i3 = 0; i3 < map6.content.length; i3 += 2)
        result = result.remove(map6.content[i3]);
      return result;
    },
    // :: () → Object
    // Turn ordered map into a plain object.
    toObject: function() {
      var result = {};
      this.forEach(function(key, value) {
        result[key] = value;
      });
      return result;
    },
    // :: number
    // The amount of keys in this map.
    get size() {
      return this.content.length >> 1;
    }
  };
  OrderedMap.from = function(value) {
    if (value instanceof OrderedMap)
      return value;
    var content4 = [];
    if (value)
      for (var prop in value)
        content4.push(prop, value[prop]);
    return new OrderedMap(content4);
  };
  var dist_default = OrderedMap;

  // node_modules/prosemirror-model/dist/index.js
  function findDiffStart(a2, b4, pos) {
    for (let i3 = 0; ; i3++) {
      if (i3 == a2.childCount || i3 == b4.childCount)
        return a2.childCount == b4.childCount ? null : pos;
      let childA = a2.child(i3), childB = b4.child(i3);
      if (childA == childB) {
        pos += childA.nodeSize;
        continue;
      }
      if (!childA.sameMarkup(childB))
        return pos;
      if (childA.isText && childA.text != childB.text) {
        for (let j6 = 0; childA.text[j6] == childB.text[j6]; j6++)
          pos++;
        return pos;
      }
      if (childA.content.size || childB.content.size) {
        let inner = findDiffStart(childA.content, childB.content, pos + 1);
        if (inner != null)
          return inner;
      }
      pos += childA.nodeSize;
    }
  }
  function findDiffEnd(a2, b4, posA, posB) {
    for (let iA = a2.childCount, iB = b4.childCount; ; ) {
      if (iA == 0 || iB == 0)
        return iA == iB ? null : { a: posA, b: posB };
      let childA = a2.child(--iA), childB = b4.child(--iB), size = childA.nodeSize;
      if (childA == childB) {
        posA -= size;
        posB -= size;
        continue;
      }
      if (!childA.sameMarkup(childB))
        return { a: posA, b: posB };
      if (childA.isText && childA.text != childB.text) {
        let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
        while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
          same++;
          posA--;
          posB--;
        }
        return { a: posA, b: posB };
      }
      if (childA.content.size || childB.content.size) {
        let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
        if (inner)
          return inner;
      }
      posA -= size;
      posB -= size;
    }
  }
  var Fragment = class _Fragment {
    /**
    @internal
    */
    constructor(content4, size) {
      this.content = content4;
      this.size = size || 0;
      if (size == null)
        for (let i3 = 0; i3 < content4.length; i3++)
          this.size += content4[i3].nodeSize;
    }
    /**
    Invoke a callback for all descendant nodes between the given two
    positions (relative to start of this fragment). Doesn't descend
    into a node when the callback returns `false`.
    */
    nodesBetween(from2, to, f3, nodeStart2 = 0, parent) {
      for (let i3 = 0, pos = 0; pos < to; i3++) {
        let child = this.content[i3], end = pos + child.nodeSize;
        if (end > from2 && f3(child, nodeStart2 + pos, parent || null, i3) !== false && child.content.size) {
          let start = pos + 1;
          child.nodesBetween(Math.max(0, from2 - start), Math.min(child.content.size, to - start), f3, nodeStart2 + start);
        }
        pos = end;
      }
    }
    /**
    Call the given callback for every descendant node. `pos` will be
    relative to the start of the fragment. The callback may return
    `false` to prevent traversal of a given node's children.
    */
    descendants(f3) {
      this.nodesBetween(0, this.size, f3);
    }
    /**
    Extract the text between `from` and `to`. See the same method on
    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
    */
    textBetween(from2, to, blockSeparator, leafText) {
      let text5 = "", first = true;
      this.nodesBetween(from2, to, (node2, pos) => {
        let nodeText = node2.isText ? node2.text.slice(Math.max(from2, pos) - pos, to - pos) : !node2.isLeaf ? "" : leafText ? typeof leafText === "function" ? leafText(node2) : leafText : node2.type.spec.leafText ? node2.type.spec.leafText(node2) : "";
        if (node2.isBlock && (node2.isLeaf && nodeText || node2.isTextblock) && blockSeparator) {
          if (first)
            first = false;
          else
            text5 += blockSeparator;
        }
        text5 += nodeText;
      }, 0);
      return text5;
    }
    /**
    Create a new fragment containing the combined content of this
    fragment and the other.
    */
    append(other) {
      if (!other.size)
        return this;
      if (!this.size)
        return other;
      let last = this.lastChild, first = other.firstChild, content4 = this.content.slice(), i3 = 0;
      if (last.isText && last.sameMarkup(first)) {
        content4[content4.length - 1] = last.withText(last.text + first.text);
        i3 = 1;
      }
      for (; i3 < other.content.length; i3++)
        content4.push(other.content[i3]);
      return new _Fragment(content4, this.size + other.size);
    }
    /**
    Cut out the sub-fragment between the two given positions.
    */
    cut(from2, to = this.size) {
      if (from2 == 0 && to == this.size)
        return this;
      let result = [], size = 0;
      if (to > from2)
        for (let i3 = 0, pos = 0; pos < to; i3++) {
          let child = this.content[i3], end = pos + child.nodeSize;
          if (end > from2) {
            if (pos < from2 || end > to) {
              if (child.isText)
                child = child.cut(Math.max(0, from2 - pos), Math.min(child.text.length, to - pos));
              else
                child = child.cut(Math.max(0, from2 - pos - 1), Math.min(child.content.size, to - pos - 1));
            }
            result.push(child);
            size += child.nodeSize;
          }
          pos = end;
        }
      return new _Fragment(result, size);
    }
    /**
    @internal
    */
    cutByIndex(from2, to) {
      if (from2 == to)
        return _Fragment.empty;
      if (from2 == 0 && to == this.content.length)
        return this;
      return new _Fragment(this.content.slice(from2, to));
    }
    /**
    Create a new fragment in which the node at the given index is
    replaced by the given node.
    */
    replaceChild(index2, node2) {
      let current = this.content[index2];
      if (current == node2)
        return this;
      let copy2 = this.content.slice();
      let size = this.size + node2.nodeSize - current.nodeSize;
      copy2[index2] = node2;
      return new _Fragment(copy2, size);
    }
    /**
    Create a new fragment by prepending the given node to this
    fragment.
    */
    addToStart(node2) {
      return new _Fragment([node2].concat(this.content), this.size + node2.nodeSize);
    }
    /**
    Create a new fragment by appending the given node to this
    fragment.
    */
    addToEnd(node2) {
      return new _Fragment(this.content.concat(node2), this.size + node2.nodeSize);
    }
    /**
    Compare this fragment to another one.
    */
    eq(other) {
      if (this.content.length != other.content.length)
        return false;
      for (let i3 = 0; i3 < this.content.length; i3++)
        if (!this.content[i3].eq(other.content[i3]))
          return false;
      return true;
    }
    /**
    The first child of the fragment, or `null` if it is empty.
    */
    get firstChild() {
      return this.content.length ? this.content[0] : null;
    }
    /**
    The last child of the fragment, or `null` if it is empty.
    */
    get lastChild() {
      return this.content.length ? this.content[this.content.length - 1] : null;
    }
    /**
    The number of child nodes in this fragment.
    */
    get childCount() {
      return this.content.length;
    }
    /**
    Get the child node at the given index. Raise an error when the
    index is out of range.
    */
    child(index2) {
      let found2 = this.content[index2];
      if (!found2)
        throw new RangeError("Index " + index2 + " out of range for " + this);
      return found2;
    }
    /**
    Get the child node at the given index, if it exists.
    */
    maybeChild(index2) {
      return this.content[index2] || null;
    }
    /**
    Call `f` for every child node, passing the node, its offset
    into this parent node, and its index.
    */
    forEach(f3) {
      for (let i3 = 0, p6 = 0; i3 < this.content.length; i3++) {
        let child = this.content[i3];
        f3(child, p6, i3);
        p6 += child.nodeSize;
      }
    }
    /**
    Find the first position at which this fragment and another
    fragment differ, or `null` if they are the same.
    */
    findDiffStart(other, pos = 0) {
      return findDiffStart(this, other, pos);
    }
    /**
    Find the first position, searching from the end, at which this
    fragment and the given fragment differ, or `null` if they are
    the same. Since this position will not be the same in both
    nodes, an object with two separate positions is returned.
    */
    findDiffEnd(other, pos = this.size, otherPos = other.size) {
      return findDiffEnd(this, other, pos, otherPos);
    }
    /**
    Find the index and inner offset corresponding to a given relative
    position in this fragment. The result object will be reused
    (overwritten) the next time the function is called. (Not public.)
    */
    findIndex(pos, round = -1) {
      if (pos == 0)
        return retIndex(0, pos);
      if (pos == this.size)
        return retIndex(this.content.length, pos);
      if (pos > this.size || pos < 0)
        throw new RangeError(`Position ${pos} outside of fragment (${this})`);
      for (let i3 = 0, curPos = 0; ; i3++) {
        let cur2 = this.child(i3), end = curPos + cur2.nodeSize;
        if (end >= pos) {
          if (end == pos || round > 0)
            return retIndex(i3 + 1, end);
          return retIndex(i3, curPos);
        }
        curPos = end;
      }
    }
    /**
    Return a debugging string that describes this fragment.
    */
    toString() {
      return "<" + this.toStringInner() + ">";
    }
    /**
    @internal
    */
    toStringInner() {
      return this.content.join(", ");
    }
    /**
    Create a JSON-serializeable representation of this fragment.
    */
    toJSON() {
      return this.content.length ? this.content.map((n5) => n5.toJSON()) : null;
    }
    /**
    Deserialize a fragment from its JSON representation.
    */
    static fromJSON(schema, value) {
      if (!value)
        return _Fragment.empty;
      if (!Array.isArray(value))
        throw new RangeError("Invalid input for Fragment.fromJSON");
      return new _Fragment(value.map(schema.nodeFromJSON));
    }
    /**
    Build a fragment from an array of nodes. Ensures that adjacent
    text nodes with the same marks are joined together.
    */
    static fromArray(array) {
      if (!array.length)
        return _Fragment.empty;
      let joined, size = 0;
      for (let i3 = 0; i3 < array.length; i3++) {
        let node2 = array[i3];
        size += node2.nodeSize;
        if (i3 && node2.isText && array[i3 - 1].sameMarkup(node2)) {
          if (!joined)
            joined = array.slice(0, i3);
          joined[joined.length - 1] = node2.withText(joined[joined.length - 1].text + node2.text);
        } else if (joined) {
          joined.push(node2);
        }
      }
      return new _Fragment(joined || array, size);
    }
    /**
    Create a fragment from something that can be interpreted as a
    set of nodes. For `null`, it returns the empty fragment. For a
    fragment, the fragment itself. For a node or array of nodes, a
    fragment containing those nodes.
    */
    static from(nodes) {
      if (!nodes)
        return _Fragment.empty;
      if (nodes instanceof _Fragment)
        return nodes;
      if (Array.isArray(nodes))
        return this.fromArray(nodes);
      if (nodes.attrs)
        return new _Fragment([nodes], nodes.nodeSize);
      throw new RangeError("Can not convert " + nodes + " to a Fragment" + (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
    }
  };
  Fragment.empty = new Fragment([], 0);
  var found = { index: 0, offset: 0 };
  function retIndex(index2, offset) {
    found.index = index2;
    found.offset = offset;
    return found;
  }
  function compareDeep(a2, b4) {
    if (a2 === b4)
      return true;
    if (!(a2 && typeof a2 == "object") || !(b4 && typeof b4 == "object"))
      return false;
    let array = Array.isArray(a2);
    if (Array.isArray(b4) != array)
      return false;
    if (array) {
      if (a2.length != b4.length)
        return false;
      for (let i3 = 0; i3 < a2.length; i3++)
        if (!compareDeep(a2[i3], b4[i3]))
          return false;
    } else {
      for (let p6 in a2)
        if (!(p6 in b4) || !compareDeep(a2[p6], b4[p6]))
          return false;
      for (let p6 in b4)
        if (!(p6 in a2))
          return false;
    }
    return true;
  }
  var Mark = class _Mark {
    /**
    @internal
    */
    constructor(type, attrs) {
      this.type = type;
      this.attrs = attrs;
    }
    /**
    Given a set of marks, create a new set which contains this one as
    well, in the right position. If this mark is already in the set,
    the set itself is returned. If any marks that are set to be
    [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
    those are replaced by this one.
    */
    addToSet(set) {
      let copy2, placed = false;
      for (let i3 = 0; i3 < set.length; i3++) {
        let other = set[i3];
        if (this.eq(other))
          return set;
        if (this.type.excludes(other.type)) {
          if (!copy2)
            copy2 = set.slice(0, i3);
        } else if (other.type.excludes(this.type)) {
          return set;
        } else {
          if (!placed && other.type.rank > this.type.rank) {
            if (!copy2)
              copy2 = set.slice(0, i3);
            copy2.push(this);
            placed = true;
          }
          if (copy2)
            copy2.push(other);
        }
      }
      if (!copy2)
        copy2 = set.slice();
      if (!placed)
        copy2.push(this);
      return copy2;
    }
    /**
    Remove this mark from the given set, returning a new set. If this
    mark is not in the set, the set itself is returned.
    */
    removeFromSet(set) {
      for (let i3 = 0; i3 < set.length; i3++)
        if (this.eq(set[i3]))
          return set.slice(0, i3).concat(set.slice(i3 + 1));
      return set;
    }
    /**
    Test whether this mark is in the given set of marks.
    */
    isInSet(set) {
      for (let i3 = 0; i3 < set.length; i3++)
        if (this.eq(set[i3]))
          return true;
      return false;
    }
    /**
    Test whether this mark has the same type and attributes as
    another mark.
    */
    eq(other) {
      return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);
    }
    /**
    Convert this mark to a JSON-serializeable representation.
    */
    toJSON() {
      let obj = { type: this.type.name };
      for (let _3 in this.attrs) {
        obj.attrs = this.attrs;
        break;
      }
      return obj;
    }
    /**
    Deserialize a mark from JSON.
    */
    static fromJSON(schema, json) {
      if (!json)
        throw new RangeError("Invalid input for Mark.fromJSON");
      let type = schema.marks[json.type];
      if (!type)
        throw new RangeError(`There is no mark type ${json.type} in this schema`);
      return type.create(json.attrs);
    }
    /**
    Test whether two sets of marks are identical.
    */
    static sameSet(a2, b4) {
      if (a2 == b4)
        return true;
      if (a2.length != b4.length)
        return false;
      for (let i3 = 0; i3 < a2.length; i3++)
        if (!a2[i3].eq(b4[i3]))
          return false;
      return true;
    }
    /**
    Create a properly sorted mark set from null, a single mark, or an
    unsorted array of marks.
    */
    static setFrom(marks2) {
      if (!marks2 || Array.isArray(marks2) && marks2.length == 0)
        return _Mark.none;
      if (marks2 instanceof _Mark)
        return [marks2];
      let copy2 = marks2.slice();
      copy2.sort((a2, b4) => a2.type.rank - b4.type.rank);
      return copy2;
    }
  };
  Mark.none = [];
  var ReplaceError = class extends Error {
  };
  var Slice = class _Slice {
    /**
    Create a slice. When specifying a non-zero open depth, you must
    make sure that there are nodes of at least that depth at the
    appropriate side of the fragment—i.e. if the fragment is an
    empty paragraph node, `openStart` and `openEnd` can't be greater
    than 1.
    
    It is not necessary for the content of open nodes to conform to
    the schema's content constraints, though it should be a valid
    start/end/middle for such a node, depending on which sides are
    open.
    */
    constructor(content4, openStart, openEnd) {
      this.content = content4;
      this.openStart = openStart;
      this.openEnd = openEnd;
    }
    /**
    The size this slice would add when inserted into a document.
    */
    get size() {
      return this.content.size - this.openStart - this.openEnd;
    }
    /**
    @internal
    */
    insertAt(pos, fragment) {
      let content4 = insertInto(this.content, pos + this.openStart, fragment);
      return content4 && new _Slice(content4, this.openStart, this.openEnd);
    }
    /**
    @internal
    */
    removeBetween(from2, to) {
      return new _Slice(removeRange(this.content, from2 + this.openStart, to + this.openStart), this.openStart, this.openEnd);
    }
    /**
    Tests whether this slice is equal to another slice.
    */
    eq(other) {
      return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
    }
    /**
    @internal
    */
    toString() {
      return this.content + "(" + this.openStart + "," + this.openEnd + ")";
    }
    /**
    Convert a slice to a JSON-serializable representation.
    */
    toJSON() {
      if (!this.content.size)
        return null;
      let json = { content: this.content.toJSON() };
      if (this.openStart > 0)
        json.openStart = this.openStart;
      if (this.openEnd > 0)
        json.openEnd = this.openEnd;
      return json;
    }
    /**
    Deserialize a slice from its JSON representation.
    */
    static fromJSON(schema, json) {
      if (!json)
        return _Slice.empty;
      let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
      if (typeof openStart != "number" || typeof openEnd != "number")
        throw new RangeError("Invalid input for Slice.fromJSON");
      return new _Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
    }
    /**
    Create a slice from a fragment by taking the maximum possible
    open value on both side of the fragment.
    */
    static maxOpen(fragment, openIsolating = true) {
      let openStart = 0, openEnd = 0;
      for (let n5 = fragment.firstChild; n5 && !n5.isLeaf && (openIsolating || !n5.type.spec.isolating); n5 = n5.firstChild)
        openStart++;
      for (let n5 = fragment.lastChild; n5 && !n5.isLeaf && (openIsolating || !n5.type.spec.isolating); n5 = n5.lastChild)
        openEnd++;
      return new _Slice(fragment, openStart, openEnd);
    }
  };
  Slice.empty = new Slice(Fragment.empty, 0, 0);
  function removeRange(content4, from2, to) {
    let { index: index2, offset } = content4.findIndex(from2), child = content4.maybeChild(index2);
    let { index: indexTo, offset: offsetTo } = content4.findIndex(to);
    if (offset == from2 || child.isText) {
      if (offsetTo != to && !content4.child(indexTo).isText)
        throw new RangeError("Removing non-flat range");
      return content4.cut(0, from2).append(content4.cut(to));
    }
    if (index2 != indexTo)
      throw new RangeError("Removing non-flat range");
    return content4.replaceChild(index2, child.copy(removeRange(child.content, from2 - offset - 1, to - offset - 1)));
  }
  function insertInto(content4, dist2, insert2, parent) {
    let { index: index2, offset } = content4.findIndex(dist2), child = content4.maybeChild(index2);
    if (offset == dist2 || child.isText) {
      if (parent && !parent.canReplace(index2, index2, insert2))
        return null;
      return content4.cut(0, dist2).append(insert2).append(content4.cut(dist2));
    }
    let inner = insertInto(child.content, dist2 - offset - 1, insert2);
    return inner && content4.replaceChild(index2, child.copy(inner));
  }
  function replace($from, $to, slice2) {
    if (slice2.openStart > $from.depth)
      throw new ReplaceError("Inserted content deeper than insertion position");
    if ($from.depth - slice2.openStart != $to.depth - slice2.openEnd)
      throw new ReplaceError("Inconsistent open depths");
    return replaceOuter($from, $to, slice2, 0);
  }
  function replaceOuter($from, $to, slice2, depth2) {
    let index2 = $from.index(depth2), node2 = $from.node(depth2);
    if (index2 == $to.index(depth2) && depth2 < $from.depth - slice2.openStart) {
      let inner = replaceOuter($from, $to, slice2, depth2 + 1);
      return node2.copy(node2.content.replaceChild(index2, inner));
    } else if (!slice2.content.size) {
      return close(node2, replaceTwoWay($from, $to, depth2));
    } else if (!slice2.openStart && !slice2.openEnd && $from.depth == depth2 && $to.depth == depth2) {
      let parent = $from.parent, content4 = parent.content;
      return close(parent, content4.cut(0, $from.parentOffset).append(slice2.content).append(content4.cut($to.parentOffset)));
    } else {
      let { start, end } = prepareSliceForReplace(slice2, $from);
      return close(node2, replaceThreeWay($from, start, end, $to, depth2));
    }
  }
  function checkJoin(main, sub) {
    if (!sub.type.compatibleContent(main.type))
      throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
  }
  function joinable($before, $after, depth2) {
    let node2 = $before.node(depth2);
    checkJoin(node2, $after.node(depth2));
    return node2;
  }
  function addNode(child, target) {
    let last = target.length - 1;
    if (last >= 0 && child.isText && child.sameMarkup(target[last]))
      target[last] = child.withText(target[last].text + child.text);
    else
      target.push(child);
  }
  function addRange2($start, $end, depth2, target) {
    let node2 = ($end || $start).node(depth2);
    let startIndex = 0, endIndex = $end ? $end.index(depth2) : node2.childCount;
    if ($start) {
      startIndex = $start.index(depth2);
      if ($start.depth > depth2) {
        startIndex++;
      } else if ($start.textOffset) {
        addNode($start.nodeAfter, target);
        startIndex++;
      }
    }
    for (let i3 = startIndex; i3 < endIndex; i3++)
      addNode(node2.child(i3), target);
    if ($end && $end.depth == depth2 && $end.textOffset)
      addNode($end.nodeBefore, target);
  }
  function close(node2, content4) {
    node2.type.checkContent(content4);
    return node2.copy(content4);
  }
  function replaceThreeWay($from, $start, $end, $to, depth2) {
    let openStart = $from.depth > depth2 && joinable($from, $start, depth2 + 1);
    let openEnd = $to.depth > depth2 && joinable($end, $to, depth2 + 1);
    let content4 = [];
    addRange2(null, $from, depth2, content4);
    if (openStart && openEnd && $start.index(depth2) == $end.index(depth2)) {
      checkJoin(openStart, openEnd);
      addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth2 + 1)), content4);
    } else {
      if (openStart)
        addNode(close(openStart, replaceTwoWay($from, $start, depth2 + 1)), content4);
      addRange2($start, $end, depth2, content4);
      if (openEnd)
        addNode(close(openEnd, replaceTwoWay($end, $to, depth2 + 1)), content4);
    }
    addRange2($to, null, depth2, content4);
    return new Fragment(content4);
  }
  function replaceTwoWay($from, $to, depth2) {
    let content4 = [];
    addRange2(null, $from, depth2, content4);
    if ($from.depth > depth2) {
      let type = joinable($from, $to, depth2 + 1);
      addNode(close(type, replaceTwoWay($from, $to, depth2 + 1)), content4);
    }
    addRange2($to, null, depth2, content4);
    return new Fragment(content4);
  }
  function prepareSliceForReplace(slice2, $along) {
    let extra = $along.depth - slice2.openStart, parent = $along.node(extra);
    let node2 = parent.copy(slice2.content);
    for (let i3 = extra - 1; i3 >= 0; i3--)
      node2 = $along.node(i3).copy(Fragment.from(node2));
    return {
      start: node2.resolveNoCache(slice2.openStart + extra),
      end: node2.resolveNoCache(node2.content.size - slice2.openEnd - extra)
    };
  }
  var ResolvedPos = class _ResolvedPos {
    /**
    @internal
    */
    constructor(pos, path3, parentOffset) {
      this.pos = pos;
      this.path = path3;
      this.parentOffset = parentOffset;
      this.depth = path3.length / 3 - 1;
    }
    /**
    @internal
    */
    resolveDepth(val) {
      if (val == null)
        return this.depth;
      if (val < 0)
        return this.depth + val;
      return val;
    }
    /**
    The parent node that the position points into. Note that even if
    a position points into a text node, that node is not considered
    the parent—text nodes are ‘flat’ in this model, and have no content.
    */
    get parent() {
      return this.node(this.depth);
    }
    /**
    The root node in which the position was resolved.
    */
    get doc() {
      return this.node(0);
    }
    /**
    The ancestor node at the given level. `p.node(p.depth)` is the
    same as `p.parent`.
    */
    node(depth2) {
      return this.path[this.resolveDepth(depth2) * 3];
    }
    /**
    The index into the ancestor at the given level. If this points
    at the 3rd node in the 2nd paragraph on the top level, for
    example, `p.index(0)` is 1 and `p.index(1)` is 2.
    */
    index(depth2) {
      return this.path[this.resolveDepth(depth2) * 3 + 1];
    }
    /**
    The index pointing after this position into the ancestor at the
    given level.
    */
    indexAfter(depth2) {
      depth2 = this.resolveDepth(depth2);
      return this.index(depth2) + (depth2 == this.depth && !this.textOffset ? 0 : 1);
    }
    /**
    The (absolute) position at the start of the node at the given
    level.
    */
    start(depth2) {
      depth2 = this.resolveDepth(depth2);
      return depth2 == 0 ? 0 : this.path[depth2 * 3 - 1] + 1;
    }
    /**
    The (absolute) position at the end of the node at the given
    level.
    */
    end(depth2) {
      depth2 = this.resolveDepth(depth2);
      return this.start(depth2) + this.node(depth2).content.size;
    }
    /**
    The (absolute) position directly before the wrapping node at the
    given level, or, when `depth` is `this.depth + 1`, the original
    position.
    */
    before(depth2) {
      depth2 = this.resolveDepth(depth2);
      if (!depth2)
        throw new RangeError("There is no position before the top-level node");
      return depth2 == this.depth + 1 ? this.pos : this.path[depth2 * 3 - 1];
    }
    /**
    The (absolute) position directly after the wrapping node at the
    given level, or the original position when `depth` is `this.depth + 1`.
    */
    after(depth2) {
      depth2 = this.resolveDepth(depth2);
      if (!depth2)
        throw new RangeError("There is no position after the top-level node");
      return depth2 == this.depth + 1 ? this.pos : this.path[depth2 * 3 - 1] + this.path[depth2 * 3].nodeSize;
    }
    /**
    When this position points into a text node, this returns the
    distance between the position and the start of the text node.
    Will be zero for positions that point between nodes.
    */
    get textOffset() {
      return this.pos - this.path[this.path.length - 1];
    }
    /**
    Get the node directly after the position, if any. If the position
    points into a text node, only the part of that node after the
    position is returned.
    */
    get nodeAfter() {
      let parent = this.parent, index2 = this.index(this.depth);
      if (index2 == parent.childCount)
        return null;
      let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index2);
      return dOff ? parent.child(index2).cut(dOff) : child;
    }
    /**
    Get the node directly before the position, if any. If the
    position points into a text node, only the part of that node
    before the position is returned.
    */
    get nodeBefore() {
      let index2 = this.index(this.depth);
      let dOff = this.pos - this.path[this.path.length - 1];
      if (dOff)
        return this.parent.child(index2).cut(0, dOff);
      return index2 == 0 ? null : this.parent.child(index2 - 1);
    }
    /**
    Get the position at the given index in the parent node at the
    given depth (which defaults to `this.depth`).
    */
    posAtIndex(index2, depth2) {
      depth2 = this.resolveDepth(depth2);
      let node2 = this.path[depth2 * 3], pos = depth2 == 0 ? 0 : this.path[depth2 * 3 - 1] + 1;
      for (let i3 = 0; i3 < index2; i3++)
        pos += node2.child(i3).nodeSize;
      return pos;
    }
    /**
    Get the marks at this position, factoring in the surrounding
    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
    position is at the start of a non-empty node, the marks of the
    node after it (if any) are returned.
    */
    marks() {
      let parent = this.parent, index2 = this.index();
      if (parent.content.size == 0)
        return Mark.none;
      if (this.textOffset)
        return parent.child(index2).marks;
      let main = parent.maybeChild(index2 - 1), other = parent.maybeChild(index2);
      if (!main) {
        let tmp = main;
        main = other;
        other = tmp;
      }
      let marks2 = main.marks;
      for (var i3 = 0; i3 < marks2.length; i3++)
        if (marks2[i3].type.spec.inclusive === false && (!other || !marks2[i3].isInSet(other.marks)))
          marks2 = marks2[i3--].removeFromSet(marks2);
      return marks2;
    }
    /**
    Get the marks after the current position, if any, except those
    that are non-inclusive and not present at position `$end`. This
    is mostly useful for getting the set of marks to preserve after a
    deletion. Will return `null` if this position is at the end of
    its parent node or its parent node isn't a textblock (in which
    case no marks should be preserved).
    */
    marksAcross($end) {
      let after = this.parent.maybeChild(this.index());
      if (!after || !after.isInline)
        return null;
      let marks2 = after.marks, next = $end.parent.maybeChild($end.index());
      for (var i3 = 0; i3 < marks2.length; i3++)
        if (marks2[i3].type.spec.inclusive === false && (!next || !marks2[i3].isInSet(next.marks)))
          marks2 = marks2[i3--].removeFromSet(marks2);
      return marks2;
    }
    /**
    The depth up to which this position and the given (non-resolved)
    position share the same parent nodes.
    */
    sharedDepth(pos) {
      for (let depth2 = this.depth; depth2 > 0; depth2--)
        if (this.start(depth2) <= pos && this.end(depth2) >= pos)
          return depth2;
      return 0;
    }
    /**
    Returns a range based on the place where this position and the
    given position diverge around block content. If both point into
    the same textblock, for example, a range around that textblock
    will be returned. If they point into different blocks, the range
    around those blocks in their shared ancestor is returned. You can
    pass in an optional predicate that will be called with a parent
    node to see if a range into that parent is acceptable.
    */
    blockRange(other = this, pred) {
      if (other.pos < this.pos)
        return other.blockRange(this);
      for (let d6 = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d6 >= 0; d6--)
        if (other.pos <= this.end(d6) && (!pred || pred(this.node(d6))))
          return new NodeRange(this, other, d6);
      return null;
    }
    /**
    Query whether the given position shares the same parent node.
    */
    sameParent(other) {
      return this.pos - this.parentOffset == other.pos - other.parentOffset;
    }
    /**
    Return the greater of this and the given position.
    */
    max(other) {
      return other.pos > this.pos ? other : this;
    }
    /**
    Return the smaller of this and the given position.
    */
    min(other) {
      return other.pos < this.pos ? other : this;
    }
    /**
    @internal
    */
    toString() {
      let str = "";
      for (let i3 = 1; i3 <= this.depth; i3++)
        str += (str ? "/" : "") + this.node(i3).type.name + "_" + this.index(i3 - 1);
      return str + ":" + this.parentOffset;
    }
    /**
    @internal
    */
    static resolve(doc5, pos) {
      if (!(pos >= 0 && pos <= doc5.content.size))
        throw new RangeError("Position " + pos + " out of range");
      let path3 = [];
      let start = 0, parentOffset = pos;
      for (let node2 = doc5; ; ) {
        let { index: index2, offset } = node2.content.findIndex(parentOffset);
        let rem = parentOffset - offset;
        path3.push(node2, index2, start + offset);
        if (!rem)
          break;
        node2 = node2.child(index2);
        if (node2.isText)
          break;
        parentOffset = rem - 1;
        start += offset + 1;
      }
      return new _ResolvedPos(pos, path3, parentOffset);
    }
    /**
    @internal
    */
    static resolveCached(doc5, pos) {
      for (let i3 = 0; i3 < resolveCache.length; i3++) {
        let cached = resolveCache[i3];
        if (cached.pos == pos && cached.doc == doc5)
          return cached;
      }
      let result = resolveCache[resolveCachePos] = _ResolvedPos.resolve(doc5, pos);
      resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
      return result;
    }
  };
  var resolveCache = [];
  var resolveCachePos = 0;
  var resolveCacheSize = 12;
  var NodeRange = class {
    /**
    Construct a node range. `$from` and `$to` should point into the
    same node until at least the given `depth`, since a node range
    denotes an adjacent set of nodes in a single parent node.
    */
    constructor($from, $to, depth2) {
      this.$from = $from;
      this.$to = $to;
      this.depth = depth2;
    }
    /**
    The position at the start of the range.
    */
    get start() {
      return this.$from.before(this.depth + 1);
    }
    /**
    The position at the end of the range.
    */
    get end() {
      return this.$to.after(this.depth + 1);
    }
    /**
    The parent node that the range points into.
    */
    get parent() {
      return this.$from.node(this.depth);
    }
    /**
    The start index of the range in the parent node.
    */
    get startIndex() {
      return this.$from.index(this.depth);
    }
    /**
    The end index of the range in the parent node.
    */
    get endIndex() {
      return this.$to.indexAfter(this.depth);
    }
  };
  var emptyAttrs = /* @__PURE__ */ Object.create(null);
  var Node = class _Node {
    /**
    @internal
    */
    constructor(type, attrs, content4, marks2 = Mark.none) {
      this.type = type;
      this.attrs = attrs;
      this.marks = marks2;
      this.content = content4 || Fragment.empty;
    }
    /**
    The size of this node, as defined by the integer-based [indexing
    scheme](/docs/guide/#doc.indexing). For text nodes, this is the
    amount of characters. For other leaf nodes, it is one. For
    non-leaf nodes, it is the size of the content plus two (the
    start and end token).
    */
    get nodeSize() {
      return this.isLeaf ? 1 : 2 + this.content.size;
    }
    /**
    The number of children that the node has.
    */
    get childCount() {
      return this.content.childCount;
    }
    /**
    Get the child node at the given index. Raises an error when the
    index is out of range.
    */
    child(index2) {
      return this.content.child(index2);
    }
    /**
    Get the child node at the given index, if it exists.
    */
    maybeChild(index2) {
      return this.content.maybeChild(index2);
    }
    /**
    Call `f` for every child node, passing the node, its offset
    into this parent node, and its index.
    */
    forEach(f3) {
      this.content.forEach(f3);
    }
    /**
    Invoke a callback for all descendant nodes recursively between
    the given two positions that are relative to start of this
    node's content. The callback is invoked with the node, its
    position relative to the original node (method receiver),
    its parent node, and its child index. When the callback returns
    false for a given node, that node's children will not be
    recursed over. The last parameter can be used to specify a
    starting position to count from.
    */
    nodesBetween(from2, to, f3, startPos = 0) {
      this.content.nodesBetween(from2, to, f3, startPos, this);
    }
    /**
    Call the given callback for every descendant node. Doesn't
    descend into a node when the callback returns `false`.
    */
    descendants(f3) {
      this.nodesBetween(0, this.content.size, f3);
    }
    /**
    Concatenates all the text nodes found in this fragment and its
    children.
    */
    get textContent() {
      return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
    }
    /**
    Get all text between positions `from` and `to`. When
    `blockSeparator` is given, it will be inserted to separate text
    from different block nodes. If `leafText` is given, it'll be
    inserted for every non-text leaf node encountered, otherwise
    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
    */
    textBetween(from2, to, blockSeparator, leafText) {
      return this.content.textBetween(from2, to, blockSeparator, leafText);
    }
    /**
    Returns this node's first child, or `null` if there are no
    children.
    */
    get firstChild() {
      return this.content.firstChild;
    }
    /**
    Returns this node's last child, or `null` if there are no
    children.
    */
    get lastChild() {
      return this.content.lastChild;
    }
    /**
    Test whether two nodes represent the same piece of document.
    */
    eq(other) {
      return this == other || this.sameMarkup(other) && this.content.eq(other.content);
    }
    /**
    Compare the markup (type, attributes, and marks) of this node to
    those of another. Returns `true` if both have the same markup.
    */
    sameMarkup(other) {
      return this.hasMarkup(other.type, other.attrs, other.marks);
    }
    /**
    Check whether this node's markup correspond to the given type,
    attributes, and marks.
    */
    hasMarkup(type, attrs, marks2) {
      return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks2 || Mark.none);
    }
    /**
    Create a new node with the same markup as this node, containing
    the given content (or empty, if no content is given).
    */
    copy(content4 = null) {
      if (content4 == this.content)
        return this;
      return new _Node(this.type, this.attrs, content4, this.marks);
    }
    /**
    Create a copy of this node, with the given set of marks instead
    of the node's own marks.
    */
    mark(marks2) {
      return marks2 == this.marks ? this : new _Node(this.type, this.attrs, this.content, marks2);
    }
    /**
    Create a copy of this node with only the content between the
    given positions. If `to` is not given, it defaults to the end of
    the node.
    */
    cut(from2, to = this.content.size) {
      if (from2 == 0 && to == this.content.size)
        return this;
      return this.copy(this.content.cut(from2, to));
    }
    /**
    Cut out the part of the document between the given positions, and
    return it as a `Slice` object.
    */
    slice(from2, to = this.content.size, includeParents = false) {
      if (from2 == to)
        return Slice.empty;
      let $from = this.resolve(from2), $to = this.resolve(to);
      let depth2 = includeParents ? 0 : $from.sharedDepth(to);
      let start = $from.start(depth2), node2 = $from.node(depth2);
      let content4 = node2.content.cut($from.pos - start, $to.pos - start);
      return new Slice(content4, $from.depth - depth2, $to.depth - depth2);
    }
    /**
    Replace the part of the document between the given positions with
    the given slice. The slice must 'fit', meaning its open sides
    must be able to connect to the surrounding content, and its
    content nodes must be valid children for the node they are placed
    into. If any of this is violated, an error of type
    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
    */
    replace(from2, to, slice2) {
      return replace(this.resolve(from2), this.resolve(to), slice2);
    }
    /**
    Find the node directly after the given position.
    */
    nodeAt(pos) {
      for (let node2 = this; ; ) {
        let { index: index2, offset } = node2.content.findIndex(pos);
        node2 = node2.maybeChild(index2);
        if (!node2)
          return null;
        if (offset == pos || node2.isText)
          return node2;
        pos -= offset + 1;
      }
    }
    /**
    Find the (direct) child node after the given offset, if any,
    and return it along with its index and offset relative to this
    node.
    */
    childAfter(pos) {
      let { index: index2, offset } = this.content.findIndex(pos);
      return { node: this.content.maybeChild(index2), index: index2, offset };
    }
    /**
    Find the (direct) child node before the given offset, if any,
    and return it along with its index and offset relative to this
    node.
    */
    childBefore(pos) {
      if (pos == 0)
        return { node: null, index: 0, offset: 0 };
      let { index: index2, offset } = this.content.findIndex(pos);
      if (offset < pos)
        return { node: this.content.child(index2), index: index2, offset };
      let node2 = this.content.child(index2 - 1);
      return { node: node2, index: index2 - 1, offset: offset - node2.nodeSize };
    }
    /**
    Resolve the given position in the document, returning an
    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
    */
    resolve(pos) {
      return ResolvedPos.resolveCached(this, pos);
    }
    /**
    @internal
    */
    resolveNoCache(pos) {
      return ResolvedPos.resolve(this, pos);
    }
    /**
    Test whether a given mark or mark type occurs in this document
    between the two given positions.
    */
    rangeHasMark(from2, to, type) {
      let found2 = false;
      if (to > from2)
        this.nodesBetween(from2, to, (node2) => {
          if (type.isInSet(node2.marks))
            found2 = true;
          return !found2;
        });
      return found2;
    }
    /**
    True when this is a block (non-inline node)
    */
    get isBlock() {
      return this.type.isBlock;
    }
    /**
    True when this is a textblock node, a block node with inline
    content.
    */
    get isTextblock() {
      return this.type.isTextblock;
    }
    /**
    True when this node allows inline content.
    */
    get inlineContent() {
      return this.type.inlineContent;
    }
    /**
    True when this is an inline node (a text node or a node that can
    appear among text).
    */
    get isInline() {
      return this.type.isInline;
    }
    /**
    True when this is a text node.
    */
    get isText() {
      return this.type.isText;
    }
    /**
    True when this is a leaf node.
    */
    get isLeaf() {
      return this.type.isLeaf;
    }
    /**
    True when this is an atom, i.e. when it does not have directly
    editable content. This is usually the same as `isLeaf`, but can
    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
    on a node's spec (typically used when the node is displayed as
    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
    */
    get isAtom() {
      return this.type.isAtom;
    }
    /**
    Return a string representation of this node for debugging
    purposes.
    */
    toString() {
      if (this.type.spec.toDebugString)
        return this.type.spec.toDebugString(this);
      let name2 = this.type.name;
      if (this.content.size)
        name2 += "(" + this.content.toStringInner() + ")";
      return wrapMarks2(this.marks, name2);
    }
    /**
    Get the content match in this node at the given index.
    */
    contentMatchAt(index2) {
      let match = this.type.contentMatch.matchFragment(this.content, 0, index2);
      if (!match)
        throw new Error("Called contentMatchAt on a node with invalid content");
      return match;
    }
    /**
    Test whether replacing the range between `from` and `to` (by
    child index) with the given replacement fragment (which defaults
    to the empty fragment) would leave the node's content valid. You
    can optionally pass `start` and `end` indices into the
    replacement fragment.
    */
    canReplace(from2, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
      let one2 = this.contentMatchAt(from2).matchFragment(replacement, start, end);
      let two = one2 && one2.matchFragment(this.content, to);
      if (!two || !two.validEnd)
        return false;
      for (let i3 = start; i3 < end; i3++)
        if (!this.type.allowsMarks(replacement.child(i3).marks))
          return false;
      return true;
    }
    /**
    Test whether replacing the range `from` to `to` (by index) with
    a node of the given type would leave the node's content valid.
    */
    canReplaceWith(from2, to, type, marks2) {
      if (marks2 && !this.type.allowsMarks(marks2))
        return false;
      let start = this.contentMatchAt(from2).matchType(type);
      let end = start && start.matchFragment(this.content, to);
      return end ? end.validEnd : false;
    }
    /**
    Test whether the given node's content could be appended to this
    node. If that node is empty, this will only return true if there
    is at least one node type that can appear in both nodes (to avoid
    merging completely incompatible nodes).
    */
    canAppend(other) {
      if (other.content.size)
        return this.canReplace(this.childCount, this.childCount, other.content);
      else
        return this.type.compatibleContent(other.type);
    }
    /**
    Check whether this node and its descendants conform to the
    schema, and raise error when they do not.
    */
    check() {
      this.type.checkContent(this.content);
      let copy2 = Mark.none;
      for (let i3 = 0; i3 < this.marks.length; i3++)
        copy2 = this.marks[i3].addToSet(copy2);
      if (!Mark.sameSet(copy2, this.marks))
        throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((m4) => m4.type.name)}`);
      this.content.forEach((node2) => node2.check());
    }
    /**
    Return a JSON-serializeable representation of this node.
    */
    toJSON() {
      let obj = { type: this.type.name };
      for (let _3 in this.attrs) {
        obj.attrs = this.attrs;
        break;
      }
      if (this.content.size)
        obj.content = this.content.toJSON();
      if (this.marks.length)
        obj.marks = this.marks.map((n5) => n5.toJSON());
      return obj;
    }
    /**
    Deserialize a node from its JSON representation.
    */
    static fromJSON(schema, json) {
      if (!json)
        throw new RangeError("Invalid input for Node.fromJSON");
      let marks2 = null;
      if (json.marks) {
        if (!Array.isArray(json.marks))
          throw new RangeError("Invalid mark data for Node.fromJSON");
        marks2 = json.marks.map(schema.markFromJSON);
      }
      if (json.type == "text") {
        if (typeof json.text != "string")
          throw new RangeError("Invalid text node in JSON");
        return schema.text(json.text, marks2);
      }
      let content4 = Fragment.fromJSON(schema, json.content);
      return schema.nodeType(json.type).create(json.attrs, content4, marks2);
    }
  };
  Node.prototype.text = void 0;
  var TextNode2 = class _TextNode extends Node {
    /**
    @internal
    */
    constructor(type, attrs, content4, marks2) {
      super(type, attrs, null, marks2);
      if (!content4)
        throw new RangeError("Empty text nodes are not allowed");
      this.text = content4;
    }
    toString() {
      if (this.type.spec.toDebugString)
        return this.type.spec.toDebugString(this);
      return wrapMarks2(this.marks, JSON.stringify(this.text));
    }
    get textContent() {
      return this.text;
    }
    textBetween(from2, to) {
      return this.text.slice(from2, to);
    }
    get nodeSize() {
      return this.text.length;
    }
    mark(marks2) {
      return marks2 == this.marks ? this : new _TextNode(this.type, this.attrs, this.text, marks2);
    }
    withText(text5) {
      if (text5 == this.text)
        return this;
      return new _TextNode(this.type, this.attrs, text5, this.marks);
    }
    cut(from2 = 0, to = this.text.length) {
      if (from2 == 0 && to == this.text.length)
        return this;
      return this.withText(this.text.slice(from2, to));
    }
    eq(other) {
      return this.sameMarkup(other) && this.text == other.text;
    }
    toJSON() {
      let base2 = super.toJSON();
      base2.text = this.text;
      return base2;
    }
  };
  function wrapMarks2(marks2, str) {
    for (let i3 = marks2.length - 1; i3 >= 0; i3--)
      str = marks2[i3].type.name + "(" + str + ")";
    return str;
  }
  var ContentMatch = class _ContentMatch {
    /**
    @internal
    */
    constructor(validEnd) {
      this.validEnd = validEnd;
      this.next = [];
      this.wrapCache = [];
    }
    /**
    @internal
    */
    static parse(string4, nodeTypes) {
      let stream = new TokenStream(string4, nodeTypes);
      if (stream.next == null)
        return _ContentMatch.empty;
      let expr = parseExpr(stream);
      if (stream.next)
        stream.err("Unexpected trailing text");
      let match = dfa(nfa(expr));
      checkForDeadEnds(match, stream);
      return match;
    }
    /**
    Match a node type, returning a match after that node if
    successful.
    */
    matchType(type) {
      for (let i3 = 0; i3 < this.next.length; i3++)
        if (this.next[i3].type == type)
          return this.next[i3].next;
      return null;
    }
    /**
    Try to match a fragment. Returns the resulting match when
    successful.
    */
    matchFragment(frag, start = 0, end = frag.childCount) {
      let cur2 = this;
      for (let i3 = start; cur2 && i3 < end; i3++)
        cur2 = cur2.matchType(frag.child(i3).type);
      return cur2;
    }
    /**
    @internal
    */
    get inlineContent() {
      return this.next.length != 0 && this.next[0].type.isInline;
    }
    /**
    Get the first matching node type at this match position that can
    be generated.
    */
    get defaultType() {
      for (let i3 = 0; i3 < this.next.length; i3++) {
        let { type } = this.next[i3];
        if (!(type.isText || type.hasRequiredAttrs()))
          return type;
      }
      return null;
    }
    /**
    @internal
    */
    compatible(other) {
      for (let i3 = 0; i3 < this.next.length; i3++)
        for (let j6 = 0; j6 < other.next.length; j6++)
          if (this.next[i3].type == other.next[j6].type)
            return true;
      return false;
    }
    /**
    Try to match the given fragment, and if that fails, see if it can
    be made to match by inserting nodes in front of it. When
    successful, return a fragment of inserted nodes (which may be
    empty if nothing had to be inserted). When `toEnd` is true, only
    return a fragment if the resulting match goes to the end of the
    content expression.
    */
    fillBefore(after, toEnd = false, startIndex = 0) {
      let seen = [this];
      function search3(match, types2) {
        let finished = match.matchFragment(after, startIndex);
        if (finished && (!toEnd || finished.validEnd))
          return Fragment.from(types2.map((tp) => tp.createAndFill()));
        for (let i3 = 0; i3 < match.next.length; i3++) {
          let { type, next } = match.next[i3];
          if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
            seen.push(next);
            let found2 = search3(next, types2.concat(type));
            if (found2)
              return found2;
          }
        }
        return null;
      }
      return search3(this, []);
    }
    /**
    Find a set of wrapping node types that would allow a node of the
    given type to appear at this position. The result may be empty
    (when it fits directly) and will be null when no such wrapping
    exists.
    */
    findWrapping(target) {
      for (let i3 = 0; i3 < this.wrapCache.length; i3 += 2)
        if (this.wrapCache[i3] == target)
          return this.wrapCache[i3 + 1];
      let computed = this.computeWrapping(target);
      this.wrapCache.push(target, computed);
      return computed;
    }
    /**
    @internal
    */
    computeWrapping(target) {
      let seen = /* @__PURE__ */ Object.create(null), active = [{ match: this, type: null, via: null }];
      while (active.length) {
        let current = active.shift(), match = current.match;
        if (match.matchType(target)) {
          let result = [];
          for (let obj = current; obj.type; obj = obj.via)
            result.push(obj.type);
          return result.reverse();
        }
        for (let i3 = 0; i3 < match.next.length; i3++) {
          let { type, next } = match.next[i3];
          if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
            active.push({ match: type.contentMatch, type, via: current });
            seen[type.name] = true;
          }
        }
      }
      return null;
    }
    /**
    The number of outgoing edges this node has in the finite
    automaton that describes the content expression.
    */
    get edgeCount() {
      return this.next.length;
    }
    /**
    Get the _n_​th outgoing edge from this node in the finite
    automaton that describes the content expression.
    */
    edge(n5) {
      if (n5 >= this.next.length)
        throw new RangeError(`There's no ${n5}th edge in this content match`);
      return this.next[n5];
    }
    /**
    @internal
    */
    toString() {
      let seen = [];
      function scan(m4) {
        seen.push(m4);
        for (let i3 = 0; i3 < m4.next.length; i3++)
          if (seen.indexOf(m4.next[i3].next) == -1)
            scan(m4.next[i3].next);
      }
      scan(this);
      return seen.map((m4, i3) => {
        let out = i3 + (m4.validEnd ? "*" : " ") + " ";
        for (let i4 = 0; i4 < m4.next.length; i4++)
          out += (i4 ? ", " : "") + m4.next[i4].type.name + "->" + seen.indexOf(m4.next[i4].next);
        return out;
      }).join("\n");
    }
  };
  ContentMatch.empty = new ContentMatch(true);
  var TokenStream = class {
    constructor(string4, nodeTypes) {
      this.string = string4;
      this.nodeTypes = nodeTypes;
      this.inline = null;
      this.pos = 0;
      this.tokens = string4.split(/\s*(?=\b|\W|$)/);
      if (this.tokens[this.tokens.length - 1] == "")
        this.tokens.pop();
      if (this.tokens[0] == "")
        this.tokens.shift();
    }
    get next() {
      return this.tokens[this.pos];
    }
    eat(tok) {
      return this.next == tok && (this.pos++ || true);
    }
    err(str) {
      throw new SyntaxError(str + " (in content expression '" + this.string + "')");
    }
  };
  function parseExpr(stream) {
    let exprs = [];
    do {
      exprs.push(parseExprSeq(stream));
    } while (stream.eat("|"));
    return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
  }
  function parseExprSeq(stream) {
    let exprs = [];
    do {
      exprs.push(parseExprSubscript(stream));
    } while (stream.next && stream.next != ")" && stream.next != "|");
    return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
  }
  function parseExprSubscript(stream) {
    let expr = parseExprAtom(stream);
    for (; ; ) {
      if (stream.eat("+"))
        expr = { type: "plus", expr };
      else if (stream.eat("*"))
        expr = { type: "star", expr };
      else if (stream.eat("?"))
        expr = { type: "opt", expr };
      else if (stream.eat("{"))
        expr = parseExprRange(stream, expr);
      else
        break;
    }
    return expr;
  }
  function parseNum(stream) {
    if (/\D/.test(stream.next))
      stream.err("Expected number, got '" + stream.next + "'");
    let result = Number(stream.next);
    stream.pos++;
    return result;
  }
  function parseExprRange(stream, expr) {
    let min = parseNum(stream), max = min;
    if (stream.eat(",")) {
      if (stream.next != "}")
        max = parseNum(stream);
      else
        max = -1;
    }
    if (!stream.eat("}"))
      stream.err("Unclosed braced range");
    return { type: "range", min, max, expr };
  }
  function resolveName(stream, name2) {
    let types2 = stream.nodeTypes, type = types2[name2];
    if (type)
      return [type];
    let result = [];
    for (let typeName2 in types2) {
      let type2 = types2[typeName2];
      if (type2.groups.indexOf(name2) > -1)
        result.push(type2);
    }
    if (result.length == 0)
      stream.err("No node type or group '" + name2 + "' found");
    return result;
  }
  function parseExprAtom(stream) {
    if (stream.eat("(")) {
      let expr = parseExpr(stream);
      if (!stream.eat(")"))
        stream.err("Missing closing paren");
      return expr;
    } else if (!/\W/.test(stream.next)) {
      let exprs = resolveName(stream, stream.next).map((type) => {
        if (stream.inline == null)
          stream.inline = type.isInline;
        else if (stream.inline != type.isInline)
          stream.err("Mixing inline and block content");
        return { type: "name", value: type };
      });
      stream.pos++;
      return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
    } else {
      stream.err("Unexpected token '" + stream.next + "'");
    }
  }
  function nfa(expr) {
    let nfa2 = [[]];
    connect(compile(expr, 0), node2());
    return nfa2;
    function node2() {
      return nfa2.push([]) - 1;
    }
    function edge(from2, to, term) {
      let edge2 = { term, to };
      nfa2[from2].push(edge2);
      return edge2;
    }
    function connect(edges, to) {
      edges.forEach((edge2) => edge2.to = to);
    }
    function compile(expr2, from2) {
      if (expr2.type == "choice") {
        return expr2.exprs.reduce((out, expr3) => out.concat(compile(expr3, from2)), []);
      } else if (expr2.type == "seq") {
        for (let i3 = 0; ; i3++) {
          let next = compile(expr2.exprs[i3], from2);
          if (i3 == expr2.exprs.length - 1)
            return next;
          connect(next, from2 = node2());
        }
      } else if (expr2.type == "star") {
        let loop = node2();
        edge(from2, loop);
        connect(compile(expr2.expr, loop), loop);
        return [edge(loop)];
      } else if (expr2.type == "plus") {
        let loop = node2();
        connect(compile(expr2.expr, from2), loop);
        connect(compile(expr2.expr, loop), loop);
        return [edge(loop)];
      } else if (expr2.type == "opt") {
        return [edge(from2)].concat(compile(expr2.expr, from2));
      } else if (expr2.type == "range") {
        let cur2 = from2;
        for (let i3 = 0; i3 < expr2.min; i3++) {
          let next = node2();
          connect(compile(expr2.expr, cur2), next);
          cur2 = next;
        }
        if (expr2.max == -1) {
          connect(compile(expr2.expr, cur2), cur2);
        } else {
          for (let i3 = expr2.min; i3 < expr2.max; i3++) {
            let next = node2();
            edge(cur2, next);
            connect(compile(expr2.expr, cur2), next);
            cur2 = next;
          }
        }
        return [edge(cur2)];
      } else if (expr2.type == "name") {
        return [edge(from2, void 0, expr2.value)];
      } else {
        throw new Error("Unknown expr type");
      }
    }
  }
  function cmp(a2, b4) {
    return b4 - a2;
  }
  function nullFrom(nfa2, node2) {
    let result = [];
    scan(node2);
    return result.sort(cmp);
    function scan(node3) {
      let edges = nfa2[node3];
      if (edges.length == 1 && !edges[0].term)
        return scan(edges[0].to);
      result.push(node3);
      for (let i3 = 0; i3 < edges.length; i3++) {
        let { term, to } = edges[i3];
        if (!term && result.indexOf(to) == -1)
          scan(to);
      }
    }
  }
  function dfa(nfa2) {
    let labeled = /* @__PURE__ */ Object.create(null);
    return explore(nullFrom(nfa2, 0));
    function explore(states) {
      let out = [];
      states.forEach((node2) => {
        nfa2[node2].forEach(({ term, to }) => {
          if (!term)
            return;
          let set;
          for (let i3 = 0; i3 < out.length; i3++)
            if (out[i3][0] == term)
              set = out[i3][1];
          nullFrom(nfa2, to).forEach((node3) => {
            if (!set)
              out.push([term, set = []]);
            if (set.indexOf(node3) == -1)
              set.push(node3);
          });
        });
      });
      let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa2.length - 1) > -1);
      for (let i3 = 0; i3 < out.length; i3++) {
        let states2 = out[i3][1].sort(cmp);
        state.next.push({ type: out[i3][0], next: labeled[states2.join(",")] || explore(states2) });
      }
      return state;
    }
  }
  function checkForDeadEnds(match, stream) {
    for (let i3 = 0, work = [match]; i3 < work.length; i3++) {
      let state = work[i3], dead = !state.validEnd, nodes = [];
      for (let j6 = 0; j6 < state.next.length; j6++) {
        let { type, next } = state.next[j6];
        nodes.push(type.name);
        if (dead && !(type.isText || type.hasRequiredAttrs()))
          dead = false;
        if (work.indexOf(next) == -1)
          work.push(next);
      }
      if (dead)
        stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
    }
  }
  function defaultAttrs(attrs) {
    let defaults3 = /* @__PURE__ */ Object.create(null);
    for (let attrName in attrs) {
      let attr = attrs[attrName];
      if (!attr.hasDefault)
        return null;
      defaults3[attrName] = attr.default;
    }
    return defaults3;
  }
  function computeAttrs(attrs, value) {
    let built = /* @__PURE__ */ Object.create(null);
    for (let name2 in attrs) {
      let given = value && value[name2];
      if (given === void 0) {
        let attr = attrs[name2];
        if (attr.hasDefault)
          given = attr.default;
        else
          throw new RangeError("No value supplied for attribute " + name2);
      }
      built[name2] = given;
    }
    return built;
  }
  function initAttrs(attrs) {
    let result = /* @__PURE__ */ Object.create(null);
    if (attrs)
      for (let name2 in attrs)
        result[name2] = new Attribute(attrs[name2]);
    return result;
  }
  var NodeType2 = class _NodeType {
    /**
    @internal
    */
    constructor(name2, schema, spec) {
      this.name = name2;
      this.schema = schema;
      this.spec = spec;
      this.markSet = null;
      this.groups = spec.group ? spec.group.split(" ") : [];
      this.attrs = initAttrs(spec.attrs);
      this.defaultAttrs = defaultAttrs(this.attrs);
      this.contentMatch = null;
      this.inlineContent = null;
      this.isBlock = !(spec.inline || name2 == "text");
      this.isText = name2 == "text";
    }
    /**
    True if this is an inline type.
    */
    get isInline() {
      return !this.isBlock;
    }
    /**
    True if this is a textblock type, a block that contains inline
    content.
    */
    get isTextblock() {
      return this.isBlock && this.inlineContent;
    }
    /**
    True for node types that allow no content.
    */
    get isLeaf() {
      return this.contentMatch == ContentMatch.empty;
    }
    /**
    True when this node is an atom, i.e. when it does not have
    directly editable content.
    */
    get isAtom() {
      return this.isLeaf || !!this.spec.atom;
    }
    /**
    The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
    */
    get whitespace() {
      return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
    }
    /**
    Tells you whether this node type has any required attributes.
    */
    hasRequiredAttrs() {
      for (let n5 in this.attrs)
        if (this.attrs[n5].isRequired)
          return true;
      return false;
    }
    /**
    Indicates whether this node allows some of the same content as
    the given node type.
    */
    compatibleContent(other) {
      return this == other || this.contentMatch.compatible(other.contentMatch);
    }
    /**
    @internal
    */
    computeAttrs(attrs) {
      if (!attrs && this.defaultAttrs)
        return this.defaultAttrs;
      else
        return computeAttrs(this.attrs, attrs);
    }
    /**
    Create a `Node` of this type. The given attributes are
    checked and defaulted (you can pass `null` to use the type's
    defaults entirely, if no required attributes exist). `content`
    may be a `Fragment`, a node, an array of nodes, or
    `null`. Similarly `marks` may be `null` to default to the empty
    set of marks.
    */
    create(attrs = null, content4, marks2) {
      if (this.isText)
        throw new Error("NodeType.create can't construct text nodes");
      return new Node(this, this.computeAttrs(attrs), Fragment.from(content4), Mark.setFrom(marks2));
    }
    /**
    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
    against the node type's content restrictions, and throw an error
    if it doesn't match.
    */
    createChecked(attrs = null, content4, marks2) {
      content4 = Fragment.from(content4);
      this.checkContent(content4);
      return new Node(this, this.computeAttrs(attrs), content4, Mark.setFrom(marks2));
    }
    /**
    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
    necessary to add nodes to the start or end of the given fragment
    to make it fit the node. If no fitting wrapping can be found,
    return null. Note that, due to the fact that required nodes can
    always be created, this will always succeed if you pass null or
    `Fragment.empty` as content.
    */
    createAndFill(attrs = null, content4, marks2) {
      attrs = this.computeAttrs(attrs);
      content4 = Fragment.from(content4);
      if (content4.size) {
        let before = this.contentMatch.fillBefore(content4);
        if (!before)
          return null;
        content4 = before.append(content4);
      }
      let matched = this.contentMatch.matchFragment(content4);
      let after = matched && matched.fillBefore(Fragment.empty, true);
      if (!after)
        return null;
      return new Node(this, attrs, content4.append(after), Mark.setFrom(marks2));
    }
    /**
    Returns true if the given fragment is valid content for this node
    type with the given attributes.
    */
    validContent(content4) {
      let result = this.contentMatch.matchFragment(content4);
      if (!result || !result.validEnd)
        return false;
      for (let i3 = 0; i3 < content4.childCount; i3++)
        if (!this.allowsMarks(content4.child(i3).marks))
          return false;
      return true;
    }
    /**
    Throws a RangeError if the given fragment is not valid content for this
    node type.
    @internal
    */
    checkContent(content4) {
      if (!this.validContent(content4))
        throw new RangeError(`Invalid content for node ${this.name}: ${content4.toString().slice(0, 50)}`);
    }
    /**
    Check whether the given mark type is allowed in this node.
    */
    allowsMarkType(markType) {
      return this.markSet == null || this.markSet.indexOf(markType) > -1;
    }
    /**
    Test whether the given set of marks are allowed in this node.
    */
    allowsMarks(marks2) {
      if (this.markSet == null)
        return true;
      for (let i3 = 0; i3 < marks2.length; i3++)
        if (!this.allowsMarkType(marks2[i3].type))
          return false;
      return true;
    }
    /**
    Removes the marks that are not allowed in this node from the given set.
    */
    allowedMarks(marks2) {
      if (this.markSet == null)
        return marks2;
      let copy2;
      for (let i3 = 0; i3 < marks2.length; i3++) {
        if (!this.allowsMarkType(marks2[i3].type)) {
          if (!copy2)
            copy2 = marks2.slice(0, i3);
        } else if (copy2) {
          copy2.push(marks2[i3]);
        }
      }
      return !copy2 ? marks2 : copy2.length ? copy2 : Mark.none;
    }
    /**
    @internal
    */
    static compile(nodes, schema) {
      let result = /* @__PURE__ */ Object.create(null);
      nodes.forEach((name2, spec) => result[name2] = new _NodeType(name2, schema, spec));
      let topType = schema.spec.topNode || "doc";
      if (!result[topType])
        throw new RangeError("Schema is missing its top node type ('" + topType + "')");
      if (!result.text)
        throw new RangeError("Every schema needs a 'text' type");
      for (let _3 in result.text.attrs)
        throw new RangeError("The text node type should not have attributes");
      return result;
    }
  };
  var Attribute = class {
    constructor(options) {
      this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
      this.default = options.default;
    }
    get isRequired() {
      return !this.hasDefault;
    }
  };
  var MarkType = class _MarkType {
    /**
    @internal
    */
    constructor(name2, rank, schema, spec) {
      this.name = name2;
      this.rank = rank;
      this.schema = schema;
      this.spec = spec;
      this.attrs = initAttrs(spec.attrs);
      this.excluded = null;
      let defaults3 = defaultAttrs(this.attrs);
      this.instance = defaults3 ? new Mark(this, defaults3) : null;
    }
    /**
    Create a mark of this type. `attrs` may be `null` or an object
    containing only some of the mark's attributes. The others, if
    they have defaults, will be added.
    */
    create(attrs = null) {
      if (!attrs && this.instance)
        return this.instance;
      return new Mark(this, computeAttrs(this.attrs, attrs));
    }
    /**
    @internal
    */
    static compile(marks2, schema) {
      let result = /* @__PURE__ */ Object.create(null), rank = 0;
      marks2.forEach((name2, spec) => result[name2] = new _MarkType(name2, rank++, schema, spec));
      return result;
    }
    /**
    When there is a mark of this type in the given set, a new set
    without it is returned. Otherwise, the input set is returned.
    */
    removeFromSet(set) {
      for (var i3 = 0; i3 < set.length; i3++)
        if (set[i3].type == this) {
          set = set.slice(0, i3).concat(set.slice(i3 + 1));
          i3--;
        }
      return set;
    }
    /**
    Tests whether there is a mark of this type in the given set.
    */
    isInSet(set) {
      for (let i3 = 0; i3 < set.length; i3++)
        if (set[i3].type == this)
          return set[i3];
    }
    /**
    Queries whether a given mark type is
    [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
    */
    excludes(other) {
      return this.excluded.indexOf(other) > -1;
    }
  };
  var Schema = class {
    /**
    Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
    */
    constructor(spec) {
      this.cached = /* @__PURE__ */ Object.create(null);
      let instanceSpec = this.spec = {};
      for (let prop in spec)
        instanceSpec[prop] = spec[prop];
      instanceSpec.nodes = dist_default.from(spec.nodes), instanceSpec.marks = dist_default.from(spec.marks || {}), this.nodes = NodeType2.compile(this.spec.nodes, this);
      this.marks = MarkType.compile(this.spec.marks, this);
      let contentExprCache = /* @__PURE__ */ Object.create(null);
      for (let prop in this.nodes) {
        if (prop in this.marks)
          throw new RangeError(prop + " can not be both a node and a mark");
        let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
        type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
        type.inlineContent = type.contentMatch.inlineContent;
        type.markSet = markExpr == "_" ? null : markExpr ? gatherMarks(this, markExpr.split(" ")) : markExpr == "" || !type.inlineContent ? [] : null;
      }
      for (let prop in this.marks) {
        let type = this.marks[prop], excl = type.spec.excludes;
        type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
      }
      this.nodeFromJSON = this.nodeFromJSON.bind(this);
      this.markFromJSON = this.markFromJSON.bind(this);
      this.topNodeType = this.nodes[this.spec.topNode || "doc"];
      this.cached.wrappings = /* @__PURE__ */ Object.create(null);
    }
    /**
    Create a node in this schema. The `type` may be a string or a
    `NodeType` instance. Attributes will be extended with defaults,
    `content` may be a `Fragment`, `null`, a `Node`, or an array of
    nodes.
    */
    node(type, attrs = null, content4, marks2) {
      if (typeof type == "string")
        type = this.nodeType(type);
      else if (!(type instanceof NodeType2))
        throw new RangeError("Invalid node type: " + type);
      else if (type.schema != this)
        throw new RangeError("Node type from different schema used (" + type.name + ")");
      return type.createChecked(attrs, content4, marks2);
    }
    /**
    Create a text node in the schema. Empty text nodes are not
    allowed.
    */
    text(text5, marks2) {
      let type = this.nodes.text;
      return new TextNode2(type, type.defaultAttrs, text5, Mark.setFrom(marks2));
    }
    /**
    Create a mark with the given type and attributes.
    */
    mark(type, attrs) {
      if (typeof type == "string")
        type = this.marks[type];
      return type.create(attrs);
    }
    /**
    Deserialize a node from its JSON representation. This method is
    bound.
    */
    nodeFromJSON(json) {
      return Node.fromJSON(this, json);
    }
    /**
    Deserialize a mark from its JSON representation. This method is
    bound.
    */
    markFromJSON(json) {
      return Mark.fromJSON(this, json);
    }
    /**
    @internal
    */
    nodeType(name2) {
      let found2 = this.nodes[name2];
      if (!found2)
        throw new RangeError("Unknown node type: " + name2);
      return found2;
    }
  };
  function gatherMarks(schema, marks2) {
    let found2 = [];
    for (let i3 = 0; i3 < marks2.length; i3++) {
      let name2 = marks2[i3], mark = schema.marks[name2], ok3 = mark;
      if (mark) {
        found2.push(mark);
      } else {
        for (let prop in schema.marks) {
          let mark2 = schema.marks[prop];
          if (name2 == "_" || mark2.spec.group && mark2.spec.group.split(" ").indexOf(name2) > -1)
            found2.push(ok3 = mark2);
        }
      }
      if (!ok3)
        throw new SyntaxError("Unknown mark type: '" + marks2[i3] + "'");
    }
    return found2;
  }
  function isTagRule(rule) {
    return rule.tag != null;
  }
  function isStyleRule(rule) {
    return rule.style != null;
  }
  var DOMParser = class _DOMParser {
    /**
    Create a parser that targets the given schema, using the given
    parsing rules.
    */
    constructor(schema, rules) {
      this.schema = schema;
      this.rules = rules;
      this.tags = [];
      this.styles = [];
      rules.forEach((rule) => {
        if (isTagRule(rule))
          this.tags.push(rule);
        else if (isStyleRule(rule))
          this.styles.push(rule);
      });
      this.normalizeLists = !this.tags.some((r4) => {
        if (!/^(ul|ol)\b/.test(r4.tag) || !r4.node)
          return false;
        let node2 = schema.nodes[r4.node];
        return node2.contentMatch.matchType(node2);
      });
    }
    /**
    Parse a document from the content of a DOM node.
    */
    parse(dom, options = {}) {
      let context = new ParseContext2(this, options, false);
      context.addAll(dom, options.from, options.to);
      return context.finish();
    }
    /**
    Parses the content of the given DOM node, like
    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
    options. But unlike that method, which produces a whole node,
    this one returns a slice that is open at the sides, meaning that
    the schema constraints aren't applied to the start of nodes to
    the left of the input and the end of nodes at the end.
    */
    parseSlice(dom, options = {}) {
      let context = new ParseContext2(this, options, true);
      context.addAll(dom, options.from, options.to);
      return Slice.maxOpen(context.finish());
    }
    /**
    @internal
    */
    matchTag(dom, context, after) {
      for (let i3 = after ? this.tags.indexOf(after) + 1 : 0; i3 < this.tags.length; i3++) {
        let rule = this.tags[i3];
        if (matches(dom, rule.tag) && (rule.namespace === void 0 || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {
          if (rule.getAttrs) {
            let result = rule.getAttrs(dom);
            if (result === false)
              continue;
            rule.attrs = result || void 0;
          }
          return rule;
        }
      }
    }
    /**
    @internal
    */
    matchStyle(prop, value, context, after) {
      for (let i3 = after ? this.styles.indexOf(after) + 1 : 0; i3 < this.styles.length; i3++) {
        let rule = this.styles[i3], style = rule.style;
        if (style.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) || // Test that the style string either precisely matches the prop,
        // or has an '=' sign after the prop, followed by the given
        // value.
        style.length > prop.length && (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
          continue;
        if (rule.getAttrs) {
          let result = rule.getAttrs(value);
          if (result === false)
            continue;
          rule.attrs = result || void 0;
        }
        return rule;
      }
    }
    /**
    @internal
    */
    static schemaRules(schema) {
      let result = [];
      function insert2(rule) {
        let priority = rule.priority == null ? 50 : rule.priority, i3 = 0;
        for (; i3 < result.length; i3++) {
          let next = result[i3], nextPriority = next.priority == null ? 50 : next.priority;
          if (nextPriority < priority)
            break;
        }
        result.splice(i3, 0, rule);
      }
      for (let name2 in schema.marks) {
        let rules = schema.marks[name2].spec.parseDOM;
        if (rules)
          rules.forEach((rule) => {
            insert2(rule = copy(rule));
            if (!(rule.mark || rule.ignore || rule.clearMark))
              rule.mark = name2;
          });
      }
      for (let name2 in schema.nodes) {
        let rules = schema.nodes[name2].spec.parseDOM;
        if (rules)
          rules.forEach((rule) => {
            insert2(rule = copy(rule));
            if (!(rule.node || rule.ignore || rule.mark))
              rule.node = name2;
          });
      }
      return result;
    }
    /**
    Construct a DOM parser using the parsing rules listed in a
    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
    */
    static fromSchema(schema) {
      return schema.cached.domParser || (schema.cached.domParser = new _DOMParser(schema, _DOMParser.schemaRules(schema)));
    }
  };
  var blockTags = {
    address: true,
    article: true,
    aside: true,
    blockquote: true,
    canvas: true,
    dd: true,
    div: true,
    dl: true,
    fieldset: true,
    figcaption: true,
    figure: true,
    footer: true,
    form: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    header: true,
    hgroup: true,
    hr: true,
    li: true,
    noscript: true,
    ol: true,
    output: true,
    p: true,
    pre: true,
    section: true,
    table: true,
    tfoot: true,
    ul: true
  };
  var ignoreTags = {
    head: true,
    noscript: true,
    object: true,
    script: true,
    style: true,
    title: true
  };
  var listTags = { ol: true, ul: true };
  var OPT_PRESERVE_WS = 1;
  var OPT_PRESERVE_WS_FULL = 2;
  var OPT_OPEN_LEFT = 4;
  function wsOptionsFor(type, preserveWhitespace, base2) {
    if (preserveWhitespace != null)
      return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
    return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base2 & ~OPT_OPEN_LEFT;
  }
  var NodeContext = class {
    constructor(type, attrs, marks2, pendingMarks, solid, match, options) {
      this.type = type;
      this.attrs = attrs;
      this.marks = marks2;
      this.pendingMarks = pendingMarks;
      this.solid = solid;
      this.options = options;
      this.content = [];
      this.activeMarks = Mark.none;
      this.stashMarks = [];
      this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
    }
    findWrapping(node2) {
      if (!this.match) {
        if (!this.type)
          return [];
        let fill = this.type.contentMatch.fillBefore(Fragment.from(node2));
        if (fill) {
          this.match = this.type.contentMatch.matchFragment(fill);
        } else {
          let start = this.type.contentMatch, wrap3;
          if (wrap3 = start.findWrapping(node2.type)) {
            this.match = start;
            return wrap3;
          } else {
            return null;
          }
        }
      }
      return this.match.findWrapping(node2.type);
    }
    finish(openEnd) {
      if (!(this.options & OPT_PRESERVE_WS)) {
        let last = this.content[this.content.length - 1], m4;
        if (last && last.isText && (m4 = /[ \t\r\n\u000c]+$/.exec(last.text))) {
          let text5 = last;
          if (last.text.length == m4[0].length)
            this.content.pop();
          else
            this.content[this.content.length - 1] = text5.withText(text5.text.slice(0, text5.text.length - m4[0].length));
        }
      }
      let content4 = Fragment.from(this.content);
      if (!openEnd && this.match)
        content4 = content4.append(this.match.fillBefore(Fragment.empty, true));
      return this.type ? this.type.create(this.attrs, content4, this.marks) : content4;
    }
    popFromStashMark(mark) {
      for (let i3 = this.stashMarks.length - 1; i3 >= 0; i3--)
        if (mark.eq(this.stashMarks[i3]))
          return this.stashMarks.splice(i3, 1)[0];
    }
    applyPending(nextType) {
      for (let i3 = 0, pending = this.pendingMarks; i3 < pending.length; i3++) {
        let mark = pending[i3];
        if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) && !mark.isInSet(this.activeMarks)) {
          this.activeMarks = mark.addToSet(this.activeMarks);
          this.pendingMarks = mark.removeFromSet(this.pendingMarks);
        }
      }
    }
    inlineContext(node2) {
      if (this.type)
        return this.type.inlineContent;
      if (this.content.length)
        return this.content[0].isInline;
      return node2.parentNode && !blockTags.hasOwnProperty(node2.parentNode.nodeName.toLowerCase());
    }
  };
  var ParseContext2 = class {
    constructor(parser2, options, isOpen) {
      this.parser = parser2;
      this.options = options;
      this.isOpen = isOpen;
      this.open = 0;
      let topNode = options.topNode, topContext;
      let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
      if (topNode)
        topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
      else if (isOpen)
        topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
      else
        topContext = new NodeContext(parser2.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
      this.nodes = [topContext];
      this.find = options.findPositions;
      this.needsBlock = false;
    }
    get top() {
      return this.nodes[this.open];
    }
    // Add a DOM node to the content. Text is inserted as text node,
    // otherwise, the node is passed to `addElement` or, if it has a
    // `style` attribute, `addElementWithStyles`.
    addDOM(dom) {
      if (dom.nodeType == 3)
        this.addTextNode(dom);
      else if (dom.nodeType == 1)
        this.addElement(dom);
    }
    withStyleRules(dom, f3) {
      let style = dom.getAttribute("style");
      if (!style)
        return f3();
      let marks2 = this.readStyles(parseStyles(style));
      if (!marks2)
        return;
      let [addMarks, removeMarks] = marks2, top2 = this.top;
      for (let i3 = 0; i3 < removeMarks.length; i3++)
        this.removePendingMark(removeMarks[i3], top2);
      for (let i3 = 0; i3 < addMarks.length; i3++)
        this.addPendingMark(addMarks[i3]);
      f3();
      for (let i3 = 0; i3 < addMarks.length; i3++)
        this.removePendingMark(addMarks[i3], top2);
      for (let i3 = 0; i3 < removeMarks.length; i3++)
        this.addPendingMark(removeMarks[i3]);
    }
    addTextNode(dom) {
      let value = dom.nodeValue;
      let top2 = this.top;
      if (top2.options & OPT_PRESERVE_WS_FULL || top2.inlineContext(dom) || /[^ \t\r\n\u000c]/.test(value)) {
        if (!(top2.options & OPT_PRESERVE_WS)) {
          value = value.replace(/[ \t\r\n\u000c]+/g, " ");
          if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
            let nodeBefore = top2.content[top2.content.length - 1];
            let domNodeBefore = dom.previousSibling;
            if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == "BR" || nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text))
              value = value.slice(1);
          }
        } else if (!(top2.options & OPT_PRESERVE_WS_FULL)) {
          value = value.replace(/\r?\n|\r/g, " ");
        } else {
          value = value.replace(/\r\n?/g, "\n");
        }
        if (value)
          this.insertNode(this.parser.schema.text(value));
        this.findInText(dom);
      } else {
        this.findInside(dom);
      }
    }
    // Try to find a handler for the given tag and use that to parse. If
    // none is found, the element's content nodes are added directly.
    addElement(dom, matchAfter) {
      let name2 = dom.nodeName.toLowerCase(), ruleID;
      if (listTags.hasOwnProperty(name2) && this.parser.normalizeLists)
        normalizeList(dom);
      let rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || (ruleID = this.parser.matchTag(dom, this, matchAfter));
      if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name2)) {
        this.findInside(dom);
        this.ignoreFallback(dom);
      } else if (!rule || rule.skip || rule.closeParent) {
        if (rule && rule.closeParent)
          this.open = Math.max(0, this.open - 1);
        else if (rule && rule.skip.nodeType)
          dom = rule.skip;
        let sync, top2 = this.top, oldNeedsBlock = this.needsBlock;
        if (blockTags.hasOwnProperty(name2)) {
          if (top2.content.length && top2.content[0].isInline && this.open) {
            this.open--;
            top2 = this.top;
          }
          sync = true;
          if (!top2.type)
            this.needsBlock = true;
        } else if (!dom.firstChild) {
          this.leafFallback(dom);
          return;
        }
        if (rule && rule.skip)
          this.addAll(dom);
        else
          this.withStyleRules(dom, () => this.addAll(dom));
        if (sync)
          this.sync(top2);
        this.needsBlock = oldNeedsBlock;
      } else {
        this.withStyleRules(dom, () => {
          this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : void 0);
        });
      }
    }
    // Called for leaf DOM nodes that would otherwise be ignored
    leafFallback(dom) {
      if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
        this.addTextNode(dom.ownerDocument.createTextNode("\n"));
    }
    // Called for ignored nodes
    ignoreFallback(dom) {
      if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
        this.findPlace(this.parser.schema.text("-"));
    }
    // Run any style parser associated with the node's styles. Either
    // return an array of marks, or null to indicate some of the styles
    // had a rule with `ignore` set.
    readStyles(styles) {
      let add2 = Mark.none, remove2 = Mark.none;
      for (let i3 = 0; i3 < styles.length; i3 += 2) {
        for (let after = void 0; ; ) {
          let rule = this.parser.matchStyle(styles[i3], styles[i3 + 1], this, after);
          if (!rule)
            break;
          if (rule.ignore)
            return null;
          if (rule.clearMark) {
            this.top.pendingMarks.concat(this.top.activeMarks).forEach((m4) => {
              if (rule.clearMark(m4))
                remove2 = m4.addToSet(remove2);
            });
          } else {
            add2 = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add2);
          }
          if (rule.consuming === false)
            after = rule;
          else
            break;
        }
      }
      return [add2, remove2];
    }
    // Look up a handler for the given node. If none are found, return
    // false. Otherwise, apply it, use its return value to drive the way
    // the node's content is wrapped, and return true.
    addElementByRule(dom, rule, continueAfter) {
      let sync, nodeType, mark;
      if (rule.node) {
        nodeType = this.parser.schema.nodes[rule.node];
        if (!nodeType.isLeaf) {
          sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
        } else if (!this.insertNode(nodeType.create(rule.attrs))) {
          this.leafFallback(dom);
        }
      } else {
        let markType = this.parser.schema.marks[rule.mark];
        mark = markType.create(rule.attrs);
        this.addPendingMark(mark);
      }
      let startIn = this.top;
      if (nodeType && nodeType.isLeaf) {
        this.findInside(dom);
      } else if (continueAfter) {
        this.addElement(dom, continueAfter);
      } else if (rule.getContent) {
        this.findInside(dom);
        rule.getContent(dom, this.parser.schema).forEach((node2) => this.insertNode(node2));
      } else {
        let contentDOM = dom;
        if (typeof rule.contentElement == "string")
          contentDOM = dom.querySelector(rule.contentElement);
        else if (typeof rule.contentElement == "function")
          contentDOM = rule.contentElement(dom);
        else if (rule.contentElement)
          contentDOM = rule.contentElement;
        this.findAround(dom, contentDOM, true);
        this.addAll(contentDOM);
      }
      if (sync && this.sync(startIn))
        this.open--;
      if (mark)
        this.removePendingMark(mark, startIn);
    }
    // Add all child nodes between `startIndex` and `endIndex` (or the
    // whole node, if not given). If `sync` is passed, use it to
    // synchronize after every block element.
    addAll(parent, startIndex, endIndex) {
      let index2 = startIndex || 0;
      for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index2) {
        this.findAtPoint(parent, index2);
        this.addDOM(dom);
      }
      this.findAtPoint(parent, index2);
    }
    // Try to find a way to fit the given node type into the current
    // context. May add intermediate wrappers and/or leave non-solid
    // nodes that we're in.
    findPlace(node2) {
      let route, sync;
      for (let depth2 = this.open; depth2 >= 0; depth2--) {
        let cx = this.nodes[depth2];
        let found2 = cx.findWrapping(node2);
        if (found2 && (!route || route.length > found2.length)) {
          route = found2;
          sync = cx;
          if (!found2.length)
            break;
        }
        if (cx.solid)
          break;
      }
      if (!route)
        return false;
      this.sync(sync);
      for (let i3 = 0; i3 < route.length; i3++)
        this.enterInner(route[i3], null, false);
      return true;
    }
    // Try to insert the given node, adjusting the context when needed.
    insertNode(node2) {
      if (node2.isInline && this.needsBlock && !this.top.type) {
        let block = this.textblockFromContext();
        if (block)
          this.enterInner(block);
      }
      if (this.findPlace(node2)) {
        this.closeExtra();
        let top2 = this.top;
        top2.applyPending(node2.type);
        if (top2.match)
          top2.match = top2.match.matchType(node2.type);
        let marks2 = top2.activeMarks;
        for (let i3 = 0; i3 < node2.marks.length; i3++)
          if (!top2.type || top2.type.allowsMarkType(node2.marks[i3].type))
            marks2 = node2.marks[i3].addToSet(marks2);
        top2.content.push(node2.mark(marks2));
        return true;
      }
      return false;
    }
    // Try to start a node of the given type, adjusting the context when
    // necessary.
    enter(type, attrs, preserveWS) {
      let ok3 = this.findPlace(type.create(attrs));
      if (ok3)
        this.enterInner(type, attrs, true, preserveWS);
      return ok3;
    }
    // Open a node of the given type
    enterInner(type, attrs = null, solid = false, preserveWS) {
      this.closeExtra();
      let top2 = this.top;
      top2.applyPending(type);
      top2.match = top2.match && top2.match.matchType(type);
      let options = wsOptionsFor(type, preserveWS, top2.options);
      if (top2.options & OPT_OPEN_LEFT && top2.content.length == 0)
        options |= OPT_OPEN_LEFT;
      this.nodes.push(new NodeContext(type, attrs, top2.activeMarks, top2.pendingMarks, solid, null, options));
      this.open++;
    }
    // Make sure all nodes above this.open are finished and added to
    // their parents
    closeExtra(openEnd = false) {
      let i3 = this.nodes.length - 1;
      if (i3 > this.open) {
        for (; i3 > this.open; i3--)
          this.nodes[i3 - 1].content.push(this.nodes[i3].finish(openEnd));
        this.nodes.length = this.open + 1;
      }
    }
    finish() {
      this.open = 0;
      this.closeExtra(this.isOpen);
      return this.nodes[0].finish(this.isOpen || this.options.topOpen);
    }
    sync(to) {
      for (let i3 = this.open; i3 >= 0; i3--)
        if (this.nodes[i3] == to) {
          this.open = i3;
          return true;
        }
      return false;
    }
    get currentPos() {
      this.closeExtra();
      let pos = 0;
      for (let i3 = this.open; i3 >= 0; i3--) {
        let content4 = this.nodes[i3].content;
        for (let j6 = content4.length - 1; j6 >= 0; j6--)
          pos += content4[j6].nodeSize;
        if (i3)
          pos++;
      }
      return pos;
    }
    findAtPoint(parent, offset) {
      if (this.find)
        for (let i3 = 0; i3 < this.find.length; i3++) {
          if (this.find[i3].node == parent && this.find[i3].offset == offset)
            this.find[i3].pos = this.currentPos;
        }
    }
    findInside(parent) {
      if (this.find)
        for (let i3 = 0; i3 < this.find.length; i3++) {
          if (this.find[i3].pos == null && parent.nodeType == 1 && parent.contains(this.find[i3].node))
            this.find[i3].pos = this.currentPos;
        }
    }
    findAround(parent, content4, before) {
      if (parent != content4 && this.find)
        for (let i3 = 0; i3 < this.find.length; i3++) {
          if (this.find[i3].pos == null && parent.nodeType == 1 && parent.contains(this.find[i3].node)) {
            let pos = content4.compareDocumentPosition(this.find[i3].node);
            if (pos & (before ? 2 : 4))
              this.find[i3].pos = this.currentPos;
          }
        }
    }
    findInText(textNode) {
      if (this.find)
        for (let i3 = 0; i3 < this.find.length; i3++) {
          if (this.find[i3].node == textNode)
            this.find[i3].pos = this.currentPos - (textNode.nodeValue.length - this.find[i3].offset);
        }
    }
    // Determines whether the given context string matches this context.
    matchesContext(context) {
      if (context.indexOf("|") > -1)
        return context.split(/\s*\|\s*/).some(this.matchesContext, this);
      let parts = context.split("/");
      let option = this.options.context;
      let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
      let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
      let match = (i3, depth2) => {
        for (; i3 >= 0; i3--) {
          let part = parts[i3];
          if (part == "") {
            if (i3 == parts.length - 1 || i3 == 0)
              continue;
            for (; depth2 >= minDepth; depth2--)
              if (match(i3 - 1, depth2))
                return true;
            return false;
          } else {
            let next = depth2 > 0 || depth2 == 0 && useRoot ? this.nodes[depth2].type : option && depth2 >= minDepth ? option.node(depth2 - minDepth).type : null;
            if (!next || next.name != part && next.groups.indexOf(part) == -1)
              return false;
            depth2--;
          }
        }
        return true;
      };
      return match(parts.length - 1, this.open);
    }
    textblockFromContext() {
      let $context = this.options.context;
      if ($context)
        for (let d6 = $context.depth; d6 >= 0; d6--) {
          let deflt = $context.node(d6).contentMatchAt($context.indexAfter(d6)).defaultType;
          if (deflt && deflt.isTextblock && deflt.defaultAttrs)
            return deflt;
        }
      for (let name2 in this.parser.schema.nodes) {
        let type = this.parser.schema.nodes[name2];
        if (type.isTextblock && type.defaultAttrs)
          return type;
      }
    }
    addPendingMark(mark) {
      let found2 = findSameMarkInSet(mark, this.top.pendingMarks);
      if (found2)
        this.top.stashMarks.push(found2);
      this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
    }
    removePendingMark(mark, upto) {
      for (let depth2 = this.open; depth2 >= 0; depth2--) {
        let level = this.nodes[depth2];
        let found2 = level.pendingMarks.lastIndexOf(mark);
        if (found2 > -1) {
          level.pendingMarks = mark.removeFromSet(level.pendingMarks);
        } else {
          level.activeMarks = mark.removeFromSet(level.activeMarks);
          let stashMark = level.popFromStashMark(mark);
          if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
            level.activeMarks = stashMark.addToSet(level.activeMarks);
        }
        if (level == upto)
          break;
      }
    }
  };
  function normalizeList(dom) {
    for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
      let name2 = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
      if (name2 && listTags.hasOwnProperty(name2) && prevItem) {
        prevItem.appendChild(child);
        child = prevItem;
      } else if (name2 == "li") {
        prevItem = child;
      } else if (name2) {
        prevItem = null;
      }
    }
  }
  function matches(dom, selector) {
    return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
  }
  function parseStyles(style) {
    let re4 = /\s*([\w-]+)\s*:\s*([^;]+)/g, m4, result = [];
    while (m4 = re4.exec(style))
      result.push(m4[1], m4[2].trim());
    return result;
  }
  function copy(obj) {
    let copy2 = {};
    for (let prop in obj)
      copy2[prop] = obj[prop];
    return copy2;
  }
  function markMayApply(markType, nodeType) {
    let nodes = nodeType.schema.nodes;
    for (let name2 in nodes) {
      let parent = nodes[name2];
      if (!parent.allowsMarkType(markType))
        continue;
      let seen = [], scan = (match) => {
        seen.push(match);
        for (let i3 = 0; i3 < match.edgeCount; i3++) {
          let { type, next } = match.edge(i3);
          if (type == nodeType)
            return true;
          if (seen.indexOf(next) < 0 && scan(next))
            return true;
        }
      };
      if (scan(parent.contentMatch))
        return true;
    }
  }
  function findSameMarkInSet(mark, set) {
    for (let i3 = 0; i3 < set.length; i3++) {
      if (mark.eq(set[i3]))
        return set[i3];
    }
  }
  var DOMSerializer = class _DOMSerializer {
    /**
    Create a serializer. `nodes` should map node names to functions
    that take a node and return a description of the corresponding
    DOM. `marks` does the same for mark names, but also gets an
    argument that tells it whether the mark's content is block or
    inline content (for typical use, it'll always be inline). A mark
    serializer may be `null` to indicate that marks of that type
    should not be serialized.
    */
    constructor(nodes, marks2) {
      this.nodes = nodes;
      this.marks = marks2;
    }
    /**
    Serialize the content of this fragment to a DOM fragment. When
    not in the browser, the `document` option, containing a DOM
    document, should be passed so that the serializer can create
    nodes.
    */
    serializeFragment(fragment, options = {}, target) {
      if (!target)
        target = doc2(options).createDocumentFragment();
      let top2 = target, active = [];
      fragment.forEach((node2) => {
        if (active.length || node2.marks.length) {
          let keep = 0, rendered = 0;
          while (keep < active.length && rendered < node2.marks.length) {
            let next = node2.marks[rendered];
            if (!this.marks[next.type.name]) {
              rendered++;
              continue;
            }
            if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
              break;
            keep++;
            rendered++;
          }
          while (keep < active.length)
            top2 = active.pop()[1];
          while (rendered < node2.marks.length) {
            let add2 = node2.marks[rendered++];
            let markDOM = this.serializeMark(add2, node2.isInline, options);
            if (markDOM) {
              active.push([add2, top2]);
              top2.appendChild(markDOM.dom);
              top2 = markDOM.contentDOM || markDOM.dom;
            }
          }
        }
        top2.appendChild(this.serializeNodeInner(node2, options));
      });
      return target;
    }
    /**
    @internal
    */
    serializeNodeInner(node2, options) {
      let { dom, contentDOM } = _DOMSerializer.renderSpec(doc2(options), this.nodes[node2.type.name](node2));
      if (contentDOM) {
        if (node2.isLeaf)
          throw new RangeError("Content hole not allowed in a leaf node spec");
        this.serializeFragment(node2.content, options, contentDOM);
      }
      return dom;
    }
    /**
    Serialize this node to a DOM node. This can be useful when you
    need to serialize a part of a document, as opposed to the whole
    document. To serialize a whole document, use
    [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
    its [content](https://prosemirror.net/docs/ref/#model.Node.content).
    */
    serializeNode(node2, options = {}) {
      let dom = this.serializeNodeInner(node2, options);
      for (let i3 = node2.marks.length - 1; i3 >= 0; i3--) {
        let wrap3 = this.serializeMark(node2.marks[i3], node2.isInline, options);
        if (wrap3) {
          (wrap3.contentDOM || wrap3.dom).appendChild(dom);
          dom = wrap3.dom;
        }
      }
      return dom;
    }
    /**
    @internal
    */
    serializeMark(mark, inline, options = {}) {
      let toDOM = this.marks[mark.type.name];
      return toDOM && _DOMSerializer.renderSpec(doc2(options), toDOM(mark, inline));
    }
    /**
    Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
    the spec has a hole (zero) in it, `contentDOM` will point at the
    node with the hole.
    */
    static renderSpec(doc5, structure, xmlNS = null) {
      if (typeof structure == "string")
        return { dom: doc5.createTextNode(structure) };
      if (structure.nodeType != null)
        return { dom: structure };
      if (structure.dom && structure.dom.nodeType != null)
        return structure;
      let tagName = structure[0], space2 = tagName.indexOf(" ");
      if (space2 > 0) {
        xmlNS = tagName.slice(0, space2);
        tagName = tagName.slice(space2 + 1);
      }
      let contentDOM;
      let dom = xmlNS ? doc5.createElementNS(xmlNS, tagName) : doc5.createElement(tagName);
      let attrs = structure[1], start = 1;
      if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
        start = 2;
        for (let name2 in attrs)
          if (attrs[name2] != null) {
            let space3 = name2.indexOf(" ");
            if (space3 > 0)
              dom.setAttributeNS(name2.slice(0, space3), name2.slice(space3 + 1), attrs[name2]);
            else
              dom.setAttribute(name2, attrs[name2]);
          }
      }
      for (let i3 = start; i3 < structure.length; i3++) {
        let child = structure[i3];
        if (child === 0) {
          if (i3 < structure.length - 1 || i3 > start)
            throw new RangeError("Content hole must be the only child of its parent node");
          return { dom, contentDOM: dom };
        } else {
          let { dom: inner, contentDOM: innerContent } = _DOMSerializer.renderSpec(doc5, child, xmlNS);
          dom.appendChild(inner);
          if (innerContent) {
            if (contentDOM)
              throw new RangeError("Multiple content holes");
            contentDOM = innerContent;
          }
        }
      }
      return { dom, contentDOM };
    }
    /**
    Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
    properties in a schema's node and mark specs.
    */
    static fromSchema(schema) {
      return schema.cached.domSerializer || (schema.cached.domSerializer = new _DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
    }
    /**
    Gather the serializers in a schema's node specs into an object.
    This can be useful as a base to build a custom serializer from.
    */
    static nodesFromSchema(schema) {
      let result = gatherToDOM(schema.nodes);
      if (!result.text)
        result.text = (node2) => node2.text;
      return result;
    }
    /**
    Gather the serializers in a schema's mark specs into an object.
    */
    static marksFromSchema(schema) {
      return gatherToDOM(schema.marks);
    }
  };
  function gatherToDOM(obj) {
    let result = {};
    for (let name2 in obj) {
      let toDOM = obj[name2].spec.toDOM;
      if (toDOM)
        result[name2] = toDOM;
    }
    return result;
  }
  function doc2(options) {
    return options.document || window.document;
  }

  // node_modules/mdast-util-to-string/lib/index.js
  var emptyOptions = {};
  function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
  }
  function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
      if ("value" in value) {
        return value.type === "html" && !includeHtml ? "" : value.value;
      }
      if (includeImageAlt && "alt" in value && value.alt) {
        return value.alt;
      }
      if ("children" in value) {
        return all(value.children, includeImageAlt, includeHtml);
      }
    }
    if (Array.isArray(value)) {
      return all(value, includeImageAlt, includeHtml);
    }
    return "";
  }
  function all(values, includeImageAlt, includeHtml) {
    const result = [];
    let index2 = -1;
    while (++index2 < values.length) {
      result[index2] = one(values[index2], includeImageAlt, includeHtml);
    }
    return result.join("");
  }
  function node(value) {
    return Boolean(value && typeof value === "object");
  }

  // node_modules/decode-named-character-reference/index.dom.js
  var element = document.createElement("i");
  function decodeNamedCharacterReference(value) {
    const characterReference2 = "&" + value + ";";
    element.innerHTML = characterReference2;
    const char = element.textContent;
    if (char.charCodeAt(char.length - 1) === 59 && value !== "semi") {
      return false;
    }
    return char === characterReference2 ? false : char;
  }

  // node_modules/micromark-util-chunked/index.js
  function splice(list4, start, remove2, items) {
    const end = list4.length;
    let chunkStart = 0;
    let parameters;
    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }
    remove2 = remove2 > 0 ? remove2 : 0;
    if (items.length < 1e4) {
      parameters = Array.from(items);
      parameters.unshift(start, remove2);
      list4.splice(...parameters);
    } else {
      if (remove2)
        list4.splice(start, remove2);
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 1e4);
        parameters.unshift(start, 0);
        list4.splice(...parameters);
        chunkStart += 1e4;
        start += 1e4;
      }
    }
  }
  function push(list4, items) {
    if (list4.length > 0) {
      splice(list4, list4.length, 0, items);
      return list4;
    }
    return items;
  }

  // node_modules/micromark-util-combine-extensions/index.js
  var hasOwnProperty = {}.hasOwnProperty;
  function combineExtensions(extensions) {
    const all2 = {};
    let index2 = -1;
    while (++index2 < extensions.length) {
      syntaxExtension(all2, extensions[index2]);
    }
    return all2;
  }
  function syntaxExtension(all2, extension2) {
    let hook;
    for (hook in extension2) {
      const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
      const left = maybe || (all2[hook] = {});
      const right = extension2[hook];
      let code3;
      if (right) {
        for (code3 in right) {
          if (!hasOwnProperty.call(left, code3))
            left[code3] = [];
          const value = right[code3];
          constructs(
            // @ts-expect-error Looks like a list.
            left[code3],
            Array.isArray(value) ? value : value ? [value] : []
          );
        }
      }
    }
  }
  function constructs(existing, list4) {
    let index2 = -1;
    const before = [];
    while (++index2 < list4.length) {
      ;
      (list4[index2].add === "after" ? existing : before).push(list4[index2]);
    }
    splice(existing, 0, 0, before);
  }

  // node_modules/micromark-util-decode-numeric-character-reference/index.js
  function decodeNumericCharacterReference(value, base2) {
    const code3 = Number.parseInt(value, base2);
    if (
      // C0 except for HT, LF, FF, CR, space.
      code3 < 9 || code3 === 11 || code3 > 13 && code3 < 32 || // Control character (DEL) of C0, and C1 controls.
      code3 > 126 && code3 < 160 || // Lone high surrogates and low surrogates.
      code3 > 55295 && code3 < 57344 || // Noncharacters.
      code3 > 64975 && code3 < 65008 || /* eslint-disable no-bitwise */
      (code3 & 65535) === 65535 || (code3 & 65535) === 65534 || /* eslint-enable no-bitwise */
      // Out of range
      code3 > 1114111
    ) {
      return "\uFFFD";
    }
    return String.fromCodePoint(code3);
  }

  // node_modules/micromark-util-normalize-identifier/index.js
  function normalizeIdentifier(value) {
    return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
  }

  // node_modules/micromark-util-character/index.js
  var asciiAlpha = regexCheck(/[A-Za-z]/);
  var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  function asciiControl(code3) {
    return (
      // Special whitespace codes (which have negative values), C0 and Control
      // character DEL
      code3 !== null && (code3 < 32 || code3 === 127)
    );
  }
  var asciiDigit = regexCheck(/\d/);
  var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  function markdownLineEnding(code3) {
    return code3 !== null && code3 < -2;
  }
  function markdownLineEndingOrSpace(code3) {
    return code3 !== null && (code3 < 0 || code3 === 32);
  }
  function markdownSpace(code3) {
    return code3 === -2 || code3 === -1 || code3 === 32;
  }
  var unicodePunctuation = regexCheck(new RegExp("\\p{P}|\\p{S}", "u"));
  var unicodeWhitespace = regexCheck(/\s/);
  function regexCheck(regex) {
    return check;
    function check(code3) {
      return code3 !== null && code3 > -1 && regex.test(String.fromCharCode(code3));
    }
  }

  // node_modules/micromark-factory-space/index.js
  function factorySpace(effects, ok3, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    function start(code3) {
      if (markdownSpace(code3)) {
        effects.enter(type);
        return prefix(code3);
      }
      return ok3(code3);
    }
    function prefix(code3) {
      if (markdownSpace(code3) && size++ < limit) {
        effects.consume(code3);
        return prefix;
      }
      effects.exit(type);
      return ok3(code3);
    }
  }

  // node_modules/micromark/lib/initialize/content.js
  var content2 = {
    tokenize: initializeContent
  };
  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    );
    let previous3;
    return contentStart;
    function afterContentStartConstruct(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(effects, contentStart, "linePrefix");
    }
    function paragraphInitial(code3) {
      effects.enter("paragraph");
      return lineStart(code3);
    }
    function lineStart(code3) {
      const token = effects.enter("chunkText", {
        contentType: "text",
        previous: previous3
      });
      if (previous3) {
        previous3.next = token;
      }
      previous3 = token;
      return data(code3);
    }
    function data(code3) {
      if (code3 === null) {
        effects.exit("chunkText");
        effects.exit("paragraph");
        effects.consume(code3);
        return;
      }
      if (markdownLineEnding(code3)) {
        effects.consume(code3);
        effects.exit("chunkText");
        return lineStart;
      }
      effects.consume(code3);
      return data;
    }
  }

  // node_modules/micromark/lib/initialize/document.js
  var document2 = {
    tokenize: initializeDocument
  };
  var containerConstruct = {
    tokenize: tokenizeContainer
  };
  function initializeDocument(effects) {
    const self2 = this;
    const stack = [];
    let continued = 0;
    let childFlow;
    let childToken;
    let lineStartOffset;
    return start;
    function start(code3) {
      if (continued < stack.length) {
        const item = stack[continued];
        self2.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code3);
      }
      return checkNewContainers(code3);
    }
    function documentContinue(code3) {
      continued++;
      if (self2.containerState._closeFlow) {
        self2.containerState._closeFlow = void 0;
        if (childFlow) {
          closeFlow();
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let point3;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            point3 = self2.events[indexBeforeFlow][1].end;
            break;
          }
        }
        exitContainers(continued);
        let index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point3);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
        return checkNewContainers(code3);
      }
      return start(code3);
    }
    function checkNewContainers(code3) {
      if (continued === stack.length) {
        if (!childFlow) {
          return documentContinued(code3);
        }
        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code3);
        }
        self2.interrupt = Boolean(
          childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
        );
      }
      self2.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code3);
    }
    function thereIsANewContainer(code3) {
      if (childFlow)
        closeFlow();
      exitContainers(continued);
      return documentContinued(code3);
    }
    function thereIsNoNewContainer(code3) {
      self2.parser.lazy[self2.now().line] = continued !== stack.length;
      lineStartOffset = self2.now().offset;
      return flowStart(code3);
    }
    function documentContinued(code3) {
      self2.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart
      )(code3);
    }
    function containerContinue(code3) {
      continued++;
      stack.push([self2.currentConstruct, self2.containerState]);
      return documentContinued(code3);
    }
    function flowStart(code3) {
      if (code3 === null) {
        if (childFlow)
          closeFlow();
        exitContainers(0);
        effects.consume(code3);
        return;
      }
      childFlow = childFlow || self2.parser.flow(self2.now());
      effects.enter("chunkFlow", {
        contentType: "flow",
        previous: childToken,
        _tokenizer: childFlow
      });
      return flowContinue(code3);
    }
    function flowContinue(code3) {
      if (code3 === null) {
        writeToChild(effects.exit("chunkFlow"), true);
        exitContainers(0);
        effects.consume(code3);
        return;
      }
      if (markdownLineEnding(code3)) {
        effects.consume(code3);
        writeToChild(effects.exit("chunkFlow"));
        continued = 0;
        self2.interrupt = void 0;
        return start;
      }
      effects.consume(code3);
      return flowContinue;
    }
    function writeToChild(token, eof) {
      const stream = self2.sliceStream(token);
      if (eof)
        stream.push(null);
      token.previous = childToken;
      if (childToken)
        childToken.next = token;
      childToken = token;
      childFlow.defineSkip(token.start);
      childFlow.write(stream);
      if (self2.parser.lazy[token.start.line]) {
        let index2 = childFlow.events.length;
        while (index2--) {
          if (
            // The token starts before the line ending…
            childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
            (!childFlow.events[index2][1].end || // …or ends after it.
            childFlow.events[index2][1].end.offset > lineStartOffset)
          ) {
            return;
          }
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let seen;
        let point3;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            if (seen) {
              point3 = self2.events[indexBeforeFlow][1].end;
              break;
            }
            seen = true;
          }
        }
        exitContainers(continued);
        index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point3);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
      }
    }
    function exitContainers(size) {
      let index2 = stack.length;
      while (index2-- > size) {
        const entry = stack[index2];
        self2.containerState = entry[1];
        entry[0].exit.call(self2, effects);
      }
      stack.length = size;
    }
    function closeFlow() {
      childFlow.write([null]);
      childToken = void 0;
      childFlow = void 0;
      self2.containerState._closeFlow = void 0;
    }
  }
  function tokenizeContainer(effects, ok3, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok3, nok),
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
  }

  // node_modules/micromark-util-classify-character/index.js
  function classifyCharacter(code3) {
    if (code3 === null || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
      return 1;
    }
    if (unicodePunctuation(code3)) {
      return 2;
    }
  }

  // node_modules/micromark-util-resolve-all/index.js
  function resolveAll(constructs2, events, context) {
    const called = [];
    let index2 = -1;
    while (++index2 < constructs2.length) {
      const resolve = constructs2[index2].resolveAll;
      if (resolve && !called.includes(resolve)) {
        events = resolve(events, context);
        called.push(resolve);
      }
    }
    return events;
  }

  // node_modules/micromark-core-commonmark/lib/attention.js
  var attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
  };
  function resolveAllAttention(events, context) {
    let index2 = -1;
    let open;
    let group;
    let text5;
    let openingSequence;
    let closingSequence;
    let use;
    let nextEvents;
    let offset;
    while (++index2 < events.length) {
      if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
        open = index2;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
          context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
            if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
              continue;
            }
            use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
            const start = Object.assign({}, events[open][1].end);
            const end = Object.assign({}, events[index2][1].start);
            movePoint(start, -use);
            movePoint(end, use);
            openingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start,
              end: Object.assign({}, events[open][1].end)
            };
            closingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: Object.assign({}, events[index2][1].start),
              end
            };
            text5 = {
              type: use > 1 ? "strongText" : "emphasisText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index2][1].start)
            };
            group = {
              type: use > 1 ? "strong" : "emphasis",
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end)
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index2][1].start = Object.assign({}, closingSequence.end);
            nextEvents = [];
            if (events[open][1].end.offset - events[open][1].start.offset) {
              nextEvents = push(nextEvents, [["enter", events[open][1], context], ["exit", events[open][1], context]]);
            }
            nextEvents = push(nextEvents, [["enter", group, context], ["enter", openingSequence, context], ["exit", openingSequence, context], ["enter", text5, context]]);
            nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index2), context));
            nextEvents = push(nextEvents, [["exit", text5, context], ["enter", closingSequence, context], ["exit", closingSequence, context], ["exit", group, context]]);
            if (events[index2][1].end.offset - events[index2][1].start.offset) {
              offset = 2;
              nextEvents = push(nextEvents, [["enter", events[index2][1], context], ["exit", events[index2][1], context]]);
            } else {
              offset = 0;
            }
            splice(events, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - offset - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "attentionSequence") {
        events[index2][1].type = "data";
      }
    }
    return events;
  }
  function tokenizeAttention(effects, ok3) {
    const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
    const previous3 = this.previous;
    const before = classifyCharacter(previous3);
    let marker;
    return start;
    function start(code3) {
      marker = code3;
      effects.enter("attentionSequence");
      return inside2(code3);
    }
    function inside2(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        return inside2;
      }
      const token = effects.exit("attentionSequence");
      const after = classifyCharacter(code3);
      const open = !after || after === 2 && before || attentionMarkers2.includes(code3);
      const close2 = !before || before === 2 && after || attentionMarkers2.includes(previous3);
      token._open = Boolean(marker === 42 ? open : open && (before || !close2));
      token._close = Boolean(marker === 42 ? close2 : close2 && (after || !open));
      return ok3(code3);
    }
  }
  function movePoint(point3, offset) {
    point3.column += offset;
    point3.offset += offset;
    point3._bufferIndex += offset;
  }

  // node_modules/micromark-core-commonmark/lib/autolink.js
  var autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink
  };
  function tokenizeAutolink(effects, ok3, nok) {
    let size = 0;
    return start;
    function start(code3) {
      effects.enter("autolink");
      effects.enter("autolinkMarker");
      effects.consume(code3);
      effects.exit("autolinkMarker");
      effects.enter("autolinkProtocol");
      return open;
    }
    function open(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return schemeOrEmailAtext;
      }
      if (code3 === 64) {
        return nok(code3);
      }
      return emailAtext(code3);
    }
    function schemeOrEmailAtext(code3) {
      if (code3 === 43 || code3 === 45 || code3 === 46 || asciiAlphanumeric(code3)) {
        size = 1;
        return schemeInsideOrEmailAtext(code3);
      }
      return emailAtext(code3);
    }
    function schemeInsideOrEmailAtext(code3) {
      if (code3 === 58) {
        effects.consume(code3);
        size = 0;
        return urlInside;
      }
      if ((code3 === 43 || code3 === 45 || code3 === 46 || asciiAlphanumeric(code3)) && size++ < 32) {
        effects.consume(code3);
        return schemeInsideOrEmailAtext;
      }
      size = 0;
      return emailAtext(code3);
    }
    function urlInside(code3) {
      if (code3 === 62) {
        effects.exit("autolinkProtocol");
        effects.enter("autolinkMarker");
        effects.consume(code3);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok3;
      }
      if (code3 === null || code3 === 32 || code3 === 60 || asciiControl(code3)) {
        return nok(code3);
      }
      effects.consume(code3);
      return urlInside;
    }
    function emailAtext(code3) {
      if (code3 === 64) {
        effects.consume(code3);
        return emailAtSignOrDot;
      }
      if (asciiAtext(code3)) {
        effects.consume(code3);
        return emailAtext;
      }
      return nok(code3);
    }
    function emailAtSignOrDot(code3) {
      return asciiAlphanumeric(code3) ? emailLabel(code3) : nok(code3);
    }
    function emailLabel(code3) {
      if (code3 === 46) {
        effects.consume(code3);
        size = 0;
        return emailAtSignOrDot;
      }
      if (code3 === 62) {
        effects.exit("autolinkProtocol").type = "autolinkEmail";
        effects.enter("autolinkMarker");
        effects.consume(code3);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok3;
      }
      return emailValue(code3);
    }
    function emailValue(code3) {
      if ((code3 === 45 || asciiAlphanumeric(code3)) && size++ < 63) {
        const next = code3 === 45 ? emailValue : emailLabel;
        effects.consume(code3);
        return next;
      }
      return nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/blank-line.js
  var blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
  };
  function tokenizeBlankLine(effects, ok3, nok) {
    return start;
    function start(code3) {
      return markdownSpace(code3) ? factorySpace(effects, after, "linePrefix")(code3) : after(code3);
    }
    function after(code3) {
      return code3 === null || markdownLineEnding(code3) ? ok3(code3) : nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/block-quote.js
  var blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation
    },
    exit
  };
  function tokenizeBlockQuoteStart(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (code3 === 62) {
        const state = self2.containerState;
        if (!state.open) {
          effects.enter("blockQuote", {
            _container: true
          });
          state.open = true;
        }
        effects.enter("blockQuotePrefix");
        effects.enter("blockQuoteMarker");
        effects.consume(code3);
        effects.exit("blockQuoteMarker");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      if (markdownSpace(code3)) {
        effects.enter("blockQuotePrefixWhitespace");
        effects.consume(code3);
        effects.exit("blockQuotePrefixWhitespace");
        effects.exit("blockQuotePrefix");
        return ok3;
      }
      effects.exit("blockQuotePrefix");
      return ok3(code3);
    }
  }
  function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
    const self2 = this;
    return contStart;
    function contStart(code3) {
      if (markdownSpace(code3)) {
        return factorySpace(effects, contBefore, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code3);
      }
      return contBefore(code3);
    }
    function contBefore(code3) {
      return effects.attempt(blockQuote, ok3, nok)(code3);
    }
  }
  function exit(effects) {
    effects.exit("blockQuote");
  }

  // node_modules/micromark-core-commonmark/lib/character-escape.js
  var characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape
  };
  function tokenizeCharacterEscape(effects, ok3, nok) {
    return start;
    function start(code3) {
      effects.enter("characterEscape");
      effects.enter("escapeMarker");
      effects.consume(code3);
      effects.exit("escapeMarker");
      return inside2;
    }
    function inside2(code3) {
      if (asciiPunctuation(code3)) {
        effects.enter("characterEscapeValue");
        effects.consume(code3);
        effects.exit("characterEscapeValue");
        effects.exit("characterEscape");
        return ok3;
      }
      return nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/character-reference.js
  var characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference
  };
  function tokenizeCharacterReference(effects, ok3, nok) {
    const self2 = this;
    let size = 0;
    let max;
    let test;
    return start;
    function start(code3) {
      effects.enter("characterReference");
      effects.enter("characterReferenceMarker");
      effects.consume(code3);
      effects.exit("characterReferenceMarker");
      return open;
    }
    function open(code3) {
      if (code3 === 35) {
        effects.enter("characterReferenceMarkerNumeric");
        effects.consume(code3);
        effects.exit("characterReferenceMarkerNumeric");
        return numeric;
      }
      effects.enter("characterReferenceValue");
      max = 31;
      test = asciiAlphanumeric;
      return value(code3);
    }
    function numeric(code3) {
      if (code3 === 88 || code3 === 120) {
        effects.enter("characterReferenceMarkerHexadecimal");
        effects.consume(code3);
        effects.exit("characterReferenceMarkerHexadecimal");
        effects.enter("characterReferenceValue");
        max = 6;
        test = asciiHexDigit;
        return value;
      }
      effects.enter("characterReferenceValue");
      max = 7;
      test = asciiDigit;
      return value(code3);
    }
    function value(code3) {
      if (code3 === 59 && size) {
        const token = effects.exit("characterReferenceValue");
        if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
          return nok(code3);
        }
        effects.enter("characterReferenceMarker");
        effects.consume(code3);
        effects.exit("characterReferenceMarker");
        effects.exit("characterReference");
        return ok3;
      }
      if (test(code3) && size++ < max) {
        effects.consume(code3);
        return value;
      }
      return nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/code-fenced.js
  var nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true
  };
  var codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true
  };
  function tokenizeCodeFenced(effects, ok3, nok) {
    const self2 = this;
    const closeStart = {
      tokenize: tokenizeCloseStart,
      partial: true
    };
    let initialPrefix = 0;
    let sizeOpen = 0;
    let marker;
    return start;
    function start(code3) {
      return beforeSequenceOpen(code3);
    }
    function beforeSequenceOpen(code3) {
      const tail = self2.events[self2.events.length - 1];
      initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
      marker = code3;
      effects.enter("codeFenced");
      effects.enter("codeFencedFence");
      effects.enter("codeFencedFenceSequence");
      return sequenceOpen(code3);
    }
    function sequenceOpen(code3) {
      if (code3 === marker) {
        sizeOpen++;
        effects.consume(code3);
        return sequenceOpen;
      }
      if (sizeOpen < 3) {
        return nok(code3);
      }
      effects.exit("codeFencedFenceSequence");
      return markdownSpace(code3) ? factorySpace(effects, infoBefore, "whitespace")(code3) : infoBefore(code3);
    }
    function infoBefore(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("codeFencedFence");
        return self2.interrupt ? ok3(code3) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code3);
      }
      effects.enter("codeFencedFenceInfo");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return info(code3);
    }
    function info(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return infoBefore(code3);
      }
      if (markdownSpace(code3)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return factorySpace(effects, metaBefore, "whitespace")(code3);
      }
      if (code3 === 96 && code3 === marker) {
        return nok(code3);
      }
      effects.consume(code3);
      return info;
    }
    function metaBefore(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return infoBefore(code3);
      }
      effects.enter("codeFencedFenceMeta");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return meta2(code3);
    }
    function meta2(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceMeta");
        return infoBefore(code3);
      }
      if (code3 === 96 && code3 === marker) {
        return nok(code3);
      }
      effects.consume(code3);
      return meta2;
    }
    function atNonLazyBreak(code3) {
      return effects.attempt(closeStart, after, contentBefore)(code3);
    }
    function contentBefore(code3) {
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return contentStart;
    }
    function contentStart(code3) {
      return initialPrefix > 0 && markdownSpace(code3) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code3) : beforeContentChunk(code3);
    }
    function beforeContentChunk(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code3);
      }
      effects.enter("codeFlowValue");
      return contentChunk(code3);
    }
    function contentChunk(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("codeFlowValue");
        return beforeContentChunk(code3);
      }
      effects.consume(code3);
      return contentChunk;
    }
    function after(code3) {
      effects.exit("codeFenced");
      return ok3(code3);
    }
    function tokenizeCloseStart(effects2, ok4, nok2) {
      let size = 0;
      return startBefore;
      function startBefore(code3) {
        effects2.enter("lineEnding");
        effects2.consume(code3);
        effects2.exit("lineEnding");
        return start2;
      }
      function start2(code3) {
        effects2.enter("codeFencedFence");
        return markdownSpace(code3) ? factorySpace(effects2, beforeSequenceClose, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code3) : beforeSequenceClose(code3);
      }
      function beforeSequenceClose(code3) {
        if (code3 === marker) {
          effects2.enter("codeFencedFenceSequence");
          return sequenceClose(code3);
        }
        return nok2(code3);
      }
      function sequenceClose(code3) {
        if (code3 === marker) {
          size++;
          effects2.consume(code3);
          return sequenceClose;
        }
        if (size >= sizeOpen) {
          effects2.exit("codeFencedFenceSequence");
          return markdownSpace(code3) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code3) : sequenceCloseAfter(code3);
        }
        return nok2(code3);
      }
      function sequenceCloseAfter(code3) {
        if (code3 === null || markdownLineEnding(code3)) {
          effects2.exit("codeFencedFence");
          return ok4(code3);
        }
        return nok2(code3);
      }
    }
  }
  function tokenizeNonLazyContinuation(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return lineStart;
    }
    function lineStart(code3) {
      return self2.parser.lazy[self2.now().line] ? nok(code3) : ok3(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/code-indented.js
  var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented
  };
  var furtherStart = {
    tokenize: tokenizeFurtherStart,
    partial: true
  };
  function tokenizeCodeIndented(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      effects.enter("codeIndented");
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code3);
    }
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code3) : nok(code3);
    }
    function atBreak(code3) {
      if (code3 === null) {
        return after(code3);
      }
      if (markdownLineEnding(code3)) {
        return effects.attempt(furtherStart, atBreak, after)(code3);
      }
      effects.enter("codeFlowValue");
      return inside2(code3);
    }
    function inside2(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("codeFlowValue");
        return atBreak(code3);
      }
      effects.consume(code3);
      return inside2;
    }
    function after(code3) {
      effects.exit("codeIndented");
      return ok3(code3);
    }
  }
  function tokenizeFurtherStart(effects, ok3, nok) {
    const self2 = this;
    return furtherStart2;
    function furtherStart2(code3) {
      if (self2.parser.lazy[self2.now().line]) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return furtherStart2;
      }
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code3);
    }
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok3(code3) : markdownLineEnding(code3) ? furtherStart2(code3) : nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/code-text.js
  var codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous
  };
  function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    let index2;
    let enter;
    if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
      index2 = headEnterIndex;
      while (++index2 < tailExitIndex) {
        if (events[index2][1].type === "codeTextData") {
          events[headEnterIndex][1].type = "codeTextPadding";
          events[tailExitIndex][1].type = "codeTextPadding";
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break;
        }
      }
    }
    index2 = headEnterIndex - 1;
    tailExitIndex++;
    while (++index2 <= tailExitIndex) {
      if (enter === void 0) {
        if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
          enter = index2;
        }
      } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
        events[enter][1].type = "codeTextData";
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          tailExitIndex -= index2 - enter - 2;
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return events;
  }
  function previous(code3) {
    return code3 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
  }
  function tokenizeCodeText(effects, ok3, nok) {
    const self2 = this;
    let sizeOpen = 0;
    let size;
    let token;
    return start;
    function start(code3) {
      effects.enter("codeText");
      effects.enter("codeTextSequence");
      return sequenceOpen(code3);
    }
    function sequenceOpen(code3) {
      if (code3 === 96) {
        effects.consume(code3);
        sizeOpen++;
        return sequenceOpen;
      }
      effects.exit("codeTextSequence");
      return between2(code3);
    }
    function between2(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 32) {
        effects.enter("space");
        effects.consume(code3);
        effects.exit("space");
        return between2;
      }
      if (code3 === 96) {
        token = effects.enter("codeTextSequence");
        size = 0;
        return sequenceClose(code3);
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return between2;
      }
      effects.enter("codeTextData");
      return data(code3);
    }
    function data(code3) {
      if (code3 === null || code3 === 32 || code3 === 96 || markdownLineEnding(code3)) {
        effects.exit("codeTextData");
        return between2(code3);
      }
      effects.consume(code3);
      return data;
    }
    function sequenceClose(code3) {
      if (code3 === 96) {
        effects.consume(code3);
        size++;
        return sequenceClose;
      }
      if (size === sizeOpen) {
        effects.exit("codeTextSequence");
        effects.exit("codeText");
        return ok3(code3);
      }
      token.type = "codeTextData";
      return data(code3);
    }
  }

  // node_modules/micromark-util-subtokenize/lib/splice-buffer.js
  var SpliceBuffer = class {
    /**
     * @param {ReadonlyArray<T> | null | undefined} [initial]
     *   Initial items (optional).
     * @returns
     *   Splice buffer.
     */
    constructor(initial) {
      this.left = initial ? [...initial] : [];
      this.right = [];
    }
    /**
     * Array access;
     * does not move the cursor.
     *
     * @param {number} index
     *   Index.
     * @return {T}
     *   Item.
     */
    get(index2) {
      if (index2 < 0 || index2 >= this.left.length + this.right.length) {
        throw new RangeError("Cannot access index `" + index2 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
      }
      if (index2 < this.left.length)
        return this.left[index2];
      return this.right[this.right.length - index2 + this.left.length - 1];
    }
    /**
     * The length of the splice buffer, one greater than the largest index in the
     * array.
     */
    get length() {
      return this.left.length + this.right.length;
    }
    /**
     * Remove and return `list[0]`;
     * moves the cursor to `0`.
     *
     * @returns {T | undefined}
     *   Item, optional.
     */
    shift() {
      this.setCursor(0);
      return this.right.pop();
    }
    /**
     * Slice the buffer to get an array;
     * does not move the cursor.
     *
     * @param {number} start
     *   Start.
     * @param {number | null | undefined} [end]
     *   End (optional).
     * @returns {Array<T>}
     *   Array of items.
     */
    slice(start, end) {
      const stop = end === null || end === void 0 ? Number.POSITIVE_INFINITY : end;
      if (stop < this.left.length) {
        return this.left.slice(start, stop);
      }
      if (start > this.left.length) {
        return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();
      }
      return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
    }
    /**
     * Mimics the behavior of Array.prototype.splice() except for the change of
     * interface necessary to avoid segfaults when patching in very large arrays.
     *
     * This operation moves cursor is moved to `start` and results in the cursor
     * placed after any inserted items.
     *
     * @param {number} start
     *   Start;
     *   zero-based index at which to start changing the array;
     *   negative numbers count backwards from the end of the array and values
     *   that are out-of bounds are clamped to the appropriate end of the array.
     * @param {number | null | undefined} [deleteCount=0]
     *   Delete count (default: `0`);
     *   maximum number of elements to delete, starting from start.
     * @param {Array<T> | null | undefined} [items=[]]
     *   Items to include in place of the deleted items (default: `[]`).
     * @return {Array<T>}
     *   Any removed items.
     */
    splice(start, deleteCount, items) {
      const count = deleteCount || 0;
      this.setCursor(Math.trunc(start));
      const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
      if (items)
        chunkedPush(this.left, items);
      return removed.reverse();
    }
    /**
     * Remove and return the highest-numbered item in the array, so
     * `list[list.length - 1]`;
     * Moves the cursor to `length`.
     *
     * @returns {T | undefined}
     *   Item, optional.
     */
    pop() {
      this.setCursor(Number.POSITIVE_INFINITY);
      return this.left.pop();
    }
    /**
     * Inserts a single item to the high-numbered side of the array;
     * moves the cursor to `length`.
     *
     * @param {T} item
     *   Item.
     * @returns {undefined}
     *   Nothing.
     */
    push(item) {
      this.setCursor(Number.POSITIVE_INFINITY);
      this.left.push(item);
    }
    /**
     * Inserts many items to the high-numbered side of the array.
     * Moves the cursor to `length`.
     *
     * @param {Array<T>} items
     *   Items.
     * @returns {undefined}
     *   Nothing.
     */
    pushMany(items) {
      this.setCursor(Number.POSITIVE_INFINITY);
      chunkedPush(this.left, items);
    }
    /**
     * Inserts a single item to the low-numbered side of the array;
     * Moves the cursor to `0`.
     *
     * @param {T} item
     *   Item.
     * @returns {undefined}
     *   Nothing.
     */
    unshift(item) {
      this.setCursor(0);
      this.right.push(item);
    }
    /**
     * Inserts many items to the low-numbered side of the array;
     * moves the cursor to `0`.
     *
     * @param {Array<T>} items
     *   Items.
     * @returns {undefined}
     *   Nothing.
     */
    unshiftMany(items) {
      this.setCursor(0);
      chunkedPush(this.right, items.reverse());
    }
    /**
     * Move the cursor to a specific position in the array. Requires
     * time proportional to the distance moved.
     *
     * If `n < 0`, the cursor will end up at the beginning.
     * If `n > length`, the cursor will end up at the end.
     *
     * @param {number} n
     *   Position.
     * @return {undefined}
     *   Nothing.
     */
    setCursor(n5) {
      if (n5 === this.left.length || n5 > this.left.length && this.right.length === 0 || n5 < 0 && this.left.length === 0)
        return;
      if (n5 < this.left.length) {
        const removed = this.left.splice(n5, Number.POSITIVE_INFINITY);
        chunkedPush(this.right, removed.reverse());
      } else {
        const removed = this.right.splice(this.left.length + this.right.length - n5, Number.POSITIVE_INFINITY);
        chunkedPush(this.left, removed.reverse());
      }
    }
  };
  function chunkedPush(list4, right) {
    let chunkStart = 0;
    if (right.length < 1e4) {
      list4.push(...right);
    } else {
      while (chunkStart < right.length) {
        list4.push(...right.slice(chunkStart, chunkStart + 1e4));
        chunkStart += 1e4;
      }
    }
  }

  // node_modules/micromark-util-subtokenize/index.js
  function subtokenize(eventsArray) {
    const jumps = {};
    let index2 = -1;
    let event;
    let lineIndex;
    let otherIndex;
    let otherEvent;
    let parameters;
    let subevents;
    let more;
    const events = new SpliceBuffer(eventsArray);
    while (++index2 < events.length) {
      while (index2 in jumps) {
        index2 = jumps[index2];
      }
      event = events.get(index2);
      if (index2 && event[1].type === "chunkFlow" && events.get(index2 - 1)[1].type === "listItemPrefix") {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
          otherIndex += 2;
        }
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === "content") {
              break;
            }
            if (subevents[otherIndex][1].type === "chunkText") {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      }
      if (event[0] === "enter") {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events, index2));
          index2 = jumps[index2];
          more = true;
        }
      } else if (event[1]._container) {
        otherIndex = index2;
        lineIndex = void 0;
        while (otherIndex--) {
          otherEvent = events.get(otherIndex);
          if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
            if (otherEvent[0] === "enter") {
              if (lineIndex) {
                events.get(lineIndex)[1].type = "lineEndingBlank";
              }
              otherEvent[1].type = "lineEnding";
              lineIndex = otherIndex;
            }
          } else {
            break;
          }
        }
        if (lineIndex) {
          event[1].end = Object.assign({}, events.get(lineIndex)[1].start);
          parameters = events.slice(lineIndex, index2);
          parameters.unshift(event);
          events.splice(lineIndex, index2 - lineIndex + 1, parameters);
        }
      }
    }
    splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
    return !more;
  }
  function subcontent(events, eventIndex) {
    const token = events.get(eventIndex)[1];
    const context = events.get(eventIndex)[2];
    let startPosition = eventIndex - 1;
    const startPositions = [];
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    const jumps = [];
    const gaps = {};
    let stream;
    let previous3;
    let index2 = -1;
    let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [start];
    while (current) {
      while (events.get(++startPosition)[1] !== current) {
      }
      startPositions.push(startPosition);
      if (!current._tokenizer) {
        stream = context.sliceStream(current);
        if (!current.next) {
          stream.push(null);
        }
        if (previous3) {
          tokenizer.defineSkip(current.start);
        }
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = true;
        }
        tokenizer.write(stream);
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = void 0;
        }
      }
      previous3 = current;
      current = current.next;
    }
    current = token;
    while (++index2 < childEvents.length) {
      if (
        // Find a void token that includes a break.
        childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
      ) {
        start = index2 + 1;
        breaks.push(start);
        current._tokenizer = void 0;
        current.previous = void 0;
        current = current.next;
      }
    }
    tokenizer.events = [];
    if (current) {
      current._tokenizer = void 0;
      current.previous = void 0;
    } else {
      breaks.pop();
    }
    index2 = breaks.length;
    while (index2--) {
      const slice2 = childEvents.slice(breaks[index2], breaks[index2 + 1]);
      const start2 = startPositions.pop();
      jumps.push([start2, start2 + slice2.length - 1]);
      events.splice(start2, 2, slice2);
    }
    jumps.reverse();
    index2 = -1;
    while (++index2 < jumps.length) {
      gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
      adjust += jumps[index2][1] - jumps[index2][0] - 1;
    }
    return gaps;
  }

  // node_modules/micromark-core-commonmark/lib/content.js
  var content3 = {
    tokenize: tokenizeContent,
    resolve: resolveContent
  };
  var continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
  };
  function resolveContent(events) {
    subtokenize(events);
    return events;
  }
  function tokenizeContent(effects, ok3) {
    let previous3;
    return chunkStart;
    function chunkStart(code3) {
      effects.enter("content");
      previous3 = effects.enter("chunkContent", {
        contentType: "content"
      });
      return chunkInside(code3);
    }
    function chunkInside(code3) {
      if (code3 === null) {
        return contentEnd(code3);
      }
      if (markdownLineEnding(code3)) {
        return effects.check(continuationConstruct, contentContinue, contentEnd)(code3);
      }
      effects.consume(code3);
      return chunkInside;
    }
    function contentEnd(code3) {
      effects.exit("chunkContent");
      effects.exit("content");
      return ok3(code3);
    }
    function contentContinue(code3) {
      effects.consume(code3);
      effects.exit("chunkContent");
      previous3.next = effects.enter("chunkContent", {
        contentType: "content",
        previous: previous3
      });
      previous3 = previous3.next;
      return chunkInside;
    }
  }
  function tokenizeContinuation(effects, ok3, nok) {
    const self2 = this;
    return startLookahead;
    function startLookahead(code3) {
      effects.exit("chunkContent");
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(effects, prefixed, "linePrefix");
    }
    function prefixed(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return nok(code3);
      }
      const tail = self2.events[self2.events.length - 1];
      if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
        return ok3(code3);
      }
      return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code3);
    }
  }

  // node_modules/micromark-factory-destination/index.js
  function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    function start(code3) {
      if (code3 === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code3);
        effects.exit(literalMarkerType);
        return enclosedBefore;
      }
      if (code3 === null || code3 === 32 || code3 === 41 || asciiControl(code3)) {
        return nok(code3);
      }
      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return raw(code3);
    }
    function enclosedBefore(code3) {
      if (code3 === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code3);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok3;
      }
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return enclosed(code3);
    }
    function enclosed(code3) {
      if (code3 === 62) {
        effects.exit("chunkString");
        effects.exit(stringType);
        return enclosedBefore(code3);
      }
      if (code3 === null || code3 === 60 || markdownLineEnding(code3)) {
        return nok(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? enclosedEscape : enclosed;
    }
    function enclosedEscape(code3) {
      if (code3 === 60 || code3 === 62 || code3 === 92) {
        effects.consume(code3);
        return enclosed;
      }
      return enclosed(code3);
    }
    function raw(code3) {
      if (!balance && (code3 === null || code3 === 41 || markdownLineEndingOrSpace(code3))) {
        effects.exit("chunkString");
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok3(code3);
      }
      if (balance < limit && code3 === 40) {
        effects.consume(code3);
        balance++;
        return raw;
      }
      if (code3 === 41) {
        effects.consume(code3);
        balance--;
        return raw;
      }
      if (code3 === null || code3 === 32 || code3 === 40 || asciiControl(code3)) {
        return nok(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? rawEscape : raw;
    }
    function rawEscape(code3) {
      if (code3 === 40 || code3 === 41 || code3 === 92) {
        effects.consume(code3);
        return raw;
      }
      return raw(code3);
    }
  }

  // node_modules/micromark-factory-label/index.js
  function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
    const self2 = this;
    let size = 0;
    let seen;
    return start;
    function start(code3) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code3);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak;
    }
    function atBreak(code3) {
      if (size > 999 || code3 === null || code3 === 91 || code3 === 93 && !seen || // To do: remove in the future once we’ve switched from
      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
      // which doesn’t need this.
      // Hidden footnotes hook.
      /* c8 ignore next 3 */
      code3 === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code3);
        effects.exit(markerType);
        effects.exit(type);
        return ok3;
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return atBreak;
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return labelInside(code3);
    }
    function labelInside(code3) {
      if (code3 === null || code3 === 91 || code3 === 93 || markdownLineEnding(code3) || size++ > 999) {
        effects.exit("chunkString");
        return atBreak(code3);
      }
      effects.consume(code3);
      if (!seen)
        seen = !markdownSpace(code3);
      return code3 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code3) {
      if (code3 === 91 || code3 === 92 || code3 === 93) {
        effects.consume(code3);
        size++;
        return labelInside;
      }
      return labelInside(code3);
    }
  }

  // node_modules/micromark-factory-title/index.js
  function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
    let marker;
    return start;
    function start(code3) {
      if (code3 === 34 || code3 === 39 || code3 === 40) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code3);
        effects.exit(markerType);
        marker = code3 === 40 ? 41 : code3;
        return begin;
      }
      return nok(code3);
    }
    function begin(code3) {
      if (code3 === marker) {
        effects.enter(markerType);
        effects.consume(code3);
        effects.exit(markerType);
        effects.exit(type);
        return ok3;
      }
      effects.enter(stringType);
      return atBreak(code3);
    }
    function atBreak(code3) {
      if (code3 === marker) {
        effects.exit(stringType);
        return begin(marker);
      }
      if (code3 === null) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return factorySpace(effects, atBreak, "linePrefix");
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return inside2(code3);
    }
    function inside2(code3) {
      if (code3 === marker || code3 === null || markdownLineEnding(code3)) {
        effects.exit("chunkString");
        return atBreak(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? escape : inside2;
    }
    function escape(code3) {
      if (code3 === marker || code3 === 92) {
        effects.consume(code3);
        return inside2;
      }
      return inside2(code3);
    }
  }

  // node_modules/micromark-factory-whitespace/index.js
  function factoryWhitespace(effects, ok3) {
    let seen;
    return start;
    function start(code3) {
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        seen = true;
        return start;
      }
      if (markdownSpace(code3)) {
        return factorySpace(
          effects,
          start,
          seen ? "linePrefix" : "lineSuffix"
        )(code3);
      }
      return ok3(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/definition.js
  var definition = {
    name: "definition",
    tokenize: tokenizeDefinition
  };
  var titleBefore = {
    tokenize: tokenizeTitleBefore,
    partial: true
  };
  function tokenizeDefinition(effects, ok3, nok) {
    const self2 = this;
    let identifier;
    return start;
    function start(code3) {
      effects.enter("definition");
      return before(code3);
    }
    function before(code3) {
      return factoryLabel.call(
        self2,
        effects,
        labelAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionLabel",
        "definitionLabelMarker",
        "definitionLabelString"
      )(code3);
    }
    function labelAfter(code3) {
      identifier = normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1));
      if (code3 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code3);
        effects.exit("definitionMarker");
        return markerAfter;
      }
      return nok(code3);
    }
    function markerAfter(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, destinationBefore)(code3) : destinationBefore(code3);
    }
    function destinationBefore(code3) {
      return factoryDestination(
        effects,
        destinationAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionDestination",
        "definitionDestinationLiteral",
        "definitionDestinationLiteralMarker",
        "definitionDestinationRaw",
        "definitionDestinationString"
      )(code3);
    }
    function destinationAfter(code3) {
      return effects.attempt(titleBefore, after, after)(code3);
    }
    function after(code3) {
      return markdownSpace(code3) ? factorySpace(effects, afterWhitespace, "whitespace")(code3) : afterWhitespace(code3);
    }
    function afterWhitespace(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("definition");
        self2.parser.defined.push(identifier);
        return ok3(code3);
      }
      return nok(code3);
    }
  }
  function tokenizeTitleBefore(effects, ok3, nok) {
    return titleBefore2;
    function titleBefore2(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, beforeMarker)(code3) : nok(code3);
    }
    function beforeMarker(code3) {
      return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code3);
    }
    function titleAfter(code3) {
      return markdownSpace(code3) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code3) : titleAfterOptionalWhitespace(code3);
    }
    function titleAfterOptionalWhitespace(code3) {
      return code3 === null || markdownLineEnding(code3) ? ok3(code3) : nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/hard-break-escape.js
  var hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape
  };
  function tokenizeHardBreakEscape(effects, ok3, nok) {
    return start;
    function start(code3) {
      effects.enter("hardBreakEscape");
      effects.consume(code3);
      return after;
    }
    function after(code3) {
      if (markdownLineEnding(code3)) {
        effects.exit("hardBreakEscape");
        return ok3(code3);
      }
      return nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/heading-atx.js
  var headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
  };
  function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    let content4;
    let text5;
    if (events[contentStart][1].type === "whitespace") {
      contentStart += 2;
    }
    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
      contentEnd -= 2;
    }
    if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }
    if (contentEnd > contentStart) {
      content4 = {
        type: "atxHeadingText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end
      };
      text5 = {
        type: "chunkText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        contentType: "text"
      };
      splice(events, contentStart, contentEnd - contentStart + 1, [["enter", content4, context], ["enter", text5, context], ["exit", text5, context], ["exit", content4, context]]);
    }
    return events;
  }
  function tokenizeHeadingAtx(effects, ok3, nok) {
    let size = 0;
    return start;
    function start(code3) {
      effects.enter("atxHeading");
      return before(code3);
    }
    function before(code3) {
      effects.enter("atxHeadingSequence");
      return sequenceOpen(code3);
    }
    function sequenceOpen(code3) {
      if (code3 === 35 && size++ < 6) {
        effects.consume(code3);
        return sequenceOpen;
      }
      if (code3 === null || markdownLineEndingOrSpace(code3)) {
        effects.exit("atxHeadingSequence");
        return atBreak(code3);
      }
      return nok(code3);
    }
    function atBreak(code3) {
      if (code3 === 35) {
        effects.enter("atxHeadingSequence");
        return sequenceFurther(code3);
      }
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("atxHeading");
        return ok3(code3);
      }
      if (markdownSpace(code3)) {
        return factorySpace(effects, atBreak, "whitespace")(code3);
      }
      effects.enter("atxHeadingText");
      return data(code3);
    }
    function sequenceFurther(code3) {
      if (code3 === 35) {
        effects.consume(code3);
        return sequenceFurther;
      }
      effects.exit("atxHeadingSequence");
      return atBreak(code3);
    }
    function data(code3) {
      if (code3 === null || code3 === 35 || markdownLineEndingOrSpace(code3)) {
        effects.exit("atxHeadingText");
        return atBreak(code3);
      }
      effects.consume(code3);
      return data;
    }
  }

  // node_modules/micromark-util-html-tag-name/index.js
  var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "search",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
  ];
  var htmlRawNames = ["pre", "script", "style", "textarea"];

  // node_modules/micromark-core-commonmark/lib/html-flow.js
  var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
  };
  var blankLineBefore = {
    tokenize: tokenizeBlankLineBefore,
    partial: true
  };
  var nonLazyContinuationStart = {
    tokenize: tokenizeNonLazyContinuationStart,
    partial: true
  };
  function resolveToHtmlFlow(events) {
    let index2 = events.length;
    while (index2--) {
      if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
        break;
      }
    }
    if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
      events[index2][1].start = events[index2 - 2][1].start;
      events[index2 + 1][1].start = events[index2 - 2][1].start;
      events.splice(index2 - 2, 2);
    }
    return events;
  }
  function tokenizeHtmlFlow(effects, ok3, nok) {
    const self2 = this;
    let marker;
    let closingTag;
    let buffer;
    let index2;
    let markerB;
    return start;
    function start(code3) {
      return before(code3);
    }
    function before(code3) {
      effects.enter("htmlFlow");
      effects.enter("htmlFlowData");
      effects.consume(code3);
      return open;
    }
    function open(code3) {
      if (code3 === 33) {
        effects.consume(code3);
        return declarationOpen;
      }
      if (code3 === 47) {
        effects.consume(code3);
        closingTag = true;
        return tagCloseStart;
      }
      if (code3 === 63) {
        effects.consume(code3);
        marker = 3;
        return self2.interrupt ? ok3 : continuationDeclarationInside;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        buffer = String.fromCharCode(code3);
        return tagName;
      }
      return nok(code3);
    }
    function declarationOpen(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        marker = 2;
        return commentOpenInside;
      }
      if (code3 === 91) {
        effects.consume(code3);
        marker = 5;
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        marker = 4;
        return self2.interrupt ? ok3 : continuationDeclarationInside;
      }
      return nok(code3);
    }
    function commentOpenInside(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return self2.interrupt ? ok3 : continuationDeclarationInside;
      }
      return nok(code3);
    }
    function cdataOpenInside(code3) {
      const value = "CDATA[";
      if (code3 === value.charCodeAt(index2++)) {
        effects.consume(code3);
        if (index2 === value.length) {
          return self2.interrupt ? ok3 : continuation;
        }
        return cdataOpenInside;
      }
      return nok(code3);
    }
    function tagCloseStart(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        buffer = String.fromCharCode(code3);
        return tagName;
      }
      return nok(code3);
    }
    function tagName(code3) {
      if (code3 === null || code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)) {
        const slash2 = code3 === 47;
        const name2 = buffer.toLowerCase();
        if (!slash2 && !closingTag && htmlRawNames.includes(name2)) {
          marker = 1;
          return self2.interrupt ? ok3(code3) : continuation(code3);
        }
        if (htmlBlockNames.includes(buffer.toLowerCase())) {
          marker = 6;
          if (slash2) {
            effects.consume(code3);
            return basicSelfClosing;
          }
          return self2.interrupt ? ok3(code3) : continuation(code3);
        }
        marker = 7;
        return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code3) : closingTag ? completeClosingTagAfter(code3) : completeAttributeNameBefore(code3);
      }
      if (code3 === 45 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        buffer += String.fromCharCode(code3);
        return tagName;
      }
      return nok(code3);
    }
    function basicSelfClosing(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        return self2.interrupt ? ok3 : continuation;
      }
      return nok(code3);
    }
    function completeClosingTagAfter(code3) {
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeClosingTagAfter;
      }
      return completeEnd(code3);
    }
    function completeAttributeNameBefore(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        return completeEnd;
      }
      if (code3 === 58 || code3 === 95 || asciiAlpha(code3)) {
        effects.consume(code3);
        return completeAttributeName;
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAttributeNameBefore;
      }
      return completeEnd(code3);
    }
    function completeAttributeName(code3) {
      if (code3 === 45 || code3 === 46 || code3 === 58 || code3 === 95 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return completeAttributeName;
      }
      return completeAttributeNameAfter(code3);
    }
    function completeAttributeNameAfter(code3) {
      if (code3 === 61) {
        effects.consume(code3);
        return completeAttributeValueBefore;
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAttributeNameAfter;
      }
      return completeAttributeNameBefore(code3);
    }
    function completeAttributeValueBefore(code3) {
      if (code3 === null || code3 === 60 || code3 === 61 || code3 === 62 || code3 === 96) {
        return nok(code3);
      }
      if (code3 === 34 || code3 === 39) {
        effects.consume(code3);
        markerB = code3;
        return completeAttributeValueQuoted;
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAttributeValueBefore;
      }
      return completeAttributeValueUnquoted(code3);
    }
    function completeAttributeValueQuoted(code3) {
      if (code3 === markerB) {
        effects.consume(code3);
        markerB = null;
        return completeAttributeValueQuotedAfter;
      }
      if (code3 === null || markdownLineEnding(code3)) {
        return nok(code3);
      }
      effects.consume(code3);
      return completeAttributeValueQuoted;
    }
    function completeAttributeValueUnquoted(code3) {
      if (code3 === null || code3 === 34 || code3 === 39 || code3 === 47 || code3 === 60 || code3 === 61 || code3 === 62 || code3 === 96 || markdownLineEndingOrSpace(code3)) {
        return completeAttributeNameAfter(code3);
      }
      effects.consume(code3);
      return completeAttributeValueUnquoted;
    }
    function completeAttributeValueQuotedAfter(code3) {
      if (code3 === 47 || code3 === 62 || markdownSpace(code3)) {
        return completeAttributeNameBefore(code3);
      }
      return nok(code3);
    }
    function completeEnd(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        return completeAfter;
      }
      return nok(code3);
    }
    function completeAfter(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return continuation(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAfter;
      }
      return nok(code3);
    }
    function continuation(code3) {
      if (code3 === 45 && marker === 2) {
        effects.consume(code3);
        return continuationCommentInside;
      }
      if (code3 === 60 && marker === 1) {
        effects.consume(code3);
        return continuationRawTagOpen;
      }
      if (code3 === 62 && marker === 4) {
        effects.consume(code3);
        return continuationClose;
      }
      if (code3 === 63 && marker === 3) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      if (code3 === 93 && marker === 5) {
        effects.consume(code3);
        return continuationCdataInside;
      }
      if (markdownLineEnding(code3) && (marker === 6 || marker === 7)) {
        effects.exit("htmlFlowData");
        return effects.check(blankLineBefore, continuationAfter, continuationStart)(code3);
      }
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("htmlFlowData");
        return continuationStart(code3);
      }
      effects.consume(code3);
      return continuation;
    }
    function continuationStart(code3) {
      return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code3);
    }
    function continuationStartNonLazy(code3) {
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return continuationBefore;
    }
    function continuationBefore(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return continuationStart(code3);
      }
      effects.enter("htmlFlowData");
      return continuation(code3);
    }
    function continuationCommentInside(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      return continuation(code3);
    }
    function continuationRawTagOpen(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        buffer = "";
        return continuationRawEndTag;
      }
      return continuation(code3);
    }
    function continuationRawEndTag(code3) {
      if (code3 === 62) {
        const name2 = buffer.toLowerCase();
        if (htmlRawNames.includes(name2)) {
          effects.consume(code3);
          return continuationClose;
        }
        return continuation(code3);
      }
      if (asciiAlpha(code3) && buffer.length < 8) {
        effects.consume(code3);
        buffer += String.fromCharCode(code3);
        return continuationRawEndTag;
      }
      return continuation(code3);
    }
    function continuationCdataInside(code3) {
      if (code3 === 93) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      return continuation(code3);
    }
    function continuationDeclarationInside(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        return continuationClose;
      }
      if (code3 === 45 && marker === 2) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      return continuation(code3);
    }
    function continuationClose(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("htmlFlowData");
        return continuationAfter(code3);
      }
      effects.consume(code3);
      return continuationClose;
    }
    function continuationAfter(code3) {
      effects.exit("htmlFlow");
      return ok3(code3);
    }
  }
  function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      return self2.parser.lazy[self2.now().line] ? nok(code3) : ok3(code3);
    }
  }
  function tokenizeBlankLineBefore(effects, ok3, nok) {
    return start;
    function start(code3) {
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return effects.attempt(blankLine, ok3, nok);
    }
  }

  // node_modules/micromark-core-commonmark/lib/html-text.js
  var htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText
  };
  function tokenizeHtmlText(effects, ok3, nok) {
    const self2 = this;
    let marker;
    let index2;
    let returnState;
    return start;
    function start(code3) {
      effects.enter("htmlText");
      effects.enter("htmlTextData");
      effects.consume(code3);
      return open;
    }
    function open(code3) {
      if (code3 === 33) {
        effects.consume(code3);
        return declarationOpen;
      }
      if (code3 === 47) {
        effects.consume(code3);
        return tagCloseStart;
      }
      if (code3 === 63) {
        effects.consume(code3);
        return instruction;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return tagOpen;
      }
      return nok(code3);
    }
    function declarationOpen(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return commentOpenInside;
      }
      if (code3 === 91) {
        effects.consume(code3);
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return declaration;
      }
      return nok(code3);
    }
    function commentOpenInside(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return commentEnd;
      }
      return nok(code3);
    }
    function comment2(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 45) {
        effects.consume(code3);
        return commentClose;
      }
      if (markdownLineEnding(code3)) {
        returnState = comment2;
        return lineEndingBefore(code3);
      }
      effects.consume(code3);
      return comment2;
    }
    function commentClose(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return commentEnd;
      }
      return comment2(code3);
    }
    function commentEnd(code3) {
      return code3 === 62 ? end(code3) : code3 === 45 ? commentClose(code3) : comment2(code3);
    }
    function cdataOpenInside(code3) {
      const value = "CDATA[";
      if (code3 === value.charCodeAt(index2++)) {
        effects.consume(code3);
        return index2 === value.length ? cdata : cdataOpenInside;
      }
      return nok(code3);
    }
    function cdata(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.consume(code3);
        return cdataClose;
      }
      if (markdownLineEnding(code3)) {
        returnState = cdata;
        return lineEndingBefore(code3);
      }
      effects.consume(code3);
      return cdata;
    }
    function cdataClose(code3) {
      if (code3 === 93) {
        effects.consume(code3);
        return cdataEnd;
      }
      return cdata(code3);
    }
    function cdataEnd(code3) {
      if (code3 === 62) {
        return end(code3);
      }
      if (code3 === 93) {
        effects.consume(code3);
        return cdataEnd;
      }
      return cdata(code3);
    }
    function declaration(code3) {
      if (code3 === null || code3 === 62) {
        return end(code3);
      }
      if (markdownLineEnding(code3)) {
        returnState = declaration;
        return lineEndingBefore(code3);
      }
      effects.consume(code3);
      return declaration;
    }
    function instruction(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 63) {
        effects.consume(code3);
        return instructionClose;
      }
      if (markdownLineEnding(code3)) {
        returnState = instruction;
        return lineEndingBefore(code3);
      }
      effects.consume(code3);
      return instruction;
    }
    function instructionClose(code3) {
      return code3 === 62 ? end(code3) : instruction(code3);
    }
    function tagCloseStart(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return tagClose;
      }
      return nok(code3);
    }
    function tagClose(code3) {
      if (code3 === 45 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return tagClose;
      }
      return tagCloseBetween(code3);
    }
    function tagCloseBetween(code3) {
      if (markdownLineEnding(code3)) {
        returnState = tagCloseBetween;
        return lineEndingBefore(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagCloseBetween;
      }
      return end(code3);
    }
    function tagOpen(code3) {
      if (code3 === 45 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return tagOpen;
      }
      if (code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)) {
        return tagOpenBetween(code3);
      }
      return nok(code3);
    }
    function tagOpenBetween(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        return end;
      }
      if (code3 === 58 || code3 === 95 || asciiAlpha(code3)) {
        effects.consume(code3);
        return tagOpenAttributeName;
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenBetween;
        return lineEndingBefore(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagOpenBetween;
      }
      return end(code3);
    }
    function tagOpenAttributeName(code3) {
      if (code3 === 45 || code3 === 46 || code3 === 58 || code3 === 95 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return tagOpenAttributeName;
      }
      return tagOpenAttributeNameAfter(code3);
    }
    function tagOpenAttributeNameAfter(code3) {
      if (code3 === 61) {
        effects.consume(code3);
        return tagOpenAttributeValueBefore;
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenAttributeNameAfter;
        return lineEndingBefore(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagOpenAttributeNameAfter;
      }
      return tagOpenBetween(code3);
    }
    function tagOpenAttributeValueBefore(code3) {
      if (code3 === null || code3 === 60 || code3 === 61 || code3 === 62 || code3 === 96) {
        return nok(code3);
      }
      if (code3 === 34 || code3 === 39) {
        effects.consume(code3);
        marker = code3;
        return tagOpenAttributeValueQuoted;
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenAttributeValueBefore;
        return lineEndingBefore(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagOpenAttributeValueBefore;
      }
      effects.consume(code3);
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuoted(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        marker = void 0;
        return tagOpenAttributeValueQuotedAfter;
      }
      if (code3 === null) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenAttributeValueQuoted;
        return lineEndingBefore(code3);
      }
      effects.consume(code3);
      return tagOpenAttributeValueQuoted;
    }
    function tagOpenAttributeValueUnquoted(code3) {
      if (code3 === null || code3 === 34 || code3 === 39 || code3 === 60 || code3 === 61 || code3 === 96) {
        return nok(code3);
      }
      if (code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)) {
        return tagOpenBetween(code3);
      }
      effects.consume(code3);
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuotedAfter(code3) {
      if (code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)) {
        return tagOpenBetween(code3);
      }
      return nok(code3);
    }
    function end(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        effects.exit("htmlTextData");
        effects.exit("htmlText");
        return ok3;
      }
      return nok(code3);
    }
    function lineEndingBefore(code3) {
      effects.exit("htmlTextData");
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return lineEndingAfter;
    }
    function lineEndingAfter(code3) {
      return markdownSpace(code3) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code3) : lineEndingAfterPrefix(code3);
    }
    function lineEndingAfterPrefix(code3) {
      effects.enter("htmlTextData");
      return returnState(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/label-end.js
  var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
  };
  var resourceConstruct = {
    tokenize: tokenizeResource
  };
  var referenceFullConstruct = {
    tokenize: tokenizeReferenceFull
  };
  var referenceCollapsedConstruct = {
    tokenize: tokenizeReferenceCollapsed
  };
  function resolveAllLabelEnd(events) {
    let index2 = -1;
    while (++index2 < events.length) {
      const token = events[index2][1];
      if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
        events.splice(index2 + 1, token.type === "labelImage" ? 4 : 2);
        token.type = "data";
        index2++;
      }
    }
    return events;
  }
  function resolveToLabelEnd(events, context) {
    let index2 = events.length;
    let offset = 0;
    let token;
    let open;
    let close2;
    let media;
    while (index2--) {
      token = events[index2][1];
      if (open) {
        if (token.type === "link" || token.type === "labelLink" && token._inactive) {
          break;
        }
        if (events[index2][0] === "enter" && token.type === "labelLink") {
          token._inactive = true;
        }
      } else if (close2) {
        if (events[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
          open = index2;
          if (token.type !== "labelLink") {
            offset = 2;
            break;
          }
        }
      } else if (token.type === "labelEnd") {
        close2 = index2;
      }
    }
    const group = {
      type: events[open][1].type === "labelLink" ? "link" : "image",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label = {
      type: "label",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close2][1].end)
    };
    const text5 = {
      type: "labelText",
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close2 - 2][1].start)
    };
    media = [["enter", group, context], ["enter", label, context]];
    media = push(media, events.slice(open + 1, open + offset + 3));
    media = push(media, [["enter", text5, context]]);
    media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close2 - 3), context));
    media = push(media, [["exit", text5, context], events[close2 - 2], events[close2 - 1], ["exit", label, context]]);
    media = push(media, events.slice(close2 + 1));
    media = push(media, [["exit", group, context]]);
    splice(events, open, events.length, media);
    return events;
  }
  function tokenizeLabelEnd(effects, ok3, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    let labelStart;
    let defined;
    while (index2--) {
      if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
        labelStart = self2.events[index2][1];
        break;
      }
    }
    return start;
    function start(code3) {
      if (!labelStart) {
        return nok(code3);
      }
      if (labelStart._inactive) {
        return labelEndNok(code3);
      }
      defined = self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize({
        start: labelStart.end,
        end: self2.now()
      })));
      effects.enter("labelEnd");
      effects.enter("labelMarker");
      effects.consume(code3);
      effects.exit("labelMarker");
      effects.exit("labelEnd");
      return after;
    }
    function after(code3) {
      if (code3 === 40) {
        return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code3);
      }
      if (code3 === 91) {
        return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code3);
      }
      return defined ? labelEndOk(code3) : labelEndNok(code3);
    }
    function referenceNotFull(code3) {
      return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code3);
    }
    function labelEndOk(code3) {
      return ok3(code3);
    }
    function labelEndNok(code3) {
      labelStart._balanced = true;
      return nok(code3);
    }
  }
  function tokenizeResource(effects, ok3, nok) {
    return resourceStart;
    function resourceStart(code3) {
      effects.enter("resource");
      effects.enter("resourceMarker");
      effects.consume(code3);
      effects.exit("resourceMarker");
      return resourceBefore;
    }
    function resourceBefore(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, resourceOpen)(code3) : resourceOpen(code3);
    }
    function resourceOpen(code3) {
      if (code3 === 41) {
        return resourceEnd(code3);
      }
      return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code3);
    }
    function resourceDestinationAfter(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, resourceBetween)(code3) : resourceEnd(code3);
    }
    function resourceDestinationMissing(code3) {
      return nok(code3);
    }
    function resourceBetween(code3) {
      if (code3 === 34 || code3 === 39 || code3 === 40) {
        return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code3);
      }
      return resourceEnd(code3);
    }
    function resourceTitleAfter(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, resourceEnd)(code3) : resourceEnd(code3);
    }
    function resourceEnd(code3) {
      if (code3 === 41) {
        effects.enter("resourceMarker");
        effects.consume(code3);
        effects.exit("resourceMarker");
        effects.exit("resource");
        return ok3;
      }
      return nok(code3);
    }
  }
  function tokenizeReferenceFull(effects, ok3, nok) {
    const self2 = this;
    return referenceFull;
    function referenceFull(code3) {
      return factoryLabel.call(self2, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code3);
    }
    function referenceFullAfter(code3) {
      return self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1))) ? ok3(code3) : nok(code3);
    }
    function referenceFullMissing(code3) {
      return nok(code3);
    }
  }
  function tokenizeReferenceCollapsed(effects, ok3, nok) {
    return referenceCollapsedStart;
    function referenceCollapsedStart(code3) {
      effects.enter("reference");
      effects.enter("referenceMarker");
      effects.consume(code3);
      effects.exit("referenceMarker");
      return referenceCollapsedOpen;
    }
    function referenceCollapsedOpen(code3) {
      if (code3 === 93) {
        effects.enter("referenceMarker");
        effects.consume(code3);
        effects.exit("referenceMarker");
        effects.exit("reference");
        return ok3;
      }
      return nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/label-start-image.js
  var labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartImage(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      effects.enter("labelImage");
      effects.enter("labelImageMarker");
      effects.consume(code3);
      effects.exit("labelImageMarker");
      return open;
    }
    function open(code3) {
      if (code3 === 91) {
        effects.enter("labelMarker");
        effects.consume(code3);
        effects.exit("labelMarker");
        effects.exit("labelImage");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      return code3 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code3) : ok3(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/label-start-link.js
  var labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartLink(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      effects.enter("labelLink");
      effects.enter("labelMarker");
      effects.consume(code3);
      effects.exit("labelMarker");
      effects.exit("labelLink");
      return after;
    }
    function after(code3) {
      return code3 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code3) : ok3(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/line-ending.js
  var lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding
  };
  function tokenizeLineEnding(effects, ok3) {
    return start;
    function start(code3) {
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(effects, ok3, "linePrefix");
    }
  }

  // node_modules/micromark-core-commonmark/lib/thematic-break.js
  var thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak
  };
  function tokenizeThematicBreak(effects, ok3, nok) {
    let size = 0;
    let marker;
    return start;
    function start(code3) {
      effects.enter("thematicBreak");
      return before(code3);
    }
    function before(code3) {
      marker = code3;
      return atBreak(code3);
    }
    function atBreak(code3) {
      if (code3 === marker) {
        effects.enter("thematicBreakSequence");
        return sequence(code3);
      }
      if (size >= 3 && (code3 === null || markdownLineEnding(code3))) {
        effects.exit("thematicBreak");
        return ok3(code3);
      }
      return nok(code3);
    }
    function sequence(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        size++;
        return sequence;
      }
      effects.exit("thematicBreakSequence");
      return markdownSpace(code3) ? factorySpace(effects, atBreak, "whitespace")(code3) : atBreak(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/list.js
  var list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
  };
  var listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
  };
  var indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
  };
  function tokenizeListStart(effects, ok3, nok) {
    const self2 = this;
    const tail = self2.events[self2.events.length - 1];
    let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let size = 0;
    return start;
    function start(code3) {
      const kind = self2.containerState.type || (code3 === 42 || code3 === 43 || code3 === 45 ? "listUnordered" : "listOrdered");
      if (kind === "listUnordered" ? !self2.containerState.marker || code3 === self2.containerState.marker : asciiDigit(code3)) {
        if (!self2.containerState.type) {
          self2.containerState.type = kind;
          effects.enter(kind, {
            _container: true
          });
        }
        if (kind === "listUnordered") {
          effects.enter("listItemPrefix");
          return code3 === 42 || code3 === 45 ? effects.check(thematicBreak, nok, atMarker)(code3) : atMarker(code3);
        }
        if (!self2.interrupt || code3 === 49) {
          effects.enter("listItemPrefix");
          effects.enter("listItemValue");
          return inside2(code3);
        }
      }
      return nok(code3);
    }
    function inside2(code3) {
      if (asciiDigit(code3) && ++size < 10) {
        effects.consume(code3);
        return inside2;
      }
      if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code3 === self2.containerState.marker : code3 === 41 || code3 === 46)) {
        effects.exit("listItemValue");
        return atMarker(code3);
      }
      return nok(code3);
    }
    function atMarker(code3) {
      effects.enter("listItemMarker");
      effects.consume(code3);
      effects.exit("listItemMarker");
      self2.containerState.marker = self2.containerState.marker || code3;
      return effects.check(
        blankLine,
        // Can’t be empty when interrupting.
        self2.interrupt ? nok : onBlank,
        effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix)
      );
    }
    function onBlank(code3) {
      self2.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code3);
    }
    function otherPrefix(code3) {
      if (markdownSpace(code3)) {
        effects.enter("listItemPrefixWhitespace");
        effects.consume(code3);
        effects.exit("listItemPrefixWhitespace");
        return endOfPrefix;
      }
      return nok(code3);
    }
    function endOfPrefix(code3) {
      self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
      return ok3(code3);
    }
  }
  function tokenizeListContinuation(effects, ok3, nok) {
    const self2 = this;
    self2.containerState._closeFlow = void 0;
    return effects.check(blankLine, onBlank, notBlank);
    function onBlank(code3) {
      self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
      return factorySpace(effects, ok3, "listItemIndent", self2.containerState.size + 1)(code3);
    }
    function notBlank(code3) {
      if (self2.containerState.furtherBlankLines || !markdownSpace(code3)) {
        self2.containerState.furtherBlankLines = void 0;
        self2.containerState.initialBlankLine = void 0;
        return notInCurrentItem(code3);
      }
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code3);
    }
    function notInCurrentItem(code3) {
      self2.containerState._closeFlow = true;
      self2.interrupt = void 0;
      return factorySpace(effects, effects.attempt(list, ok3, nok), "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code3);
    }
  }
  function tokenizeIndent(effects, ok3, nok) {
    const self2 = this;
    return factorySpace(effects, afterPrefix, "listItemIndent", self2.containerState.size + 1);
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok3(code3) : nok(code3);
    }
  }
  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
    const self2 = this;
    return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1);
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return !markdownSpace(code3) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok3(code3) : nok(code3);
    }
  }

  // node_modules/micromark-core-commonmark/lib/setext-underline.js
  var setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
  };
  function resolveToSetextUnderline(events, context) {
    let index2 = events.length;
    let content4;
    let text5;
    let definition3;
    while (index2--) {
      if (events[index2][0] === "enter") {
        if (events[index2][1].type === "content") {
          content4 = index2;
          break;
        }
        if (events[index2][1].type === "paragraph") {
          text5 = index2;
        }
      } else {
        if (events[index2][1].type === "content") {
          events.splice(index2, 1);
        }
        if (!definition3 && events[index2][1].type === "definition") {
          definition3 = index2;
        }
      }
    }
    const heading3 = {
      type: "setextHeading",
      start: Object.assign({}, events[text5][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    events[text5][1].type = "setextHeadingText";
    if (definition3) {
      events.splice(text5, 0, ["enter", heading3, context]);
      events.splice(definition3 + 1, 0, ["exit", events[content4][1], context]);
      events[content4][1].end = Object.assign({}, events[definition3][1].end);
    } else {
      events[content4][1] = heading3;
    }
    events.push(["exit", heading3, context]);
    return events;
  }
  function tokenizeSetextUnderline(effects, ok3, nok) {
    const self2 = this;
    let marker;
    return start;
    function start(code3) {
      let index2 = self2.events.length;
      let paragraph2;
      while (index2--) {
        if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
          paragraph2 = self2.events[index2][1].type === "paragraph";
          break;
        }
      }
      if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph2)) {
        effects.enter("setextHeadingLine");
        marker = code3;
        return before(code3);
      }
      return nok(code3);
    }
    function before(code3) {
      effects.enter("setextHeadingLineSequence");
      return inside2(code3);
    }
    function inside2(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        return inside2;
      }
      effects.exit("setextHeadingLineSequence");
      return markdownSpace(code3) ? factorySpace(effects, after, "lineSuffix")(code3) : after(code3);
    }
    function after(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("setextHeadingLine");
        return ok3(code3);
      }
      return nok(code3);
    }
  }

  // node_modules/micromark/lib/initialize/flow.js
  var flow = {
    tokenize: initializeFlow
  };
  function initializeFlow(effects) {
    const self2 = this;
    const initial = effects.attempt(
      // Try to parse a blank line.
      blankLine,
      atBlankEnding,
      // Try to parse initial flow (essentially, only code).
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content3, afterConstruct)
          ),
          "linePrefix"
        )
      )
    );
    return initial;
    function atBlankEnding(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      effects.enter("lineEndingBlank");
      effects.consume(code3);
      effects.exit("lineEndingBlank");
      self2.currentConstruct = void 0;
      return initial;
    }
    function afterConstruct(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      self2.currentConstruct = void 0;
      return initial;
    }
  }

  // node_modules/micromark/lib/initialize/text.js
  var resolver = {
    resolveAll: createResolver()
  };
  var string2 = initializeFactory("string");
  var text = initializeFactory("text");
  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver(
        field === "text" ? resolveAllLineSuffixes : void 0
      )
    };
    function initializeText(effects) {
      const self2 = this;
      const constructs2 = this.parser.constructs[field];
      const text5 = effects.attempt(constructs2, start, notText);
      return start;
      function start(code3) {
        return atBreak(code3) ? text5(code3) : notText(code3);
      }
      function notText(code3) {
        if (code3 === null) {
          effects.consume(code3);
          return;
        }
        effects.enter("data");
        effects.consume(code3);
        return data;
      }
      function data(code3) {
        if (atBreak(code3)) {
          effects.exit("data");
          return text5(code3);
        }
        effects.consume(code3);
        return data;
      }
      function atBreak(code3) {
        if (code3 === null) {
          return true;
        }
        const list4 = constructs2[code3];
        let index2 = -1;
        if (list4) {
          while (++index2 < list4.length) {
            const item = list4[index2];
            if (!item.previous || item.previous.call(self2, self2.previous)) {
              return true;
            }
          }
        }
        return false;
      }
    }
  }
  function createResolver(extraResolver) {
    return resolveAllText;
    function resolveAllText(events, context) {
      let index2 = -1;
      let enter;
      while (++index2 <= events.length) {
        if (enter === void 0) {
          if (events[index2] && events[index2][1].type === "data") {
            enter = index2;
            index2++;
          }
        } else if (!events[index2] || events[index2][1].type !== "data") {
          if (index2 !== enter + 2) {
            events[enter][1].end = events[index2 - 1][1].end;
            events.splice(enter + 2, index2 - enter - 2);
            index2 = enter + 2;
          }
          enter = void 0;
        }
      }
      return extraResolver ? extraResolver(events, context) : events;
    }
  }
  function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0;
    while (++eventIndex <= events.length) {
      if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
        const data = events[eventIndex - 1][1];
        const chunks = context.sliceStream(data);
        let index2 = chunks.length;
        let bufferIndex = -1;
        let size = 0;
        let tabs;
        while (index2--) {
          const chunk = chunks[index2];
          if (typeof chunk === "string") {
            bufferIndex = chunk.length;
            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size++;
              bufferIndex--;
            }
            if (bufferIndex)
              break;
            bufferIndex = -1;
          } else if (chunk === -2) {
            tabs = true;
            size++;
          } else if (chunk === -1) {
          } else {
            index2++;
            break;
          }
        }
        if (size) {
          const token = {
            type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
            start: {
              line: data.end.line,
              column: data.end.column - size,
              offset: data.end.offset - size,
              _index: data.start._index + index2,
              _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex
            },
            end: Object.assign({}, data.end)
          };
          data.end = Object.assign({}, token.start);
          if (data.start.offset === data.end.offset) {
            Object.assign(data, token);
          } else {
            events.splice(
              eventIndex,
              0,
              ["enter", token, context],
              ["exit", token, context]
            );
            eventIndex += 2;
          }
        }
        eventIndex++;
      }
    }
    return events;
  }

  // node_modules/micromark/lib/create-tokenizer.js
  function createTokenizer(parser2, initialize, from2) {
    let point3 = Object.assign(
      from2 ? Object.assign({}, from2) : {
        line: 1,
        column: 1,
        offset: 0
      },
      {
        _index: 0,
        _bufferIndex: -1
      }
    );
    const columnStart = {};
    const resolveAllConstructs = [];
    let chunks = [];
    let stack = [];
    let consumed = true;
    const effects = {
      consume,
      enter,
      exit: exit3,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true
      })
    };
    const context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser: parser2,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write
    };
    let state = initialize.tokenize.call(context, effects);
    let expectedCode;
    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }
    return context;
    function write(slice2) {
      chunks = push(chunks, slice2);
      main();
      if (chunks[chunks.length - 1] !== null) {
        return [];
      }
      addResult(initialize, 0);
      context.events = resolveAll(resolveAllConstructs, context.events, context);
      return context.events;
    }
    function sliceSerialize(token, expandTabs) {
      return serializeChunks(sliceStream(token), expandTabs);
    }
    function sliceStream(token) {
      return sliceChunks(chunks, token);
    }
    function now() {
      const { line, column, offset, _index, _bufferIndex } = point3;
      return {
        line,
        column,
        offset,
        _index,
        _bufferIndex
      };
    }
    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    }
    function main() {
      let chunkIndex;
      while (point3._index < chunks.length) {
        const chunk = chunks[point3._index];
        if (typeof chunk === "string") {
          chunkIndex = point3._index;
          if (point3._bufferIndex < 0) {
            point3._bufferIndex = 0;
          }
          while (point3._index === chunkIndex && point3._bufferIndex < chunk.length) {
            go(chunk.charCodeAt(point3._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    function go(code3) {
      consumed = void 0;
      expectedCode = code3;
      state = state(code3);
    }
    function consume(code3) {
      if (markdownLineEnding(code3)) {
        point3.line++;
        point3.column = 1;
        point3.offset += code3 === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code3 !== -1) {
        point3.column++;
        point3.offset++;
      }
      if (point3._bufferIndex < 0) {
        point3._index++;
      } else {
        point3._bufferIndex++;
        if (point3._bufferIndex === chunks[point3._index].length) {
          point3._bufferIndex = -1;
          point3._index++;
        }
      }
      context.previous = code3;
      consumed = true;
    }
    function enter(type, fields) {
      const token = fields || {};
      token.type = type;
      token.start = now();
      context.events.push(["enter", token, context]);
      stack.push(token);
      return token;
    }
    function exit3(type) {
      const token = stack.pop();
      token.end = now();
      context.events.push(["exit", token, context]);
      return token;
    }
    function onsuccessfulconstruct(construct, info) {
      addResult(construct, info.from);
    }
    function onsuccessfulcheck(_3, info) {
      info.restore();
    }
    function constructFactory(onreturn, fields) {
      return hook;
      function hook(constructs2, returnState, bogusState) {
        let listOfConstructs;
        let constructIndex;
        let currentConstruct;
        let info;
        return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? (
          // @ts-expect-error Looks like a construct.
          handleListOfConstructs([constructs2])
        ) : handleMapOfConstructs(constructs2);
        function handleMapOfConstructs(map6) {
          return start;
          function start(code3) {
            const def = code3 !== null && map6[code3];
            const all2 = code3 !== null && map6.null;
            const list4 = [
              // To do: add more extension tests.
              /* c8 ignore next 2 */
              ...Array.isArray(def) ? def : def ? [def] : [],
              ...Array.isArray(all2) ? all2 : all2 ? [all2] : []
            ];
            return handleListOfConstructs(list4)(code3);
          }
        }
        function handleListOfConstructs(list4) {
          listOfConstructs = list4;
          constructIndex = 0;
          if (list4.length === 0) {
            return bogusState;
          }
          return handleConstruct(list4[constructIndex]);
        }
        function handleConstruct(construct) {
          return start;
          function start(code3) {
            info = store();
            currentConstruct = construct;
            if (!construct.partial) {
              context.currentConstruct = construct;
            }
            if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
              return nok(code3);
            }
            return construct.tokenize.call(
              // If we do have fields, create an object w/ `context` as its
              // prototype.
              // This allows a “live binding”, which is needed for `interrupt`.
              fields ? Object.assign(Object.create(context), fields) : context,
              effects,
              ok3,
              nok
            )(code3);
          }
        }
        function ok3(code3) {
          consumed = true;
          onreturn(currentConstruct, info);
          return returnState;
        }
        function nok(code3) {
          consumed = true;
          info.restore();
          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex]);
          }
          return bogusState;
        }
      }
    }
    function addResult(construct, from3) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }
      if (construct.resolve) {
        splice(
          context.events,
          from3,
          context.events.length - from3,
          construct.resolve(context.events.slice(from3), context)
        );
      }
      if (construct.resolveTo) {
        context.events = construct.resolveTo(context.events, context);
      }
    }
    function store() {
      const startPoint = now();
      const startPrevious = context.previous;
      const startCurrentConstruct = context.currentConstruct;
      const startEventsIndex = context.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex
      };
      function restore() {
        point3 = startPoint;
        context.previous = startPrevious;
        context.currentConstruct = startCurrentConstruct;
        context.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
    }
    function accountForPotentialSkip() {
      if (point3.line in columnStart && point3.column < 2) {
        point3.column = columnStart[point3.line];
        point3.offset += columnStart[point3.line] - 1;
      }
    }
  }
  function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    let view;
    if (startIndex === endIndex) {
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);
      if (startBufferIndex > -1) {
        const head = view[0];
        if (typeof head === "string") {
          view[0] = head.slice(startBufferIndex);
        } else {
          view.shift();
        }
      }
      if (endBufferIndex > 0) {
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }
    return view;
  }
  function serializeChunks(chunks, expandTabs) {
    let index2 = -1;
    const result = [];
    let atTab;
    while (++index2 < chunks.length) {
      const chunk = chunks[index2];
      let value;
      if (typeof chunk === "string") {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = "\r";
            break;
          }
          case -4: {
            value = "\n";
            break;
          }
          case -3: {
            value = "\r\n";
            break;
          }
          case -2: {
            value = expandTabs ? " " : "	";
            break;
          }
          case -1: {
            if (!expandTabs && atTab)
              continue;
            value = " ";
            break;
          }
          default: {
            value = String.fromCharCode(chunk);
          }
        }
      atTab = chunk === -2;
      result.push(value);
    }
    return result.join("");
  }

  // node_modules/micromark/lib/constructs.js
  var constructs_exports = {};
  __export(constructs_exports, {
    attentionMarkers: () => attentionMarkers,
    contentInitial: () => contentInitial,
    disable: () => disable,
    document: () => document3,
    flow: () => flow2,
    flowInitial: () => flowInitial,
    insideSpan: () => insideSpan,
    string: () => string3,
    text: () => text2
  });
  var document3 = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote
  };
  var contentInitial = {
    [91]: definition
  };
  var flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
  };
  var flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [setextUnderline, thematicBreak],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced
  };
  var string3 = {
    [38]: characterReference,
    [92]: characterEscape
  };
  var text2 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
  };
  var insideSpan = {
    null: [attention, resolver]
  };
  var attentionMarkers = {
    null: [42, 95]
  };
  var disable = {
    null: []
  };

  // node_modules/micromark/lib/parse.js
  function parse(options) {
    const settings = options || {};
    const constructs2 = (
      /** @type {FullNormalizedExtension} */
      combineExtensions([constructs_exports, ...settings.extensions || []])
    );
    const parser2 = {
      defined: [],
      lazy: {},
      constructs: constructs2,
      content: create(content2),
      document: create(document2),
      flow: create(flow),
      string: create(string2),
      text: create(text)
    };
    return parser2;
    function create(initial) {
      return creator;
      function creator(from2) {
        return createTokenizer(parser2, initial, from2);
      }
    }
  }

  // node_modules/micromark/lib/postprocess.js
  function postprocess(events) {
    while (!subtokenize(events)) {
    }
    return events;
  }

  // node_modules/micromark/lib/preprocess.js
  var search2 = /[\0\t\n\r]/g;
  function preprocess() {
    let column = 1;
    let buffer = "";
    let start = true;
    let atCarriageReturn;
    return preprocessor;
    function preprocessor(value, encoding, end) {
      const chunks = [];
      let match;
      let next;
      let startPosition;
      let endPosition;
      let code3;
      value = buffer + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || void 0).decode(value));
      startPosition = 0;
      buffer = "";
      if (start) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }
        start = void 0;
      }
      while (startPosition < value.length) {
        search2.lastIndex = startPosition;
        match = search2.exec(value);
        endPosition = match && match.index !== void 0 ? match.index : value.length;
        code3 = value.charCodeAt(endPosition);
        if (!match) {
          buffer = value.slice(startPosition);
          break;
        }
        if (code3 === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = void 0;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = void 0;
          }
          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column += endPosition - startPosition;
          }
          switch (code3) {
            case 0: {
              chunks.push(65533);
              column++;
              break;
            }
            case 9: {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);
              while (column++ < next)
                chunks.push(-1);
              break;
            }
            case 10: {
              chunks.push(-4);
              column = 1;
              break;
            }
            default: {
              atCarriageReturn = true;
              column = 1;
            }
          }
        }
        startPosition = endPosition + 1;
      }
      if (end) {
        if (atCarriageReturn)
          chunks.push(-5);
        if (buffer)
          chunks.push(buffer);
        chunks.push(null);
      }
      return chunks;
    }
  }

  // node_modules/micromark-util-decode-string/index.js
  var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
  }
  function decode($0, $1, $22) {
    if ($1) {
      return $1;
    }
    const head = $22.charCodeAt(0);
    if (head === 35) {
      const head2 = $22.charCodeAt(1);
      const hex = head2 === 120 || head2 === 88;
      return decodeNumericCharacterReference($22.slice(hex ? 2 : 1), hex ? 16 : 10);
    }
    return decodeNamedCharacterReference($22) || $0;
  }

  // node_modules/unist-util-stringify-position/lib/index.js
  function stringifyPosition(value) {
    if (!value || typeof value !== "object") {
      return "";
    }
    if ("position" in value || "type" in value) {
      return position(value.position);
    }
    if ("start" in value || "end" in value) {
      return position(value);
    }
    if ("line" in value || "column" in value) {
      return point(value);
    }
    return "";
  }
  function point(point3) {
    return index(point3 && point3.line) + ":" + index(point3 && point3.column);
  }
  function position(pos) {
    return point(pos && pos.start) + "-" + point(pos && pos.end);
  }
  function index(value) {
    return value && typeof value === "number" ? value : 1;
  }

  // node_modules/mdast-util-from-markdown/lib/index.js
  var own = {}.hasOwnProperty;
  function fromMarkdown(value, encoding, options) {
    if (typeof encoding !== "string") {
      options = encoding;
      encoding = void 0;
    }
    return compiler(options)(
      postprocess(
        parse(options).document().write(preprocess()(value, encoding, true))
      )
    );
  }
  function compiler(options) {
    const config2 = {
      transforms: [],
      canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
      enter: {
        autolink: opener(link2),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading3),
        blockQuote: opener(blockQuote2),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer,
        codeFencedFenceMeta: buffer,
        codeIndented: opener(codeFlow, buffer),
        codeText: opener(codeText2, buffer),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition3),
        definitionDestinationString: buffer,
        definitionLabelString: buffer,
        definitionTitleString: buffer,
        emphasis: opener(emphasis2),
        hardBreakEscape: opener(hardBreak2),
        hardBreakTrailing: opener(hardBreak2),
        htmlFlow: opener(html2, buffer),
        htmlFlowData: onenterdata,
        htmlText: opener(html2, buffer),
        htmlTextData: onenterdata,
        image: opener(image2),
        label: buffer,
        link: opener(link2),
        listItem: opener(listItem2),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list4, onenterlistordered),
        listUnordered: opener(list4),
        paragraph: opener(paragraph2),
        reference: onenterreference,
        referenceString: buffer,
        resourceDestinationString: buffer,
        resourceTitleString: buffer,
        setextHeading: opener(heading3),
        strong: opener(strong2),
        thematicBreak: opener(thematicBreak3)
      },
      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer()
      }
    };
    configure(config2, (options || {}).mdastExtensions || []);
    const data = {};
    return compile;
    function compile(events) {
      let tree = {
        type: "root",
        children: []
      };
      const context = {
        stack: [tree],
        tokenStack: [],
        config: config2,
        enter,
        exit: exit3,
        buffer,
        resume,
        data
      };
      const listStack = [];
      let index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
          if (events[index2][0] === "enter") {
            listStack.push(index2);
          } else {
            const tail = listStack.pop();
            index2 = prepareList(events, tail, index2);
          }
        }
      }
      index2 = -1;
      while (++index2 < events.length) {
        const handler = config2[events[index2][0]];
        if (own.call(handler, events[index2][1].type)) {
          handler[events[index2][1].type].call(
            Object.assign(
              {
                sliceSerialize: events[index2][2].sliceSerialize
              },
              context
            ),
            events[index2][1]
          );
        }
      }
      if (context.tokenStack.length > 0) {
        const tail = context.tokenStack[context.tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context, void 0, tail[0]);
      }
      tree.position = {
        start: point2(
          events.length > 0 ? events[0][1].start : {
            line: 1,
            column: 1,
            offset: 0
          }
        ),
        end: point2(
          events.length > 0 ? events[events.length - 2][1].end : {
            line: 1,
            column: 1,
            offset: 0
          }
        )
      };
      index2 = -1;
      while (++index2 < config2.transforms.length) {
        tree = config2.transforms[index2](tree) || tree;
      }
      return tree;
    }
    function prepareList(events, start, length) {
      let index2 = start - 1;
      let containerBalance = -1;
      let listSpread = false;
      let listItem3;
      let lineIndex;
      let firstBlankLineIndex;
      let atMarker;
      while (++index2 <= length) {
        const event = events[index2];
        switch (event[1].type) {
          case "listUnordered":
          case "listOrdered":
          case "blockQuote": {
            if (event[0] === "enter") {
              containerBalance++;
            } else {
              containerBalance--;
            }
            atMarker = void 0;
            break;
          }
          case "lineEndingBlank": {
            if (event[0] === "enter") {
              if (listItem3 && !atMarker && !containerBalance && !firstBlankLineIndex) {
                firstBlankLineIndex = index2;
              }
              atMarker = void 0;
            }
            break;
          }
          case "linePrefix":
          case "listItemValue":
          case "listItemMarker":
          case "listItemPrefix":
          case "listItemPrefixWhitespace": {
            break;
          }
          default: {
            atMarker = void 0;
          }
        }
        if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
          if (listItem3) {
            let tailIndex = index2;
            lineIndex = void 0;
            while (tailIndex--) {
              const tailEvent = events[tailIndex];
              if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                if (tailEvent[0] === "exit")
                  continue;
                if (lineIndex) {
                  events[lineIndex][1].type = "lineEndingBlank";
                  listSpread = true;
                }
                tailEvent[1].type = "lineEnding";
                lineIndex = tailIndex;
              } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
              } else {
                break;
              }
            }
            if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
              listItem3._spread = true;
            }
            listItem3.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end
            );
            events.splice(lineIndex || index2, 0, ["exit", listItem3, event[2]]);
            index2++;
            length++;
          }
          if (event[1].type === "listItemPrefix") {
            const item = {
              type: "listItem",
              _spread: false,
              start: Object.assign({}, event[1].start),
              // @ts-expect-error: we’ll add `end` in a second.
              end: void 0
            };
            listItem3 = item;
            events.splice(index2, 0, ["enter", item, event[2]]);
            index2++;
            length++;
            firstBlankLineIndex = void 0;
            atMarker = true;
          }
        }
      }
      events[start][1]._spread = listSpread;
      return length;
    }
    function opener(create, and) {
      return open;
      function open(token) {
        enter.call(this, create(token), token);
        if (and)
          and.call(this, token);
      }
    }
    function buffer() {
      this.stack.push({
        type: "fragment",
        children: []
      });
    }
    function enter(node2, token, errorHandler) {
      const parent = this.stack[this.stack.length - 1];
      const siblings = parent.children;
      siblings.push(node2);
      this.stack.push(node2);
      this.tokenStack.push([token, errorHandler]);
      node2.position = {
        start: point2(token.start),
        // @ts-expect-error: `end` will be patched later.
        end: void 0
      };
    }
    function closer(and) {
      return close2;
      function close2(token) {
        if (and)
          and.call(this, token);
        exit3.call(this, token);
      }
    }
    function exit3(token, onExitError) {
      const node2 = this.stack.pop();
      const open = this.tokenStack.pop();
      if (!open) {
        throw new Error(
          "Cannot close `" + token.type + "` (" + stringifyPosition({
            start: token.start,
            end: token.end
          }) + "): it\u2019s not open"
        );
      } else if (open[0].type !== token.type) {
        if (onExitError) {
          onExitError.call(this, token, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token, open[0]);
        }
      }
      node2.position.end = point2(token.end);
    }
    function resume() {
      return toString(this.stack.pop());
    }
    function onenterlistordered() {
      this.data.expectingFirstListItemValue = true;
    }
    function onenterlistitemvalue(token) {
      if (this.data.expectingFirstListItemValue) {
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
        this.data.expectingFirstListItemValue = void 0;
      }
    }
    function onexitcodefencedfenceinfo() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.lang = data2;
    }
    function onexitcodefencedfencemeta() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.meta = data2;
    }
    function onexitcodefencedfence() {
      if (this.data.flowCodeInside)
        return;
      this.buffer();
      this.data.flowCodeInside = true;
    }
    function onexitcodefenced() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
      this.data.flowCodeInside = void 0;
    }
    function onexitcodeindented() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2.replace(/(\r?\n|\r)$/g, "");
    }
    function onexitdefinitionlabelstring(token) {
      const label = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.label = label;
      node2.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
    }
    function onexitdefinitiontitlestring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.title = data2;
    }
    function onexitdefinitiondestinationstring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.url = data2;
    }
    function onexitatxheadingsequence(token) {
      const node2 = this.stack[this.stack.length - 1];
      if (!node2.depth) {
        const depth2 = this.sliceSerialize(token).length;
        node2.depth = depth2;
      }
    }
    function onexitsetextheadingtext() {
      this.data.setextHeadingSlurpLineEnding = true;
    }
    function onexitsetextheadinglinesequence(token) {
      const node2 = this.stack[this.stack.length - 1];
      node2.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
    }
    function onexitsetextheading() {
      this.data.setextHeadingSlurpLineEnding = void 0;
    }
    function onenterdata(token) {
      const node2 = this.stack[this.stack.length - 1];
      const siblings = node2.children;
      let tail = siblings[siblings.length - 1];
      if (!tail || tail.type !== "text") {
        tail = text5();
        tail.position = {
          start: point2(token.start),
          // @ts-expect-error: we’ll add `end` later.
          end: void 0
        };
        siblings.push(tail);
      }
      this.stack.push(tail);
    }
    function onexitdata(token) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token);
      tail.position.end = point2(token.end);
    }
    function onexitlineending(token) {
      const context = this.stack[this.stack.length - 1];
      if (this.data.atHardBreak) {
        const tail = context.children[context.children.length - 1];
        tail.position.end = point2(token.end);
        this.data.atHardBreak = void 0;
        return;
      }
      if (!this.data.setextHeadingSlurpLineEnding && config2.canContainEols.includes(context.type)) {
        onenterdata.call(this, token);
        onexitdata.call(this, token);
      }
    }
    function onexithardbreak() {
      this.data.atHardBreak = true;
    }
    function onexithtmlflow() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    function onexithtmltext() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    function onexitcodetext() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    function onexitlink() {
      const node2 = this.stack[this.stack.length - 1];
      if (this.data.inReference) {
        const referenceType = this.data.referenceType || "shortcut";
        node2.type += "Reference";
        node2.referenceType = referenceType;
        delete node2.url;
        delete node2.title;
      } else {
        delete node2.identifier;
        delete node2.label;
      }
      this.data.referenceType = void 0;
    }
    function onexitimage() {
      const node2 = this.stack[this.stack.length - 1];
      if (this.data.inReference) {
        const referenceType = this.data.referenceType || "shortcut";
        node2.type += "Reference";
        node2.referenceType = referenceType;
        delete node2.url;
        delete node2.title;
      } else {
        delete node2.identifier;
        delete node2.label;
      }
      this.data.referenceType = void 0;
    }
    function onexitlabeltext(token) {
      const string4 = this.sliceSerialize(token);
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.label = decodeString(string4);
      ancestor.identifier = normalizeIdentifier(string4).toLowerCase();
    }
    function onexitlabel() {
      const fragment = this.stack[this.stack.length - 1];
      const value = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      this.data.inReference = true;
      if (node2.type === "link") {
        const children = fragment.children;
        node2.children = children;
      } else {
        node2.alt = value;
      }
    }
    function onexitresourcedestinationstring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.url = data2;
    }
    function onexitresourcetitlestring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.title = data2;
    }
    function onexitresource() {
      this.data.inReference = void 0;
    }
    function onenterreference() {
      this.data.referenceType = "collapsed";
    }
    function onexitreferencestring(token) {
      const label = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.label = label;
      node2.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
      this.data.referenceType = "full";
    }
    function onexitcharacterreferencemarker(token) {
      this.data.characterReferenceType = token.type;
    }
    function onexitcharacterreferencevalue(token) {
      const data2 = this.sliceSerialize(token);
      const type = this.data.characterReferenceType;
      let value;
      if (type) {
        value = decodeNumericCharacterReference(
          data2,
          type === "characterReferenceMarkerNumeric" ? 10 : 16
        );
        this.data.characterReferenceType = void 0;
      } else {
        const result = decodeNamedCharacterReference(data2);
        value = result;
      }
      const tail = this.stack.pop();
      tail.value += value;
      tail.position.end = point2(token.end);
    }
    function onexitautolinkprotocol(token) {
      onexitdata.call(this, token);
      const node2 = this.stack[this.stack.length - 1];
      node2.url = this.sliceSerialize(token);
    }
    function onexitautolinkemail(token) {
      onexitdata.call(this, token);
      const node2 = this.stack[this.stack.length - 1];
      node2.url = "mailto:" + this.sliceSerialize(token);
    }
    function blockQuote2() {
      return {
        type: "blockquote",
        children: []
      };
    }
    function codeFlow() {
      return {
        type: "code",
        lang: null,
        meta: null,
        value: ""
      };
    }
    function codeText2() {
      return {
        type: "inlineCode",
        value: ""
      };
    }
    function definition3() {
      return {
        type: "definition",
        identifier: "",
        label: null,
        title: null,
        url: ""
      };
    }
    function emphasis2() {
      return {
        type: "emphasis",
        children: []
      };
    }
    function heading3() {
      return {
        type: "heading",
        // @ts-expect-error `depth` will be set later.
        depth: 0,
        children: []
      };
    }
    function hardBreak2() {
      return {
        type: "break"
      };
    }
    function html2() {
      return {
        type: "html",
        value: ""
      };
    }
    function image2() {
      return {
        type: "image",
        title: null,
        url: "",
        alt: null
      };
    }
    function link2() {
      return {
        type: "link",
        title: null,
        url: "",
        children: []
      };
    }
    function list4(token) {
      return {
        type: "list",
        ordered: token.type === "listOrdered",
        start: null,
        spread: token._spread,
        children: []
      };
    }
    function listItem2(token) {
      return {
        type: "listItem",
        spread: token._spread,
        checked: null,
        children: []
      };
    }
    function paragraph2() {
      return {
        type: "paragraph",
        children: []
      };
    }
    function strong2() {
      return {
        type: "strong",
        children: []
      };
    }
    function text5() {
      return {
        type: "text",
        value: ""
      };
    }
    function thematicBreak3() {
      return {
        type: "thematicBreak"
      };
    }
  }
  function point2(d6) {
    return {
      line: d6.line,
      column: d6.column,
      offset: d6.offset
    };
  }
  function configure(combined, extensions) {
    let index2 = -1;
    while (++index2 < extensions.length) {
      const value = extensions[index2];
      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }
  }
  function extension(combined, extension2) {
    let key;
    for (key in extension2) {
      if (own.call(extension2, key)) {
        switch (key) {
          case "canContainEols": {
            const right = extension2[key];
            if (right) {
              combined[key].push(...right);
            }
            break;
          }
          case "transforms": {
            const right = extension2[key];
            if (right) {
              combined[key].push(...right);
            }
            break;
          }
          case "enter":
          case "exit": {
            const right = extension2[key];
            if (right) {
              Object.assign(combined[key], right);
            }
            break;
          }
        }
      }
    }
  }
  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        "Cannot close `" + left.type + "` (" + stringifyPosition({
          start: left.start,
          end: left.end
        }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is open"
      );
    } else {
      throw new Error(
        "Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is still open"
      );
    }
  }

  // node_modules/remark-parse/lib/index.js
  function remarkParse(options) {
    const self2 = this;
    self2.parser = parser2;
    function parser2(doc5) {
      return fromMarkdown(doc5, __spreadProps(__spreadValues(__spreadValues({}, self2.data("settings")), options), {
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: self2.data("micromarkExtensions") || [],
        mdastExtensions: self2.data("fromMarkdownExtensions") || []
      }));
    }
  }

  // node_modules/zwitch/index.js
  var own2 = {}.hasOwnProperty;
  function zwitch(key, options) {
    const settings = options || {};
    function one2(value, ...parameters) {
      let fn = one2.invalid;
      const handlers3 = one2.handlers;
      if (value && own2.call(value, key)) {
        const id2 = String(value[key]);
        fn = own2.call(handlers3, id2) ? handlers3[id2] : one2.unknown;
      }
      if (fn) {
        return fn.call(this, value, ...parameters);
      }
    }
    one2.handlers = settings.handlers || {};
    one2.invalid = settings.invalid;
    one2.unknown = settings.unknown;
    return one2;
  }

  // node_modules/mdast-util-to-markdown/lib/configure.js
  var own3 = {}.hasOwnProperty;
  function configure2(base2, extension2) {
    let index2 = -1;
    let key;
    if (extension2.extensions) {
      while (++index2 < extension2.extensions.length) {
        configure2(base2, extension2.extensions[index2]);
      }
    }
    for (key in extension2) {
      if (own3.call(extension2, key)) {
        switch (key) {
          case "extensions": {
            break;
          }
          case "unsafe": {
            list2(base2[key], extension2[key]);
            break;
          }
          case "join": {
            list2(base2[key], extension2[key]);
            break;
          }
          case "handlers": {
            map(base2[key], extension2[key]);
            break;
          }
          default: {
            base2.options[key] = extension2[key];
          }
        }
      }
    }
    return base2;
  }
  function list2(left, right) {
    if (right) {
      left.push(...right);
    }
  }
  function map(left, right) {
    if (right) {
      Object.assign(left, right);
    }
  }

  // node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
  function blockquote(node2, _3, state, info) {
    const exit3 = state.enter("blockquote");
    const tracker = state.createTracker(info);
    tracker.move("> ");
    tracker.shift(2);
    const value = state.indentLines(
      state.containerFlow(node2, tracker.current()),
      map2
    );
    exit3();
    return value;
  }
  function map2(line, _3, blank) {
    return ">" + (blank ? "" : " ") + line;
  }

  // node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
  function patternInScope(stack, pattern) {
    return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
  }
  function listInScope(stack, list4, none5) {
    if (typeof list4 === "string") {
      list4 = [list4];
    }
    if (!list4 || list4.length === 0) {
      return none5;
    }
    let index2 = -1;
    while (++index2 < list4.length) {
      if (stack.includes(list4[index2])) {
        return true;
      }
    }
    return false;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/break.js
  function hardBreak(_3, _1, state, info) {
    let index2 = -1;
    while (++index2 < state.unsafe.length) {
      if (state.unsafe[index2].character === "\n" && patternInScope(state.stack, state.unsafe[index2])) {
        return /[ \t]/.test(info.before) ? "" : " ";
      }
    }
    return "\\\n";
  }

  // node_modules/longest-streak/index.js
  function longestStreak(value, substring) {
    const source = String(value);
    let index2 = source.indexOf(substring);
    let expected = index2;
    let count = 0;
    let max = 0;
    if (typeof substring !== "string") {
      throw new TypeError("Expected substring");
    }
    while (index2 !== -1) {
      if (index2 === expected) {
        if (++count > max) {
          max = count;
        }
      } else {
        count = 1;
      }
      expected = index2 + substring.length;
      index2 = source.indexOf(substring, expected);
    }
    return max;
  }

  // node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
  function formatCodeAsIndented(node2, state) {
    return Boolean(
      state.options.fences === false && node2.value && // If there’s no info…
      !node2.lang && // And there’s a non-whitespace character…
      /[^ \r\n]/.test(node2.value) && // And the value doesn’t start or end in a blank…
      !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node2.value)
    );
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-fence.js
  function checkFence(state) {
    const marker = state.options.fence || "`";
    if (marker !== "`" && marker !== "~") {
      throw new Error(
        "Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/code.js
  function code(node2, _3, state, info) {
    const marker = checkFence(state);
    const raw = node2.value || "";
    const suffix = marker === "`" ? "GraveAccent" : "Tilde";
    if (formatCodeAsIndented(node2, state)) {
      const exit4 = state.enter("codeIndented");
      const value2 = state.indentLines(raw, map3);
      exit4();
      return value2;
    }
    const tracker = state.createTracker(info);
    const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
    const exit3 = state.enter("codeFenced");
    let value = tracker.move(sequence);
    if (node2.lang) {
      const subexit = state.enter(`codeFencedLang${suffix}`);
      value += tracker.move(
        state.safe(node2.lang, __spreadValues({
          before: value,
          after: " ",
          encode: ["`"]
        }, tracker.current()))
      );
      subexit();
    }
    if (node2.lang && node2.meta) {
      const subexit = state.enter(`codeFencedMeta${suffix}`);
      value += tracker.move(" ");
      value += tracker.move(
        state.safe(node2.meta, __spreadValues({
          before: value,
          after: "\n",
          encode: ["`"]
        }, tracker.current()))
      );
      subexit();
    }
    value += tracker.move("\n");
    if (raw) {
      value += tracker.move(raw + "\n");
    }
    value += tracker.move(sequence);
    exit3();
    return value;
  }
  function map3(line, _3, blank) {
    return (blank ? "" : "    ") + line;
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-quote.js
  function checkQuote(state) {
    const marker = state.options.quote || '"';
    if (marker !== '"' && marker !== "'") {
      throw new Error(
        "Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/definition.js
  function definition2(node2, _3, state, info) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? "Quote" : "Apostrophe";
    const exit3 = state.enter("definition");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info);
    let value = tracker.move("[");
    value += tracker.move(
      state.safe(state.associationId(node2), __spreadValues({
        before: value,
        after: "]"
      }, tracker.current()))
    );
    value += tracker.move("]: ");
    subexit();
    if (
      // If there’s no url, or…
      !node2.url || // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node2.url)
    ) {
      subexit = state.enter("destinationLiteral");
      value += tracker.move("<");
      value += tracker.move(
        state.safe(node2.url, __spreadValues({ before: value, after: ">" }, tracker.current()))
      );
      value += tracker.move(">");
    } else {
      subexit = state.enter("destinationRaw");
      value += tracker.move(
        state.safe(node2.url, __spreadValues({
          before: value,
          after: node2.title ? " " : "\n"
        }, tracker.current()))
      );
    }
    subexit();
    if (node2.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(" " + quote);
      value += tracker.move(
        state.safe(node2.title, __spreadValues({
          before: value,
          after: quote
        }, tracker.current()))
      );
      value += tracker.move(quote);
      subexit();
    }
    exit3();
    return value;
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
  function checkEmphasis(state) {
    const marker = state.options.emphasis || "*";
    if (marker !== "*" && marker !== "_") {
      throw new Error(
        "Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
  emphasis.peek = emphasisPeek;
  function emphasis(node2, _3, state, info) {
    const marker = checkEmphasis(state);
    const exit3 = state.enter("emphasis");
    const tracker = state.createTracker(info);
    let value = tracker.move(marker);
    value += tracker.move(
      state.containerPhrasing(node2, __spreadValues({
        before: value,
        after: marker
      }, tracker.current()))
    );
    value += tracker.move(marker);
    exit3();
    return value;
  }
  function emphasisPeek(_3, _1, state) {
    return state.options.emphasis || "*";
  }

  // node_modules/unist-util-is/lib/index.js
  var convert = (
    // Note: overloads in JSDoc can’t yet use different `@template`s.
    /**
     * @type {(
     *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
     *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
     *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
     *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
     *   ((test?: Test) => Check)
     * )}
     */
    /**
     * @param {Test} [test]
     * @returns {Check}
     */
    function(test) {
      if (test === null || test === void 0) {
        return ok;
      }
      if (typeof test === "function") {
        return castFactory(test);
      }
      if (typeof test === "object") {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
      }
      if (typeof test === "string") {
        return typeFactory(test);
      }
      throw new Error("Expected function, string, or object as test");
    }
  );
  function anyFactory(tests) {
    const checks = [];
    let index2 = -1;
    while (++index2 < tests.length) {
      checks[index2] = convert(tests[index2]);
    }
    return castFactory(any);
    function any(...parameters) {
      let index3 = -1;
      while (++index3 < checks.length) {
        if (checks[index3].apply(this, parameters))
          return true;
      }
      return false;
    }
  }
  function propsFactory(check) {
    const checkAsRecord = (
      /** @type {Record<string, unknown>} */
      check
    );
    return castFactory(all2);
    function all2(node2) {
      const nodeAsRecord = (
        /** @type {Record<string, unknown>} */
        /** @type {unknown} */
        node2
      );
      let key;
      for (key in check) {
        if (nodeAsRecord[key] !== checkAsRecord[key])
          return false;
      }
      return true;
    }
  }
  function typeFactory(check) {
    return castFactory(type);
    function type(node2) {
      return node2 && node2.type === check;
    }
  }
  function castFactory(testFunction) {
    return check;
    function check(value, index2, parent) {
      return Boolean(
        looksLikeANode(value) && testFunction.call(
          this,
          value,
          typeof index2 === "number" ? index2 : void 0,
          parent || void 0
        )
      );
    }
  }
  function ok() {
    return true;
  }
  function looksLikeANode(value) {
    return value !== null && typeof value === "object" && "type" in value;
  }

  // node_modules/unist-util-visit-parents/lib/color.js
  function color(d6) {
    return d6;
  }

  // node_modules/unist-util-visit-parents/lib/index.js
  var empty2 = [];
  var CONTINUE = true;
  var EXIT = false;
  var SKIP = "skip";
  function visitParents(tree, test, visitor, reverse) {
    let check;
    if (typeof test === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test;
    } else {
      check = test;
    }
    const is2 = convert(check);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index2, parents) {
      const value = (
        /** @type {Record<string, unknown>} */
        node2 && typeof node2 === "object" ? node2 : {}
      );
      if (typeof value.type === "string") {
        const name2 = (
          // `hast`
          typeof value.tagName === "string" ? value.tagName : (
            // `xast`
            typeof value.name === "string" ? value.name : void 0
          )
        );
        Object.defineProperty(visit2, "name", {
          value: "node (" + color(node2.type + (name2 ? "<" + name2 + ">" : "")) + ")"
        });
      }
      return visit2;
      function visit2() {
        let result = empty2;
        let subresult;
        let offset;
        let grandparents;
        if (!test || is2(node2, index2, parents[parents.length - 1] || void 0)) {
          result = toResult(visitor(node2, parents));
          if (result[0] === EXIT) {
            return result;
          }
        }
        if ("children" in node2 && node2.children) {
          const nodeAsParent = (
            /** @type {UnistParent} */
            node2
          );
          if (nodeAsParent.children && result[0] !== SKIP) {
            offset = (reverse ? nodeAsParent.children.length : -1) + step;
            grandparents = parents.concat(nodeAsParent);
            while (offset > -1 && offset < nodeAsParent.children.length) {
              const child = nodeAsParent.children[offset];
              subresult = factory(child, offset, grandparents)();
              if (subresult[0] === EXIT) {
                return subresult;
              }
              offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
            }
          }
        }
        return result;
      }
    }
  }
  function toResult(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "number") {
      return [CONTINUE, value];
    }
    return value === null || value === void 0 ? empty2 : [value];
  }

  // node_modules/unist-util-visit/lib/index.js
  function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
    let reverse;
    let test;
    let visitor;
    if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
      test = void 0;
      visitor = testOrVisitor;
      reverse = visitorOrReverse;
    } else {
      test = testOrVisitor;
      visitor = visitorOrReverse;
      reverse = maybeReverse;
    }
    visitParents(tree, test, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      const index2 = parent ? parent.children.indexOf(node2) : void 0;
      return visitor(node2, index2, parent);
    }
  }

  // node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
  function formatHeadingAsSetext(node2, state) {
    let literalWithBreak = false;
    visit(node2, function(node3) {
      if ("value" in node3 && /\r?\n|\r/.test(node3.value) || node3.type === "break") {
        literalWithBreak = true;
        return EXIT;
      }
    });
    return Boolean(
      (!node2.depth || node2.depth < 3) && toString(node2) && (state.options.setext || literalWithBreak)
    );
  }

  // node_modules/mdast-util-to-markdown/lib/handle/heading.js
  function heading2(node2, _3, state, info) {
    const rank = Math.max(Math.min(6, node2.depth || 1), 1);
    const tracker = state.createTracker(info);
    if (formatHeadingAsSetext(node2, state)) {
      const exit4 = state.enter("headingSetext");
      const subexit2 = state.enter("phrasing");
      const value2 = state.containerPhrasing(node2, __spreadProps(__spreadValues({}, tracker.current()), {
        before: "\n",
        after: "\n"
      }));
      subexit2();
      exit4();
      return value2 + "\n" + (rank === 1 ? "=" : "-").repeat(
        // The whole size…
        value2.length - // Minus the position of the character after the last EOL (or
        // 0 if there is none)…
        (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1)
      );
    }
    const sequence = "#".repeat(rank);
    const exit3 = state.enter("headingAtx");
    const subexit = state.enter("phrasing");
    tracker.move(sequence + " ");
    let value = state.containerPhrasing(node2, __spreadValues({
      before: "# ",
      after: "\n"
    }, tracker.current()));
    if (/^[\t ]/.test(value)) {
      value = "&#x" + value.charCodeAt(0).toString(16).toUpperCase() + ";" + value.slice(1);
    }
    value = value ? sequence + " " + value : sequence;
    if (state.options.closeAtx) {
      value += " " + sequence;
    }
    subexit();
    exit3();
    return value;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/html.js
  html.peek = htmlPeek;
  function html(node2) {
    return node2.value || "";
  }
  function htmlPeek() {
    return "<";
  }

  // node_modules/mdast-util-to-markdown/lib/handle/image.js
  image.peek = imagePeek;
  function image(node2, _3, state, info) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? "Quote" : "Apostrophe";
    const exit3 = state.enter("image");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info);
    let value = tracker.move("![");
    value += tracker.move(
      state.safe(node2.alt, __spreadValues({ before: value, after: "]" }, tracker.current()))
    );
    value += tracker.move("](");
    subexit();
    if (
      // If there’s no url but there is a title…
      !node2.url && node2.title || // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node2.url)
    ) {
      subexit = state.enter("destinationLiteral");
      value += tracker.move("<");
      value += tracker.move(
        state.safe(node2.url, __spreadValues({ before: value, after: ">" }, tracker.current()))
      );
      value += tracker.move(">");
    } else {
      subexit = state.enter("destinationRaw");
      value += tracker.move(
        state.safe(node2.url, __spreadValues({
          before: value,
          after: node2.title ? " " : ")"
        }, tracker.current()))
      );
    }
    subexit();
    if (node2.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(" " + quote);
      value += tracker.move(
        state.safe(node2.title, __spreadValues({
          before: value,
          after: quote
        }, tracker.current()))
      );
      value += tracker.move(quote);
      subexit();
    }
    value += tracker.move(")");
    exit3();
    return value;
  }
  function imagePeek() {
    return "!";
  }

  // node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
  imageReference.peek = imageReferencePeek;
  function imageReference(node2, _3, state, info) {
    const type = node2.referenceType;
    const exit3 = state.enter("imageReference");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info);
    let value = tracker.move("![");
    const alt = state.safe(node2.alt, __spreadValues({
      before: value,
      after: "]"
    }, tracker.current()));
    value += tracker.move(alt + "][");
    subexit();
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter("reference");
    const reference = state.safe(state.associationId(node2), __spreadValues({
      before: value,
      after: "]"
    }, tracker.current()));
    subexit();
    state.stack = stack;
    exit3();
    if (type === "full" || !alt || alt !== reference) {
      value += tracker.move(reference + "]");
    } else if (type === "shortcut") {
      value = value.slice(0, -1);
    } else {
      value += tracker.move("]");
    }
    return value;
  }
  function imageReferencePeek() {
    return "!";
  }

  // node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
  inlineCode.peek = inlineCodePeek;
  function inlineCode(node2, _3, state) {
    let value = node2.value || "";
    let sequence = "`";
    let index2 = -1;
    while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
      sequence += "`";
    }
    if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
      value = " " + value + " ";
    }
    while (++index2 < state.unsafe.length) {
      const pattern = state.unsafe[index2];
      const expression = state.compilePattern(pattern);
      let match;
      if (!pattern.atBreak)
        continue;
      while (match = expression.exec(value)) {
        let position2 = match.index;
        if (value.charCodeAt(position2) === 10 && value.charCodeAt(position2 - 1) === 13) {
          position2--;
        }
        value = value.slice(0, position2) + " " + value.slice(match.index + 1);
      }
    }
    return sequence + value + sequence;
  }
  function inlineCodePeek() {
    return "`";
  }

  // node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
  function formatLinkAsAutolink(node2, state) {
    const raw = toString(node2);
    return Boolean(
      !state.options.resourceLink && // If there’s a url…
      node2.url && // And there’s a no title…
      !node2.title && // And the content of `node` is a single text node…
      node2.children && node2.children.length === 1 && node2.children[0].type === "text" && // And if the url is the same as the content…
      (raw === node2.url || "mailto:" + raw === node2.url) && // And that starts w/ a protocol…
      /^[a-z][a-z+.-]+:/i.test(node2.url) && // And that doesn’t contain ASCII control codes (character escapes and
      // references don’t work), space, or angle brackets…
      !/[\0- <>\u007F]/.test(node2.url)
    );
  }

  // node_modules/mdast-util-to-markdown/lib/handle/link.js
  link.peek = linkPeek;
  function link(node2, _3, state, info) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? "Quote" : "Apostrophe";
    const tracker = state.createTracker(info);
    let exit3;
    let subexit;
    if (formatLinkAsAutolink(node2, state)) {
      const stack = state.stack;
      state.stack = [];
      exit3 = state.enter("autolink");
      let value2 = tracker.move("<");
      value2 += tracker.move(
        state.containerPhrasing(node2, __spreadValues({
          before: value2,
          after: ">"
        }, tracker.current()))
      );
      value2 += tracker.move(">");
      exit3();
      state.stack = stack;
      return value2;
    }
    exit3 = state.enter("link");
    subexit = state.enter("label");
    let value = tracker.move("[");
    value += tracker.move(
      state.containerPhrasing(node2, __spreadValues({
        before: value,
        after: "]("
      }, tracker.current()))
    );
    value += tracker.move("](");
    subexit();
    if (
      // If there’s no url but there is a title…
      !node2.url && node2.title || // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node2.url)
    ) {
      subexit = state.enter("destinationLiteral");
      value += tracker.move("<");
      value += tracker.move(
        state.safe(node2.url, __spreadValues({ before: value, after: ">" }, tracker.current()))
      );
      value += tracker.move(">");
    } else {
      subexit = state.enter("destinationRaw");
      value += tracker.move(
        state.safe(node2.url, __spreadValues({
          before: value,
          after: node2.title ? " " : ")"
        }, tracker.current()))
      );
    }
    subexit();
    if (node2.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(" " + quote);
      value += tracker.move(
        state.safe(node2.title, __spreadValues({
          before: value,
          after: quote
        }, tracker.current()))
      );
      value += tracker.move(quote);
      subexit();
    }
    value += tracker.move(")");
    exit3();
    return value;
  }
  function linkPeek(node2, _3, state) {
    return formatLinkAsAutolink(node2, state) ? "<" : "[";
  }

  // node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
  linkReference.peek = linkReferencePeek;
  function linkReference(node2, _3, state, info) {
    const type = node2.referenceType;
    const exit3 = state.enter("linkReference");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info);
    let value = tracker.move("[");
    const text5 = state.containerPhrasing(node2, __spreadValues({
      before: value,
      after: "]"
    }, tracker.current()));
    value += tracker.move(text5 + "][");
    subexit();
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter("reference");
    const reference = state.safe(state.associationId(node2), __spreadValues({
      before: value,
      after: "]"
    }, tracker.current()));
    subexit();
    state.stack = stack;
    exit3();
    if (type === "full" || !text5 || text5 !== reference) {
      value += tracker.move(reference + "]");
    } else if (type === "shortcut") {
      value = value.slice(0, -1);
    } else {
      value += tracker.move("]");
    }
    return value;
  }
  function linkReferencePeek() {
    return "[";
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
  function checkBullet(state) {
    const marker = state.options.bullet || "*";
    if (marker !== "*" && marker !== "+" && marker !== "-") {
      throw new Error(
        "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
  function checkBulletOther(state) {
    const bullet = checkBullet(state);
    const bulletOther = state.options.bulletOther;
    if (!bulletOther) {
      return bullet === "*" ? "-" : "*";
    }
    if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
      throw new Error(
        "Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
      );
    }
    if (bulletOther === bullet) {
      throw new Error(
        "Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different"
      );
    }
    return bulletOther;
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
  function checkBulletOrdered(state) {
    const marker = state.options.bulletOrdered || ".";
    if (marker !== "." && marker !== ")") {
      throw new Error(
        "Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-rule.js
  function checkRule(state) {
    const marker = state.options.rule || "*";
    if (marker !== "*" && marker !== "-" && marker !== "_") {
      throw new Error(
        "Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/list.js
  function list3(node2, parent, state, info) {
    const exit3 = state.enter("list");
    const bulletCurrent = state.bulletCurrent;
    let bullet = node2.ordered ? checkBulletOrdered(state) : checkBullet(state);
    const bulletOther = node2.ordered ? bullet === "." ? ")" : "." : checkBulletOther(state);
    let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
    if (!node2.ordered) {
      const firstListItem = node2.children ? node2.children[0] : void 0;
      if (
        // Bullet could be used as a thematic break marker:
        (bullet === "*" || bullet === "-") && // Empty first list item:
        firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
        state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
        state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0
      ) {
        useDifferentMarker = true;
      }
      if (checkRule(state) === bullet && firstListItem) {
        let index2 = -1;
        while (++index2 < node2.children.length) {
          const item = node2.children[index2];
          if (item && item.type === "listItem" && item.children && item.children[0] && item.children[0].type === "thematicBreak") {
            useDifferentMarker = true;
            break;
          }
        }
      }
    }
    if (useDifferentMarker) {
      bullet = bulletOther;
    }
    state.bulletCurrent = bullet;
    const value = state.containerFlow(node2, info);
    state.bulletLastUsed = bullet;
    state.bulletCurrent = bulletCurrent;
    exit3();
    return value;
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
  function checkListItemIndent(state) {
    const style = state.options.listItemIndent || "one";
    if (style !== "tab" && style !== "one" && style !== "mixed") {
      throw new Error(
        "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
      );
    }
    return style;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/list-item.js
  function listItem(node2, parent, state, info) {
    const listItemIndent = checkListItemIndent(state);
    let bullet = state.bulletCurrent || checkBullet(state);
    if (parent && parent.type === "list" && parent.ordered) {
      bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
    }
    let size = bullet.length + 1;
    if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
      size = Math.ceil(size / 4) * 4;
    }
    const tracker = state.createTracker(info);
    tracker.move(bullet + " ".repeat(size - bullet.length));
    tracker.shift(size);
    const exit3 = state.enter("listItem");
    const value = state.indentLines(
      state.containerFlow(node2, tracker.current()),
      map6
    );
    exit3();
    return value;
    function map6(line, index2, blank) {
      if (index2) {
        return (blank ? "" : " ".repeat(size)) + line;
      }
      return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
    }
  }

  // node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
  function paragraph(node2, _3, state, info) {
    const exit3 = state.enter("paragraph");
    const subexit = state.enter("phrasing");
    const value = state.containerPhrasing(node2, info);
    subexit();
    exit3();
    return value;
  }

  // node_modules/mdast-util-phrasing/lib/index.js
  var phrasing = (
    /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
    convert([
      "break",
      "delete",
      "emphasis",
      // To do: next major: removed since footnotes were added to GFM.
      "footnote",
      "footnoteReference",
      "image",
      "imageReference",
      "inlineCode",
      // Enabled by `mdast-util-math`:
      "inlineMath",
      "link",
      "linkReference",
      // Enabled by `mdast-util-mdx`:
      "mdxJsxTextElement",
      // Enabled by `mdast-util-mdx`:
      "mdxTextExpression",
      "strong",
      "text",
      // Enabled by `mdast-util-directive`:
      "textDirective"
    ])
  );

  // node_modules/mdast-util-to-markdown/lib/handle/root.js
  function root(node2, _3, state, info) {
    const hasPhrasing = node2.children.some(function(d6) {
      return phrasing(d6);
    });
    const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
    return fn.call(state, node2, info);
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-strong.js
  function checkStrong(state) {
    const marker = state.options.strong || "*";
    if (marker !== "*" && marker !== "_") {
      throw new Error(
        "Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`"
      );
    }
    return marker;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/strong.js
  strong.peek = strongPeek;
  function strong(node2, _3, state, info) {
    const marker = checkStrong(state);
    const exit3 = state.enter("strong");
    const tracker = state.createTracker(info);
    let value = tracker.move(marker + marker);
    value += tracker.move(
      state.containerPhrasing(node2, __spreadValues({
        before: value,
        after: marker
      }, tracker.current()))
    );
    value += tracker.move(marker + marker);
    exit3();
    return value;
  }
  function strongPeek(_3, _1, state) {
    return state.options.strong || "*";
  }

  // node_modules/mdast-util-to-markdown/lib/handle/text.js
  function text3(node2, _3, state, info) {
    return state.safe(node2.value, info);
  }

  // node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
  function checkRuleRepetition(state) {
    const repetition = state.options.ruleRepetition || 3;
    if (repetition < 3) {
      throw new Error(
        "Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more"
      );
    }
    return repetition;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
  function thematicBreak2(_3, _1, state) {
    const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
    return state.options.ruleSpaces ? value.slice(0, -1) : value;
  }

  // node_modules/mdast-util-to-markdown/lib/handle/index.js
  var handle = {
    blockquote,
    break: hardBreak,
    code,
    definition: definition2,
    emphasis,
    hardBreak,
    heading: heading2,
    html,
    image,
    imageReference,
    inlineCode,
    link,
    linkReference,
    list: list3,
    listItem,
    paragraph,
    root,
    strong,
    text: text3,
    thematicBreak: thematicBreak2
  };

  // node_modules/mdast-util-to-markdown/lib/join.js
  var join = [joinDefaults];
  function joinDefaults(left, right, parent, state) {
    if (right.type === "code" && formatCodeAsIndented(right, state) && (left.type === "list" || left.type === right.type && formatCodeAsIndented(left, state))) {
      return false;
    }
    if ("spread" in parent && typeof parent.spread === "boolean") {
      if (left.type === "paragraph" && // Two paragraphs.
      (left.type === right.type || right.type === "definition" || // Paragraph followed by a setext heading.
      right.type === "heading" && formatHeadingAsSetext(right, state))) {
        return;
      }
      return parent.spread ? 1 : 0;
    }
  }

  // node_modules/mdast-util-to-markdown/lib/unsafe.js
  var fullPhrasingSpans = [
    "autolink",
    "destinationLiteral",
    "destinationRaw",
    "reference",
    "titleQuote",
    "titleApostrophe"
  ];
  var unsafe = [
    { character: "	", after: "[\\r\\n]", inConstruct: "phrasing" },
    { character: "	", before: "[\\r\\n]", inConstruct: "phrasing" },
    {
      character: "	",
      inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
    },
    {
      character: "\r",
      inConstruct: [
        "codeFencedLangGraveAccent",
        "codeFencedLangTilde",
        "codeFencedMetaGraveAccent",
        "codeFencedMetaTilde",
        "destinationLiteral",
        "headingAtx"
      ]
    },
    {
      character: "\n",
      inConstruct: [
        "codeFencedLangGraveAccent",
        "codeFencedLangTilde",
        "codeFencedMetaGraveAccent",
        "codeFencedMetaTilde",
        "destinationLiteral",
        "headingAtx"
      ]
    },
    { character: " ", after: "[\\r\\n]", inConstruct: "phrasing" },
    { character: " ", before: "[\\r\\n]", inConstruct: "phrasing" },
    {
      character: " ",
      inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
    },
    // An exclamation mark can start an image, if it is followed by a link or
    // a link reference.
    {
      character: "!",
      after: "\\[",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans
    },
    // A quote can break out of a title.
    { character: '"', inConstruct: "titleQuote" },
    // A number sign could start an ATX heading if it starts a line.
    { atBreak: true, character: "#" },
    { character: "#", inConstruct: "headingAtx", after: "(?:[\r\n]|$)" },
    // Dollar sign and percentage are not used in markdown.
    // An ampersand could start a character reference.
    { character: "&", after: "[#A-Za-z]", inConstruct: "phrasing" },
    // An apostrophe can break out of a title.
    { character: "'", inConstruct: "titleApostrophe" },
    // A left paren could break out of a destination raw.
    { character: "(", inConstruct: "destinationRaw" },
    // A left paren followed by `]` could make something into a link or image.
    {
      before: "\\]",
      character: "(",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans
    },
    // A right paren could start a list item or break out of a destination
    // raw.
    { atBreak: true, before: "\\d+", character: ")" },
    { character: ")", inConstruct: "destinationRaw" },
    // An asterisk can start thematic breaks, list items, emphasis, strong.
    { atBreak: true, character: "*", after: "(?:[ 	\r\n*])" },
    { character: "*", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
    // A plus sign could start a list item.
    { atBreak: true, character: "+", after: "(?:[ 	\r\n])" },
    // A dash can start thematic breaks, list items, and setext heading
    // underlines.
    { atBreak: true, character: "-", after: "(?:[ 	\r\n-])" },
    // A dot could start a list item.
    { atBreak: true, before: "\\d+", character: ".", after: "(?:[ 	\r\n]|$)" },
    // Slash, colon, and semicolon are not used in markdown for constructs.
    // A less than can start html (flow or text) or an autolink.
    // HTML could start with an exclamation mark (declaration, cdata, comment),
    // slash (closing tag), question mark (instruction), or a letter (tag).
    // An autolink also starts with a letter.
    // Finally, it could break out of a destination literal.
    { atBreak: true, character: "<", after: "[!/?A-Za-z]" },
    {
      character: "<",
      after: "[!/?A-Za-z]",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans
    },
    { character: "<", inConstruct: "destinationLiteral" },
    // An equals to can start setext heading underlines.
    { atBreak: true, character: "=" },
    // A greater than can start block quotes and it can break out of a
    // destination literal.
    { atBreak: true, character: ">" },
    { character: ">", inConstruct: "destinationLiteral" },
    // Question mark and at sign are not used in markdown for constructs.
    // A left bracket can start definitions, references, labels,
    { atBreak: true, character: "[" },
    { character: "[", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
    { character: "[", inConstruct: ["label", "reference"] },
    // A backslash can start an escape (when followed by punctuation) or a
    // hard break (when followed by an eol).
    // Note: typical escapes are handled in `safe`!
    { character: "\\", after: "[\\r\\n]", inConstruct: "phrasing" },
    // A right bracket can exit labels.
    { character: "]", inConstruct: ["label", "reference"] },
    // Caret is not used in markdown for constructs.
    // An underscore can start emphasis, strong, or a thematic break.
    { atBreak: true, character: "_" },
    { character: "_", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
    // A grave accent can start code (fenced or text), or it can break out of
    // a grave accent code fence.
    { atBreak: true, character: "`" },
    {
      character: "`",
      inConstruct: ["codeFencedLangGraveAccent", "codeFencedMetaGraveAccent"]
    },
    { character: "`", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
    // Left brace, vertical bar, right brace are not used in markdown for
    // constructs.
    // A tilde can start code (fenced).
    { atBreak: true, character: "~" }
  ];

  // node_modules/mdast-util-to-markdown/lib/util/association.js
  function association(node2) {
    if (node2.label || !node2.identifier) {
      return node2.label || "";
    }
    return decodeString(node2.identifier);
  }

  // node_modules/mdast-util-to-markdown/lib/util/compile-pattern.js
  function compilePattern(pattern) {
    if (!pattern._compiled) {
      const before = (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern.before ? "(?:" + pattern.before + ")" : "");
      pattern._compiled = new RegExp(
        (before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") + pattern.character + (pattern.after ? "(?:" + pattern.after + ")" : ""),
        "g"
      );
    }
    return pattern._compiled;
  }

  // node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
  function containerPhrasing(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const results = [];
    let index2 = -1;
    let before = info.before;
    indexStack.push(-1);
    let tracker = state.createTracker(info);
    while (++index2 < children.length) {
      const child = children[index2];
      let after;
      indexStack[indexStack.length - 1] = index2;
      if (index2 + 1 < children.length) {
        let handle2 = state.handle.handlers[children[index2 + 1].type];
        if (handle2 && handle2.peek)
          handle2 = handle2.peek;
        after = handle2 ? handle2(children[index2 + 1], parent, state, __spreadValues({
          before: "",
          after: ""
        }, tracker.current())).charAt(0) : "";
      } else {
        after = info.after;
      }
      if (results.length > 0 && (before === "\r" || before === "\n") && child.type === "html") {
        results[results.length - 1] = results[results.length - 1].replace(
          /(\r?\n|\r)$/,
          " "
        );
        before = " ";
        tracker = state.createTracker(info);
        tracker.move(results.join(""));
      }
      results.push(
        tracker.move(
          state.handle(child, parent, state, __spreadProps(__spreadValues({}, tracker.current()), {
            before,
            after
          }))
        )
      );
      before = results[results.length - 1].slice(-1);
    }
    indexStack.pop();
    return results.join("");
  }

  // node_modules/mdast-util-to-markdown/lib/util/container-flow.js
  function containerFlow(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const tracker = state.createTracker(info);
    const results = [];
    let index2 = -1;
    indexStack.push(-1);
    while (++index2 < children.length) {
      const child = children[index2];
      indexStack[indexStack.length - 1] = index2;
      results.push(
        tracker.move(
          state.handle(child, parent, state, __spreadValues({
            before: "\n",
            after: "\n"
          }, tracker.current()))
        )
      );
      if (child.type !== "list") {
        state.bulletLastUsed = void 0;
      }
      if (index2 < children.length - 1) {
        results.push(
          tracker.move(between(child, children[index2 + 1], parent, state))
        );
      }
    }
    indexStack.pop();
    return results.join("");
  }
  function between(left, right, parent, state) {
    let index2 = state.join.length;
    while (index2--) {
      const result = state.join[index2](left, right, parent, state);
      if (result === true || result === 1) {
        break;
      }
      if (typeof result === "number") {
        return "\n".repeat(1 + result);
      }
      if (result === false) {
        return "\n\n<!---->\n\n";
      }
    }
    return "\n\n";
  }

  // node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
  var eol = /\r?\n|\r/g;
  function indentLines(value, map6) {
    const result = [];
    let start = 0;
    let line = 0;
    let match;
    while (match = eol.exec(value)) {
      one2(value.slice(start, match.index));
      result.push(match[0]);
      start = match.index + match[0].length;
      line++;
    }
    one2(value.slice(start));
    return result.join("");
    function one2(value2) {
      result.push(map6(value2, line, !value2));
    }
  }

  // node_modules/mdast-util-to-markdown/lib/util/safe.js
  function safe(state, input, config2) {
    const value = (config2.before || "") + (input || "") + (config2.after || "");
    const positions = [];
    const result = [];
    const infos = {};
    let index2 = -1;
    while (++index2 < state.unsafe.length) {
      const pattern = state.unsafe[index2];
      if (!patternInScope(state.stack, pattern)) {
        continue;
      }
      const expression = state.compilePattern(pattern);
      let match;
      while (match = expression.exec(value)) {
        const before = "before" in pattern || Boolean(pattern.atBreak);
        const after = "after" in pattern;
        const position2 = match.index + (before ? match[1].length : 0);
        if (positions.includes(position2)) {
          if (infos[position2].before && !before) {
            infos[position2].before = false;
          }
          if (infos[position2].after && !after) {
            infos[position2].after = false;
          }
        } else {
          positions.push(position2);
          infos[position2] = { before, after };
        }
      }
    }
    positions.sort(numerical);
    let start = config2.before ? config2.before.length : 0;
    const end = value.length - (config2.after ? config2.after.length : 0);
    index2 = -1;
    while (++index2 < positions.length) {
      const position2 = positions[index2];
      if (position2 < start || position2 >= end) {
        continue;
      }
      if (position2 + 1 < end && positions[index2 + 1] === position2 + 1 && infos[position2].after && !infos[position2 + 1].before && !infos[position2 + 1].after || positions[index2 - 1] === position2 - 1 && infos[position2].before && !infos[position2 - 1].before && !infos[position2 - 1].after) {
        continue;
      }
      if (start !== position2) {
        result.push(escapeBackslashes(value.slice(start, position2), "\\"));
      }
      start = position2;
      if (/[!-/:-@[-`{-~]/.test(value.charAt(position2)) && (!config2.encode || !config2.encode.includes(value.charAt(position2)))) {
        result.push("\\");
      } else {
        result.push(
          "&#x" + value.charCodeAt(position2).toString(16).toUpperCase() + ";"
        );
        start++;
      }
    }
    result.push(escapeBackslashes(value.slice(start, end), config2.after));
    return result.join("");
  }
  function numerical(a2, b4) {
    return a2 - b4;
  }
  function escapeBackslashes(value, after) {
    const expression = /\\(?=[!-/:-@[-`{-~])/g;
    const positions = [];
    const results = [];
    const whole = value + after;
    let index2 = -1;
    let start = 0;
    let match;
    while (match = expression.exec(whole)) {
      positions.push(match.index);
    }
    while (++index2 < positions.length) {
      if (start !== positions[index2]) {
        results.push(value.slice(start, positions[index2]));
      }
      results.push("\\");
      start = positions[index2];
    }
    results.push(value.slice(start));
    return results.join("");
  }

  // node_modules/mdast-util-to-markdown/lib/util/track.js
  function track(config2) {
    const options = config2 || {};
    const now = options.now || {};
    let lineShift = options.lineShift || 0;
    let line = now.line || 1;
    let column = now.column || 1;
    return { move, current, shift: shift2 };
    function current() {
      return { now: { line, column }, lineShift };
    }
    function shift2(value) {
      lineShift += value;
    }
    function move(input) {
      const value = input || "";
      const chunks = value.split(/\r?\n|\r/g);
      const tail = chunks[chunks.length - 1];
      line += chunks.length - 1;
      column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
      return value;
    }
  }

  // node_modules/mdast-util-to-markdown/lib/index.js
  function toMarkdown(tree, options = {}) {
    const state = {
      enter,
      indentLines,
      associationId: association,
      containerPhrasing: containerPhrasingBound,
      containerFlow: containerFlowBound,
      createTracker: track,
      compilePattern,
      safe: safeBound,
      stack: [],
      unsafe: [...unsafe],
      join: [...join],
      // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined
      // here.
      handlers: __spreadValues({}, handle),
      options: {},
      indexStack: [],
      // @ts-expect-error: add `handle` in a second.
      handle: void 0
    };
    configure2(state, options);
    if (state.options.tightDefinitions) {
      state.join.push(joinDefinition);
    }
    state.handle = zwitch("type", {
      invalid,
      unknown,
      handlers: state.handlers
    });
    let result = state.handle(tree, void 0, state, {
      before: "\n",
      after: "\n",
      now: { line: 1, column: 1 },
      lineShift: 0
    });
    if (result && result.charCodeAt(result.length - 1) !== 10 && result.charCodeAt(result.length - 1) !== 13) {
      result += "\n";
    }
    return result;
    function enter(name2) {
      state.stack.push(name2);
      return exit3;
      function exit3() {
        state.stack.pop();
      }
    }
  }
  function invalid(value) {
    throw new Error("Cannot handle value `" + value + "`, expected node");
  }
  function unknown(value) {
    const node2 = (
      /** @type {Nodes} */
      value
    );
    throw new Error("Cannot handle unknown node `" + node2.type + "`");
  }
  function joinDefinition(left, right) {
    if (left.type === "definition" && left.type === right.type) {
      return 0;
    }
  }
  function containerPhrasingBound(parent, info) {
    return containerPhrasing(parent, this, info);
  }
  function containerFlowBound(parent, info) {
    return containerFlow(parent, this, info);
  }
  function safeBound(value, config2) {
    return safe(this, value, config2);
  }

  // node_modules/remark-stringify/lib/index.js
  function remarkStringify(options) {
    const self2 = this;
    self2.compiler = compiler2;
    function compiler2(tree) {
      return toMarkdown(tree, __spreadProps(__spreadValues(__spreadValues({}, self2.data("settings")), options), {
        // Note: this option is not in the readme.
        // The goal is for it to be set by plugins on `data` instead of being
        // passed by users.
        extensions: self2.data("toMarkdownExtensions") || []
      }));
    }
  }

  // node_modules/bail/index.js
  function bail(error) {
    if (error) {
      throw error;
    }
  }

  // node_modules/unified/lib/index.js
  var import_extend = __toESM(require_extend(), 1);

  // node_modules/devlop/lib/default.js
  function ok2() {
  }

  // node_modules/is-plain-obj/index.js
  function isPlainObject(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  }

  // node_modules/trough/lib/index.js
  function trough() {
    const fns = [];
    const pipeline = { run: run2, use };
    return pipeline;
    function run2(...values) {
      let middlewareIndex = -1;
      const callback = values.pop();
      if (typeof callback !== "function") {
        throw new TypeError("Expected function as last argument, not " + callback);
      }
      next(null, ...values);
      function next(error, ...output) {
        const fn = fns[++middlewareIndex];
        let index2 = -1;
        if (error) {
          callback(error);
          return;
        }
        while (++index2 < values.length) {
          if (output[index2] === null || output[index2] === void 0) {
            output[index2] = values[index2];
          }
        }
        values = output;
        if (fn) {
          wrap(fn, next)(...output);
        } else {
          callback(null, ...output);
        }
      }
    }
    function use(middelware) {
      if (typeof middelware !== "function") {
        throw new TypeError(
          "Expected `middelware` to be a function, not " + middelware
        );
      }
      fns.push(middelware);
      return pipeline;
    }
  }
  function wrap(middleware, callback) {
    let called;
    return wrapped;
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware.length > parameters.length;
      let result;
      if (fnExpectsCallback) {
        parameters.push(done);
      }
      try {
        result = middleware.apply(this, parameters);
      } catch (error) {
        const exception = (
          /** @type {Error} */
          error
        );
        if (fnExpectsCallback && called) {
          throw exception;
        }
        return done(exception);
      }
      if (!fnExpectsCallback) {
        if (result && result.then && typeof result.then === "function") {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }
    function done(error, ...output) {
      if (!called) {
        called = true;
        callback(error, ...output);
      }
    }
    function then(value) {
      done(null, value);
    }
  }

  // node_modules/vfile-message/lib/index.js
  var VFileMessage = class extends Error {
    /**
     * Create a message for `reason`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {Options | null | undefined} [options]
     * @returns
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns
     *   Instance of `VFileMessage`.
     */
    // eslint-disable-next-line complexity
    constructor(causeOrReason, optionsOrParentOrPlace, origin) {
      super();
      if (typeof optionsOrParentOrPlace === "string") {
        origin = optionsOrParentOrPlace;
        optionsOrParentOrPlace = void 0;
      }
      let reason = "";
      let options = {};
      let legacyCause = false;
      if (optionsOrParentOrPlace) {
        if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
          options = { place: optionsOrParentOrPlace };
        } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
          options = { place: optionsOrParentOrPlace };
        } else if ("type" in optionsOrParentOrPlace) {
          options = {
            ancestors: [optionsOrParentOrPlace],
            place: optionsOrParentOrPlace.position
          };
        } else {
          options = __spreadValues({}, optionsOrParentOrPlace);
        }
      }
      if (typeof causeOrReason === "string") {
        reason = causeOrReason;
      } else if (!options.cause && causeOrReason) {
        legacyCause = true;
        reason = causeOrReason.message;
        options.cause = causeOrReason;
      }
      if (!options.ruleId && !options.source && typeof origin === "string") {
        const index2 = origin.indexOf(":");
        if (index2 === -1) {
          options.ruleId = origin;
        } else {
          options.source = origin.slice(0, index2);
          options.ruleId = origin.slice(index2 + 1);
        }
      }
      if (!options.place && options.ancestors && options.ancestors) {
        const parent = options.ancestors[options.ancestors.length - 1];
        if (parent) {
          options.place = parent.position;
        }
      }
      const start = options.place && "start" in options.place ? options.place.start : options.place;
      this.ancestors = options.ancestors || void 0;
      this.cause = options.cause || void 0;
      this.column = start ? start.column : void 0;
      this.fatal = void 0;
      this.file;
      this.message = reason;
      this.line = start ? start.line : void 0;
      this.name = stringifyPosition(options.place) || "1:1";
      this.place = options.place || void 0;
      this.reason = this.message;
      this.ruleId = options.ruleId || void 0;
      this.source = options.source || void 0;
      this.stack = legacyCause && options.cause && typeof options.cause.stack === "string" ? options.cause.stack : "";
      this.actual;
      this.expected;
      this.note;
      this.url;
    }
  };
  VFileMessage.prototype.file = "";
  VFileMessage.prototype.name = "";
  VFileMessage.prototype.reason = "";
  VFileMessage.prototype.message = "";
  VFileMessage.prototype.stack = "";
  VFileMessage.prototype.column = void 0;
  VFileMessage.prototype.line = void 0;
  VFileMessage.prototype.ancestors = void 0;
  VFileMessage.prototype.cause = void 0;
  VFileMessage.prototype.fatal = void 0;
  VFileMessage.prototype.place = void 0;
  VFileMessage.prototype.ruleId = void 0;
  VFileMessage.prototype.source = void 0;

  // node_modules/vfile/lib/minpath.browser.js
  var path = { basename, dirname, extname, join: join2, sep: "/" };
  function basename(path3, ext) {
    if (ext !== void 0 && typeof ext !== "string") {
      throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path3);
    let start = 0;
    let end = -1;
    let index2 = path3.length;
    let seenNonSlash;
    if (ext === void 0 || ext.length === 0 || ext.length > path3.length) {
      while (index2--) {
        if (path3.codePointAt(index2) === 47) {
          if (seenNonSlash) {
            start = index2 + 1;
            break;
          }
        } else if (end < 0) {
          seenNonSlash = true;
          end = index2 + 1;
        }
      }
      return end < 0 ? "" : path3.slice(start, end);
    }
    if (ext === path3) {
      return "";
    }
    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;
    while (index2--) {
      if (path3.codePointAt(index2) === 47) {
        if (seenNonSlash) {
          start = index2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd < 0) {
          seenNonSlash = true;
          firstNonSlashEnd = index2 + 1;
        }
        if (extIndex > -1) {
          if (path3.codePointAt(index2) === ext.codePointAt(extIndex--)) {
            if (extIndex < 0) {
              end = index2;
            }
          } else {
            extIndex = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end) {
      end = firstNonSlashEnd;
    } else if (end < 0) {
      end = path3.length;
    }
    return path3.slice(start, end);
  }
  function dirname(path3) {
    assertPath(path3);
    if (path3.length === 0) {
      return ".";
    }
    let end = -1;
    let index2 = path3.length;
    let unmatchedSlash;
    while (--index2) {
      if (path3.codePointAt(index2) === 47) {
        if (unmatchedSlash) {
          end = index2;
          break;
        }
      } else if (!unmatchedSlash) {
        unmatchedSlash = true;
      }
    }
    return end < 0 ? path3.codePointAt(0) === 47 ? "/" : "." : end === 1 && path3.codePointAt(0) === 47 ? "//" : path3.slice(0, end);
  }
  function extname(path3) {
    assertPath(path3);
    let index2 = path3.length;
    let end = -1;
    let startPart = 0;
    let startDot = -1;
    let preDotState = 0;
    let unmatchedSlash;
    while (index2--) {
      const code3 = path3.codePointAt(index2);
      if (code3 === 47) {
        if (unmatchedSlash) {
          startPart = index2 + 1;
          break;
        }
        continue;
      }
      if (end < 0) {
        unmatchedSlash = true;
        end = index2 + 1;
      }
      if (code3 === 46) {
        if (startDot < 0) {
          startDot = index2;
        } else if (preDotState !== 1) {
          preDotState = 1;
        }
      } else if (startDot > -1) {
        preDotState = -1;
      }
    }
    if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
    preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return "";
    }
    return path3.slice(startDot, end);
  }
  function join2(...segments) {
    let index2 = -1;
    let joined;
    while (++index2 < segments.length) {
      assertPath(segments[index2]);
      if (segments[index2]) {
        joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
      }
    }
    return joined === void 0 ? "." : normalize(joined);
  }
  function normalize(path3) {
    assertPath(path3);
    const absolute = path3.codePointAt(0) === 47;
    let value = normalizeString(path3, !absolute);
    if (value.length === 0 && !absolute) {
      value = ".";
    }
    if (value.length > 0 && path3.codePointAt(path3.length - 1) === 47) {
      value += "/";
    }
    return absolute ? "/" + value : value;
  }
  function normalizeString(path3, allowAboveRoot) {
    let result = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index2 = -1;
    let code3;
    let lastSlashIndex;
    while (++index2 <= path3.length) {
      if (index2 < path3.length) {
        code3 = path3.codePointAt(index2);
      } else if (code3 === 47) {
        break;
      } else {
        code3 = 47;
      }
      if (code3 === 47) {
        if (lastSlash === index2 - 1 || dots === 1) {
        } else if (lastSlash !== index2 - 1 && dots === 2) {
          if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 || result.codePointAt(result.length - 2) !== 46) {
            if (result.length > 2) {
              lastSlashIndex = result.lastIndexOf("/");
              if (lastSlashIndex !== result.length - 1) {
                if (lastSlashIndex < 0) {
                  result = "";
                  lastSegmentLength = 0;
                } else {
                  result = result.slice(0, lastSlashIndex);
                  lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                }
                lastSlash = index2;
                dots = 0;
                continue;
              }
            } else if (result.length > 0) {
              result = "";
              lastSegmentLength = 0;
              lastSlash = index2;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            result = result.length > 0 ? result + "/.." : "..";
            lastSegmentLength = 2;
          }
        } else {
          if (result.length > 0) {
            result += "/" + path3.slice(lastSlash + 1, index2);
          } else {
            result = path3.slice(lastSlash + 1, index2);
          }
          lastSegmentLength = index2 - lastSlash - 1;
        }
        lastSlash = index2;
        dots = 0;
      } else if (code3 === 46 && dots > -1) {
        dots++;
      } else {
        dots = -1;
      }
    }
    return result;
  }
  function assertPath(path3) {
    if (typeof path3 !== "string") {
      throw new TypeError(
        "Path must be a string. Received " + JSON.stringify(path3)
      );
    }
  }

  // node_modules/vfile/lib/minproc.browser.js
  var proc = { cwd };
  function cwd() {
    return "/";
  }

  // node_modules/vfile/lib/minurl.shared.js
  function isUrl(fileUrlOrPath) {
    return Boolean(
      fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
      fileUrlOrPath.auth === void 0
    );
  }

  // node_modules/vfile/lib/minurl.browser.js
  function urlToPath(path3) {
    if (typeof path3 === "string") {
      path3 = new URL(path3);
    } else if (!isUrl(path3)) {
      const error = new TypeError(
        'The "path" argument must be of type string or an instance of URL. Received `' + path3 + "`"
      );
      error.code = "ERR_INVALID_ARG_TYPE";
      throw error;
    }
    if (path3.protocol !== "file:") {
      const error = new TypeError("The URL must be of scheme file");
      error.code = "ERR_INVALID_URL_SCHEME";
      throw error;
    }
    return getPathFromURLPosix(path3);
  }
  function getPathFromURLPosix(url) {
    if (url.hostname !== "") {
      const error = new TypeError(
        'File URL host must be "localhost" or empty on darwin'
      );
      error.code = "ERR_INVALID_FILE_URL_HOST";
      throw error;
    }
    const pathname = url.pathname;
    let index2 = -1;
    while (++index2 < pathname.length) {
      if (pathname.codePointAt(index2) === 37 && pathname.codePointAt(index2 + 1) === 50) {
        const third = pathname.codePointAt(index2 + 2);
        if (third === 70 || third === 102) {
          const error = new TypeError(
            "File URL path must not include encoded / characters"
          );
          error.code = "ERR_INVALID_FILE_URL_PATH";
          throw error;
        }
      }
    }
    return decodeURIComponent(pathname);
  }

  // node_modules/vfile/lib/index.js
  var order = (
    /** @type {const} */
    [
      "history",
      "path",
      "basename",
      "stem",
      "extname",
      "dirname"
    ]
  );
  var VFile = class {
    /**
     * Create a new virtual file.
     *
     * `options` is treated as:
     *
     * *   `string` or `Uint8Array` — `{value: options}`
     * *   `URL` — `{path: options}`
     * *   `VFile` — shallow copies its data over to the new file
     * *   `object` — all fields are shallow copied over to the new file
     *
     * Path related fields are set in the following order (least specific to
     * most specific): `history`, `path`, `basename`, `stem`, `extname`,
     * `dirname`.
     *
     * You cannot set `dirname` or `extname` without setting either `history`,
     * `path`, `basename`, or `stem` too.
     *
     * @param {Compatible | null | undefined} [value]
     *   File value.
     * @returns
     *   New instance.
     */
    constructor(value) {
      let options;
      if (!value) {
        options = {};
      } else if (isUrl(value)) {
        options = { path: value };
      } else if (typeof value === "string" || isUint8Array(value)) {
        options = { value };
      } else {
        options = value;
      }
      this.cwd = proc.cwd();
      this.data = {};
      this.history = [];
      this.messages = [];
      this.value;
      this.map;
      this.result;
      this.stored;
      let index2 = -1;
      while (++index2 < order.length) {
        const prop2 = order[index2];
        if (prop2 in options && options[prop2] !== void 0 && options[prop2] !== null) {
          this[prop2] = prop2 === "history" ? [...options[prop2]] : options[prop2];
        }
      }
      let prop;
      for (prop in options) {
        if (!order.includes(prop)) {
          this[prop] = options[prop];
        }
      }
    }
    /**
     * Get the basename (including extname) (example: `'index.min.js'`).
     *
     * @returns {string | undefined}
     *   Basename.
     */
    get basename() {
      return typeof this.path === "string" ? path.basename(this.path) : void 0;
    }
    /**
     * Set basename (including extname) (`'index.min.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     *
     * @param {string} basename
     *   Basename.
     * @returns {undefined}
     *   Nothing.
     */
    set basename(basename2) {
      assertNonEmpty(basename2, "basename");
      assertPart(basename2, "basename");
      this.path = path.join(this.dirname || "", basename2);
    }
    /**
     * Get the parent path (example: `'~'`).
     *
     * @returns {string | undefined}
     *   Dirname.
     */
    get dirname() {
      return typeof this.path === "string" ? path.dirname(this.path) : void 0;
    }
    /**
     * Set the parent path (example: `'~'`).
     *
     * Cannot be set if there’s no `path` yet.
     *
     * @param {string | undefined} dirname
     *   Dirname.
     * @returns {undefined}
     *   Nothing.
     */
    set dirname(dirname2) {
      assertPath2(this.basename, "dirname");
      this.path = path.join(dirname2 || "", this.basename);
    }
    /**
     * Get the extname (including dot) (example: `'.js'`).
     *
     * @returns {string | undefined}
     *   Extname.
     */
    get extname() {
      return typeof this.path === "string" ? path.extname(this.path) : void 0;
    }
    /**
     * Set the extname (including dot) (example: `'.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be set if there’s no `path` yet.
     *
     * @param {string | undefined} extname
     *   Extname.
     * @returns {undefined}
     *   Nothing.
     */
    set extname(extname2) {
      assertPart(extname2, "extname");
      assertPath2(this.dirname, "extname");
      if (extname2) {
        if (extname2.codePointAt(0) !== 46) {
          throw new Error("`extname` must start with `.`");
        }
        if (extname2.includes(".", 1)) {
          throw new Error("`extname` cannot contain multiple dots");
        }
      }
      this.path = path.join(this.dirname, this.stem + (extname2 || ""));
    }
    /**
     * Get the full path (example: `'~/index.min.js'`).
     *
     * @returns {string}
     *   Path.
     */
    get path() {
      return this.history[this.history.length - 1];
    }
    /**
     * Set the full path (example: `'~/index.min.js'`).
     *
     * Cannot be nullified.
     * You can set a file URL (a `URL` object with a `file:` protocol) which will
     * be turned into a path with `url.fileURLToPath`.
     *
     * @param {URL | string} path
     *   Path.
     * @returns {undefined}
     *   Nothing.
     */
    set path(path3) {
      if (isUrl(path3)) {
        path3 = urlToPath(path3);
      }
      assertNonEmpty(path3, "path");
      if (this.path !== path3) {
        this.history.push(path3);
      }
    }
    /**
     * Get the stem (basename w/o extname) (example: `'index.min'`).
     *
     * @returns {string | undefined}
     *   Stem.
     */
    get stem() {
      return typeof this.path === "string" ? path.basename(this.path, this.extname) : void 0;
    }
    /**
     * Set the stem (basename w/o extname) (example: `'index.min'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     *
     * @param {string} stem
     *   Stem.
     * @returns {undefined}
     *   Nothing.
     */
    set stem(stem) {
      assertNonEmpty(stem, "stem");
      assertPart(stem, "stem");
      this.path = path.join(this.dirname || "", stem + (this.extname || ""));
    }
    // Normal prototypal methods.
    /**
     * Create a fatal message for `reason` associated with the file.
     *
     * The `fatal` field of the message is set to `true` (error; file not usable)
     * and the `file` field is set to the current file path.
     * The message is added to the `messages` field on `file`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {MessageOptions | null | undefined} [options]
     * @returns {never}
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {never}
     *   Never.
     * @throws {VFileMessage}
     *   Message.
     */
    fail(causeOrReason, optionsOrParentOrPlace, origin) {
      const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
      message.fatal = true;
      throw message;
    }
    /**
     * Create an info message for `reason` associated with the file.
     *
     * The `fatal` field of the message is set to `undefined` (info; change
     * likely not needed) and the `file` field is set to the current file path.
     * The message is added to the `messages` field on `file`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {MessageOptions | null | undefined} [options]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    info(causeOrReason, optionsOrParentOrPlace, origin) {
      const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
      message.fatal = void 0;
      return message;
    }
    /**
     * Create a message for `reason` associated with the file.
     *
     * The `fatal` field of the message is set to `false` (warning; change may be
     * needed) and the `file` field is set to the current file path.
     * The message is added to the `messages` field on `file`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {MessageOptions | null | undefined} [options]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    message(causeOrReason, optionsOrParentOrPlace, origin) {
      const message = new VFileMessage(
        // @ts-expect-error: the overloads are fine.
        causeOrReason,
        optionsOrParentOrPlace,
        origin
      );
      if (this.path) {
        message.name = this.path + ":" + message.name;
        message.file = this.path;
      }
      message.fatal = false;
      this.messages.push(message);
      return message;
    }
    /**
     * Serialize the file.
     *
     * > **Note**: which encodings are supported depends on the engine.
     * > For info on Node.js, see:
     * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
     *
     * @param {string | null | undefined} [encoding='utf8']
     *   Character encoding to understand `value` as when it’s a `Uint8Array`
     *   (default: `'utf-8'`).
     * @returns {string}
     *   Serialized file.
     */
    toString(encoding) {
      if (this.value === void 0) {
        return "";
      }
      if (typeof this.value === "string") {
        return this.value;
      }
      const decoder = new TextDecoder(encoding || void 0);
      return decoder.decode(this.value);
    }
  };
  function assertPart(part, name2) {
    if (part && part.includes(path.sep)) {
      throw new Error(
        "`" + name2 + "` cannot be a path: did not expect `" + path.sep + "`"
      );
    }
  }
  function assertNonEmpty(part, name2) {
    if (!part) {
      throw new Error("`" + name2 + "` cannot be empty");
    }
  }
  function assertPath2(path3, name2) {
    if (!path3) {
      throw new Error("Setting `" + name2 + "` requires `path` to be set too");
    }
  }
  function isUint8Array(value) {
    return Boolean(
      value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
    );
  }

  // node_modules/unified/lib/callable-instance.js
  var CallableInstance = (
    /**
     * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
     */
    /** @type {unknown} */
    /**
     * @this {Function}
     * @param {string | symbol} property
     * @returns {(...parameters: Array<unknown>) => unknown}
     */
    function(property) {
      const self2 = this;
      const constr = self2.constructor;
      const proto = (
        /** @type {Record<string | symbol, Function>} */
        // Prototypes do exist.
        // type-coverage:ignore-next-line
        constr.prototype
      );
      const func = proto[property];
      const apply2 = function() {
        return func.apply(apply2, arguments);
      };
      Object.setPrototypeOf(apply2, proto);
      const names = Object.getOwnPropertyNames(func);
      for (const p6 of names) {
        const descriptor = Object.getOwnPropertyDescriptor(func, p6);
        if (descriptor)
          Object.defineProperty(apply2, p6, descriptor);
      }
      return apply2;
    }
  );

  // node_modules/unified/lib/index.js
  var own4 = {}.hasOwnProperty;
  var Processor = class _Processor extends CallableInstance {
    /**
     * Create a processor.
     */
    constructor() {
      super("copy");
      this.Compiler = void 0;
      this.Parser = void 0;
      this.attachers = [];
      this.compiler = void 0;
      this.freezeIndex = -1;
      this.frozen = void 0;
      this.namespace = {};
      this.parser = void 0;
      this.transformers = trough();
    }
    /**
     * Copy a processor.
     *
     * @deprecated
     *   This is a private internal method and should not be used.
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *   New *unfrozen* processor ({@link Processor `Processor`}) that is
     *   configured to work the same as its ancestor.
     *   When the descendant processor is configured in the future it does not
     *   affect the ancestral processor.
     */
    copy() {
      const destination = (
        /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
        new _Processor()
      );
      let index2 = -1;
      while (++index2 < this.attachers.length) {
        const attacher = this.attachers[index2];
        destination.use(...attacher);
      }
      destination.data((0, import_extend.default)(true, {}, this.namespace));
      return destination;
    }
    /**
     * Configure the processor with info available to all plugins.
     * Information is stored in an object.
     *
     * Typically, options can be given to a specific plugin, but sometimes it
     * makes sense to have information shared with several plugins.
     * For example, a list of HTML elements that are self-closing, which is
     * needed during all phases.
     *
     * > 👉 **Note**: setting information cannot occur on *frozen* processors.
     * > Call the processor first to create a new unfrozen processor.
     *
     * > 👉 **Note**: to register custom data in TypeScript, augment the
     * > {@link Data `Data`} interface.
     *
     * @example
     *   This example show how to get and set info:
     *
     *   ```js
     *   import {unified} from 'unified'
     *
     *   const processor = unified().data('alpha', 'bravo')
     *
     *   processor.data('alpha') // => 'bravo'
     *
     *   processor.data() // => {alpha: 'bravo'}
     *
     *   processor.data({charlie: 'delta'})
     *
     *   processor.data() // => {charlie: 'delta'}
     *   ```
     *
     * @template {keyof Data} Key
     *
     * @overload
     * @returns {Data}
     *
     * @overload
     * @param {Data} dataset
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @overload
     * @param {Key} key
     * @returns {Data[Key]}
     *
     * @overload
     * @param {Key} key
     * @param {Data[Key]} value
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @param {Data | Key} [key]
     *   Key to get or set, or entire dataset to set, or nothing to get the
     *   entire dataset (optional).
     * @param {Data[Key]} [value]
     *   Value to set (optional).
     * @returns {unknown}
     *   The current processor when setting, the value at `key` when getting, or
     *   the entire dataset when getting without key.
     */
    data(key, value) {
      if (typeof key === "string") {
        if (arguments.length === 2) {
          assertUnfrozen("data", this.frozen);
          this.namespace[key] = value;
          return this;
        }
        return own4.call(this.namespace, key) && this.namespace[key] || void 0;
      }
      if (key) {
        assertUnfrozen("data", this.frozen);
        this.namespace = key;
        return this;
      }
      return this.namespace;
    }
    /**
     * Freeze a processor.
     *
     * Frozen processors are meant to be extended and not to be configured
     * directly.
     *
     * When a processor is frozen it cannot be unfrozen.
     * New processors working the same way can be created by calling the
     * processor.
     *
     * It’s possible to freeze processors explicitly by calling `.freeze()`.
     * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
     * `.stringify()`, `.process()`, or `.processSync()` are called.
     *
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *   The current processor.
     */
    freeze() {
      if (this.frozen) {
        return this;
      }
      const self2 = (
        /** @type {Processor} */
        /** @type {unknown} */
        this
      );
      while (++this.freezeIndex < this.attachers.length) {
        const [attacher, ...options] = this.attachers[this.freezeIndex];
        if (options[0] === false) {
          continue;
        }
        if (options[0] === true) {
          options[0] = void 0;
        }
        const transformer = attacher.call(self2, ...options);
        if (typeof transformer === "function") {
          this.transformers.use(transformer);
        }
      }
      this.frozen = true;
      this.freezeIndex = Number.POSITIVE_INFINITY;
      return this;
    }
    /**
     * Parse text to a syntax tree.
     *
     * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.
     *
     * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other
     * > phases.
     *
     * @param {Compatible | undefined} [file]
     *   file to parse (optional); typically `string` or `VFile`; any value
     *   accepted as `x` in `new VFile(x)`.
     * @returns {ParseTree extends undefined ? Node : ParseTree}
     *   Syntax tree representing `file`.
     */
    parse(file) {
      this.freeze();
      const realFile = vfile(file);
      const parser2 = this.parser || this.Parser;
      assertParser("parse", parser2);
      return parser2(String(realFile), realFile);
    }
    /**
     * Process the given file as configured on the processor.
     *
     * > 👉 **Note**: `process` freezes the processor if not already *frozen*.
     *
     * > 👉 **Note**: `process` performs the parse, run, and stringify phases.
     *
     * @overload
     * @param {Compatible | undefined} file
     * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
     * @returns {undefined}
     *
     * @overload
     * @param {Compatible | undefined} [file]
     * @returns {Promise<VFileWithOutput<CompileResult>>}
     *
     * @param {Compatible | undefined} [file]
     *   File (optional); typically `string` or `VFile`]; any value accepted as
     *   `x` in `new VFile(x)`.
     * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
     *   Callback (optional).
     * @returns {Promise<VFile> | undefined}
     *   Nothing if `done` is given.
     *   Otherwise a promise, rejected with a fatal error or resolved with the
     *   processed file.
     *
     *   The parsed, transformed, and compiled value is available at
     *   `file.value` (see note).
     *
     *   > 👉 **Note**: unified typically compiles by serializing: most
     *   > compilers return `string` (or `Uint8Array`).
     *   > Some compilers, such as the one configured with
     *   > [`rehype-react`][rehype-react], return other values (in this case, a
     *   > React tree).
     *   > If you’re using a compiler that doesn’t serialize, expect different
     *   > result values.
     *   >
     *   > To register custom results in TypeScript, add them to
     *   > {@link CompileResultMap `CompileResultMap`}.
     *
     *   [rehype-react]: https://github.com/rehypejs/rehype-react
     */
    process(file, done) {
      const self2 = this;
      this.freeze();
      assertParser("process", this.parser || this.Parser);
      assertCompiler("process", this.compiler || this.Compiler);
      return done ? executor(void 0, done) : new Promise(executor);
      function executor(resolve, reject) {
        const realFile = vfile(file);
        const parseTree = (
          /** @type {HeadTree extends undefined ? Node : HeadTree} */
          /** @type {unknown} */
          self2.parse(realFile)
        );
        self2.run(parseTree, realFile, function(error, tree, file2) {
          if (error || !tree || !file2) {
            return realDone(error);
          }
          const compileTree = (
            /** @type {CompileTree extends undefined ? Node : CompileTree} */
            /** @type {unknown} */
            tree
          );
          const compileResult = self2.stringify(compileTree, file2);
          if (looksLikeAValue(compileResult)) {
            file2.value = compileResult;
          } else {
            file2.result = compileResult;
          }
          realDone(
            error,
            /** @type {VFileWithOutput<CompileResult>} */
            file2
          );
        });
        function realDone(error, file2) {
          if (error || !file2) {
            reject(error);
          } else if (resolve) {
            resolve(file2);
          } else {
            ok2(done, "`done` is defined if `resolve` is not");
            done(void 0, file2);
          }
        }
      }
    }
    /**
     * Process the given file as configured on the processor.
     *
     * An error is thrown if asynchronous transforms are configured.
     *
     * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.
     *
     * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.
     *
     * @param {Compatible | undefined} [file]
     *   File (optional); typically `string` or `VFile`; any value accepted as
     *   `x` in `new VFile(x)`.
     * @returns {VFileWithOutput<CompileResult>}
     *   The processed file.
     *
     *   The parsed, transformed, and compiled value is available at
     *   `file.value` (see note).
     *
     *   > 👉 **Note**: unified typically compiles by serializing: most
     *   > compilers return `string` (or `Uint8Array`).
     *   > Some compilers, such as the one configured with
     *   > [`rehype-react`][rehype-react], return other values (in this case, a
     *   > React tree).
     *   > If you’re using a compiler that doesn’t serialize, expect different
     *   > result values.
     *   >
     *   > To register custom results in TypeScript, add them to
     *   > {@link CompileResultMap `CompileResultMap`}.
     *
     *   [rehype-react]: https://github.com/rehypejs/rehype-react
     */
    processSync(file) {
      let complete = false;
      let result;
      this.freeze();
      assertParser("processSync", this.parser || this.Parser);
      assertCompiler("processSync", this.compiler || this.Compiler);
      this.process(file, realDone);
      assertDone("processSync", "process", complete);
      ok2(result, "we either bailed on an error or have a tree");
      return result;
      function realDone(error, file2) {
        complete = true;
        bail(error);
        result = file2;
      }
    }
    /**
     * Run *transformers* on a syntax tree.
     *
     * > 👉 **Note**: `run` freezes the processor if not already *frozen*.
     *
     * > 👉 **Note**: `run` performs the run phase, not other phases.
     *
     * @overload
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
     * @returns {undefined}
     *
     * @overload
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     * @param {Compatible | undefined} file
     * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
     * @returns {undefined}
     *
     * @overload
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     * @param {Compatible | undefined} [file]
     * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
     *
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     *   Tree to transform and inspect.
     * @param {(
     *   RunCallback<TailTree extends undefined ? Node : TailTree> |
     *   Compatible
     * )} [file]
     *   File associated with `node` (optional); any value accepted as `x` in
     *   `new VFile(x)`.
     * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
     *   Callback (optional).
     * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
     *   Nothing if `done` is given.
     *   Otherwise, a promise rejected with a fatal error or resolved with the
     *   transformed tree.
     */
    run(tree, file, done) {
      assertNode(tree);
      this.freeze();
      const transformers = this.transformers;
      if (!done && typeof file === "function") {
        done = file;
        file = void 0;
      }
      return done ? executor(void 0, done) : new Promise(executor);
      function executor(resolve, reject) {
        ok2(
          typeof file !== "function",
          "`file` can\u2019t be a `done` anymore, we checked"
        );
        const realFile = vfile(file);
        transformers.run(tree, realFile, realDone);
        function realDone(error, outputTree, file2) {
          const resultingTree = (
            /** @type {TailTree extends undefined ? Node : TailTree} */
            outputTree || tree
          );
          if (error) {
            reject(error);
          } else if (resolve) {
            resolve(resultingTree);
          } else {
            ok2(done, "`done` is defined if `resolve` is not");
            done(void 0, resultingTree, file2);
          }
        }
      }
    }
    /**
     * Run *transformers* on a syntax tree.
     *
     * An error is thrown if asynchronous transforms are configured.
     *
     * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.
     *
     * > 👉 **Note**: `runSync` performs the run phase, not other phases.
     *
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     *   Tree to transform and inspect.
     * @param {Compatible | undefined} [file]
     *   File associated with `node` (optional); any value accepted as `x` in
     *   `new VFile(x)`.
     * @returns {TailTree extends undefined ? Node : TailTree}
     *   Transformed tree.
     */
    runSync(tree, file) {
      let complete = false;
      let result;
      this.run(tree, file, realDone);
      assertDone("runSync", "run", complete);
      ok2(result, "we either bailed on an error or have a tree");
      return result;
      function realDone(error, tree2) {
        bail(error);
        result = tree2;
        complete = true;
      }
    }
    /**
     * Compile a syntax tree.
     *
     * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.
     *
     * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase
     * > or other phases.
     *
     * @param {CompileTree extends undefined ? Node : CompileTree} tree
     *   Tree to compile.
     * @param {Compatible | undefined} [file]
     *   File associated with `node` (optional); any value accepted as `x` in
     *   `new VFile(x)`.
     * @returns {CompileResult extends undefined ? Value : CompileResult}
     *   Textual representation of the tree (see note).
     *
     *   > 👉 **Note**: unified typically compiles by serializing: most compilers
     *   > return `string` (or `Uint8Array`).
     *   > Some compilers, such as the one configured with
     *   > [`rehype-react`][rehype-react], return other values (in this case, a
     *   > React tree).
     *   > If you’re using a compiler that doesn’t serialize, expect different
     *   > result values.
     *   >
     *   > To register custom results in TypeScript, add them to
     *   > {@link CompileResultMap `CompileResultMap`}.
     *
     *   [rehype-react]: https://github.com/rehypejs/rehype-react
     */
    stringify(tree, file) {
      this.freeze();
      const realFile = vfile(file);
      const compiler2 = this.compiler || this.Compiler;
      assertCompiler("stringify", compiler2);
      assertNode(tree);
      return compiler2(tree, realFile);
    }
    /**
     * Configure the processor to use a plugin, a list of usable values, or a
     * preset.
     *
     * If the processor is already using a plugin, the previous plugin
     * configuration is changed based on the options that are passed in.
     * In other words, the plugin is not added a second time.
     *
     * > 👉 **Note**: `use` cannot be called on *frozen* processors.
     * > Call the processor first to create a new unfrozen processor.
     *
     * @example
     *   There are many ways to pass plugins to `.use()`.
     *   This example gives an overview:
     *
     *   ```js
     *   import {unified} from 'unified'
     *
     *   unified()
     *     // Plugin with options:
     *     .use(pluginA, {x: true, y: true})
     *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
     *     .use(pluginA, {y: false, z: true})
     *     // Plugins:
     *     .use([pluginB, pluginC])
     *     // Two plugins, the second with options:
     *     .use([pluginD, [pluginE, {}]])
     *     // Preset with plugins and settings:
     *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
     *     // Settings only:
     *     .use({settings: {position: false}})
     *   ```
     *
     * @template {Array<unknown>} [Parameters=[]]
     * @template {Node | string | undefined} [Input=undefined]
     * @template [Output=Input]
     *
     * @overload
     * @param {Preset | null | undefined} [preset]
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @overload
     * @param {PluggableList} list
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @overload
     * @param {Plugin<Parameters, Input, Output>} plugin
     * @param {...(Parameters | [boolean])} parameters
     * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
     *
     * @param {PluggableList | Plugin | Preset | null | undefined} value
     *   Usable value.
     * @param {...unknown} parameters
     *   Parameters, when a plugin is given as a usable value.
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *   Current processor.
     */
    use(value, ...parameters) {
      const attachers = this.attachers;
      const namespace = this.namespace;
      assertUnfrozen("use", this.frozen);
      if (value === null || value === void 0) {
      } else if (typeof value === "function") {
        addPlugin(value, parameters);
      } else if (typeof value === "object") {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value + "`");
      }
      return this;
      function add2(value2) {
        if (typeof value2 === "function") {
          addPlugin(value2, []);
        } else if (typeof value2 === "object") {
          if (Array.isArray(value2)) {
            const [plugin2, ...parameters2] = (
              /** @type {PluginTuple<Array<unknown>>} */
              value2
            );
            addPlugin(plugin2, parameters2);
          } else {
            addPreset(value2);
          }
        } else {
          throw new TypeError("Expected usable value, not `" + value2 + "`");
        }
      }
      function addPreset(result) {
        if (!("plugins" in result) && !("settings" in result)) {
          throw new Error(
            "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
          );
        }
        addList(result.plugins);
        if (result.settings) {
          namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
        }
      }
      function addList(plugins) {
        let index2 = -1;
        if (plugins === null || plugins === void 0) {
        } else if (Array.isArray(plugins)) {
          while (++index2 < plugins.length) {
            const thing = plugins[index2];
            add2(thing);
          }
        } else {
          throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
        }
      }
      function addPlugin(plugin2, parameters2) {
        let index2 = -1;
        let entryIndex = -1;
        while (++index2 < attachers.length) {
          if (attachers[index2][0] === plugin2) {
            entryIndex = index2;
            break;
          }
        }
        if (entryIndex === -1) {
          attachers.push([plugin2, ...parameters2]);
        } else if (parameters2.length > 0) {
          let [primary, ...rest] = parameters2;
          const currentPrimary = attachers[entryIndex][1];
          if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
            primary = (0, import_extend.default)(true, currentPrimary, primary);
          }
          attachers[entryIndex] = [plugin2, primary, ...rest];
        }
      }
    }
  };
  var unified = new Processor().freeze();
  function assertParser(name2, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name2 + "` without `parser`");
    }
  }
  function assertCompiler(name2, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name2 + "` without `compiler`");
    }
  }
  function assertUnfrozen(name2, frozen) {
    if (frozen) {
      throw new Error(
        "Cannot call `" + name2 + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
      );
    }
  }
  function assertNode(node2) {
    if (!isPlainObject(node2) || typeof node2.type !== "string") {
      throw new TypeError("Expected node, got `" + node2 + "`");
    }
  }
  function assertDone(name2, asyncName, complete) {
    if (!complete) {
      throw new Error(
        "`" + name2 + "` finished async. Use `" + asyncName + "` instead"
      );
    }
  }
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
  }
  function looksLikeAVFile(value) {
    return Boolean(
      value && typeof value === "object" && "message" in value && "messages" in value
    );
  }
  function looksLikeAValue(value) {
    return typeof value === "string" || isUint8Array2(value);
  }
  function isUint8Array2(value) {
    return Boolean(
      value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
    );
  }

  // node_modules/@milkdown/transformer/lib/index.es.js
  var G2 = (p6, h3, n5) => {
    if (!h3.has(p6))
      throw TypeError("Cannot " + n5);
  };
  var r = (p6, h3, n5) => (G2(p6, h3, "read from private field"), n5 ? n5.call(p6) : h3.get(p6));
  var c2 = (p6, h3, n5) => {
    if (h3.has(p6))
      throw TypeError("Cannot add the same private member more than once");
    h3 instanceof WeakSet ? h3.add(p6) : h3.set(p6, n5);
  };
  var o = (p6, h3, n5, t4) => (G2(p6, h3, "write to private field"), t4 ? t4.call(p6, n5) : h3.set(p6, n5), n5);
  var Q = class {
  };
  var U2 = class {
    constructor() {
      this.elements = [], this.size = () => this.elements.length, this.top = () => this.elements.at(-1), this.push = (h3) => {
        var n5;
        (n5 = this.top()) == null || n5.push(h3);
      }, this.open = (h3) => {
        this.elements.push(h3);
      }, this.close = () => {
        const h3 = this.elements.pop();
        if (!h3)
          throw h();
        return h3;
      };
    }
  };
  var B = class _B extends Q {
    constructor(h3, n5, t4) {
      super(), this.type = h3, this.content = n5, this.attrs = t4;
    }
    push(h3, ...n5) {
      this.content.push(h3, ...n5);
    }
    pop() {
      return this.content.pop();
    }
    static create(h3, n5, t4) {
      return new _B(h3, n5, t4);
    }
  };
  var d3;
  var N;
  var O;
  var T2;
  var F2;
  var k2;
  var M3;
  var S3 = class S4 extends U2 {
    /// @internal
    constructor(n5) {
      super();
      c2(this, d3, void 0);
      c2(this, N, void 0);
      c2(this, O, void 0);
      c2(this, T2, void 0);
      c2(this, F2, void 0);
      c2(this, k2, void 0);
      c2(this, M3, void 0);
      o(this, d3, Mark.none), o(this, N, (t4) => t4.isText), o(this, O, (t4, s4) => {
        if (r(this, N).call(this, t4) && r(this, N).call(this, s4) && Mark.sameSet(t4.marks, s4.marks))
          return this.schema.text(t4.text + s4.text, t4.marks);
      }), o(this, T2, (t4) => {
        const s4 = Object.values(__spreadValues(__spreadValues({}, this.schema.nodes), this.schema.marks)).find((e3) => e3.spec.parseMarkdown.match(t4));
        if (!s4)
          throw w(t4);
        return s4;
      }), o(this, F2, (t4) => {
        const s4 = r(this, T2).call(this, t4);
        s4.spec.parseMarkdown.runner(this, t4, s4);
      }), this.injectRoot = (t4, s4, e3) => (this.openNode(s4, e3), this.next(t4.children), this), this.openNode = (t4, s4) => (this.open(B.create(t4, [], s4)), this), o(this, k2, () => {
        o(this, d3, Mark.none);
        const t4 = this.close();
        return r(this, M3).call(this, t4.type, t4.attrs, t4.content);
      }), this.closeNode = () => (r(this, k2).call(this), this), o(this, M3, (t4, s4, e3) => {
        const i3 = t4.createAndFill(s4, e3, r(this, d3));
        if (!i3)
          throw g(t4, s4, e3);
        return this.push(i3), i3;
      }), this.addNode = (t4, s4, e3) => (r(this, M3).call(this, t4, s4, e3), this), this.openMark = (t4, s4) => {
        const e3 = t4.create(s4);
        return o(this, d3, e3.addToSet(r(this, d3))), this;
      }, this.closeMark = (t4) => (o(this, d3, t4.removeFromSet(r(this, d3))), this), this.addText = (t4) => {
        const s4 = this.top();
        if (!s4)
          throw h();
        const e3 = s4.pop(), i3 = this.schema.text(t4, r(this, d3));
        if (!e3)
          return s4.push(i3), this;
        const a2 = r(this, O).call(this, e3, i3);
        return a2 ? (s4.push(a2), this) : (s4.push(e3, i3), this);
      }, this.build = () => {
        let t4;
        do
          t4 = r(this, k2).call(this);
        while (this.size());
        return t4;
      }, this.next = (t4 = []) => ([t4].flat().forEach((s4) => r(this, F2).call(this, s4)), this), this.toDoc = () => this.build(), this.run = (t4, s4) => {
        const e3 = t4.runSync(t4.parse(s4), s4);
        return this.next(e3), this;
      }, this.schema = n5;
    }
  };
  d3 = /* @__PURE__ */ new WeakMap(), N = /* @__PURE__ */ new WeakMap(), O = /* @__PURE__ */ new WeakMap(), T2 = /* @__PURE__ */ new WeakMap(), F2 = /* @__PURE__ */ new WeakMap(), k2 = /* @__PURE__ */ new WeakMap(), M3 = /* @__PURE__ */ new WeakMap(), S3.create = (n5, t4) => {
    const s4 = new S3(n5);
    return (e3) => (s4.run(t4, e3), s4.toDoc());
  };
  var H2 = S3;
  var q2 = class q3 extends Q {
    constructor(h3, n5, t4, s4 = {}) {
      super(), this.type = h3, this.children = n5, this.value = t4, this.props = s4, this.push = (e3, ...i3) => {
        this.children || (this.children = []), this.children.push(e3, ...i3);
      }, this.pop = () => {
        var e3;
        return (e3 = this.children) == null ? void 0 : e3.pop();
      };
    }
  };
  q2.create = (h3, n5, t4, s4 = {}) => new q2(h3, n5, t4, s4);
  var J2 = q2;
  var Z = (p6) => Object.prototype.hasOwnProperty.call(p6, "size");
  var l3;
  var v;
  var A2;
  var E2;
  var w3;
  var j2;
  var x3;
  var R2;
  var m2;
  var g3;
  var C3;
  var P2;
  var z = class z2 extends U2 {
    /// @internal
    constructor(n5) {
      super();
      c2(this, l3, void 0);
      c2(this, v, void 0);
      c2(this, A2, void 0);
      c2(this, E2, void 0);
      c2(this, w3, void 0);
      c2(this, j2, void 0);
      c2(this, x3, void 0);
      c2(this, R2, void 0);
      c2(this, m2, void 0);
      c2(this, g3, void 0);
      c2(this, C3, void 0);
      c2(this, P2, void 0);
      o(this, l3, Mark.none), o(this, v, (t4) => {
        const s4 = Object.values(__spreadValues(__spreadValues({}, this.schema.nodes), this.schema.marks)).find((e3) => e3.spec.toMarkdown.match(t4));
        if (!s4)
          throw F(t4.type);
        return s4;
      }), o(this, A2, (t4) => r(this, v).call(this, t4).spec.toMarkdown.runner(this, t4)), o(this, E2, (t4, s4) => r(this, v).call(this, t4).spec.toMarkdown.runner(this, t4, s4)), o(this, w3, (t4) => {
        const { marks: s4 } = t4, e3 = (u5) => {
          var _a2;
          return (_a2 = u5.type.spec.priority) != null ? _a2 : 50;
        };
        [...s4].sort((u5, f3) => e3(u5) - e3(f3)).every((u5) => !r(this, E2).call(this, u5, t4)) && r(this, A2).call(this, t4), s4.forEach((u5) => r(this, P2).call(this, u5));
      }), o(this, j2, (t4, s4) => {
        var f3;
        if (t4.type === s4 || ((f3 = t4.children) == null ? void 0 : f3.length) !== 1)
          return t4;
        const e3 = (y4) => {
          var I4;
          if (y4.type === s4)
            return y4;
          if (((I4 = y4.children) == null ? void 0 : I4.length) !== 1)
            return null;
          const [b4] = y4.children;
          return b4 ? e3(b4) : null;
        }, i3 = e3(t4);
        if (!i3)
          return t4;
        const a2 = i3.children ? [...i3.children] : void 0, u5 = __spreadProps(__spreadValues({}, t4), { children: a2 });
        return u5.children = a2, i3.children = [u5], i3;
      }), o(this, x3, (t4) => {
        const { children: s4 } = t4;
        return s4 && (t4.children = s4.reduce((e3, i3, a2) => {
          if (a2 === 0)
            return [i3];
          const u5 = e3.at(-1);
          if (u5 && u5.isMark && i3.isMark) {
            i3 = r(this, j2).call(this, i3, u5.type);
            const _a2 = i3, { children: f3 } = _a2, y4 = __objRest(_a2, ["children"]), _b = u5, { children: b4 } = _b, I4 = __objRest(_b, ["children"]);
            if (i3.type === u5.type && f3 && b4 && JSON.stringify(y4) === JSON.stringify(I4)) {
              const V4 = __spreadProps(__spreadValues({}, I4), {
                children: [...b4, ...f3]
              });
              return e3.slice(0, -1).concat(r(this, x3).call(this, V4));
            }
          }
          return e3.concat(i3);
        }, [])), t4;
      }), o(this, R2, (t4) => {
        const s4 = __spreadProps(__spreadValues({}, t4.props), {
          type: t4.type
        });
        return t4.children && (s4.children = t4.children), t4.value && (s4.value = t4.value), s4;
      }), this.openNode = (t4, s4, e3) => (this.open(J2.create(t4, void 0, s4, e3)), this), o(this, m2, () => {
        const t4 = this.close();
        return r(this, g3).call(this, t4.type, t4.children, t4.value, t4.props);
      }), this.closeNode = () => (r(this, m2).call(this), this), o(this, g3, (t4, s4, e3, i3) => {
        const a2 = J2.create(t4, s4, e3, i3), u5 = r(this, x3).call(this, r(this, R2).call(this, a2));
        return this.push(u5), u5;
      }), this.addNode = (t4, s4, e3, i3) => (r(this, g3).call(this, t4, s4, e3, i3), this), o(this, C3, (t4, s4, e3, i3) => t4.isInSet(r(this, l3)) ? this : (o(this, l3, t4.addToSet(r(this, l3))), this.openNode(s4, e3, __spreadProps(__spreadValues({}, i3), { isMark: true })))), o(this, P2, (t4) => {
        t4.isInSet(r(this, l3)) && (o(this, l3, t4.type.removeFromSet(r(this, l3))), r(this, m2).call(this));
      }), this.withMark = (t4, s4, e3, i3) => (r(this, C3).call(this, t4, s4, e3, i3), this), this.closeMark = (t4) => (r(this, P2).call(this, t4), this), this.build = () => {
        let t4 = null;
        do
          t4 = r(this, m2).call(this);
        while (this.size());
        return t4;
      }, this.next = (t4) => Z(t4) ? (t4.forEach((s4) => {
        r(this, w3).call(this, s4);
      }), this) : (r(this, w3).call(this, t4), this), this.toString = (t4) => t4.stringify(this.build()), this.run = (t4) => (this.next(t4), this), this.schema = n5;
    }
  };
  l3 = /* @__PURE__ */ new WeakMap(), v = /* @__PURE__ */ new WeakMap(), A2 = /* @__PURE__ */ new WeakMap(), E2 = /* @__PURE__ */ new WeakMap(), w3 = /* @__PURE__ */ new WeakMap(), j2 = /* @__PURE__ */ new WeakMap(), x3 = /* @__PURE__ */ new WeakMap(), R2 = /* @__PURE__ */ new WeakMap(), m2 = /* @__PURE__ */ new WeakMap(), g3 = /* @__PURE__ */ new WeakMap(), C3 = /* @__PURE__ */ new WeakMap(), P2 = /* @__PURE__ */ new WeakMap(), z.create = (n5, t4) => {
    const s4 = new z(n5);
    return (e3) => (s4.run(e3), s4.toString(t4));
  };
  var K2 = z;

  // node_modules/prosemirror-transform/dist/index.js
  var lower16 = 65535;
  var factor16 = Math.pow(2, 16);
  function makeRecover(index2, offset) {
    return index2 + offset * factor16;
  }
  function recoverIndex(value) {
    return value & lower16;
  }
  function recoverOffset(value) {
    return (value - (value & lower16)) / factor16;
  }
  var DEL_BEFORE = 1;
  var DEL_AFTER = 2;
  var DEL_ACROSS = 4;
  var DEL_SIDE = 8;
  var MapResult = class {
    /**
    @internal
    */
    constructor(pos, delInfo, recover) {
      this.pos = pos;
      this.delInfo = delInfo;
      this.recover = recover;
    }
    /**
    Tells you whether the position was deleted, that is, whether the
    step removed the token on the side queried (via the `assoc`)
    argument from the document.
    */
    get deleted() {
      return (this.delInfo & DEL_SIDE) > 0;
    }
    /**
    Tells you whether the token before the mapped position was deleted.
    */
    get deletedBefore() {
      return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0;
    }
    /**
    True when the token after the mapped position was deleted.
    */
    get deletedAfter() {
      return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0;
    }
    /**
    Tells whether any of the steps mapped through deletes across the
    position (including both the token before and after the
    position).
    */
    get deletedAcross() {
      return (this.delInfo & DEL_ACROSS) > 0;
    }
  };
  var StepMap = class _StepMap {
    /**
    Create a position map. The modifications to the document are
    represented as an array of numbers, in which each group of three
    represents a modified chunk as `[start, oldSize, newSize]`.
    */
    constructor(ranges, inverted = false) {
      this.ranges = ranges;
      this.inverted = inverted;
      if (!ranges.length && _StepMap.empty)
        return _StepMap.empty;
    }
    /**
    @internal
    */
    recover(value) {
      let diff = 0, index2 = recoverIndex(value);
      if (!this.inverted)
        for (let i3 = 0; i3 < index2; i3++)
          diff += this.ranges[i3 * 3 + 2] - this.ranges[i3 * 3 + 1];
      return this.ranges[index2 * 3] + diff + recoverOffset(value);
    }
    mapResult(pos, assoc = 1) {
      return this._map(pos, assoc, false);
    }
    map(pos, assoc = 1) {
      return this._map(pos, assoc, true);
    }
    /**
    @internal
    */
    _map(pos, assoc, simple) {
      let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
      for (let i3 = 0; i3 < this.ranges.length; i3 += 3) {
        let start = this.ranges[i3] - (this.inverted ? diff : 0);
        if (start > pos)
          break;
        let oldSize = this.ranges[i3 + oldIndex], newSize = this.ranges[i3 + newIndex], end = start + oldSize;
        if (pos <= end) {
          let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
          let result = start + diff + (side < 0 ? 0 : newSize);
          if (simple)
            return result;
          let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i3 / 3, pos - start);
          let del2 = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
          if (assoc < 0 ? pos != start : pos != end)
            del2 |= DEL_SIDE;
          return new MapResult(result, del2, recover);
        }
        diff += newSize - oldSize;
      }
      return simple ? pos + diff : new MapResult(pos + diff, 0, null);
    }
    /**
    @internal
    */
    touches(pos, recover) {
      let diff = 0, index2 = recoverIndex(recover);
      let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
      for (let i3 = 0; i3 < this.ranges.length; i3 += 3) {
        let start = this.ranges[i3] - (this.inverted ? diff : 0);
        if (start > pos)
          break;
        let oldSize = this.ranges[i3 + oldIndex], end = start + oldSize;
        if (pos <= end && i3 == index2 * 3)
          return true;
        diff += this.ranges[i3 + newIndex] - oldSize;
      }
      return false;
    }
    /**
    Calls the given function on each of the changed ranges included in
    this map.
    */
    forEach(f3) {
      let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
      for (let i3 = 0, diff = 0; i3 < this.ranges.length; i3 += 3) {
        let start = this.ranges[i3], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
        let oldSize = this.ranges[i3 + oldIndex], newSize = this.ranges[i3 + newIndex];
        f3(oldStart, oldStart + oldSize, newStart, newStart + newSize);
        diff += newSize - oldSize;
      }
    }
    /**
    Create an inverted version of this map. The result can be used to
    map positions in the post-step document to the pre-step document.
    */
    invert() {
      return new _StepMap(this.ranges, !this.inverted);
    }
    /**
    @internal
    */
    toString() {
      return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
    }
    /**
    Create a map that moves all positions by offset `n` (which may be
    negative). This can be useful when applying steps meant for a
    sub-document to a larger document, or vice-versa.
    */
    static offset(n5) {
      return n5 == 0 ? _StepMap.empty : new _StepMap(n5 < 0 ? [0, -n5, 0] : [0, 0, n5]);
    }
  };
  StepMap.empty = new StepMap([]);
  var Mapping = class _Mapping {
    /**
    Create a new mapping with the given position maps.
    */
    constructor(maps = [], mirror, from2 = 0, to = maps.length) {
      this.maps = maps;
      this.mirror = mirror;
      this.from = from2;
      this.to = to;
    }
    /**
    Create a mapping that maps only through a part of this one.
    */
    slice(from2 = 0, to = this.maps.length) {
      return new _Mapping(this.maps, this.mirror, from2, to);
    }
    /**
    @internal
    */
    copy() {
      return new _Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
    }
    /**
    Add a step map to the end of this mapping. If `mirrors` is
    given, it should be the index of the step map that is the mirror
    image of this one.
    */
    appendMap(map6, mirrors) {
      this.to = this.maps.push(map6);
      if (mirrors != null)
        this.setMirror(this.maps.length - 1, mirrors);
    }
    /**
    Add all the step maps in a given mapping to this one (preserving
    mirroring information).
    */
    appendMapping(mapping) {
      for (let i3 = 0, startSize = this.maps.length; i3 < mapping.maps.length; i3++) {
        let mirr = mapping.getMirror(i3);
        this.appendMap(mapping.maps[i3], mirr != null && mirr < i3 ? startSize + mirr : void 0);
      }
    }
    /**
    Finds the offset of the step map that mirrors the map at the
    given offset, in this mapping (as per the second argument to
    `appendMap`).
    */
    getMirror(n5) {
      if (this.mirror) {
        for (let i3 = 0; i3 < this.mirror.length; i3++)
          if (this.mirror[i3] == n5)
            return this.mirror[i3 + (i3 % 2 ? -1 : 1)];
      }
    }
    /**
    @internal
    */
    setMirror(n5, m4) {
      if (!this.mirror)
        this.mirror = [];
      this.mirror.push(n5, m4);
    }
    /**
    Append the inverse of the given mapping to this one.
    */
    appendMappingInverted(mapping) {
      for (let i3 = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i3 >= 0; i3--) {
        let mirr = mapping.getMirror(i3);
        this.appendMap(mapping.maps[i3].invert(), mirr != null && mirr > i3 ? totalSize - mirr - 1 : void 0);
      }
    }
    /**
    Create an inverted version of this mapping.
    */
    invert() {
      let inverse = new _Mapping();
      inverse.appendMappingInverted(this);
      return inverse;
    }
    /**
    Map a position through this mapping.
    */
    map(pos, assoc = 1) {
      if (this.mirror)
        return this._map(pos, assoc, true);
      for (let i3 = this.from; i3 < this.to; i3++)
        pos = this.maps[i3].map(pos, assoc);
      return pos;
    }
    /**
    Map a position through this mapping, returning a mapping
    result.
    */
    mapResult(pos, assoc = 1) {
      return this._map(pos, assoc, false);
    }
    /**
    @internal
    */
    _map(pos, assoc, simple) {
      let delInfo = 0;
      for (let i3 = this.from; i3 < this.to; i3++) {
        let map6 = this.maps[i3], result = map6.mapResult(pos, assoc);
        if (result.recover != null) {
          let corr = this.getMirror(i3);
          if (corr != null && corr > i3 && corr < this.to) {
            i3 = corr;
            pos = this.maps[corr].recover(result.recover);
            continue;
          }
        }
        delInfo |= result.delInfo;
        pos = result.pos;
      }
      return simple ? pos : new MapResult(pos, delInfo, null);
    }
  };
  var stepsByID = /* @__PURE__ */ Object.create(null);
  var Step = class {
    /**
    Get the step map that represents the changes made by this step,
    and which can be used to transform between positions in the old
    and the new document.
    */
    getMap() {
      return StepMap.empty;
    }
    /**
    Try to merge this step with another one, to be applied directly
    after it. Returns the merged step when possible, null if the
    steps can't be merged.
    */
    merge(other) {
      return null;
    }
    /**
    Deserialize a step from its JSON representation. Will call
    through to the step class' own implementation of this method.
    */
    static fromJSON(schema, json) {
      if (!json || !json.stepType)
        throw new RangeError("Invalid input for Step.fromJSON");
      let type = stepsByID[json.stepType];
      if (!type)
        throw new RangeError(`No step type ${json.stepType} defined`);
      return type.fromJSON(schema, json);
    }
    /**
    To be able to serialize steps to JSON, each step needs a string
    ID to attach to its JSON representation. Use this method to
    register an ID for your step classes. Try to pick something
    that's unlikely to clash with steps from other modules.
    */
    static jsonID(id2, stepClass) {
      if (id2 in stepsByID)
        throw new RangeError("Duplicate use of step JSON ID " + id2);
      stepsByID[id2] = stepClass;
      stepClass.prototype.jsonID = id2;
      return stepClass;
    }
  };
  var StepResult = class _StepResult {
    /**
    @internal
    */
    constructor(doc5, failed) {
      this.doc = doc5;
      this.failed = failed;
    }
    /**
    Create a successful step result.
    */
    static ok(doc5) {
      return new _StepResult(doc5, null);
    }
    /**
    Create a failed step result.
    */
    static fail(message) {
      return new _StepResult(null, message);
    }
    /**
    Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
    arguments. Create a successful result if it succeeds, and a
    failed one if it throws a `ReplaceError`.
    */
    static fromReplace(doc5, from2, to, slice2) {
      try {
        return _StepResult.ok(doc5.replace(from2, to, slice2));
      } catch (e3) {
        if (e3 instanceof ReplaceError)
          return _StepResult.fail(e3.message);
        throw e3;
      }
    }
  };
  function mapFragment(fragment, f3, parent) {
    let mapped = [];
    for (let i3 = 0; i3 < fragment.childCount; i3++) {
      let child = fragment.child(i3);
      if (child.content.size)
        child = child.copy(mapFragment(child.content, f3, child));
      if (child.isInline)
        child = f3(child, parent, i3);
      mapped.push(child);
    }
    return Fragment.fromArray(mapped);
  }
  var AddMarkStep = class _AddMarkStep extends Step {
    /**
    Create a mark step.
    */
    constructor(from2, to, mark) {
      super();
      this.from = from2;
      this.to = to;
      this.mark = mark;
    }
    apply(doc5) {
      let oldSlice = doc5.slice(this.from, this.to), $from = doc5.resolve(this.from);
      let parent = $from.node($from.sharedDepth(this.to));
      let slice2 = new Slice(mapFragment(oldSlice.content, (node2, parent2) => {
        if (!node2.isAtom || !parent2.type.allowsMarkType(this.mark.type))
          return node2;
        return node2.mark(this.mark.addToSet(node2.marks));
      }, parent), oldSlice.openStart, oldSlice.openEnd);
      return StepResult.fromReplace(doc5, this.from, this.to, slice2);
    }
    invert() {
      return new RemoveMarkStep(this.from, this.to, this.mark);
    }
    map(mapping) {
      let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
      if (from2.deleted && to.deleted || from2.pos >= to.pos)
        return null;
      return new _AddMarkStep(from2.pos, to.pos, this.mark);
    }
    merge(other) {
      if (other instanceof _AddMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
        return new _AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
      return null;
    }
    toJSON() {
      return {
        stepType: "addMark",
        mark: this.mark.toJSON(),
        from: this.from,
        to: this.to
      };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number")
        throw new RangeError("Invalid input for AddMarkStep.fromJSON");
      return new _AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
    }
  };
  Step.jsonID("addMark", AddMarkStep);
  var RemoveMarkStep = class _RemoveMarkStep extends Step {
    /**
    Create a mark-removing step.
    */
    constructor(from2, to, mark) {
      super();
      this.from = from2;
      this.to = to;
      this.mark = mark;
    }
    apply(doc5) {
      let oldSlice = doc5.slice(this.from, this.to);
      let slice2 = new Slice(mapFragment(oldSlice.content, (node2) => {
        return node2.mark(this.mark.removeFromSet(node2.marks));
      }, doc5), oldSlice.openStart, oldSlice.openEnd);
      return StepResult.fromReplace(doc5, this.from, this.to, slice2);
    }
    invert() {
      return new AddMarkStep(this.from, this.to, this.mark);
    }
    map(mapping) {
      let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
      if (from2.deleted && to.deleted || from2.pos >= to.pos)
        return null;
      return new _RemoveMarkStep(from2.pos, to.pos, this.mark);
    }
    merge(other) {
      if (other instanceof _RemoveMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
        return new _RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
      return null;
    }
    toJSON() {
      return {
        stepType: "removeMark",
        mark: this.mark.toJSON(),
        from: this.from,
        to: this.to
      };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number")
        throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
      return new _RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
    }
  };
  Step.jsonID("removeMark", RemoveMarkStep);
  var AddNodeMarkStep = class _AddNodeMarkStep extends Step {
    /**
    Create a node mark step.
    */
    constructor(pos, mark) {
      super();
      this.pos = pos;
      this.mark = mark;
    }
    apply(doc5) {
      let node2 = doc5.nodeAt(this.pos);
      if (!node2)
        return StepResult.fail("No node at mark step's position");
      let updated = node2.type.create(node2.attrs, null, this.mark.addToSet(node2.marks));
      return StepResult.fromReplace(doc5, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node2.isLeaf ? 0 : 1));
    }
    invert(doc5) {
      let node2 = doc5.nodeAt(this.pos);
      if (node2) {
        let newSet = this.mark.addToSet(node2.marks);
        if (newSet.length == node2.marks.length) {
          for (let i3 = 0; i3 < node2.marks.length; i3++)
            if (!node2.marks[i3].isInSet(newSet))
              return new _AddNodeMarkStep(this.pos, node2.marks[i3]);
          return new _AddNodeMarkStep(this.pos, this.mark);
        }
      }
      return new RemoveNodeMarkStep(this.pos, this.mark);
    }
    map(mapping) {
      let pos = mapping.mapResult(this.pos, 1);
      return pos.deletedAfter ? null : new _AddNodeMarkStep(pos.pos, this.mark);
    }
    toJSON() {
      return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.pos != "number")
        throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
      return new _AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
    }
  };
  Step.jsonID("addNodeMark", AddNodeMarkStep);
  var RemoveNodeMarkStep = class _RemoveNodeMarkStep extends Step {
    /**
    Create a mark-removing step.
    */
    constructor(pos, mark) {
      super();
      this.pos = pos;
      this.mark = mark;
    }
    apply(doc5) {
      let node2 = doc5.nodeAt(this.pos);
      if (!node2)
        return StepResult.fail("No node at mark step's position");
      let updated = node2.type.create(node2.attrs, null, this.mark.removeFromSet(node2.marks));
      return StepResult.fromReplace(doc5, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node2.isLeaf ? 0 : 1));
    }
    invert(doc5) {
      let node2 = doc5.nodeAt(this.pos);
      if (!node2 || !this.mark.isInSet(node2.marks))
        return this;
      return new AddNodeMarkStep(this.pos, this.mark);
    }
    map(mapping) {
      let pos = mapping.mapResult(this.pos, 1);
      return pos.deletedAfter ? null : new _RemoveNodeMarkStep(pos.pos, this.mark);
    }
    toJSON() {
      return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.pos != "number")
        throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
      return new _RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
    }
  };
  Step.jsonID("removeNodeMark", RemoveNodeMarkStep);
  var ReplaceStep = class _ReplaceStep extends Step {
    /**
    The given `slice` should fit the 'gap' between `from` and
    `to`—the depths must line up, and the surrounding nodes must be
    able to be joined with the open sides of the slice. When
    `structure` is true, the step will fail if the content between
    from and to is not just a sequence of closing and then opening
    tokens (this is to guard against rebased replace steps
    overwriting something they weren't supposed to).
    */
    constructor(from2, to, slice2, structure = false) {
      super();
      this.from = from2;
      this.to = to;
      this.slice = slice2;
      this.structure = structure;
    }
    apply(doc5) {
      if (this.structure && contentBetween(doc5, this.from, this.to))
        return StepResult.fail("Structure replace would overwrite content");
      return StepResult.fromReplace(doc5, this.from, this.to, this.slice);
    }
    getMap() {
      return new StepMap([this.from, this.to - this.from, this.slice.size]);
    }
    invert(doc5) {
      return new _ReplaceStep(this.from, this.from + this.slice.size, doc5.slice(this.from, this.to));
    }
    map(mapping) {
      let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
      if (from2.deletedAcross && to.deletedAcross)
        return null;
      return new _ReplaceStep(from2.pos, Math.max(from2.pos, to.pos), this.slice);
    }
    merge(other) {
      if (!(other instanceof _ReplaceStep) || other.structure || this.structure)
        return null;
      if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
        let slice2 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
        return new _ReplaceStep(this.from, this.to + (other.to - other.from), slice2, this.structure);
      } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
        let slice2 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
        return new _ReplaceStep(other.from, this.to, slice2, this.structure);
      } else {
        return null;
      }
    }
    toJSON() {
      let json = { stepType: "replace", from: this.from, to: this.to };
      if (this.slice.size)
        json.slice = this.slice.toJSON();
      if (this.structure)
        json.structure = true;
      return json;
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number")
        throw new RangeError("Invalid input for ReplaceStep.fromJSON");
      return new _ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
    }
  };
  Step.jsonID("replace", ReplaceStep);
  var ReplaceAroundStep = class _ReplaceAroundStep extends Step {
    /**
    Create a replace-around step with the given range and gap.
    `insert` should be the point in the slice into which the content
    of the gap should be moved. `structure` has the same meaning as
    it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
    */
    constructor(from2, to, gapFrom, gapTo, slice2, insert2, structure = false) {
      super();
      this.from = from2;
      this.to = to;
      this.gapFrom = gapFrom;
      this.gapTo = gapTo;
      this.slice = slice2;
      this.insert = insert2;
      this.structure = structure;
    }
    apply(doc5) {
      if (this.structure && (contentBetween(doc5, this.from, this.gapFrom) || contentBetween(doc5, this.gapTo, this.to)))
        return StepResult.fail("Structure gap-replace would overwrite content");
      let gap = doc5.slice(this.gapFrom, this.gapTo);
      if (gap.openStart || gap.openEnd)
        return StepResult.fail("Gap is not a flat range");
      let inserted = this.slice.insertAt(this.insert, gap.content);
      if (!inserted)
        return StepResult.fail("Content does not fit in gap");
      return StepResult.fromReplace(doc5, this.from, this.to, inserted);
    }
    getMap() {
      return new StepMap([
        this.from,
        this.gapFrom - this.from,
        this.insert,
        this.gapTo,
        this.to - this.gapTo,
        this.slice.size - this.insert
      ]);
    }
    invert(doc5) {
      let gap = this.gapTo - this.gapFrom;
      return new _ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc5.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
    }
    map(mapping) {
      let from2 = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
      let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
      if (from2.deletedAcross && to.deletedAcross || gapFrom < from2.pos || gapTo > to.pos)
        return null;
      return new _ReplaceAroundStep(from2.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
    }
    toJSON() {
      let json = {
        stepType: "replaceAround",
        from: this.from,
        to: this.to,
        gapFrom: this.gapFrom,
        gapTo: this.gapTo,
        insert: this.insert
      };
      if (this.slice.size)
        json.slice = this.slice.toJSON();
      if (this.structure)
        json.structure = true;
      return json;
    }
    /**
    @internal
    */
    static fromJSON(schema, json) {
      if (typeof json.from != "number" || typeof json.to != "number" || typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
        throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
      return new _ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
    }
  };
  Step.jsonID("replaceAround", ReplaceAroundStep);
  function contentBetween(doc5, from2, to) {
    let $from = doc5.resolve(from2), dist2 = to - from2, depth2 = $from.depth;
    while (dist2 > 0 && depth2 > 0 && $from.indexAfter(depth2) == $from.node(depth2).childCount) {
      depth2--;
      dist2--;
    }
    if (dist2 > 0) {
      let next = $from.node(depth2).maybeChild($from.indexAfter(depth2));
      while (dist2 > 0) {
        if (!next || next.isLeaf)
          return true;
        next = next.firstChild;
        dist2--;
      }
    }
    return false;
  }
  function addMark(tr, from2, to, mark) {
    let removed = [], added = [];
    let removing, adding;
    tr.doc.nodesBetween(from2, to, (node2, pos, parent) => {
      if (!node2.isInline)
        return;
      let marks2 = node2.marks;
      if (!mark.isInSet(marks2) && parent.type.allowsMarkType(mark.type)) {
        let start = Math.max(pos, from2), end = Math.min(pos + node2.nodeSize, to);
        let newSet = mark.addToSet(marks2);
        for (let i3 = 0; i3 < marks2.length; i3++) {
          if (!marks2[i3].isInSet(newSet)) {
            if (removing && removing.to == start && removing.mark.eq(marks2[i3]))
              removing.to = end;
            else
              removed.push(removing = new RemoveMarkStep(start, end, marks2[i3]));
          }
        }
        if (adding && adding.to == start)
          adding.to = end;
        else
          added.push(adding = new AddMarkStep(start, end, mark));
      }
    });
    removed.forEach((s4) => tr.step(s4));
    added.forEach((s4) => tr.step(s4));
  }
  function removeMark(tr, from2, to, mark) {
    let matched = [], step = 0;
    tr.doc.nodesBetween(from2, to, (node2, pos) => {
      if (!node2.isInline)
        return;
      step++;
      let toRemove = null;
      if (mark instanceof MarkType) {
        let set = node2.marks, found2;
        while (found2 = mark.isInSet(set)) {
          (toRemove || (toRemove = [])).push(found2);
          set = found2.removeFromSet(set);
        }
      } else if (mark) {
        if (mark.isInSet(node2.marks))
          toRemove = [mark];
      } else {
        toRemove = node2.marks;
      }
      if (toRemove && toRemove.length) {
        let end = Math.min(pos + node2.nodeSize, to);
        for (let i3 = 0; i3 < toRemove.length; i3++) {
          let style = toRemove[i3], found2;
          for (let j6 = 0; j6 < matched.length; j6++) {
            let m4 = matched[j6];
            if (m4.step == step - 1 && style.eq(matched[j6].style))
              found2 = m4;
          }
          if (found2) {
            found2.to = end;
            found2.step = step;
          } else {
            matched.push({ style, from: Math.max(pos, from2), to: end, step });
          }
        }
      }
    });
    matched.forEach((m4) => tr.step(new RemoveMarkStep(m4.from, m4.to, m4.style)));
  }
  function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
    let node2 = tr.doc.nodeAt(pos);
    let replSteps = [], cur2 = pos + 1;
    for (let i3 = 0; i3 < node2.childCount; i3++) {
      let child = node2.child(i3), end = cur2 + child.nodeSize;
      let allowed = match.matchType(child.type);
      if (!allowed) {
        replSteps.push(new ReplaceStep(cur2, end, Slice.empty));
      } else {
        match = allowed;
        for (let j6 = 0; j6 < child.marks.length; j6++)
          if (!parentType.allowsMarkType(child.marks[j6].type))
            tr.step(new RemoveMarkStep(cur2, end, child.marks[j6]));
        if (child.isText && !parentType.spec.code) {
          let m4, newline2 = /\r?\n|\r/g, slice2;
          while (m4 = newline2.exec(child.text)) {
            if (!slice2)
              slice2 = new Slice(Fragment.from(parentType.schema.text(" ", parentType.allowedMarks(child.marks))), 0, 0);
            replSteps.push(new ReplaceStep(cur2 + m4.index, cur2 + m4.index + m4[0].length, slice2));
          }
        }
      }
      cur2 = end;
    }
    if (!match.validEnd) {
      let fill = match.fillBefore(Fragment.empty, true);
      tr.replace(cur2, cur2, new Slice(fill, 0, 0));
    }
    for (let i3 = replSteps.length - 1; i3 >= 0; i3--)
      tr.step(replSteps[i3]);
  }
  function canCut(node2, start, end) {
    return (start == 0 || node2.canReplace(start, node2.childCount)) && (end == node2.childCount || node2.canReplace(0, end));
  }
  function liftTarget(range) {
    let parent = range.parent;
    let content4 = parent.content.cutByIndex(range.startIndex, range.endIndex);
    for (let depth2 = range.depth; ; --depth2) {
      let node2 = range.$from.node(depth2);
      let index2 = range.$from.index(depth2), endIndex = range.$to.indexAfter(depth2);
      if (depth2 < range.depth && node2.canReplace(index2, endIndex, content4))
        return depth2;
      if (depth2 == 0 || node2.type.spec.isolating || !canCut(node2, index2, endIndex))
        break;
    }
    return null;
  }
  function lift(tr, range, target) {
    let { $from, $to, depth: depth2 } = range;
    let gapStart = $from.before(depth2 + 1), gapEnd = $to.after(depth2 + 1);
    let start = gapStart, end = gapEnd;
    let before = Fragment.empty, openStart = 0;
    for (let d6 = depth2, splitting = false; d6 > target; d6--)
      if (splitting || $from.index(d6) > 0) {
        splitting = true;
        before = Fragment.from($from.node(d6).copy(before));
        openStart++;
      } else {
        start--;
      }
    let after = Fragment.empty, openEnd = 0;
    for (let d6 = depth2, splitting = false; d6 > target; d6--)
      if (splitting || $to.after(d6 + 1) < $to.end(d6)) {
        splitting = true;
        after = Fragment.from($to.node(d6).copy(after));
        openEnd++;
      } else {
        end++;
      }
    tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
  }
  function findWrapping(range, nodeType, attrs = null, innerRange = range) {
    let around = findWrappingOutside(range, nodeType);
    let inner = around && findWrappingInside(innerRange, nodeType);
    if (!inner)
      return null;
    return around.map(withAttrs).concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
  }
  function withAttrs(type) {
    return { type, attrs: null };
  }
  function findWrappingOutside(range, type) {
    let { parent, startIndex, endIndex } = range;
    let around = parent.contentMatchAt(startIndex).findWrapping(type);
    if (!around)
      return null;
    let outer = around.length ? around[0] : type;
    return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
  }
  function findWrappingInside(range, type) {
    let { parent, startIndex, endIndex } = range;
    let inner = parent.child(startIndex);
    let inside2 = type.contentMatch.findWrapping(inner.type);
    if (!inside2)
      return null;
    let lastType = inside2.length ? inside2[inside2.length - 1] : type;
    let innerMatch = lastType.contentMatch;
    for (let i3 = startIndex; innerMatch && i3 < endIndex; i3++)
      innerMatch = innerMatch.matchType(parent.child(i3).type);
    if (!innerMatch || !innerMatch.validEnd)
      return null;
    return inside2;
  }
  function wrap2(tr, range, wrappers) {
    let content4 = Fragment.empty;
    for (let i3 = wrappers.length - 1; i3 >= 0; i3--) {
      if (content4.size) {
        let match = wrappers[i3].type.contentMatch.matchFragment(content4);
        if (!match || !match.validEnd)
          throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
      }
      content4 = Fragment.from(wrappers[i3].type.create(wrappers[i3].attrs, content4));
    }
    let start = range.start, end = range.end;
    tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content4, 0, 0), wrappers.length, true));
  }
  function setBlockType(tr, from2, to, type, attrs) {
    if (!type.isTextblock)
      throw new RangeError("Type given to setBlockType should be a textblock");
    let mapFrom = tr.steps.length;
    tr.doc.nodesBetween(from2, to, (node2, pos) => {
      if (node2.isTextblock && !node2.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
        tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
        let mapping = tr.mapping.slice(mapFrom);
        let startM = mapping.map(pos, 1), endM = mapping.map(pos + node2.nodeSize, 1);
        tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node2.marks)), 0, 0), 1, true));
        return false;
      }
    });
  }
  function canChangeType(doc5, pos, type) {
    let $pos = doc5.resolve(pos), index2 = $pos.index();
    return $pos.parent.canReplaceWith(index2, index2 + 1, type);
  }
  function setNodeMarkup(tr, pos, type, attrs, marks2) {
    let node2 = tr.doc.nodeAt(pos);
    if (!node2)
      throw new RangeError("No node at given position");
    if (!type)
      type = node2.type;
    let newNode = type.create(attrs, null, marks2 || node2.marks);
    if (node2.isLeaf)
      return tr.replaceWith(pos, pos + node2.nodeSize, newNode);
    if (!type.validContent(node2.content))
      throw new RangeError("Invalid content for node type " + type.name);
    tr.step(new ReplaceAroundStep(pos, pos + node2.nodeSize, pos + 1, pos + node2.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
  }
  function canSplit(doc5, pos, depth2 = 1, typesAfter) {
    let $pos = doc5.resolve(pos), base2 = $pos.depth - depth2;
    let innerType = typesAfter && typesAfter[typesAfter.length - 1] || $pos.parent;
    if (base2 < 0 || $pos.parent.type.spec.isolating || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
      return false;
    for (let d6 = $pos.depth - 1, i3 = depth2 - 2; d6 > base2; d6--, i3--) {
      let node2 = $pos.node(d6), index3 = $pos.index(d6);
      if (node2.type.spec.isolating)
        return false;
      let rest = node2.content.cutByIndex(index3, node2.childCount);
      let overrideChild = typesAfter && typesAfter[i3 + 1];
      if (overrideChild)
        rest = rest.replaceChild(0, overrideChild.type.create(overrideChild.attrs));
      let after = typesAfter && typesAfter[i3] || node2;
      if (!node2.canReplace(index3 + 1, node2.childCount) || !after.type.validContent(rest))
        return false;
    }
    let index2 = $pos.indexAfter(base2);
    let baseType = typesAfter && typesAfter[0];
    return $pos.node(base2).canReplaceWith(index2, index2, baseType ? baseType.type : $pos.node(base2 + 1).type);
  }
  function split(tr, pos, depth2 = 1, typesAfter) {
    let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
    for (let d6 = $pos.depth, e3 = $pos.depth - depth2, i3 = depth2 - 1; d6 > e3; d6--, i3--) {
      before = Fragment.from($pos.node(d6).copy(before));
      let typeAfter = typesAfter && typesAfter[i3];
      after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d6).copy(after));
    }
    tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth2, depth2), true));
  }
  function canJoin(doc5, pos) {
    let $pos = doc5.resolve(pos), index2 = $pos.index();
    return joinable2($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index2, index2 + 1);
  }
  function joinable2(a2, b4) {
    return !!(a2 && b4 && !a2.isLeaf && a2.canAppend(b4));
  }
  function join3(tr, pos, depth2) {
    let step = new ReplaceStep(pos - depth2, pos + depth2, Slice.empty, true);
    tr.step(step);
  }
  function insertPoint(doc5, pos, nodeType) {
    let $pos = doc5.resolve(pos);
    if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
      return pos;
    if ($pos.parentOffset == 0)
      for (let d6 = $pos.depth - 1; d6 >= 0; d6--) {
        let index2 = $pos.index(d6);
        if ($pos.node(d6).canReplaceWith(index2, index2, nodeType))
          return $pos.before(d6 + 1);
        if (index2 > 0)
          return null;
      }
    if ($pos.parentOffset == $pos.parent.content.size)
      for (let d6 = $pos.depth - 1; d6 >= 0; d6--) {
        let index2 = $pos.indexAfter(d6);
        if ($pos.node(d6).canReplaceWith(index2, index2, nodeType))
          return $pos.after(d6 + 1);
        if (index2 < $pos.node(d6).childCount)
          return null;
      }
    return null;
  }
  function dropPoint(doc5, pos, slice2) {
    let $pos = doc5.resolve(pos);
    if (!slice2.content.size)
      return pos;
    let content4 = slice2.content;
    for (let i3 = 0; i3 < slice2.openStart; i3++)
      content4 = content4.firstChild.content;
    for (let pass = 1; pass <= (slice2.openStart == 0 && slice2.size ? 2 : 1); pass++) {
      for (let d6 = $pos.depth; d6 >= 0; d6--) {
        let bias = d6 == $pos.depth ? 0 : $pos.pos <= ($pos.start(d6 + 1) + $pos.end(d6 + 1)) / 2 ? -1 : 1;
        let insertPos = $pos.index(d6) + (bias > 0 ? 1 : 0);
        let parent = $pos.node(d6), fits = false;
        if (pass == 1) {
          fits = parent.canReplace(insertPos, insertPos, content4);
        } else {
          let wrapping = parent.contentMatchAt(insertPos).findWrapping(content4.firstChild.type);
          fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
        }
        if (fits)
          return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d6 + 1) : $pos.after(d6 + 1);
      }
    }
    return null;
  }
  function replaceStep(doc5, from2, to = from2, slice2 = Slice.empty) {
    if (from2 == to && !slice2.size)
      return null;
    let $from = doc5.resolve(from2), $to = doc5.resolve(to);
    if (fitsTrivially($from, $to, slice2))
      return new ReplaceStep(from2, to, slice2);
    return new Fitter($from, $to, slice2).fit();
  }
  function fitsTrivially($from, $to, slice2) {
    return !slice2.openStart && !slice2.openEnd && $from.start() == $to.start() && $from.parent.canReplace($from.index(), $to.index(), slice2.content);
  }
  var Fitter = class {
    constructor($from, $to, unplaced) {
      this.$from = $from;
      this.$to = $to;
      this.unplaced = unplaced;
      this.frontier = [];
      this.placed = Fragment.empty;
      for (let i3 = 0; i3 <= $from.depth; i3++) {
        let node2 = $from.node(i3);
        this.frontier.push({
          type: node2.type,
          match: node2.contentMatchAt($from.indexAfter(i3))
        });
      }
      for (let i3 = $from.depth; i3 > 0; i3--)
        this.placed = Fragment.from($from.node(i3).copy(this.placed));
    }
    get depth() {
      return this.frontier.length - 1;
    }
    fit() {
      while (this.unplaced.size) {
        let fit = this.findFittable();
        if (fit)
          this.placeNodes(fit);
        else
          this.openMore() || this.dropNode();
      }
      let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
      let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
      if (!$to)
        return null;
      let content4 = this.placed, openStart = $from.depth, openEnd = $to.depth;
      while (openStart && openEnd && content4.childCount == 1) {
        content4 = content4.firstChild.content;
        openStart--;
        openEnd--;
      }
      let slice2 = new Slice(content4, openStart, openEnd);
      if (moveInline > -1)
        return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice2, placedSize);
      if (slice2.size || $from.pos != this.$to.pos)
        return new ReplaceStep($from.pos, $to.pos, slice2);
      return null;
    }
    // Find a position on the start spine of `this.unplaced` that has
    // content that can be moved somewhere on the frontier. Returns two
    // depths, one for the slice and one for the frontier.
    findFittable() {
      let startDepth = this.unplaced.openStart;
      for (let cur2 = this.unplaced.content, d6 = 0, openEnd = this.unplaced.openEnd; d6 < startDepth; d6++) {
        let node2 = cur2.firstChild;
        if (cur2.childCount > 1)
          openEnd = 0;
        if (node2.type.spec.isolating && openEnd <= d6) {
          startDepth = d6;
          break;
        }
        cur2 = node2.content;
      }
      for (let pass = 1; pass <= 2; pass++) {
        for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
          let fragment, parent = null;
          if (sliceDepth) {
            parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
            fragment = parent.content;
          } else {
            fragment = this.unplaced.content;
          }
          let first = fragment.firstChild;
          for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
            let { type, match } = this.frontier[frontierDepth], wrap3, inject = null;
            if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false)) : parent && type.compatibleContent(parent.type)))
              return { sliceDepth, frontierDepth, parent, inject };
            else if (pass == 2 && first && (wrap3 = match.findWrapping(first.type)))
              return { sliceDepth, frontierDepth, parent, wrap: wrap3 };
            if (parent && match.matchType(parent.type))
              break;
          }
        }
      }
    }
    openMore() {
      let { content: content4, openStart, openEnd } = this.unplaced;
      let inner = contentAt(content4, openStart);
      if (!inner.childCount || inner.firstChild.isLeaf)
        return false;
      this.unplaced = new Slice(content4, openStart + 1, Math.max(openEnd, inner.size + openStart >= content4.size - openEnd ? openStart + 1 : 0));
      return true;
    }
    dropNode() {
      let { content: content4, openStart, openEnd } = this.unplaced;
      let inner = contentAt(content4, openStart);
      if (inner.childCount <= 1 && openStart > 0) {
        let openAtEnd = content4.size - openStart <= openStart + inner.size;
        this.unplaced = new Slice(dropFromFragment(content4, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
      } else {
        this.unplaced = new Slice(dropFromFragment(content4, openStart, 1), openStart, openEnd);
      }
    }
    // Move content from the unplaced slice at `sliceDepth` to the
    // frontier node at `frontierDepth`. Close that frontier node when
    // applicable.
    placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap: wrap3 }) {
      while (this.depth > frontierDepth)
        this.closeFrontierNode();
      if (wrap3)
        for (let i3 = 0; i3 < wrap3.length; i3++)
          this.openFrontierNode(wrap3[i3]);
      let slice2 = this.unplaced, fragment = parent ? parent.content : slice2.content;
      let openStart = slice2.openStart - sliceDepth;
      let taken = 0, add2 = [];
      let { match, type } = this.frontier[frontierDepth];
      if (inject) {
        for (let i3 = 0; i3 < inject.childCount; i3++)
          add2.push(inject.child(i3));
        match = match.matchFragment(inject);
      }
      let openEndCount = fragment.size + sliceDepth - (slice2.content.size - slice2.openEnd);
      while (taken < fragment.childCount) {
        let next = fragment.child(taken), matches2 = match.matchType(next.type);
        if (!matches2)
          break;
        taken++;
        if (taken > 1 || openStart == 0 || next.content.size) {
          match = matches2;
          add2.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
        }
      }
      let toEnd = taken == fragment.childCount;
      if (!toEnd)
        openEndCount = -1;
      this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add2));
      this.frontier[frontierDepth].match = match;
      if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
        this.closeFrontierNode();
      for (let i3 = 0, cur2 = fragment; i3 < openEndCount; i3++) {
        let node2 = cur2.lastChild;
        this.frontier.push({ type: node2.type, match: node2.contentMatchAt(node2.childCount) });
        cur2 = node2.content;
      }
      this.unplaced = !toEnd ? new Slice(dropFromFragment(slice2.content, sliceDepth, taken), slice2.openStart, slice2.openEnd) : sliceDepth == 0 ? Slice.empty : new Slice(dropFromFragment(slice2.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice2.openEnd : sliceDepth - 1);
    }
    mustMoveInline() {
      if (!this.$to.parent.isTextblock)
        return -1;
      let top2 = this.frontier[this.depth], level;
      if (!top2.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top2.type, top2.match, false) || this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)
        return -1;
      let { depth: depth2 } = this.$to, after = this.$to.after(depth2);
      while (depth2 > 1 && after == this.$to.end(--depth2))
        ++after;
      return after;
    }
    findCloseLevel($to) {
      scan:
        for (let i3 = Math.min(this.depth, $to.depth); i3 >= 0; i3--) {
          let { match, type } = this.frontier[i3];
          let dropInner = i3 < $to.depth && $to.end(i3 + 1) == $to.pos + ($to.depth - (i3 + 1));
          let fit = contentAfterFits($to, i3, type, match, dropInner);
          if (!fit)
            continue;
          for (let d6 = i3 - 1; d6 >= 0; d6--) {
            let { match: match2, type: type2 } = this.frontier[d6];
            let matches2 = contentAfterFits($to, d6, type2, match2, true);
            if (!matches2 || matches2.childCount)
              continue scan;
          }
          return { depth: i3, fit, move: dropInner ? $to.doc.resolve($to.after(i3 + 1)) : $to };
        }
    }
    close($to) {
      let close2 = this.findCloseLevel($to);
      if (!close2)
        return null;
      while (this.depth > close2.depth)
        this.closeFrontierNode();
      if (close2.fit.childCount)
        this.placed = addToFragment(this.placed, close2.depth, close2.fit);
      $to = close2.move;
      for (let d6 = close2.depth + 1; d6 <= $to.depth; d6++) {
        let node2 = $to.node(d6), add2 = node2.type.contentMatch.fillBefore(node2.content, true, $to.index(d6));
        this.openFrontierNode(node2.type, node2.attrs, add2);
      }
      return $to;
    }
    openFrontierNode(type, attrs = null, content4) {
      let top2 = this.frontier[this.depth];
      top2.match = top2.match.matchType(type);
      this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content4)));
      this.frontier.push({ type, match: type.contentMatch });
    }
    closeFrontierNode() {
      let open = this.frontier.pop();
      let add2 = open.match.fillBefore(Fragment.empty, true);
      if (add2.childCount)
        this.placed = addToFragment(this.placed, this.frontier.length, add2);
    }
  };
  function dropFromFragment(fragment, depth2, count) {
    if (depth2 == 0)
      return fragment.cutByIndex(count, fragment.childCount);
    return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth2 - 1, count)));
  }
  function addToFragment(fragment, depth2, content4) {
    if (depth2 == 0)
      return fragment.append(content4);
    return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth2 - 1, content4)));
  }
  function contentAt(fragment, depth2) {
    for (let i3 = 0; i3 < depth2; i3++)
      fragment = fragment.firstChild.content;
    return fragment;
  }
  function closeNodeStart(node2, openStart, openEnd) {
    if (openStart <= 0)
      return node2;
    let frag = node2.content;
    if (openStart > 1)
      frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
    if (openStart > 0) {
      frag = node2.type.contentMatch.fillBefore(frag).append(frag);
      if (openEnd <= 0)
        frag = frag.append(node2.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
    }
    return node2.copy(frag);
  }
  function contentAfterFits($to, depth2, type, match, open) {
    let node2 = $to.node(depth2), index2 = open ? $to.indexAfter(depth2) : $to.index(depth2);
    if (index2 == node2.childCount && !type.compatibleContent(node2.type))
      return null;
    let fit = match.fillBefore(node2.content, true, index2);
    return fit && !invalidMarks(type, node2.content, index2) ? fit : null;
  }
  function invalidMarks(type, fragment, start) {
    for (let i3 = start; i3 < fragment.childCount; i3++)
      if (!type.allowsMarks(fragment.child(i3).marks))
        return true;
    return false;
  }
  function definesContent(type) {
    return type.spec.defining || type.spec.definingForContent;
  }
  function replaceRange2(tr, from2, to, slice2) {
    if (!slice2.size)
      return tr.deleteRange(from2, to);
    let $from = tr.doc.resolve(from2), $to = tr.doc.resolve(to);
    if (fitsTrivially($from, $to, slice2))
      return tr.step(new ReplaceStep(from2, to, slice2));
    let targetDepths = coveredDepths($from, tr.doc.resolve(to));
    if (targetDepths[targetDepths.length - 1] == 0)
      targetDepths.pop();
    let preferredTarget = -($from.depth + 1);
    targetDepths.unshift(preferredTarget);
    for (let d6 = $from.depth, pos = $from.pos - 1; d6 > 0; d6--, pos--) {
      let spec = $from.node(d6).type.spec;
      if (spec.defining || spec.definingAsContext || spec.isolating)
        break;
      if (targetDepths.indexOf(d6) > -1)
        preferredTarget = d6;
      else if ($from.before(d6) == pos)
        targetDepths.splice(1, 0, -d6);
    }
    let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
    let leftNodes = [], preferredDepth = slice2.openStart;
    for (let content4 = slice2.content, i3 = 0; ; i3++) {
      let node2 = content4.firstChild;
      leftNodes.push(node2);
      if (i3 == slice2.openStart)
        break;
      content4 = node2.content;
    }
    for (let d6 = preferredDepth - 1; d6 >= 0; d6--) {
      let leftNode = leftNodes[d6], def = definesContent(leftNode.type);
      if (def && !leftNode.sameMarkup($from.node(Math.abs(preferredTarget) - 1)))
        preferredDepth = d6;
      else if (def || !leftNode.type.isTextblock)
        break;
    }
    for (let j6 = slice2.openStart; j6 >= 0; j6--) {
      let openDepth = (j6 + preferredDepth + 1) % (slice2.openStart + 1);
      let insert2 = leftNodes[openDepth];
      if (!insert2)
        continue;
      for (let i3 = 0; i3 < targetDepths.length; i3++) {
        let targetDepth = targetDepths[(i3 + preferredTargetIndex) % targetDepths.length], expand = true;
        if (targetDepth < 0) {
          expand = false;
          targetDepth = -targetDepth;
        }
        let parent = $from.node(targetDepth - 1), index2 = $from.index(targetDepth - 1);
        if (parent.canReplaceWith(index2, index2, insert2.type, insert2.marks))
          return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice2.content, 0, slice2.openStart, openDepth), openDepth, slice2.openEnd));
      }
    }
    let startSteps = tr.steps.length;
    for (let i3 = targetDepths.length - 1; i3 >= 0; i3--) {
      tr.replace(from2, to, slice2);
      if (tr.steps.length > startSteps)
        break;
      let depth2 = targetDepths[i3];
      if (depth2 < 0)
        continue;
      from2 = $from.before(depth2);
      to = $to.after(depth2);
    }
  }
  function closeFragment(fragment, depth2, oldOpen, newOpen, parent) {
    if (depth2 < oldOpen) {
      let first = fragment.firstChild;
      fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth2 + 1, oldOpen, newOpen, first)));
    }
    if (depth2 > newOpen) {
      let match = parent.contentMatchAt(0);
      let start = match.fillBefore(fragment).append(fragment);
      fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
    }
    return fragment;
  }
  function replaceRangeWith(tr, from2, to, node2) {
    if (!node2.isInline && from2 == to && tr.doc.resolve(from2).parent.content.size) {
      let point3 = insertPoint(tr.doc, from2, node2.type);
      if (point3 != null)
        from2 = to = point3;
    }
    tr.replaceRange(from2, to, new Slice(Fragment.from(node2), 0, 0));
  }
  function deleteRange(tr, from2, to) {
    let $from = tr.doc.resolve(from2), $to = tr.doc.resolve(to);
    let covered = coveredDepths($from, $to);
    for (let i3 = 0; i3 < covered.length; i3++) {
      let depth2 = covered[i3], last = i3 == covered.length - 1;
      if (last && depth2 == 0 || $from.node(depth2).type.contentMatch.validEnd)
        return tr.delete($from.start(depth2), $to.end(depth2));
      if (depth2 > 0 && (last || $from.node(depth2 - 1).canReplace($from.index(depth2 - 1), $to.indexAfter(depth2 - 1))))
        return tr.delete($from.before(depth2), $to.after(depth2));
    }
    for (let d6 = 1; d6 <= $from.depth && d6 <= $to.depth; d6++) {
      if (from2 - $from.start(d6) == $from.depth - d6 && to > $from.end(d6) && $to.end(d6) - to != $to.depth - d6)
        return tr.delete($from.before(d6), to);
    }
    tr.delete(from2, to);
  }
  function coveredDepths($from, $to) {
    let result = [], minDepth = Math.min($from.depth, $to.depth);
    for (let d6 = minDepth; d6 >= 0; d6--) {
      let start = $from.start(d6);
      if (start < $from.pos - ($from.depth - d6) || $to.end(d6) > $to.pos + ($to.depth - d6) || $from.node(d6).type.spec.isolating || $to.node(d6).type.spec.isolating)
        break;
      if (start == $to.start(d6) || d6 == $from.depth && d6 == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent && d6 && $to.start(d6 - 1) == start - 1)
        result.push(d6);
    }
    return result;
  }
  var AttrStep = class _AttrStep extends Step {
    /**
    Construct an attribute step.
    */
    constructor(pos, attr, value) {
      super();
      this.pos = pos;
      this.attr = attr;
      this.value = value;
    }
    apply(doc5) {
      let node2 = doc5.nodeAt(this.pos);
      if (!node2)
        return StepResult.fail("No node at attribute step's position");
      let attrs = /* @__PURE__ */ Object.create(null);
      for (let name2 in node2.attrs)
        attrs[name2] = node2.attrs[name2];
      attrs[this.attr] = this.value;
      let updated = node2.type.create(attrs, null, node2.marks);
      return StepResult.fromReplace(doc5, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node2.isLeaf ? 0 : 1));
    }
    getMap() {
      return StepMap.empty;
    }
    invert(doc5) {
      return new _AttrStep(this.pos, this.attr, doc5.nodeAt(this.pos).attrs[this.attr]);
    }
    map(mapping) {
      let pos = mapping.mapResult(this.pos, 1);
      return pos.deletedAfter ? null : new _AttrStep(pos.pos, this.attr, this.value);
    }
    toJSON() {
      return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
    }
    static fromJSON(schema, json) {
      if (typeof json.pos != "number" || typeof json.attr != "string")
        throw new RangeError("Invalid input for AttrStep.fromJSON");
      return new _AttrStep(json.pos, json.attr, json.value);
    }
  };
  Step.jsonID("attr", AttrStep);
  var DocAttrStep = class _DocAttrStep extends Step {
    /**
    Construct an attribute step.
    */
    constructor(attr, value) {
      super();
      this.attr = attr;
      this.value = value;
    }
    apply(doc5) {
      let attrs = /* @__PURE__ */ Object.create(null);
      for (let name2 in doc5.attrs)
        attrs[name2] = doc5.attrs[name2];
      attrs[this.attr] = this.value;
      let updated = doc5.type.create(attrs, doc5.content, doc5.marks);
      return StepResult.ok(updated);
    }
    getMap() {
      return StepMap.empty;
    }
    invert(doc5) {
      return new _DocAttrStep(this.attr, doc5.attrs[this.attr]);
    }
    map(mapping) {
      return this;
    }
    toJSON() {
      return { stepType: "docAttr", attr: this.attr, value: this.value };
    }
    static fromJSON(schema, json) {
      if (typeof json.attr != "string")
        throw new RangeError("Invalid input for DocAttrStep.fromJSON");
      return new _DocAttrStep(json.attr, json.value);
    }
  };
  Step.jsonID("docAttr", DocAttrStep);
  var TransformError = class extends Error {
  };
  TransformError = function TransformError2(message) {
    let err = Error.call(this, message);
    err.__proto__ = TransformError2.prototype;
    return err;
  };
  TransformError.prototype = Object.create(Error.prototype);
  TransformError.prototype.constructor = TransformError;
  TransformError.prototype.name = "TransformError";
  var Transform = class {
    /**
    Create a transform that starts with the given document.
    */
    constructor(doc5) {
      this.doc = doc5;
      this.steps = [];
      this.docs = [];
      this.mapping = new Mapping();
    }
    /**
    The starting document.
    */
    get before() {
      return this.docs.length ? this.docs[0] : this.doc;
    }
    /**
    Apply a new step in this transform, saving the result. Throws an
    error when the step fails.
    */
    step(step) {
      let result = this.maybeStep(step);
      if (result.failed)
        throw new TransformError(result.failed);
      return this;
    }
    /**
    Try to apply a step in this transformation, ignoring it if it
    fails. Returns the step result.
    */
    maybeStep(step) {
      let result = step.apply(this.doc);
      if (!result.failed)
        this.addStep(step, result.doc);
      return result;
    }
    /**
    True when the document has been changed (when there are any
    steps).
    */
    get docChanged() {
      return this.steps.length > 0;
    }
    /**
    @internal
    */
    addStep(step, doc5) {
      this.docs.push(this.doc);
      this.steps.push(step);
      this.mapping.appendMap(step.getMap());
      this.doc = doc5;
    }
    /**
    Replace the part of the document between `from` and `to` with the
    given `slice`.
    */
    replace(from2, to = from2, slice2 = Slice.empty) {
      let step = replaceStep(this.doc, from2, to, slice2);
      if (step)
        this.step(step);
      return this;
    }
    /**
    Replace the given range with the given content, which may be a
    fragment, node, or array of nodes.
    */
    replaceWith(from2, to, content4) {
      return this.replace(from2, to, new Slice(Fragment.from(content4), 0, 0));
    }
    /**
    Delete the content between the given positions.
    */
    delete(from2, to) {
      return this.replace(from2, to, Slice.empty);
    }
    /**
    Insert the given content at the given position.
    */
    insert(pos, content4) {
      return this.replaceWith(pos, pos, content4);
    }
    /**
    Replace a range of the document with a given slice, using
    `from`, `to`, and the slice's
    [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
    than fixed start and end points. This method may grow the
    replaced area or close open nodes in the slice in order to get a
    fit that is more in line with WYSIWYG expectations, by dropping
    fully covered parent nodes of the replaced region when they are
    marked [non-defining as
    context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
    open parent node from the slice that _is_ marked as [defining
    its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
    
    This is the method, for example, to handle paste. The similar
    [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
    primitive tool which will _not_ move the start and end of its given
    range, and is useful in situations where you need more precise
    control over what happens.
    */
    replaceRange(from2, to, slice2) {
      replaceRange2(this, from2, to, slice2);
      return this;
    }
    /**
    Replace the given range with a node, but use `from` and `to` as
    hints, rather than precise positions. When from and to are the same
    and are at the start or end of a parent node in which the given
    node doesn't fit, this method may _move_ them out towards a parent
    that does allow the given node to be placed. When the given range
    completely covers a parent node, this method may completely replace
    that parent node.
    */
    replaceRangeWith(from2, to, node2) {
      replaceRangeWith(this, from2, to, node2);
      return this;
    }
    /**
    Delete the given range, expanding it to cover fully covered
    parent nodes until a valid replace is found.
    */
    deleteRange(from2, to) {
      deleteRange(this, from2, to);
      return this;
    }
    /**
    Split the content in the given range off from its parent, if there
    is sibling content before or after it, and move it up the tree to
    the depth specified by `target`. You'll probably want to use
    [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
    sure the lift is valid.
    */
    lift(range, target) {
      lift(this, range, target);
      return this;
    }
    /**
    Join the blocks around the given position. If depth is 2, their
    last and first siblings are also joined, and so on.
    */
    join(pos, depth2 = 1) {
      join3(this, pos, depth2);
      return this;
    }
    /**
    Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
    The wrappers are assumed to be valid in this position, and should
    probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
    */
    wrap(range, wrappers) {
      wrap2(this, range, wrappers);
      return this;
    }
    /**
    Set the type of all textblocks (partly) between `from` and `to` to
    the given node type with the given attributes.
    */
    setBlockType(from2, to = from2, type, attrs = null) {
      setBlockType(this, from2, to, type, attrs);
      return this;
    }
    /**
    Change the type, attributes, and/or marks of the node at `pos`.
    When `type` isn't given, the existing node type is preserved,
    */
    setNodeMarkup(pos, type, attrs = null, marks2) {
      setNodeMarkup(this, pos, type, attrs, marks2);
      return this;
    }
    /**
    Set a single attribute on a given node to a new value.
    The `pos` addresses the document content. Use `setDocAttribute`
    to set attributes on the document itself.
    */
    setNodeAttribute(pos, attr, value) {
      this.step(new AttrStep(pos, attr, value));
      return this;
    }
    /**
    Set a single attribute on the document to a new value.
    */
    setDocAttribute(attr, value) {
      this.step(new DocAttrStep(attr, value));
      return this;
    }
    /**
    Add a mark to the node at position `pos`.
    */
    addNodeMark(pos, mark) {
      this.step(new AddNodeMarkStep(pos, mark));
      return this;
    }
    /**
    Remove a mark (or a mark of the given type) from the node at
    position `pos`.
    */
    removeNodeMark(pos, mark) {
      if (!(mark instanceof Mark)) {
        let node2 = this.doc.nodeAt(pos);
        if (!node2)
          throw new RangeError("No node at position " + pos);
        mark = mark.isInSet(node2.marks);
        if (!mark)
          return this;
      }
      this.step(new RemoveNodeMarkStep(pos, mark));
      return this;
    }
    /**
    Split the node at the given position, and optionally, if `depth` is
    greater than one, any number of nodes above that. By default, the
    parts split off will inherit the node type of the original node.
    This can be changed by passing an array of types and attributes to
    use after the split.
    */
    split(pos, depth2 = 1, typesAfter) {
      split(this, pos, depth2, typesAfter);
      return this;
    }
    /**
    Add the given mark to the inline content between `from` and `to`.
    */
    addMark(from2, to, mark) {
      addMark(this, from2, to, mark);
      return this;
    }
    /**
    Remove marks from inline nodes between `from` and `to`. When
    `mark` is a single mark, remove precisely that mark. When it is
    a mark type, remove all marks of that type. When it is null,
    remove all marks of any type.
    */
    removeMark(from2, to, mark) {
      removeMark(this, from2, to, mark);
      return this;
    }
    /**
    Removes all marks and nodes from the content of the node at
    `pos` that don't match the given new parent node type. Accepts
    an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
    third argument.
    */
    clearIncompatible(pos, parentType, match) {
      clearIncompatible(this, pos, parentType, match);
      return this;
    }
  };

  // node_modules/prosemirror-state/dist/index.js
  var classesById = /* @__PURE__ */ Object.create(null);
  var Selection = class {
    /**
    Initialize a selection with the head and anchor and ranges. If no
    ranges are given, constructs a single range across `$anchor` and
    `$head`.
    */
    constructor($anchor, $head, ranges) {
      this.$anchor = $anchor;
      this.$head = $head;
      this.ranges = ranges || [new SelectionRange2($anchor.min($head), $anchor.max($head))];
    }
    /**
    The selection's anchor, as an unresolved position.
    */
    get anchor() {
      return this.$anchor.pos;
    }
    /**
    The selection's head.
    */
    get head() {
      return this.$head.pos;
    }
    /**
    The lower bound of the selection's main range.
    */
    get from() {
      return this.$from.pos;
    }
    /**
    The upper bound of the selection's main range.
    */
    get to() {
      return this.$to.pos;
    }
    /**
    The resolved lower  bound of the selection's main range.
    */
    get $from() {
      return this.ranges[0].$from;
    }
    /**
    The resolved upper bound of the selection's main range.
    */
    get $to() {
      return this.ranges[0].$to;
    }
    /**
    Indicates whether the selection contains any content.
    */
    get empty() {
      let ranges = this.ranges;
      for (let i3 = 0; i3 < ranges.length; i3++)
        if (ranges[i3].$from.pos != ranges[i3].$to.pos)
          return false;
      return true;
    }
    /**
    Get the content of this selection as a slice.
    */
    content() {
      return this.$from.doc.slice(this.from, this.to, true);
    }
    /**
    Replace the selection with a slice or, if no slice is given,
    delete the selection. Will append to the given transaction.
    */
    replace(tr, content4 = Slice.empty) {
      let lastNode = content4.content.lastChild, lastParent = null;
      for (let i3 = 0; i3 < content4.openEnd; i3++) {
        lastParent = lastNode;
        lastNode = lastNode.lastChild;
      }
      let mapFrom = tr.steps.length, ranges = this.ranges;
      for (let i3 = 0; i3 < ranges.length; i3++) {
        let { $from, $to } = ranges[i3], mapping = tr.mapping.slice(mapFrom);
        tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i3 ? Slice.empty : content4);
        if (i3 == 0)
          selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
      }
    }
    /**
    Replace the selection with the given node, appending the changes
    to the given transaction.
    */
    replaceWith(tr, node2) {
      let mapFrom = tr.steps.length, ranges = this.ranges;
      for (let i3 = 0; i3 < ranges.length; i3++) {
        let { $from, $to } = ranges[i3], mapping = tr.mapping.slice(mapFrom);
        let from2 = mapping.map($from.pos), to = mapping.map($to.pos);
        if (i3) {
          tr.deleteRange(from2, to);
        } else {
          tr.replaceRangeWith(from2, to, node2);
          selectionToInsertionEnd(tr, mapFrom, node2.isInline ? -1 : 1);
        }
      }
    }
    /**
    Find a valid cursor or leaf node selection starting at the given
    position and searching back if `dir` is negative, and forward if
    positive. When `textOnly` is true, only consider cursor
    selections. Will return null when no valid selection position is
    found.
    */
    static findFrom($pos, dir, textOnly = false) {
      let inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
      if (inner)
        return inner;
      for (let depth2 = $pos.depth - 1; depth2 >= 0; depth2--) {
        let found2 = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth2), $pos.before(depth2 + 1), $pos.index(depth2), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth2), $pos.after(depth2 + 1), $pos.index(depth2) + 1, dir, textOnly);
        if (found2)
          return found2;
      }
      return null;
    }
    /**
    Find a valid cursor or leaf node selection near the given
    position. Searches forward first by default, but if `bias` is
    negative, it will search backwards first.
    */
    static near($pos, bias = 1) {
      return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
    }
    /**
    Find the cursor or leaf node selection closest to the start of
    the given document. Will return an
    [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
    exists.
    */
    static atStart(doc5) {
      return findSelectionIn(doc5, doc5, 0, 0, 1) || new AllSelection(doc5);
    }
    /**
    Find the cursor or leaf node selection closest to the end of the
    given document.
    */
    static atEnd(doc5) {
      return findSelectionIn(doc5, doc5, doc5.content.size, doc5.childCount, -1) || new AllSelection(doc5);
    }
    /**
    Deserialize the JSON representation of a selection. Must be
    implemented for custom classes (as a static class method).
    */
    static fromJSON(doc5, json) {
      if (!json || !json.type)
        throw new RangeError("Invalid input for Selection.fromJSON");
      let cls = classesById[json.type];
      if (!cls)
        throw new RangeError(`No selection type ${json.type} defined`);
      return cls.fromJSON(doc5, json);
    }
    /**
    To be able to deserialize selections from JSON, custom selection
    classes must register themselves with an ID string, so that they
    can be disambiguated. Try to pick something that's unlikely to
    clash with classes from other modules.
    */
    static jsonID(id2, selectionClass) {
      if (id2 in classesById)
        throw new RangeError("Duplicate use of selection JSON ID " + id2);
      classesById[id2] = selectionClass;
      selectionClass.prototype.jsonID = id2;
      return selectionClass;
    }
    /**
    Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
    which is a value that can be mapped without having access to a
    current document, and later resolved to a real selection for a
    given document again. (This is used mostly by the history to
    track and restore old selections.) The default implementation of
    this method just converts the selection to a text selection and
    returns the bookmark for that.
    */
    getBookmark() {
      return TextSelection.between(this.$anchor, this.$head).getBookmark();
    }
  };
  Selection.prototype.visible = true;
  var SelectionRange2 = class {
    /**
    Create a range.
    */
    constructor($from, $to) {
      this.$from = $from;
      this.$to = $to;
    }
  };
  var warnedAboutTextSelection = false;
  function checkTextSelection($pos) {
    if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
      warnedAboutTextSelection = true;
      console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
    }
  }
  var TextSelection = class _TextSelection extends Selection {
    /**
    Construct a text selection between the given points.
    */
    constructor($anchor, $head = $anchor) {
      checkTextSelection($anchor);
      checkTextSelection($head);
      super($anchor, $head);
    }
    /**
    Returns a resolved position if this is a cursor selection (an
    empty text selection), and null otherwise.
    */
    get $cursor() {
      return this.$anchor.pos == this.$head.pos ? this.$head : null;
    }
    map(doc5, mapping) {
      let $head = doc5.resolve(mapping.map(this.head));
      if (!$head.parent.inlineContent)
        return Selection.near($head);
      let $anchor = doc5.resolve(mapping.map(this.anchor));
      return new _TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
    }
    replace(tr, content4 = Slice.empty) {
      super.replace(tr, content4);
      if (content4 == Slice.empty) {
        let marks2 = this.$from.marksAcross(this.$to);
        if (marks2)
          tr.ensureMarks(marks2);
      }
    }
    eq(other) {
      return other instanceof _TextSelection && other.anchor == this.anchor && other.head == this.head;
    }
    getBookmark() {
      return new TextBookmark(this.anchor, this.head);
    }
    toJSON() {
      return { type: "text", anchor: this.anchor, head: this.head };
    }
    /**
    @internal
    */
    static fromJSON(doc5, json) {
      if (typeof json.anchor != "number" || typeof json.head != "number")
        throw new RangeError("Invalid input for TextSelection.fromJSON");
      return new _TextSelection(doc5.resolve(json.anchor), doc5.resolve(json.head));
    }
    /**
    Create a text selection from non-resolved positions.
    */
    static create(doc5, anchor, head = anchor) {
      let $anchor = doc5.resolve(anchor);
      return new this($anchor, head == anchor ? $anchor : doc5.resolve(head));
    }
    /**
    Return a text selection that spans the given positions or, if
    they aren't text positions, find a text selection near them.
    `bias` determines whether the method searches forward (default)
    or backwards (negative number) first. Will fall back to calling
    [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
    doesn't contain a valid text position.
    */
    static between($anchor, $head, bias) {
      let dPos = $anchor.pos - $head.pos;
      if (!bias || dPos)
        bias = dPos >= 0 ? 1 : -1;
      if (!$head.parent.inlineContent) {
        let found2 = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
        if (found2)
          $head = found2.$head;
        else
          return Selection.near($head, bias);
      }
      if (!$anchor.parent.inlineContent) {
        if (dPos == 0) {
          $anchor = $head;
        } else {
          $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
          if ($anchor.pos < $head.pos != dPos < 0)
            $anchor = $head;
        }
      }
      return new _TextSelection($anchor, $head);
    }
  };
  Selection.jsonID("text", TextSelection);
  var TextBookmark = class _TextBookmark {
    constructor(anchor, head) {
      this.anchor = anchor;
      this.head = head;
    }
    map(mapping) {
      return new _TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
    }
    resolve(doc5) {
      return TextSelection.between(doc5.resolve(this.anchor), doc5.resolve(this.head));
    }
  };
  var NodeSelection = class _NodeSelection extends Selection {
    /**
    Create a node selection. Does not verify the validity of its
    argument.
    */
    constructor($pos) {
      let node2 = $pos.nodeAfter;
      let $end = $pos.node(0).resolve($pos.pos + node2.nodeSize);
      super($pos, $end);
      this.node = node2;
    }
    map(doc5, mapping) {
      let { deleted, pos } = mapping.mapResult(this.anchor);
      let $pos = doc5.resolve(pos);
      if (deleted)
        return Selection.near($pos);
      return new _NodeSelection($pos);
    }
    content() {
      return new Slice(Fragment.from(this.node), 0, 0);
    }
    eq(other) {
      return other instanceof _NodeSelection && other.anchor == this.anchor;
    }
    toJSON() {
      return { type: "node", anchor: this.anchor };
    }
    getBookmark() {
      return new NodeBookmark(this.anchor);
    }
    /**
    @internal
    */
    static fromJSON(doc5, json) {
      if (typeof json.anchor != "number")
        throw new RangeError("Invalid input for NodeSelection.fromJSON");
      return new _NodeSelection(doc5.resolve(json.anchor));
    }
    /**
    Create a node selection from non-resolved positions.
    */
    static create(doc5, from2) {
      return new _NodeSelection(doc5.resolve(from2));
    }
    /**
    Determines whether the given node may be selected as a node
    selection.
    */
    static isSelectable(node2) {
      return !node2.isText && node2.type.spec.selectable !== false;
    }
  };
  NodeSelection.prototype.visible = false;
  Selection.jsonID("node", NodeSelection);
  var NodeBookmark = class _NodeBookmark {
    constructor(anchor) {
      this.anchor = anchor;
    }
    map(mapping) {
      let { deleted, pos } = mapping.mapResult(this.anchor);
      return deleted ? new TextBookmark(pos, pos) : new _NodeBookmark(pos);
    }
    resolve(doc5) {
      let $pos = doc5.resolve(this.anchor), node2 = $pos.nodeAfter;
      if (node2 && NodeSelection.isSelectable(node2))
        return new NodeSelection($pos);
      return Selection.near($pos);
    }
  };
  var AllSelection = class _AllSelection extends Selection {
    /**
    Create an all-selection over the given document.
    */
    constructor(doc5) {
      super(doc5.resolve(0), doc5.resolve(doc5.content.size));
    }
    replace(tr, content4 = Slice.empty) {
      if (content4 == Slice.empty) {
        tr.delete(0, tr.doc.content.size);
        let sel = Selection.atStart(tr.doc);
        if (!sel.eq(tr.selection))
          tr.setSelection(sel);
      } else {
        super.replace(tr, content4);
      }
    }
    toJSON() {
      return { type: "all" };
    }
    /**
    @internal
    */
    static fromJSON(doc5) {
      return new _AllSelection(doc5);
    }
    map(doc5) {
      return new _AllSelection(doc5);
    }
    eq(other) {
      return other instanceof _AllSelection;
    }
    getBookmark() {
      return AllBookmark;
    }
  };
  Selection.jsonID("all", AllSelection);
  var AllBookmark = {
    map() {
      return this;
    },
    resolve(doc5) {
      return new AllSelection(doc5);
    }
  };
  function findSelectionIn(doc5, node2, pos, index2, dir, text5 = false) {
    if (node2.inlineContent)
      return TextSelection.create(doc5, pos);
    for (let i3 = index2 - (dir > 0 ? 0 : 1); dir > 0 ? i3 < node2.childCount : i3 >= 0; i3 += dir) {
      let child = node2.child(i3);
      if (!child.isAtom) {
        let inner = findSelectionIn(doc5, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text5);
        if (inner)
          return inner;
      } else if (!text5 && NodeSelection.isSelectable(child)) {
        return NodeSelection.create(doc5, pos - (dir < 0 ? child.nodeSize : 0));
      }
      pos += child.nodeSize * dir;
    }
    return null;
  }
  function selectionToInsertionEnd(tr, startLen, bias) {
    let last = tr.steps.length - 1;
    if (last < startLen)
      return;
    let step = tr.steps[last];
    if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
      return;
    let map6 = tr.mapping.maps[last], end;
    map6.forEach((_from, _to, _newFrom, newTo) => {
      if (end == null)
        end = newTo;
    });
    tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
  }
  var UPDATED_SEL = 1;
  var UPDATED_MARKS = 2;
  var UPDATED_SCROLL = 4;
  var Transaction2 = class extends Transform {
    /**
    @internal
    */
    constructor(state) {
      super(state.doc);
      this.curSelectionFor = 0;
      this.updated = 0;
      this.meta = /* @__PURE__ */ Object.create(null);
      this.time = Date.now();
      this.curSelection = state.selection;
      this.storedMarks = state.storedMarks;
    }
    /**
    The transaction's current selection. This defaults to the editor
    selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
    transaction, but can be overwritten with
    [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
    */
    get selection() {
      if (this.curSelectionFor < this.steps.length) {
        this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
        this.curSelectionFor = this.steps.length;
      }
      return this.curSelection;
    }
    /**
    Update the transaction's current selection. Will determine the
    selection that the editor gets when the transaction is applied.
    */
    setSelection(selection) {
      if (selection.$from.doc != this.doc)
        throw new RangeError("Selection passed to setSelection must point at the current document");
      this.curSelection = selection;
      this.curSelectionFor = this.steps.length;
      this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
      this.storedMarks = null;
      return this;
    }
    /**
    Whether the selection was explicitly updated by this transaction.
    */
    get selectionSet() {
      return (this.updated & UPDATED_SEL) > 0;
    }
    /**
    Set the current stored marks.
    */
    setStoredMarks(marks2) {
      this.storedMarks = marks2;
      this.updated |= UPDATED_MARKS;
      return this;
    }
    /**
    Make sure the current stored marks or, if that is null, the marks
    at the selection, match the given set of marks. Does nothing if
    this is already the case.
    */
    ensureMarks(marks2) {
      if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks2))
        this.setStoredMarks(marks2);
      return this;
    }
    /**
    Add a mark to the set of stored marks.
    */
    addStoredMark(mark) {
      return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
    }
    /**
    Remove a mark or mark type from the set of stored marks.
    */
    removeStoredMark(mark) {
      return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
    }
    /**
    Whether the stored marks were explicitly set for this transaction.
    */
    get storedMarksSet() {
      return (this.updated & UPDATED_MARKS) > 0;
    }
    /**
    @internal
    */
    addStep(step, doc5) {
      super.addStep(step, doc5);
      this.updated = this.updated & ~UPDATED_MARKS;
      this.storedMarks = null;
    }
    /**
    Update the timestamp for the transaction.
    */
    setTime(time) {
      this.time = time;
      return this;
    }
    /**
    Replace the current selection with the given slice.
    */
    replaceSelection(slice2) {
      this.selection.replace(this, slice2);
      return this;
    }
    /**
    Replace the selection with the given node. When `inheritMarks` is
    true and the content is inline, it inherits the marks from the
    place where it is inserted.
    */
    replaceSelectionWith(node2, inheritMarks = true) {
      let selection = this.selection;
      if (inheritMarks)
        node2 = node2.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || Mark.none));
      selection.replaceWith(this, node2);
      return this;
    }
    /**
    Delete the selection.
    */
    deleteSelection() {
      this.selection.replace(this);
      return this;
    }
    /**
    Replace the given range, or the selection if no range is given,
    with a text node containing the given string.
    */
    insertText(text5, from2, to) {
      let schema = this.doc.type.schema;
      if (from2 == null) {
        if (!text5)
          return this.deleteSelection();
        return this.replaceSelectionWith(schema.text(text5), true);
      } else {
        if (to == null)
          to = from2;
        to = to == null ? from2 : to;
        if (!text5)
          return this.deleteRange(from2, to);
        let marks2 = this.storedMarks;
        if (!marks2) {
          let $from = this.doc.resolve(from2);
          marks2 = to == from2 ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
        }
        this.replaceRangeWith(from2, to, schema.text(text5, marks2));
        if (!this.selection.empty)
          this.setSelection(Selection.near(this.selection.$to));
        return this;
      }
    }
    /**
    Store a metadata property in this transaction, keyed either by
    name or by plugin.
    */
    setMeta(key, value) {
      this.meta[typeof key == "string" ? key : key.key] = value;
      return this;
    }
    /**
    Retrieve a metadata property for a given name or plugin.
    */
    getMeta(key) {
      return this.meta[typeof key == "string" ? key : key.key];
    }
    /**
    Returns true if this transaction doesn't contain any metadata,
    and can thus safely be extended.
    */
    get isGeneric() {
      for (let _3 in this.meta)
        return false;
      return true;
    }
    /**
    Indicate that the editor should scroll the selection into view
    when updated to the state produced by this transaction.
    */
    scrollIntoView() {
      this.updated |= UPDATED_SCROLL;
      return this;
    }
    /**
    True when this transaction has had `scrollIntoView` called on it.
    */
    get scrolledIntoView() {
      return (this.updated & UPDATED_SCROLL) > 0;
    }
  };
  function bind(f3, self2) {
    return !self2 || !f3 ? f3 : f3.bind(self2);
  }
  var FieldDesc = class {
    constructor(name2, desc, self2) {
      this.name = name2;
      this.init = bind(desc.init, self2);
      this.apply = bind(desc.apply, self2);
    }
  };
  var baseFields = [
    new FieldDesc("doc", {
      init(config2) {
        return config2.doc || config2.schema.topNodeType.createAndFill();
      },
      apply(tr) {
        return tr.doc;
      }
    }),
    new FieldDesc("selection", {
      init(config2, instance) {
        return config2.selection || Selection.atStart(instance.doc);
      },
      apply(tr) {
        return tr.selection;
      }
    }),
    new FieldDesc("storedMarks", {
      init(config2) {
        return config2.storedMarks || null;
      },
      apply(tr, _marks, _old, state) {
        return state.selection.$cursor ? tr.storedMarks : null;
      }
    }),
    new FieldDesc("scrollToSelection", {
      init() {
        return 0;
      },
      apply(tr, prev) {
        return tr.scrolledIntoView ? prev + 1 : prev;
      }
    })
  ];
  var Configuration2 = class {
    constructor(schema, plugins) {
      this.schema = schema;
      this.plugins = [];
      this.pluginsByKey = /* @__PURE__ */ Object.create(null);
      this.fields = baseFields.slice();
      if (plugins)
        plugins.forEach((plugin2) => {
          if (this.pluginsByKey[plugin2.key])
            throw new RangeError("Adding different instances of a keyed plugin (" + plugin2.key + ")");
          this.plugins.push(plugin2);
          this.pluginsByKey[plugin2.key] = plugin2;
          if (plugin2.spec.state)
            this.fields.push(new FieldDesc(plugin2.key, plugin2.spec.state, plugin2));
        });
    }
  };
  var EditorState2 = class _EditorState {
    /**
    @internal
    */
    constructor(config2) {
      this.config = config2;
    }
    /**
    The schema of the state's document.
    */
    get schema() {
      return this.config.schema;
    }
    /**
    The plugins that are active in this state.
    */
    get plugins() {
      return this.config.plugins;
    }
    /**
    Apply the given transaction to produce a new state.
    */
    apply(tr) {
      return this.applyTransaction(tr).state;
    }
    /**
    @internal
    */
    filterTransaction(tr, ignore = -1) {
      for (let i3 = 0; i3 < this.config.plugins.length; i3++)
        if (i3 != ignore) {
          let plugin2 = this.config.plugins[i3];
          if (plugin2.spec.filterTransaction && !plugin2.spec.filterTransaction.call(plugin2, tr, this))
            return false;
        }
      return true;
    }
    /**
    Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
    returns the precise transactions that were applied (which might
    be influenced by the [transaction
    hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
    plugins) along with the new state.
    */
    applyTransaction(rootTr) {
      if (!this.filterTransaction(rootTr))
        return { state: this, transactions: [] };
      let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
      for (; ; ) {
        let haveNew = false;
        for (let i3 = 0; i3 < this.config.plugins.length; i3++) {
          let plugin2 = this.config.plugins[i3];
          if (plugin2.spec.appendTransaction) {
            let n5 = seen ? seen[i3].n : 0, oldState = seen ? seen[i3].state : this;
            let tr = n5 < trs.length && plugin2.spec.appendTransaction.call(plugin2, n5 ? trs.slice(n5) : trs, oldState, newState);
            if (tr && newState.filterTransaction(tr, i3)) {
              tr.setMeta("appendedTransaction", rootTr);
              if (!seen) {
                seen = [];
                for (let j6 = 0; j6 < this.config.plugins.length; j6++)
                  seen.push(j6 < i3 ? { state: newState, n: trs.length } : { state: this, n: 0 });
              }
              trs.push(tr);
              newState = newState.applyInner(tr);
              haveNew = true;
            }
            if (seen)
              seen[i3] = { state: newState, n: trs.length };
          }
        }
        if (!haveNew)
          return { state: newState, transactions: trs };
      }
    }
    /**
    @internal
    */
    applyInner(tr) {
      if (!tr.before.eq(this.doc))
        throw new RangeError("Applying a mismatched transaction");
      let newInstance = new _EditorState(this.config), fields = this.config.fields;
      for (let i3 = 0; i3 < fields.length; i3++) {
        let field = fields[i3];
        newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
      }
      return newInstance;
    }
    /**
    Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
    */
    get tr() {
      return new Transaction2(this);
    }
    /**
    Create a new state.
    */
    static create(config2) {
      let $config = new Configuration2(config2.doc ? config2.doc.type.schema : config2.schema, config2.plugins);
      let instance = new _EditorState($config);
      for (let i3 = 0; i3 < $config.fields.length; i3++)
        instance[$config.fields[i3].name] = $config.fields[i3].init(config2, instance);
      return instance;
    }
    /**
    Create a new state based on this one, but with an adjusted set
    of active plugins. State fields that exist in both sets of
    plugins are kept unchanged. Those that no longer exist are
    dropped, and those that are new are initialized using their
    [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
    configuration object..
    */
    reconfigure(config2) {
      let $config = new Configuration2(this.schema, config2.plugins);
      let fields = $config.fields, instance = new _EditorState($config);
      for (let i3 = 0; i3 < fields.length; i3++) {
        let name2 = fields[i3].name;
        instance[name2] = this.hasOwnProperty(name2) ? this[name2] : fields[i3].init(config2, instance);
      }
      return instance;
    }
    /**
    Serialize this state to JSON. If you want to serialize the state
    of plugins, pass an object mapping property names to use in the
    resulting JSON object to plugin objects. The argument may also be
    a string or number, in which case it is ignored, to support the
    way `JSON.stringify` calls `toString` methods.
    */
    toJSON(pluginFields) {
      let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
      if (this.storedMarks)
        result.storedMarks = this.storedMarks.map((m4) => m4.toJSON());
      if (pluginFields && typeof pluginFields == "object")
        for (let prop in pluginFields) {
          if (prop == "doc" || prop == "selection")
            throw new RangeError("The JSON fields `doc` and `selection` are reserved");
          let plugin2 = pluginFields[prop], state = plugin2.spec.state;
          if (state && state.toJSON)
            result[prop] = state.toJSON.call(plugin2, this[plugin2.key]);
        }
      return result;
    }
    /**
    Deserialize a JSON representation of a state. `config` should
    have at least a `schema` field, and should contain array of
    plugins to initialize the state with. `pluginFields` can be used
    to deserialize the state of plugins, by associating plugin
    instances with the property names they use in the JSON object.
    */
    static fromJSON(config2, json, pluginFields) {
      if (!json)
        throw new RangeError("Invalid input for EditorState.fromJSON");
      if (!config2.schema)
        throw new RangeError("Required config field 'schema' missing");
      let $config = new Configuration2(config2.schema, config2.plugins);
      let instance = new _EditorState($config);
      $config.fields.forEach((field) => {
        if (field.name == "doc") {
          instance.doc = Node.fromJSON(config2.schema, json.doc);
        } else if (field.name == "selection") {
          instance.selection = Selection.fromJSON(instance.doc, json.selection);
        } else if (field.name == "storedMarks") {
          if (json.storedMarks)
            instance.storedMarks = json.storedMarks.map(config2.schema.markFromJSON);
        } else {
          if (pluginFields)
            for (let prop in pluginFields) {
              let plugin2 = pluginFields[prop], state = plugin2.spec.state;
              if (plugin2.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {
                instance[field.name] = state.fromJSON.call(plugin2, config2, json[prop], instance);
                return;
              }
            }
          instance[field.name] = field.init(config2, instance);
        }
      });
      return instance;
    }
  };
  function bindProps(obj, self2, target) {
    for (let prop in obj) {
      let val = obj[prop];
      if (val instanceof Function)
        val = val.bind(self2);
      else if (prop == "handleDOMEvents")
        val = bindProps(val, self2, {});
      target[prop] = val;
    }
    return target;
  }
  var Plugin = class {
    /**
    Create a plugin.
    */
    constructor(spec) {
      this.spec = spec;
      this.props = {};
      if (spec.props)
        bindProps(spec.props, this, this.props);
      this.key = spec.key ? spec.key.key : createKey("plugin");
    }
    /**
    Extract the plugin's state field from an editor state.
    */
    getState(state) {
      return state[this.key];
    }
  };
  var keys2 = /* @__PURE__ */ Object.create(null);
  function createKey(name2) {
    if (name2 in keys2)
      return name2 + "$" + ++keys2[name2];
    keys2[name2] = 0;
    return name2 + "$";
  }
  var PluginKey = class {
    /**
    Create a plugin key.
    */
    constructor(name2 = "key") {
      this.key = createKey(name2);
    }
    /**
    Get the active plugin with this key, if any, from an editor
    state.
    */
    get(state) {
      return state.config.pluginsByKey[this.key];
    }
    /**
    Get the plugin's state from an editor state.
    */
    getState(state) {
      return state[this.key];
    }
  };

  // node_modules/prosemirror-view/dist/index.js
  var domIndex2 = function(node2) {
    for (var index2 = 0; ; index2++) {
      node2 = node2.previousSibling;
      if (!node2)
        return index2;
    }
  };
  var parentNode = function(node2) {
    let parent = node2.assignedSlot || node2.parentNode;
    return parent && parent.nodeType == 11 ? parent.host : parent;
  };
  var reusedRange = null;
  var textRange2 = function(node2, from2, to) {
    let range = reusedRange || (reusedRange = document.createRange());
    range.setEnd(node2, to == null ? node2.nodeValue.length : to);
    range.setStart(node2, from2 || 0);
    return range;
  };
  var clearReusedRange = function() {
    reusedRange = null;
  };
  var isEquivalentPosition2 = function(node2, off, targetNode, targetOff) {
    return targetNode && (scanFor2(node2, off, targetNode, targetOff, -1) || scanFor2(node2, off, targetNode, targetOff, 1));
  };
  var atomElements = /^(img|br|input|textarea|hr)$/i;
  function scanFor2(node2, off, targetNode, targetOff, dir) {
    for (; ; ) {
      if (node2 == targetNode && off == targetOff)
        return true;
      if (off == (dir < 0 ? 0 : nodeSize2(node2))) {
        let parent = node2.parentNode;
        if (!parent || parent.nodeType != 1 || hasBlockDesc(node2) || atomElements.test(node2.nodeName) || node2.contentEditable == "false")
          return false;
        off = domIndex2(node2) + (dir < 0 ? 0 : 1);
        node2 = parent;
      } else if (node2.nodeType == 1) {
        node2 = node2.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node2.contentEditable == "false")
          return false;
        off = dir < 0 ? nodeSize2(node2) : 0;
      } else {
        return false;
      }
    }
  }
  function nodeSize2(node2) {
    return node2.nodeType == 3 ? node2.nodeValue.length : node2.childNodes.length;
  }
  function textNodeBefore$1(node2, offset) {
    for (; ; ) {
      if (node2.nodeType == 3 && offset)
        return node2;
      if (node2.nodeType == 1 && offset > 0) {
        if (node2.contentEditable == "false")
          return null;
        node2 = node2.childNodes[offset - 1];
        offset = nodeSize2(node2);
      } else if (node2.parentNode && !hasBlockDesc(node2)) {
        offset = domIndex2(node2);
        node2 = node2.parentNode;
      } else {
        return null;
      }
    }
  }
  function textNodeAfter$1(node2, offset) {
    for (; ; ) {
      if (node2.nodeType == 3 && offset < node2.nodeValue.length)
        return node2;
      if (node2.nodeType == 1 && offset < node2.childNodes.length) {
        if (node2.contentEditable == "false")
          return null;
        node2 = node2.childNodes[offset];
        offset = 0;
      } else if (node2.parentNode && !hasBlockDesc(node2)) {
        offset = domIndex2(node2) + 1;
        node2 = node2.parentNode;
      } else {
        return null;
      }
    }
  }
  function isOnEdge(node2, offset, parent) {
    for (let atStart = offset == 0, atEnd = offset == nodeSize2(node2); atStart || atEnd; ) {
      if (node2 == parent)
        return true;
      let index2 = domIndex2(node2);
      node2 = node2.parentNode;
      if (!node2)
        return false;
      atStart = atStart && index2 == 0;
      atEnd = atEnd && index2 == nodeSize2(node2);
    }
  }
  function hasBlockDesc(dom) {
    let desc;
    for (let cur2 = dom; cur2; cur2 = cur2.parentNode)
      if (desc = cur2.pmViewDesc)
        break;
    return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
  }
  var selectionCollapsed = function(domSel) {
    return domSel.focusNode && isEquivalentPosition2(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
  };
  function keyEvent(keyCode, key) {
    let event = document.createEvent("Event");
    event.initEvent("keydown", true, true);
    event.keyCode = keyCode;
    event.key = event.code = key;
    return event;
  }
  function deepActiveElement2(doc5) {
    let elt = doc5.activeElement;
    while (elt && elt.shadowRoot)
      elt = elt.shadowRoot.activeElement;
    return elt;
  }
  function caretFromPoint(doc5, x7, y4) {
    if (doc5.caretPositionFromPoint) {
      try {
        let pos = doc5.caretPositionFromPoint(x7, y4);
        if (pos)
          return { node: pos.offsetNode, offset: pos.offset };
      } catch (_3) {
      }
    }
    if (doc5.caretRangeFromPoint) {
      let range = doc5.caretRangeFromPoint(x7, y4);
      if (range)
        return { node: range.startContainer, offset: range.startOffset };
    }
  }
  var nav2 = typeof navigator != "undefined" ? navigator : null;
  var doc3 = typeof document != "undefined" ? document : null;
  var agent = nav2 && nav2.userAgent || "";
  var ie_edge2 = /Edge\/(\d+)/.exec(agent);
  var ie_upto102 = /MSIE \d/.exec(agent);
  var ie_11up2 = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
  var ie3 = !!(ie_upto102 || ie_11up2 || ie_edge2);
  var ie_version = ie_upto102 ? document.documentMode : ie_11up2 ? +ie_11up2[1] : ie_edge2 ? +ie_edge2[1] : 0;
  var gecko2 = !ie3 && /gecko\/(\d+)/i.test(agent);
  gecko2 && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
  var _chrome = !ie3 && /Chrome\/(\d+)/.exec(agent);
  var chrome2 = !!_chrome;
  var chrome_version = _chrome ? +_chrome[1] : 0;
  var safari2 = !ie3 && !!nav2 && /Apple Computer/.test(nav2.vendor);
  var ios2 = safari2 && (/Mobile\/\w+/.test(agent) || !!nav2 && nav2.maxTouchPoints > 2);
  var mac2 = ios2 || (nav2 ? /Mac/.test(nav2.platform) : false);
  var windows2 = nav2 ? /Win/.test(nav2.platform) : false;
  var android3 = /Android \d/.test(agent);
  var webkit2 = !!doc3 && "webkitFontSmoothing" in doc3.documentElement.style;
  var webkit_version = webkit2 ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
  function windowRect2(doc5) {
    let vp = doc5.defaultView && doc5.defaultView.visualViewport;
    if (vp)
      return {
        left: 0,
        right: vp.width,
        top: 0,
        bottom: vp.height
      };
    return {
      left: 0,
      right: doc5.documentElement.clientWidth,
      top: 0,
      bottom: doc5.documentElement.clientHeight
    };
  }
  function getSide(value, side) {
    return typeof value == "number" ? value : value[side];
  }
  function clientRect(node2) {
    let rect = node2.getBoundingClientRect();
    let scaleX = rect.width / node2.offsetWidth || 1;
    let scaleY = rect.height / node2.offsetHeight || 1;
    return {
      left: rect.left,
      right: rect.left + node2.clientWidth * scaleX,
      top: rect.top,
      bottom: rect.top + node2.clientHeight * scaleY
    };
  }
  function scrollRectIntoView2(view, rect, startDOM) {
    let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
    let doc5 = view.dom.ownerDocument;
    for (let parent = startDOM || view.dom; ; parent = parentNode(parent)) {
      if (!parent)
        break;
      if (parent.nodeType != 1)
        continue;
      let elt = parent;
      let atTop = elt == doc5.body;
      let bounding = atTop ? windowRect2(doc5) : clientRect(elt);
      let moveX = 0, moveY = 0;
      if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
        moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
      else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
        moveY = rect.bottom - rect.top > bounding.bottom - bounding.top ? rect.top + getSide(scrollMargin, "top") - bounding.top : rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
      if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
        moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
      else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
        moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
      if (moveX || moveY) {
        if (atTop) {
          doc5.defaultView.scrollBy(moveX, moveY);
        } else {
          let startX = elt.scrollLeft, startY = elt.scrollTop;
          if (moveY)
            elt.scrollTop += moveY;
          if (moveX)
            elt.scrollLeft += moveX;
          let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
          rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
        }
      }
      if (atTop || /^(fixed|sticky)$/.test(getComputedStyle(parent).position))
        break;
    }
  }
  function storeScrollPos(view) {
    let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
    let refDOM, refTop;
    for (let x7 = (rect.left + rect.right) / 2, y4 = startY + 1; y4 < Math.min(innerHeight, rect.bottom); y4 += 5) {
      let dom = view.root.elementFromPoint(x7, y4);
      if (!dom || dom == view.dom || !view.dom.contains(dom))
        continue;
      let localRect = dom.getBoundingClientRect();
      if (localRect.top >= startY - 20) {
        refDOM = dom;
        refTop = localRect.top;
        break;
      }
    }
    return { refDOM, refTop, stack: scrollStack(view.dom) };
  }
  function scrollStack(dom) {
    let stack = [], doc5 = dom.ownerDocument;
    for (let cur2 = dom; cur2; cur2 = parentNode(cur2)) {
      stack.push({ dom: cur2, top: cur2.scrollTop, left: cur2.scrollLeft });
      if (dom == doc5)
        break;
    }
    return stack;
  }
  function resetScrollPos({ refDOM, refTop, stack }) {
    let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
    restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
  }
  function restoreScrollStack(stack, dTop) {
    for (let i3 = 0; i3 < stack.length; i3++) {
      let { dom, top: top2, left } = stack[i3];
      if (dom.scrollTop != top2 + dTop)
        dom.scrollTop = top2 + dTop;
      if (dom.scrollLeft != left)
        dom.scrollLeft = left;
    }
  }
  var preventScrollSupported2 = null;
  function focusPreventScroll2(dom) {
    if (dom.setActive)
      return dom.setActive();
    if (preventScrollSupported2)
      return dom.focus(preventScrollSupported2);
    let stored = scrollStack(dom);
    dom.focus(preventScrollSupported2 == null ? {
      get preventScroll() {
        preventScrollSupported2 = { preventScroll: true };
        return true;
      }
    } : void 0);
    if (!preventScrollSupported2) {
      preventScrollSupported2 = false;
      restoreScrollStack(stored, 0);
    }
  }
  function findOffsetInNode(node2, coords) {
    let closest, dxClosest = 2e8, coordsClosest, offset = 0;
    let rowBot = coords.top, rowTop = coords.top;
    let firstBelow, coordsBelow;
    for (let child = node2.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
      let rects;
      if (child.nodeType == 1)
        rects = child.getClientRects();
      else if (child.nodeType == 3)
        rects = textRange2(child).getClientRects();
      else
        continue;
      for (let i3 = 0; i3 < rects.length; i3++) {
        let rect = rects[i3];
        if (rect.top <= rowBot && rect.bottom >= rowTop) {
          rowBot = Math.max(rect.bottom, rowBot);
          rowTop = Math.min(rect.top, rowTop);
          let dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;
          if (dx < dxClosest) {
            closest = child;
            dxClosest = dx;
            coordsClosest = dx && closest.nodeType == 3 ? {
              left: rect.right < coords.left ? rect.right : rect.left,
              top: coords.top
            } : coords;
            if (child.nodeType == 1 && dx)
              offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
            continue;
          }
        } else if (rect.top > coords.top && !firstBelow && rect.left <= coords.left && rect.right >= coords.left) {
          firstBelow = child;
          coordsBelow = { left: Math.max(rect.left, Math.min(rect.right, coords.left)), top: rect.top };
        }
        if (!closest && (coords.left >= rect.right && coords.top >= rect.top || coords.left >= rect.left && coords.top >= rect.bottom))
          offset = childIndex + 1;
      }
    }
    if (!closest && firstBelow) {
      closest = firstBelow;
      coordsClosest = coordsBelow;
      dxClosest = 0;
    }
    if (closest && closest.nodeType == 3)
      return findOffsetInText(closest, coordsClosest);
    if (!closest || dxClosest && closest.nodeType == 1)
      return { node: node2, offset };
    return findOffsetInNode(closest, coordsClosest);
  }
  function findOffsetInText(node2, coords) {
    let len = node2.nodeValue.length;
    let range = document.createRange();
    for (let i3 = 0; i3 < len; i3++) {
      range.setEnd(node2, i3 + 1);
      range.setStart(node2, i3);
      let rect = singleRect(range, 1);
      if (rect.top == rect.bottom)
        continue;
      if (inRect(coords, rect))
        return { node: node2, offset: i3 + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
    }
    return { node: node2, offset: 0 };
  }
  function inRect(coords, rect) {
    return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 && coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
  }
  function targetKludge(dom, coords) {
    let parent = dom.parentNode;
    if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
      return parent;
    return dom;
  }
  function posFromElement(view, elt, coords) {
    let { node: node2, offset } = findOffsetInNode(elt, coords), bias = -1;
    if (node2.nodeType == 1 && !node2.firstChild) {
      let rect = node2.getBoundingClientRect();
      bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
    }
    return view.docView.posFromDOM(node2, offset, bias);
  }
  function posFromCaret(view, node2, offset, coords) {
    let outsideBlock = -1;
    for (let cur2 = node2, sawBlock = false; ; ) {
      if (cur2 == view.dom)
        break;
      let desc = view.docView.nearestDesc(cur2, true);
      if (!desc)
        return null;
      if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent && !sawBlock || !desc.contentDOM)) {
        let rect = desc.dom.getBoundingClientRect();
        if (desc.node.isBlock && desc.parent && !sawBlock) {
          sawBlock = true;
          if (rect.left > coords.left || rect.top > coords.top)
            outsideBlock = desc.posBefore;
          else if (rect.right < coords.left || rect.bottom < coords.top)
            outsideBlock = desc.posAfter;
        }
        if (!desc.contentDOM && outsideBlock < 0 && !desc.node.isText) {
          let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2 : coords.left < (rect.left + rect.right) / 2;
          return before ? desc.posBefore : desc.posAfter;
        }
      }
      cur2 = desc.dom.parentNode;
    }
    return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node2, offset, -1);
  }
  function elementFromPoint(element2, coords, box) {
    let len = element2.childNodes.length;
    if (len && box.top < box.bottom) {
      for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i3 = startI; ; ) {
        let child = element2.childNodes[i3];
        if (child.nodeType == 1) {
          let rects = child.getClientRects();
          for (let j6 = 0; j6 < rects.length; j6++) {
            let rect = rects[j6];
            if (inRect(coords, rect))
              return elementFromPoint(child, coords, rect);
          }
        }
        if ((i3 = (i3 + 1) % len) == startI)
          break;
      }
    }
    return element2;
  }
  function posAtCoords2(view, coords) {
    let doc5 = view.dom.ownerDocument, node2, offset = 0;
    let caret = caretFromPoint(doc5, coords.left, coords.top);
    if (caret)
      ({ node: node2, offset } = caret);
    let elt = (view.root.elementFromPoint ? view.root : doc5).elementFromPoint(coords.left, coords.top);
    let pos;
    if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
      let box = view.dom.getBoundingClientRect();
      if (!inRect(coords, box))
        return null;
      elt = elementFromPoint(view.dom, coords, box);
      if (!elt)
        return null;
    }
    if (safari2) {
      for (let p6 = elt; node2 && p6; p6 = parentNode(p6))
        if (p6.draggable)
          node2 = void 0;
    }
    elt = targetKludge(elt, coords);
    if (node2) {
      if (gecko2 && node2.nodeType == 1) {
        offset = Math.min(offset, node2.childNodes.length);
        if (offset < node2.childNodes.length) {
          let next = node2.childNodes[offset], box;
          if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left && box.bottom > coords.top)
            offset++;
        }
      }
      let prev;
      if (webkit2 && offset && node2.nodeType == 1 && (prev = node2.childNodes[offset - 1]).nodeType == 1 && prev.contentEditable == "false" && prev.getBoundingClientRect().top >= coords.top)
        offset--;
      if (node2 == view.dom && offset == node2.childNodes.length - 1 && node2.lastChild.nodeType == 1 && coords.top > node2.lastChild.getBoundingClientRect().bottom)
        pos = view.state.doc.content.size;
      else if (offset == 0 || node2.nodeType != 1 || node2.childNodes[offset - 1].nodeName != "BR")
        pos = posFromCaret(view, node2, offset, coords);
    }
    if (pos == null)
      pos = posFromElement(view, elt, coords);
    let desc = view.docView.nearestDesc(elt, true);
    return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
  }
  function nonZero(rect) {
    return rect.top < rect.bottom || rect.left < rect.right;
  }
  function singleRect(target, bias) {
    let rects = target.getClientRects();
    if (rects.length) {
      let first = rects[bias < 0 ? 0 : rects.length - 1];
      if (nonZero(first))
        return first;
    }
    return Array.prototype.find.call(rects, nonZero) || target.getBoundingClientRect();
  }
  var BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
  function coordsAtPos(view, pos, side) {
    let { node: node2, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
    let supportEmptyRange = webkit2 || gecko2;
    if (node2.nodeType == 3) {
      if (supportEmptyRange && (BIDI.test(node2.nodeValue) || (side < 0 ? !offset : offset == node2.nodeValue.length))) {
        let rect = singleRect(textRange2(node2, offset, offset), side);
        if (gecko2 && offset && /\s/.test(node2.nodeValue[offset - 1]) && offset < node2.nodeValue.length) {
          let rectBefore = singleRect(textRange2(node2, offset - 1, offset - 1), -1);
          if (rectBefore.top == rect.top) {
            let rectAfter = singleRect(textRange2(node2, offset, offset + 1), -1);
            if (rectAfter.top != rect.top)
              return flattenV(rectAfter, rectAfter.left < rectBefore.left);
          }
        }
        return rect;
      } else {
        let from2 = offset, to = offset, takeSide = side < 0 ? 1 : -1;
        if (side < 0 && !offset) {
          to++;
          takeSide = -1;
        } else if (side >= 0 && offset == node2.nodeValue.length) {
          from2--;
          takeSide = 1;
        } else if (side < 0) {
          from2--;
        } else {
          to++;
        }
        return flattenV(singleRect(textRange2(node2, from2, to), takeSide), takeSide < 0);
      }
    }
    let $dom = view.state.doc.resolve(pos - (atom || 0));
    if (!$dom.parent.inlineContent) {
      if (atom == null && offset && (side < 0 || offset == nodeSize2(node2))) {
        let before = node2.childNodes[offset - 1];
        if (before.nodeType == 1)
          return flattenH(before.getBoundingClientRect(), false);
      }
      if (atom == null && offset < nodeSize2(node2)) {
        let after = node2.childNodes[offset];
        if (after.nodeType == 1)
          return flattenH(after.getBoundingClientRect(), true);
      }
      return flattenH(node2.getBoundingClientRect(), side >= 0);
    }
    if (atom == null && offset && (side < 0 || offset == nodeSize2(node2))) {
      let before = node2.childNodes[offset - 1];
      let target = before.nodeType == 3 ? textRange2(before, nodeSize2(before) - (supportEmptyRange ? 0 : 1)) : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
      if (target)
        return flattenV(singleRect(target, 1), false);
    }
    if (atom == null && offset < nodeSize2(node2)) {
      let after = node2.childNodes[offset];
      while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
        after = after.nextSibling;
      let target = !after ? null : after.nodeType == 3 ? textRange2(after, 0, supportEmptyRange ? 0 : 1) : after.nodeType == 1 ? after : null;
      if (target)
        return flattenV(singleRect(target, -1), true);
    }
    return flattenV(singleRect(node2.nodeType == 3 ? textRange2(node2) : node2, -side), side >= 0);
  }
  function flattenV(rect, left) {
    if (rect.width == 0)
      return rect;
    let x7 = left ? rect.left : rect.right;
    return { top: rect.top, bottom: rect.bottom, left: x7, right: x7 };
  }
  function flattenH(rect, top2) {
    if (rect.height == 0)
      return rect;
    let y4 = top2 ? rect.top : rect.bottom;
    return { top: y4, bottom: y4, left: rect.left, right: rect.right };
  }
  function withFlushedState(view, state, f3) {
    let viewState = view.state, active = view.root.activeElement;
    if (viewState != state)
      view.updateState(state);
    if (active != view.dom)
      view.focus();
    try {
      return f3();
    } finally {
      if (viewState != state)
        view.updateState(viewState);
      if (active != view.dom && active)
        active.focus();
    }
  }
  function endOfTextblockVertical(view, state, dir) {
    let sel = state.selection;
    let $pos = dir == "up" ? sel.$from : sel.$to;
    return withFlushedState(view, state, () => {
      let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
      for (; ; ) {
        let nearest = view.docView.nearestDesc(dom, true);
        if (!nearest)
          break;
        if (nearest.node.isBlock) {
          dom = nearest.contentDOM || nearest.dom;
          break;
        }
        dom = nearest.dom.parentNode;
      }
      let coords = coordsAtPos(view, $pos.pos, 1);
      for (let child = dom.firstChild; child; child = child.nextSibling) {
        let boxes;
        if (child.nodeType == 1)
          boxes = child.getClientRects();
        else if (child.nodeType == 3)
          boxes = textRange2(child, 0, child.nodeValue.length).getClientRects();
        else
          continue;
        for (let i3 = 0; i3 < boxes.length; i3++) {
          let box = boxes[i3];
          if (box.bottom > box.top + 1 && (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2 : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
            return false;
        }
      }
      return true;
    });
  }
  var maybeRTL = /[\u0590-\u08ac]/;
  function endOfTextblockHorizontal(view, state, dir) {
    let { $head } = state.selection;
    if (!$head.parent.isTextblock)
      return false;
    let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
    let sel = view.domSelection();
    if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
      return dir == "left" || dir == "backward" ? atStart : atEnd;
    return withFlushedState(view, state, () => {
      let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
      let oldBidiLevel = sel.caretBidiLevel;
      sel.modify("move", dir, "character");
      let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
      let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
      let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) || oldNode == newNode && oldOff == newOff;
      try {
        sel.collapse(anchorNode, anchorOffset);
        if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
          sel.extend(oldNode, oldOff);
      } catch (_3) {
      }
      if (oldBidiLevel != null)
        sel.caretBidiLevel = oldBidiLevel;
      return result;
    });
  }
  var cachedState = null;
  var cachedDir = null;
  var cachedResult = false;
  function endOfTextblock(view, state, dir) {
    if (cachedState == state && cachedDir == dir)
      return cachedResult;
    cachedState = state;
    cachedDir = dir;
    return cachedResult = dir == "up" || dir == "down" ? endOfTextblockVertical(view, state, dir) : endOfTextblockHorizontal(view, state, dir);
  }
  var NOT_DIRTY = 0;
  var CHILD_DIRTY = 1;
  var CONTENT_DIRTY = 2;
  var NODE_DIRTY = 3;
  var ViewDesc = class {
    constructor(parent, children, dom, contentDOM) {
      this.parent = parent;
      this.children = children;
      this.dom = dom;
      this.contentDOM = contentDOM;
      this.dirty = NOT_DIRTY;
      dom.pmViewDesc = this;
    }
    // Used to check whether a given description corresponds to a
    // widget/mark/node.
    matchesWidget(widget) {
      return false;
    }
    matchesMark(mark) {
      return false;
    }
    matchesNode(node2, outerDeco, innerDeco) {
      return false;
    }
    matchesHack(nodeName) {
      return false;
    }
    // When parsing in-editor content (in domchange.js), we allow
    // descriptions to determine the parse rules that should be used to
    // parse them.
    parseRule() {
      return null;
    }
    // Used by the editor's event handler to ignore events that come
    // from certain descs.
    stopEvent(event) {
      return false;
    }
    // The size of the content represented by this desc.
    get size() {
      let size = 0;
      for (let i3 = 0; i3 < this.children.length; i3++)
        size += this.children[i3].size;
      return size;
    }
    // For block nodes, this represents the space taken up by their
    // start/end tokens.
    get border() {
      return 0;
    }
    destroy() {
      this.parent = void 0;
      if (this.dom.pmViewDesc == this)
        this.dom.pmViewDesc = void 0;
      for (let i3 = 0; i3 < this.children.length; i3++)
        this.children[i3].destroy();
    }
    posBeforeChild(child) {
      for (let i3 = 0, pos = this.posAtStart; ; i3++) {
        let cur2 = this.children[i3];
        if (cur2 == child)
          return pos;
        pos += cur2.size;
      }
    }
    get posBefore() {
      return this.parent.posBeforeChild(this);
    }
    get posAtStart() {
      return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
    }
    get posAfter() {
      return this.posBefore + this.size;
    }
    get posAtEnd() {
      return this.posAtStart + this.size - 2 * this.border;
    }
    localPosFromDOM(dom, offset, bias) {
      if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
        if (bias < 0) {
          let domBefore, desc;
          if (dom == this.contentDOM) {
            domBefore = dom.childNodes[offset - 1];
          } else {
            while (dom.parentNode != this.contentDOM)
              dom = dom.parentNode;
            domBefore = dom.previousSibling;
          }
          while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
            domBefore = domBefore.previousSibling;
          return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
        } else {
          let domAfter, desc;
          if (dom == this.contentDOM) {
            domAfter = dom.childNodes[offset];
          } else {
            while (dom.parentNode != this.contentDOM)
              dom = dom.parentNode;
            domAfter = dom.nextSibling;
          }
          while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
            domAfter = domAfter.nextSibling;
          return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
        }
      }
      let atEnd;
      if (dom == this.dom && this.contentDOM) {
        atEnd = offset > domIndex2(this.contentDOM);
      } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
        atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
      } else if (this.dom.firstChild) {
        if (offset == 0)
          for (let search3 = dom; ; search3 = search3.parentNode) {
            if (search3 == this.dom) {
              atEnd = false;
              break;
            }
            if (search3.previousSibling)
              break;
          }
        if (atEnd == null && offset == dom.childNodes.length)
          for (let search3 = dom; ; search3 = search3.parentNode) {
            if (search3 == this.dom) {
              atEnd = true;
              break;
            }
            if (search3.nextSibling)
              break;
          }
      }
      return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
    }
    nearestDesc(dom, onlyNodes = false) {
      for (let first = true, cur2 = dom; cur2; cur2 = cur2.parentNode) {
        let desc = this.getDesc(cur2), nodeDOM;
        if (desc && (!onlyNodes || desc.node)) {
          if (first && (nodeDOM = desc.nodeDOM) && !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
            first = false;
          else
            return desc;
        }
      }
    }
    getDesc(dom) {
      let desc = dom.pmViewDesc;
      for (let cur2 = desc; cur2; cur2 = cur2.parent)
        if (cur2 == this)
          return desc;
    }
    posFromDOM(dom, offset, bias) {
      for (let scan = dom; scan; scan = scan.parentNode) {
        let desc = this.getDesc(scan);
        if (desc)
          return desc.localPosFromDOM(dom, offset, bias);
      }
      return -1;
    }
    // Find the desc for the node after the given pos, if any. (When a
    // parent node overrode rendering, there might not be one.)
    descAt(pos) {
      for (let i3 = 0, offset = 0; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = offset + child.size;
        if (offset == pos && end != offset) {
          while (!child.border && child.children.length)
            child = child.children[0];
          return child;
        }
        if (pos < end)
          return child.descAt(pos - offset - child.border);
        offset = end;
      }
    }
    domFromPos(pos, side) {
      if (!this.contentDOM)
        return { node: this.dom, offset: 0, atom: pos + 1 };
      let i3 = 0, offset = 0;
      for (let curPos = 0; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = curPos + child.size;
        if (end > pos || child instanceof TrailingHackViewDesc) {
          offset = pos - curPos;
          break;
        }
        curPos = end;
      }
      if (offset)
        return this.children[i3].domFromPos(offset - this.children[i3].border, side);
      for (let prev; i3 && !(prev = this.children[i3 - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i3--) {
      }
      if (side <= 0) {
        let prev, enter = true;
        for (; ; i3--, enter = false) {
          prev = i3 ? this.children[i3 - 1] : null;
          if (!prev || prev.dom.parentNode == this.contentDOM)
            break;
        }
        if (prev && side && enter && !prev.border && !prev.domAtom)
          return prev.domFromPos(prev.size, side);
        return { node: this.contentDOM, offset: prev ? domIndex2(prev.dom) + 1 : 0 };
      } else {
        let next, enter = true;
        for (; ; i3++, enter = false) {
          next = i3 < this.children.length ? this.children[i3] : null;
          if (!next || next.dom.parentNode == this.contentDOM)
            break;
        }
        if (next && enter && !next.border && !next.domAtom)
          return next.domFromPos(0, side);
        return { node: this.contentDOM, offset: next ? domIndex2(next.dom) : this.contentDOM.childNodes.length };
      }
    }
    // Used to find a DOM range in a single parent for a given changed
    // range.
    parseRange(from2, to, base2 = 0) {
      if (this.children.length == 0)
        return { node: this.contentDOM, from: from2, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
      let fromOffset = -1, toOffset = -1;
      for (let offset = base2, i3 = 0; ; i3++) {
        let child = this.children[i3], end = offset + child.size;
        if (fromOffset == -1 && from2 <= end) {
          let childBase = offset + child.border;
          if (from2 >= childBase && to <= end - child.border && child.node && child.contentDOM && this.contentDOM.contains(child.contentDOM))
            return child.parseRange(from2, to, childBase);
          from2 = offset;
          for (let j6 = i3; j6 > 0; j6--) {
            let prev = this.children[j6 - 1];
            if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
              fromOffset = domIndex2(prev.dom) + 1;
              break;
            }
            from2 -= prev.size;
          }
          if (fromOffset == -1)
            fromOffset = 0;
        }
        if (fromOffset > -1 && (end > to || i3 == this.children.length - 1)) {
          to = end;
          for (let j6 = i3 + 1; j6 < this.children.length; j6++) {
            let next = this.children[j6];
            if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
              toOffset = domIndex2(next.dom);
              break;
            }
            to += next.size;
          }
          if (toOffset == -1)
            toOffset = this.contentDOM.childNodes.length;
          break;
        }
        offset = end;
      }
      return { node: this.contentDOM, from: from2, to, fromOffset, toOffset };
    }
    emptyChildAt(side) {
      if (this.border || !this.contentDOM || !this.children.length)
        return false;
      let child = this.children[side < 0 ? 0 : this.children.length - 1];
      return child.size == 0 || child.emptyChildAt(side);
    }
    domAfterPos(pos) {
      let { node: node2, offset } = this.domFromPos(pos, 0);
      if (node2.nodeType != 1 || offset == node2.childNodes.length)
        throw new RangeError("No node after pos " + pos);
      return node2.childNodes[offset];
    }
    // View descs are responsible for setting any selection that falls
    // entirely inside of them, so that custom implementations can do
    // custom things with the selection. Note that this falls apart when
    // a selection starts in such a node and ends in another, in which
    // case we just use whatever domFromPos produces as a best effort.
    setSelection(anchor, head, root2, force = false) {
      let from2 = Math.min(anchor, head), to = Math.max(anchor, head);
      for (let i3 = 0, offset = 0; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = offset + child.size;
        if (from2 > offset && to < end)
          return child.setSelection(anchor - offset - child.border, head - offset - child.border, root2, force);
        offset = end;
      }
      let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
      let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
      let domSel = root2.getSelection();
      let brKludge = false;
      if ((gecko2 || safari2) && anchor == head) {
        let { node: node2, offset } = anchorDOM;
        if (node2.nodeType == 3) {
          brKludge = !!(offset && node2.nodeValue[offset - 1] == "\n");
          if (brKludge && offset == node2.nodeValue.length) {
            for (let scan = node2, after; scan; scan = scan.parentNode) {
              if (after = scan.nextSibling) {
                if (after.nodeName == "BR")
                  anchorDOM = headDOM = { node: after.parentNode, offset: domIndex2(after) + 1 };
                break;
              }
              let desc = scan.pmViewDesc;
              if (desc && desc.node && desc.node.isBlock)
                break;
            }
          }
        } else {
          let prev = node2.childNodes[offset - 1];
          brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
        }
      }
      if (gecko2 && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
        let after = domSel.focusNode.childNodes[domSel.focusOffset];
        if (after && after.contentEditable == "false")
          force = true;
      }
      if (!(force || brKludge && safari2) && isEquivalentPosition2(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) && isEquivalentPosition2(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
        return;
      let domSelExtended = false;
      if ((domSel.extend || anchor == head) && !brKludge) {
        domSel.collapse(anchorDOM.node, anchorDOM.offset);
        try {
          if (anchor != head)
            domSel.extend(headDOM.node, headDOM.offset);
          domSelExtended = true;
        } catch (_3) {
        }
      }
      if (!domSelExtended) {
        if (anchor > head) {
          let tmp = anchorDOM;
          anchorDOM = headDOM;
          headDOM = tmp;
        }
        let range = document.createRange();
        range.setEnd(headDOM.node, headDOM.offset);
        range.setStart(anchorDOM.node, anchorDOM.offset);
        domSel.removeAllRanges();
        domSel.addRange(range);
      }
    }
    ignoreMutation(mutation) {
      return !this.contentDOM && mutation.type != "selection";
    }
    get contentLost() {
      return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
    }
    // Remove a subtree of the element tree that has been touched
    // by a DOM change, so that the next update will redraw it.
    markDirty(from2, to) {
      for (let offset = 0, i3 = 0; i3 < this.children.length; i3++) {
        let child = this.children[i3], end = offset + child.size;
        if (offset == end ? from2 <= end && to >= offset : from2 < end && to > offset) {
          let startInside = offset + child.border, endInside = end - child.border;
          if (from2 >= startInside && to <= endInside) {
            this.dirty = from2 == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
            if (from2 == startInside && to == endInside && (child.contentLost || child.dom.parentNode != this.contentDOM))
              child.dirty = NODE_DIRTY;
            else
              child.markDirty(from2 - startInside, to - startInside);
            return;
          } else {
            child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length ? CONTENT_DIRTY : NODE_DIRTY;
          }
        }
        offset = end;
      }
      this.dirty = CONTENT_DIRTY;
    }
    markParentsDirty() {
      let level = 1;
      for (let node2 = this.parent; node2; node2 = node2.parent, level++) {
        let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
        if (node2.dirty < dirty)
          node2.dirty = dirty;
      }
    }
    get domAtom() {
      return false;
    }
    get ignoreForCoords() {
      return false;
    }
    isText(text5) {
      return false;
    }
  };
  var WidgetViewDesc = class extends ViewDesc {
    constructor(parent, widget, view, pos) {
      let self2, dom = widget.type.toDOM;
      if (typeof dom == "function")
        dom = dom(view, () => {
          if (!self2)
            return pos;
          if (self2.parent)
            return self2.parent.posBeforeChild(self2);
        });
      if (!widget.type.spec.raw) {
        if (dom.nodeType != 1) {
          let wrap3 = document.createElement("span");
          wrap3.appendChild(dom);
          dom = wrap3;
        }
        dom.contentEditable = "false";
        dom.classList.add("ProseMirror-widget");
      }
      super(parent, [], dom, null);
      this.widget = widget;
      this.widget = widget;
      self2 = this;
    }
    matchesWidget(widget) {
      return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
    }
    parseRule() {
      return { ignore: true };
    }
    stopEvent(event) {
      let stop = this.widget.spec.stopEvent;
      return stop ? stop(event) : false;
    }
    ignoreMutation(mutation) {
      return mutation.type != "selection" || this.widget.spec.ignoreSelection;
    }
    destroy() {
      this.widget.type.destroy(this.dom);
      super.destroy();
    }
    get domAtom() {
      return true;
    }
    get side() {
      return this.widget.type.side;
    }
  };
  var CompositionViewDesc = class extends ViewDesc {
    constructor(parent, dom, textDOM, text5) {
      super(parent, [], dom, null);
      this.textDOM = textDOM;
      this.text = text5;
    }
    get size() {
      return this.text.length;
    }
    localPosFromDOM(dom, offset) {
      if (dom != this.textDOM)
        return this.posAtStart + (offset ? this.size : 0);
      return this.posAtStart + offset;
    }
    domFromPos(pos) {
      return { node: this.textDOM, offset: pos };
    }
    ignoreMutation(mut) {
      return mut.type === "characterData" && mut.target.nodeValue == mut.oldValue;
    }
  };
  var MarkViewDesc = class _MarkViewDesc extends ViewDesc {
    constructor(parent, mark, dom, contentDOM) {
      super(parent, [], dom, contentDOM);
      this.mark = mark;
    }
    static create(parent, mark, inline, view) {
      let custom = view.nodeViews[mark.type.name];
      let spec = custom && custom(mark, view, inline);
      if (!spec || !spec.dom)
        spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
      return new _MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
    }
    parseRule() {
      if (this.dirty & NODE_DIRTY || this.mark.type.spec.reparseInView)
        return null;
      return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
    }
    matchesMark(mark) {
      return this.dirty != NODE_DIRTY && this.mark.eq(mark);
    }
    markDirty(from2, to) {
      super.markDirty(from2, to);
      if (this.dirty != NOT_DIRTY) {
        let parent = this.parent;
        while (!parent.node)
          parent = parent.parent;
        if (parent.dirty < this.dirty)
          parent.dirty = this.dirty;
        this.dirty = NOT_DIRTY;
      }
    }
    slice(from2, to, view) {
      let copy2 = _MarkViewDesc.create(this.parent, this.mark, true, view);
      let nodes = this.children, size = this.size;
      if (to < size)
        nodes = replaceNodes(nodes, to, size, view);
      if (from2 > 0)
        nodes = replaceNodes(nodes, 0, from2, view);
      for (let i3 = 0; i3 < nodes.length; i3++)
        nodes[i3].parent = copy2;
      copy2.children = nodes;
      return copy2;
    }
  };
  var NodeViewDesc = class _NodeViewDesc extends ViewDesc {
    constructor(parent, node2, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
      super(parent, [], dom, contentDOM);
      this.node = node2;
      this.outerDeco = outerDeco;
      this.innerDeco = innerDeco;
      this.nodeDOM = nodeDOM;
    }
    // By default, a node is rendered using the `toDOM` method from the
    // node type spec. But client code can use the `nodeViews` spec to
    // supply a custom node view, which can influence various aspects of
    // the way the node works.
    //
    // (Using subclassing for this was intentionally decided against,
    // since it'd require exposing a whole slew of finicky
    // implementation details to the user code that they probably will
    // never need.)
    static create(parent, node2, outerDeco, innerDeco, view, pos) {
      let custom = view.nodeViews[node2.type.name], descObj;
      let spec = custom && custom(node2, view, () => {
        if (!descObj)
          return pos;
        if (descObj.parent)
          return descObj.parent.posBeforeChild(descObj);
      }, outerDeco, innerDeco);
      let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
      if (node2.isText) {
        if (!dom)
          dom = document.createTextNode(node2.text);
        else if (dom.nodeType != 3)
          throw new RangeError("Text must be rendered as a DOM text node");
      } else if (!dom) {
        ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node2.type.spec.toDOM(node2)));
      }
      if (!contentDOM && !node2.isText && dom.nodeName != "BR") {
        if (!dom.hasAttribute("contenteditable"))
          dom.contentEditable = "false";
        if (node2.type.spec.draggable)
          dom.draggable = true;
      }
      let nodeDOM = dom;
      dom = applyOuterDeco(dom, outerDeco, node2);
      if (spec)
        return descObj = new CustomNodeViewDesc(parent, node2, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
      else if (node2.isText)
        return new TextViewDesc(parent, node2, outerDeco, innerDeco, dom, nodeDOM, view);
      else
        return new _NodeViewDesc(parent, node2, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
    }
    parseRule() {
      if (this.node.type.spec.reparseInView)
        return null;
      let rule = { node: this.node.type.name, attrs: this.node.attrs };
      if (this.node.type.whitespace == "pre")
        rule.preserveWhitespace = "full";
      if (!this.contentDOM) {
        rule.getContent = () => this.node.content;
      } else if (!this.contentLost) {
        rule.contentElement = this.contentDOM;
      } else {
        for (let i3 = this.children.length - 1; i3 >= 0; i3--) {
          let child = this.children[i3];
          if (this.dom.contains(child.dom.parentNode)) {
            rule.contentElement = child.dom.parentNode;
            break;
          }
        }
        if (!rule.contentElement)
          rule.getContent = () => Fragment.empty;
      }
      return rule;
    }
    matchesNode(node2, outerDeco, innerDeco) {
      return this.dirty == NOT_DIRTY && node2.eq(this.node) && sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
    }
    get size() {
      return this.node.nodeSize;
    }
    get border() {
      return this.node.isLeaf ? 0 : 1;
    }
    // Syncs `this.children` to match `this.node.content` and the local
    // decorations, possibly introducing nesting for marks. Then, in a
    // separate step, syncs the DOM inside `this.contentDOM` to
    // `this.children`.
    updateChildren(view, pos) {
      let inline = this.node.inlineContent, off = pos;
      let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
      let localComposition = composition && composition.pos > -1 ? composition : null;
      let compositionInChild = composition && composition.pos < 0;
      let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
      iterDeco(this.node, this.innerDeco, (widget, i3, insideNode) => {
        if (widget.spec.marks)
          updater.syncToMarks(widget.spec.marks, inline, view);
        else if (widget.type.side >= 0 && !insideNode)
          updater.syncToMarks(i3 == this.node.childCount ? Mark.none : this.node.child(i3).marks, inline, view);
        updater.placeWidget(widget, view, off);
      }, (child, outerDeco, innerDeco, i3) => {
        updater.syncToMarks(child.marks, inline, view);
        let compIndex;
        if (updater.findNodeMatch(child, outerDeco, innerDeco, i3))
          ;
        else if (compositionInChild && view.state.selection.from > off && view.state.selection.to < off + child.nodeSize && (compIndex = updater.findIndexWithChild(composition.node)) > -1 && updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view))
          ;
        else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i3, off))
          ;
        else {
          updater.addNode(child, outerDeco, innerDeco, view, off);
        }
        off += child.nodeSize;
      });
      updater.syncToMarks([], inline, view);
      if (this.node.isTextblock)
        updater.addTextblockHacks();
      updater.destroyRest();
      if (updater.changed || this.dirty == CONTENT_DIRTY) {
        if (localComposition)
          this.protectLocalComposition(view, localComposition);
        renderDescs(this.contentDOM, this.children, view);
        if (ios2)
          iosHacks(this.dom);
      }
    }
    localCompositionInfo(view, pos) {
      let { from: from2, to } = view.state.selection;
      if (!(view.state.selection instanceof TextSelection) || from2 < pos || to > pos + this.node.content.size)
        return null;
      let textNode = view.input.compositionNode;
      if (!textNode || !this.dom.contains(textNode.parentNode))
        return null;
      if (this.node.inlineContent) {
        let text5 = textNode.nodeValue;
        let textPos = findTextInFragment(this.node.content, text5, from2 - pos, to - pos);
        return textPos < 0 ? null : { node: textNode, pos: textPos, text: text5 };
      } else {
        return { node: textNode, pos: -1, text: "" };
      }
    }
    protectLocalComposition(view, { node: node2, pos, text: text5 }) {
      if (this.getDesc(node2))
        return;
      let topNode = node2;
      for (; ; topNode = topNode.parentNode) {
        if (topNode.parentNode == this.contentDOM)
          break;
        while (topNode.previousSibling)
          topNode.parentNode.removeChild(topNode.previousSibling);
        while (topNode.nextSibling)
          topNode.parentNode.removeChild(topNode.nextSibling);
        if (topNode.pmViewDesc)
          topNode.pmViewDesc = void 0;
      }
      let desc = new CompositionViewDesc(this, topNode, node2, text5);
      view.input.compositionNodes.push(desc);
      this.children = replaceNodes(this.children, pos, pos + text5.length, view, desc);
    }
    // If this desc must be updated to match the given node decoration,
    // do so and return true.
    update(node2, outerDeco, innerDeco, view) {
      if (this.dirty == NODE_DIRTY || !node2.sameMarkup(this.node))
        return false;
      this.updateInner(node2, outerDeco, innerDeco, view);
      return true;
    }
    updateInner(node2, outerDeco, innerDeco, view) {
      this.updateOuterDeco(outerDeco);
      this.node = node2;
      this.innerDeco = innerDeco;
      if (this.contentDOM)
        this.updateChildren(view, this.posAtStart);
      this.dirty = NOT_DIRTY;
    }
    updateOuterDeco(outerDeco) {
      if (sameOuterDeco(outerDeco, this.outerDeco))
        return;
      let needsWrap = this.nodeDOM.nodeType != 1;
      let oldDOM = this.dom;
      this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
      if (this.dom != oldDOM) {
        oldDOM.pmViewDesc = void 0;
        this.dom.pmViewDesc = this;
      }
      this.outerDeco = outerDeco;
    }
    // Mark this node as being the selected node.
    selectNode() {
      if (this.nodeDOM.nodeType == 1)
        this.nodeDOM.classList.add("ProseMirror-selectednode");
      if (this.contentDOM || !this.node.type.spec.draggable)
        this.dom.draggable = true;
    }
    // Remove selected node marking from this node.
    deselectNode() {
      if (this.nodeDOM.nodeType == 1)
        this.nodeDOM.classList.remove("ProseMirror-selectednode");
      if (this.contentDOM || !this.node.type.spec.draggable)
        this.dom.removeAttribute("draggable");
    }
    get domAtom() {
      return this.node.isAtom;
    }
  };
  function docViewDesc(doc5, outerDeco, innerDeco, dom, view) {
    applyOuterDeco(dom, outerDeco, doc5);
    let docView = new NodeViewDesc(void 0, doc5, outerDeco, innerDeco, dom, dom, dom, view, 0);
    if (docView.contentDOM)
      docView.updateChildren(view, 0);
    return docView;
  }
  var TextViewDesc = class _TextViewDesc extends NodeViewDesc {
    constructor(parent, node2, outerDeco, innerDeco, dom, nodeDOM, view) {
      super(parent, node2, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
    }
    parseRule() {
      let skip = this.nodeDOM.parentNode;
      while (skip && skip != this.dom && !skip.pmIsDeco)
        skip = skip.parentNode;
      return { skip: skip || true };
    }
    update(node2, outerDeco, innerDeco, view) {
      if (this.dirty == NODE_DIRTY || this.dirty != NOT_DIRTY && !this.inParent() || !node2.sameMarkup(this.node))
        return false;
      this.updateOuterDeco(outerDeco);
      if ((this.dirty != NOT_DIRTY || node2.text != this.node.text) && node2.text != this.nodeDOM.nodeValue) {
        this.nodeDOM.nodeValue = node2.text;
        if (view.trackWrites == this.nodeDOM)
          view.trackWrites = null;
      }
      this.node = node2;
      this.dirty = NOT_DIRTY;
      return true;
    }
    inParent() {
      let parentDOM = this.parent.contentDOM;
      for (let n5 = this.nodeDOM; n5; n5 = n5.parentNode)
        if (n5 == parentDOM)
          return true;
      return false;
    }
    domFromPos(pos) {
      return { node: this.nodeDOM, offset: pos };
    }
    localPosFromDOM(dom, offset, bias) {
      if (dom == this.nodeDOM)
        return this.posAtStart + Math.min(offset, this.node.text.length);
      return super.localPosFromDOM(dom, offset, bias);
    }
    ignoreMutation(mutation) {
      return mutation.type != "characterData" && mutation.type != "selection";
    }
    slice(from2, to, view) {
      let node2 = this.node.cut(from2, to), dom = document.createTextNode(node2.text);
      return new _TextViewDesc(this.parent, node2, this.outerDeco, this.innerDeco, dom, dom, view);
    }
    markDirty(from2, to) {
      super.markDirty(from2, to);
      if (this.dom != this.nodeDOM && (from2 == 0 || to == this.nodeDOM.nodeValue.length))
        this.dirty = NODE_DIRTY;
    }
    get domAtom() {
      return false;
    }
    isText(text5) {
      return this.node.text == text5;
    }
  };
  var TrailingHackViewDesc = class extends ViewDesc {
    parseRule() {
      return { ignore: true };
    }
    matchesHack(nodeName) {
      return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName;
    }
    get domAtom() {
      return true;
    }
    get ignoreForCoords() {
      return this.dom.nodeName == "IMG";
    }
  };
  var CustomNodeViewDesc = class extends NodeViewDesc {
    constructor(parent, node2, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
      super(parent, node2, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
      this.spec = spec;
    }
    // A custom `update` method gets to decide whether the update goes
    // through. If it does, and there's a `contentDOM` node, our logic
    // updates the children.
    update(node2, outerDeco, innerDeco, view) {
      if (this.dirty == NODE_DIRTY)
        return false;
      if (this.spec.update) {
        let result = this.spec.update(node2, outerDeco, innerDeco);
        if (result)
          this.updateInner(node2, outerDeco, innerDeco, view);
        return result;
      } else if (!this.contentDOM && !node2.isLeaf) {
        return false;
      } else {
        return super.update(node2, outerDeco, innerDeco, view);
      }
    }
    selectNode() {
      this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
    }
    deselectNode() {
      this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
    }
    setSelection(anchor, head, root2, force) {
      this.spec.setSelection ? this.spec.setSelection(anchor, head, root2) : super.setSelection(anchor, head, root2, force);
    }
    destroy() {
      if (this.spec.destroy)
        this.spec.destroy();
      super.destroy();
    }
    stopEvent(event) {
      return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
    }
    ignoreMutation(mutation) {
      return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
    }
  };
  function renderDescs(parentDOM, descs, view) {
    let dom = parentDOM.firstChild, written = false;
    for (let i3 = 0; i3 < descs.length; i3++) {
      let desc = descs[i3], childDOM = desc.dom;
      if (childDOM.parentNode == parentDOM) {
        while (childDOM != dom) {
          dom = rm2(dom);
          written = true;
        }
        dom = dom.nextSibling;
      } else {
        written = true;
        parentDOM.insertBefore(childDOM, dom);
      }
      if (desc instanceof MarkViewDesc) {
        let pos = dom ? dom.previousSibling : parentDOM.lastChild;
        renderDescs(desc.contentDOM, desc.children, view);
        dom = pos ? pos.nextSibling : parentDOM.firstChild;
      }
    }
    while (dom) {
      dom = rm2(dom);
      written = true;
    }
    if (written && view.trackWrites == parentDOM)
      view.trackWrites = null;
  }
  var OuterDecoLevel = function(nodeName) {
    if (nodeName)
      this.nodeName = nodeName;
  };
  OuterDecoLevel.prototype = /* @__PURE__ */ Object.create(null);
  var noDeco = [new OuterDecoLevel()];
  function computeOuterDeco(outerDeco, node2, needsWrap) {
    if (outerDeco.length == 0)
      return noDeco;
    let top2 = needsWrap ? noDeco[0] : new OuterDecoLevel(), result = [top2];
    for (let i3 = 0; i3 < outerDeco.length; i3++) {
      let attrs = outerDeco[i3].type.attrs;
      if (!attrs)
        continue;
      if (attrs.nodeName)
        result.push(top2 = new OuterDecoLevel(attrs.nodeName));
      for (let name2 in attrs) {
        let val = attrs[name2];
        if (val == null)
          continue;
        if (needsWrap && result.length == 1)
          result.push(top2 = new OuterDecoLevel(node2.isInline ? "span" : "div"));
        if (name2 == "class")
          top2.class = (top2.class ? top2.class + " " : "") + val;
        else if (name2 == "style")
          top2.style = (top2.style ? top2.style + ";" : "") + val;
        else if (name2 != "nodeName")
          top2[name2] = val;
      }
    }
    return result;
  }
  function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
    if (prevComputed == noDeco && curComputed == noDeco)
      return nodeDOM;
    let curDOM = nodeDOM;
    for (let i3 = 0; i3 < curComputed.length; i3++) {
      let deco = curComputed[i3], prev = prevComputed[i3];
      if (i3) {
        let parent;
        if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM && (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
          curDOM = parent;
        } else {
          parent = document.createElement(deco.nodeName);
          parent.pmIsDeco = true;
          parent.appendChild(curDOM);
          prev = noDeco[0];
          curDOM = parent;
        }
      }
      patchAttributes(curDOM, prev || noDeco[0], deco);
    }
    return curDOM;
  }
  function patchAttributes(dom, prev, cur2) {
    for (let name2 in prev)
      if (name2 != "class" && name2 != "style" && name2 != "nodeName" && !(name2 in cur2))
        dom.removeAttribute(name2);
    for (let name2 in cur2)
      if (name2 != "class" && name2 != "style" && name2 != "nodeName" && cur2[name2] != prev[name2])
        dom.setAttribute(name2, cur2[name2]);
    if (prev.class != cur2.class) {
      let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
      let curList = cur2.class ? cur2.class.split(" ").filter(Boolean) : [];
      for (let i3 = 0; i3 < prevList.length; i3++)
        if (curList.indexOf(prevList[i3]) == -1)
          dom.classList.remove(prevList[i3]);
      for (let i3 = 0; i3 < curList.length; i3++)
        if (prevList.indexOf(curList[i3]) == -1)
          dom.classList.add(curList[i3]);
      if (dom.classList.length == 0)
        dom.removeAttribute("class");
    }
    if (prev.style != cur2.style) {
      if (prev.style) {
        let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m4;
        while (m4 = prop.exec(prev.style))
          dom.style.removeProperty(m4[1]);
      }
      if (cur2.style)
        dom.style.cssText += cur2.style;
    }
  }
  function applyOuterDeco(dom, deco, node2) {
    return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node2, dom.nodeType != 1));
  }
  function sameOuterDeco(a2, b4) {
    if (a2.length != b4.length)
      return false;
    for (let i3 = 0; i3 < a2.length; i3++)
      if (!a2[i3].type.eq(b4[i3].type))
        return false;
    return true;
  }
  function rm2(dom) {
    let next = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next;
  }
  var ViewTreeUpdater = class {
    constructor(top2, lock, view) {
      this.lock = lock;
      this.view = view;
      this.index = 0;
      this.stack = [];
      this.changed = false;
      this.top = top2;
      this.preMatch = preMatch(top2.node.content, top2);
    }
    // Destroy and remove the children between the given indices in
    // `this.top`.
    destroyBetween(start, end) {
      if (start == end)
        return;
      for (let i3 = start; i3 < end; i3++)
        this.top.children[i3].destroy();
      this.top.children.splice(start, end - start);
      this.changed = true;
    }
    // Destroy all remaining children in `this.top`.
    destroyRest() {
      this.destroyBetween(this.index, this.top.children.length);
    }
    // Sync the current stack of mark descs with the given array of
    // marks, reusing existing mark descs when possible.
    syncToMarks(marks2, inline, view) {
      let keep = 0, depth2 = this.stack.length >> 1;
      let maxKeep = Math.min(depth2, marks2.length);
      while (keep < maxKeep && (keep == depth2 - 1 ? this.top : this.stack[keep + 1 << 1]).matchesMark(marks2[keep]) && marks2[keep].type.spec.spanning !== false)
        keep++;
      while (keep < depth2) {
        this.destroyRest();
        this.top.dirty = NOT_DIRTY;
        this.index = this.stack.pop();
        this.top = this.stack.pop();
        depth2--;
      }
      while (depth2 < marks2.length) {
        this.stack.push(this.top, this.index + 1);
        let found2 = -1;
        for (let i3 = this.index; i3 < Math.min(this.index + 3, this.top.children.length); i3++) {
          let next = this.top.children[i3];
          if (next.matchesMark(marks2[depth2]) && !this.isLocked(next.dom)) {
            found2 = i3;
            break;
          }
        }
        if (found2 > -1) {
          if (found2 > this.index) {
            this.changed = true;
            this.destroyBetween(this.index, found2);
          }
          this.top = this.top.children[this.index];
        } else {
          let markDesc = MarkViewDesc.create(this.top, marks2[depth2], inline, view);
          this.top.children.splice(this.index, 0, markDesc);
          this.top = markDesc;
          this.changed = true;
        }
        this.index = 0;
        depth2++;
      }
    }
    // Try to find a node desc matching the given data. Skip over it and
    // return true when successful.
    findNodeMatch(node2, outerDeco, innerDeco, index2) {
      let found2 = -1, targetDesc;
      if (index2 >= this.preMatch.index && (targetDesc = this.preMatch.matches[index2 - this.preMatch.index]).parent == this.top && targetDesc.matchesNode(node2, outerDeco, innerDeco)) {
        found2 = this.top.children.indexOf(targetDesc, this.index);
      } else {
        for (let i3 = this.index, e3 = Math.min(this.top.children.length, i3 + 5); i3 < e3; i3++) {
          let child = this.top.children[i3];
          if (child.matchesNode(node2, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
            found2 = i3;
            break;
          }
        }
      }
      if (found2 < 0)
        return false;
      this.destroyBetween(this.index, found2);
      this.index++;
      return true;
    }
    updateNodeAt(node2, outerDeco, innerDeco, index2, view) {
      let child = this.top.children[index2];
      if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
        child.dirty = CONTENT_DIRTY;
      if (!child.update(node2, outerDeco, innerDeco, view))
        return false;
      this.destroyBetween(this.index, index2);
      this.index++;
      return true;
    }
    findIndexWithChild(domNode) {
      for (; ; ) {
        let parent = domNode.parentNode;
        if (!parent)
          return -1;
        if (parent == this.top.contentDOM) {
          let desc = domNode.pmViewDesc;
          if (desc)
            for (let i3 = this.index; i3 < this.top.children.length; i3++) {
              if (this.top.children[i3] == desc)
                return i3;
            }
          return -1;
        }
        domNode = parent;
      }
    }
    // Try to update the next node, if any, to the given data. Checks
    // pre-matches to avoid overwriting nodes that could still be used.
    updateNextNode(node2, outerDeco, innerDeco, view, index2, pos) {
      for (let i3 = this.index; i3 < this.top.children.length; i3++) {
        let next = this.top.children[i3];
        if (next instanceof NodeViewDesc) {
          let preMatch2 = this.preMatch.matched.get(next);
          if (preMatch2 != null && preMatch2 != index2)
            return false;
          let nextDOM = next.dom, updated;
          let locked = this.isLocked(nextDOM) && !(node2.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node2.text && next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
          if (!locked && next.update(node2, outerDeco, innerDeco, view)) {
            this.destroyBetween(this.index, i3);
            if (next.dom != nextDOM)
              this.changed = true;
            this.index++;
            return true;
          } else if (!locked && (updated = this.recreateWrapper(next, node2, outerDeco, innerDeco, view, pos))) {
            this.top.children[this.index] = updated;
            if (updated.contentDOM) {
              updated.dirty = CONTENT_DIRTY;
              updated.updateChildren(view, pos + 1);
              updated.dirty = NOT_DIRTY;
            }
            this.changed = true;
            this.index++;
            return true;
          }
          break;
        }
      }
      return false;
    }
    // When a node with content is replaced by a different node with
    // identical content, move over its children.
    recreateWrapper(next, node2, outerDeco, innerDeco, view, pos) {
      if (next.dirty || node2.isAtom || !next.children.length || !next.node.content.eq(node2.content))
        return null;
      let wrapper = NodeViewDesc.create(this.top, node2, outerDeco, innerDeco, view, pos);
      if (wrapper.contentDOM) {
        wrapper.children = next.children;
        next.children = [];
        for (let ch of wrapper.children)
          ch.parent = wrapper;
      }
      next.destroy();
      return wrapper;
    }
    // Insert the node as a newly created node desc.
    addNode(node2, outerDeco, innerDeco, view, pos) {
      let desc = NodeViewDesc.create(this.top, node2, outerDeco, innerDeco, view, pos);
      if (desc.contentDOM)
        desc.updateChildren(view, pos + 1);
      this.top.children.splice(this.index++, 0, desc);
      this.changed = true;
    }
    placeWidget(widget, view, pos) {
      let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
      if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
        this.index++;
      } else {
        let desc = new WidgetViewDesc(this.top, widget, view, pos);
        this.top.children.splice(this.index++, 0, desc);
        this.changed = true;
      }
    }
    // Make sure a textblock looks and behaves correctly in
    // contentEditable.
    addTextblockHacks() {
      let lastChild = this.top.children[this.index - 1], parent = this.top;
      while (lastChild instanceof MarkViewDesc) {
        parent = lastChild;
        lastChild = parent.children[parent.children.length - 1];
      }
      if (!lastChild || // Empty textblock
      !(lastChild instanceof TextViewDesc) || /\n$/.test(lastChild.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text)) {
        if ((safari2 || chrome2) && lastChild && lastChild.dom.contentEditable == "false")
          this.addHackNode("IMG", parent);
        this.addHackNode("BR", this.top);
      }
    }
    addHackNode(nodeName, parent) {
      if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
        this.index++;
      } else {
        let dom = document.createElement(nodeName);
        if (nodeName == "IMG") {
          dom.className = "ProseMirror-separator";
          dom.alt = "";
        }
        if (nodeName == "BR")
          dom.className = "ProseMirror-trailingBreak";
        let hack = new TrailingHackViewDesc(this.top, [], dom, null);
        if (parent != this.top)
          parent.children.push(hack);
        else
          parent.children.splice(this.index++, 0, hack);
        this.changed = true;
      }
    }
    isLocked(node2) {
      return this.lock && (node2 == this.lock || node2.nodeType == 1 && node2.contains(this.lock.parentNode));
    }
  };
  function preMatch(frag, parentDesc) {
    let curDesc = parentDesc, descI = curDesc.children.length;
    let fI = frag.childCount, matched = /* @__PURE__ */ new Map(), matches2 = [];
    outer:
      while (fI > 0) {
        let desc;
        for (; ; ) {
          if (descI) {
            let next = curDesc.children[descI - 1];
            if (next instanceof MarkViewDesc) {
              curDesc = next;
              descI = next.children.length;
            } else {
              desc = next;
              descI--;
              break;
            }
          } else if (curDesc == parentDesc) {
            break outer;
          } else {
            descI = curDesc.parent.children.indexOf(curDesc);
            curDesc = curDesc.parent;
          }
        }
        let node2 = desc.node;
        if (!node2)
          continue;
        if (node2 != frag.child(fI - 1))
          break;
        --fI;
        matched.set(desc, fI);
        matches2.push(desc);
      }
    return { index: fI, matched, matches: matches2.reverse() };
  }
  function compareSide(a2, b4) {
    return a2.type.side - b4.type.side;
  }
  function iterDeco(parent, deco, onWidget, onNode) {
    let locals = deco.locals(parent), offset = 0;
    if (locals.length == 0) {
      for (let i3 = 0; i3 < parent.childCount; i3++) {
        let child = parent.child(i3);
        onNode(child, locals, deco.forChild(offset, child), i3);
        offset += child.nodeSize;
      }
      return;
    }
    let decoIndex = 0, active = [], restNode = null;
    for (let parentIndex = 0; ; ) {
      let widget, widgets;
      while (decoIndex < locals.length && locals[decoIndex].to == offset) {
        let next = locals[decoIndex++];
        if (next.widget) {
          if (!widget)
            widget = next;
          else
            (widgets || (widgets = [widget])).push(next);
        }
      }
      if (widget) {
        if (widgets) {
          widgets.sort(compareSide);
          for (let i3 = 0; i3 < widgets.length; i3++)
            onWidget(widgets[i3], parentIndex, !!restNode);
        } else {
          onWidget(widget, parentIndex, !!restNode);
        }
      }
      let child, index2;
      if (restNode) {
        index2 = -1;
        child = restNode;
        restNode = null;
      } else if (parentIndex < parent.childCount) {
        index2 = parentIndex;
        child = parent.child(parentIndex++);
      } else {
        break;
      }
      for (let i3 = 0; i3 < active.length; i3++)
        if (active[i3].to <= offset)
          active.splice(i3--, 1);
      while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
        active.push(locals[decoIndex++]);
      let end = offset + child.nodeSize;
      if (child.isText) {
        let cutAt2 = end;
        if (decoIndex < locals.length && locals[decoIndex].from < cutAt2)
          cutAt2 = locals[decoIndex].from;
        for (let i3 = 0; i3 < active.length; i3++)
          if (active[i3].to < cutAt2)
            cutAt2 = active[i3].to;
        if (cutAt2 < end) {
          restNode = child.cut(cutAt2 - offset);
          child = child.cut(0, cutAt2 - offset);
          end = cutAt2;
          index2 = -1;
        }
      } else {
        while (decoIndex < locals.length && locals[decoIndex].to < end)
          decoIndex++;
      }
      let outerDeco = child.isInline && !child.isLeaf ? active.filter((d6) => !d6.inline) : active.slice();
      onNode(child, outerDeco, deco.forChild(offset, child), index2);
      offset = end;
    }
  }
  function iosHacks(dom) {
    if (dom.nodeName == "UL" || dom.nodeName == "OL") {
      let oldCSS = dom.style.cssText;
      dom.style.cssText = oldCSS + "; list-style: square !important";
      window.getComputedStyle(dom).listStyle;
      dom.style.cssText = oldCSS;
    }
  }
  function findTextInFragment(frag, text5, from2, to) {
    for (let i3 = 0, pos = 0; i3 < frag.childCount && pos <= to; ) {
      let child = frag.child(i3++), childStart = pos;
      pos += child.nodeSize;
      if (!child.isText)
        continue;
      let str = child.text;
      while (i3 < frag.childCount) {
        let next = frag.child(i3++);
        pos += next.nodeSize;
        if (!next.isText)
          break;
        str += next.text;
      }
      if (pos >= from2) {
        if (pos >= to && str.slice(to - text5.length - childStart, to - childStart) == text5)
          return to - text5.length;
        let found2 = childStart < to ? str.lastIndexOf(text5, to - childStart - 1) : -1;
        if (found2 >= 0 && found2 + text5.length + childStart >= from2)
          return childStart + found2;
        if (from2 == to && str.length >= to + text5.length - childStart && str.slice(to - childStart, to - childStart + text5.length) == text5)
          return to;
      }
    }
    return -1;
  }
  function replaceNodes(nodes, from2, to, view, replacement) {
    let result = [];
    for (let i3 = 0, off = 0; i3 < nodes.length; i3++) {
      let child = nodes[i3], start = off, end = off += child.size;
      if (start >= to || end <= from2) {
        result.push(child);
      } else {
        if (start < from2)
          result.push(child.slice(0, from2 - start, view));
        if (replacement) {
          result.push(replacement);
          replacement = void 0;
        }
        if (end > to)
          result.push(child.slice(to - start, child.size, view));
      }
    }
    return result;
  }
  function selectionFromDOM(view, origin = null) {
    let domSel = view.domSelectionRange(), doc5 = view.state.doc;
    if (!domSel.focusNode)
      return null;
    let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
    let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
    if (head < 0)
      return null;
    let $head = doc5.resolve(head), $anchor, selection;
    if (selectionCollapsed(domSel)) {
      $anchor = $head;
      while (nearestDesc && !nearestDesc.node)
        nearestDesc = nearestDesc.parent;
      let nearestDescNode = nearestDesc.node;
      if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
        let pos = nearestDesc.posBefore;
        selection = new NodeSelection(head == pos ? $head : doc5.resolve(pos));
      }
    } else {
      let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
      if (anchor < 0)
        return null;
      $anchor = doc5.resolve(anchor);
    }
    if (!selection) {
      let bias = origin == "pointer" || view.state.selection.head < $head.pos && !inWidget ? 1 : -1;
      selection = selectionBetween(view, $anchor, $head, bias);
    }
    return selection;
  }
  function editorOwnsSelection(view) {
    return view.editable ? view.hasFocus() : hasSelection2(view) && document.activeElement && document.activeElement.contains(view.dom);
  }
  function selectionToDOM(view, force = false) {
    let sel = view.state.selection;
    syncNodeSelection(view, sel);
    if (!editorOwnsSelection(view))
      return;
    if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome2) {
      let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
      if (domSel.anchorNode && curSel.anchorNode && isEquivalentPosition2(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
        view.input.mouseDown.delayedSelectionSync = true;
        view.domObserver.setCurSelection();
        return;
      }
    }
    view.domObserver.disconnectSelection();
    if (view.cursorWrapper) {
      selectCursorWrapper(view);
    } else {
      let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
      if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
        if (!sel.$from.parent.inlineContent)
          resetEditableFrom = temporarilyEditableNear(view, sel.from);
        if (!sel.empty && !sel.$from.parent.inlineContent)
          resetEditableTo = temporarilyEditableNear(view, sel.to);
      }
      view.docView.setSelection(anchor, head, view.root, force);
      if (brokenSelectBetweenUneditable) {
        if (resetEditableFrom)
          resetEditable(resetEditableFrom);
        if (resetEditableTo)
          resetEditable(resetEditableTo);
      }
      if (sel.visible) {
        view.dom.classList.remove("ProseMirror-hideselection");
      } else {
        view.dom.classList.add("ProseMirror-hideselection");
        if ("onselectionchange" in document)
          removeClassOnSelectionChange(view);
      }
    }
    view.domObserver.setCurSelection();
    view.domObserver.connectSelection();
  }
  var brokenSelectBetweenUneditable = safari2 || chrome2 && chrome_version < 63;
  function temporarilyEditableNear(view, pos) {
    let { node: node2, offset } = view.docView.domFromPos(pos, 0);
    let after = offset < node2.childNodes.length ? node2.childNodes[offset] : null;
    let before = offset ? node2.childNodes[offset - 1] : null;
    if (safari2 && after && after.contentEditable == "false")
      return setEditable(after);
    if ((!after || after.contentEditable == "false") && (!before || before.contentEditable == "false")) {
      if (after)
        return setEditable(after);
      else if (before)
        return setEditable(before);
    }
  }
  function setEditable(element2) {
    element2.contentEditable = "true";
    if (safari2 && element2.draggable) {
      element2.draggable = false;
      element2.wasDraggable = true;
    }
    return element2;
  }
  function resetEditable(element2) {
    element2.contentEditable = "false";
    if (element2.wasDraggable) {
      element2.draggable = true;
      element2.wasDraggable = null;
    }
  }
  function removeClassOnSelectionChange(view) {
    let doc5 = view.dom.ownerDocument;
    doc5.removeEventListener("selectionchange", view.input.hideSelectionGuard);
    let domSel = view.domSelectionRange();
    let node2 = domSel.anchorNode, offset = domSel.anchorOffset;
    doc5.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
      if (domSel.anchorNode != node2 || domSel.anchorOffset != offset) {
        doc5.removeEventListener("selectionchange", view.input.hideSelectionGuard);
        setTimeout(() => {
          if (!editorOwnsSelection(view) || view.state.selection.visible)
            view.dom.classList.remove("ProseMirror-hideselection");
        }, 20);
      }
    });
  }
  function selectCursorWrapper(view) {
    let domSel = view.domSelection(), range = document.createRange();
    let node2 = view.cursorWrapper.dom, img = node2.nodeName == "IMG";
    if (img)
      range.setEnd(node2.parentNode, domIndex2(node2) + 1);
    else
      range.setEnd(node2, 0);
    range.collapse(false);
    domSel.removeAllRanges();
    domSel.addRange(range);
    if (!img && !view.state.selection.visible && ie3 && ie_version <= 11) {
      node2.disabled = true;
      node2.disabled = false;
    }
  }
  function syncNodeSelection(view, sel) {
    if (sel instanceof NodeSelection) {
      let desc = view.docView.descAt(sel.from);
      if (desc != view.lastSelectedViewDesc) {
        clearNodeSelection(view);
        if (desc)
          desc.selectNode();
        view.lastSelectedViewDesc = desc;
      }
    } else {
      clearNodeSelection(view);
    }
  }
  function clearNodeSelection(view) {
    if (view.lastSelectedViewDesc) {
      if (view.lastSelectedViewDesc.parent)
        view.lastSelectedViewDesc.deselectNode();
      view.lastSelectedViewDesc = void 0;
    }
  }
  function selectionBetween(view, $anchor, $head, bias) {
    return view.someProp("createSelectionBetween", (f3) => f3(view, $anchor, $head)) || TextSelection.between($anchor, $head, bias);
  }
  function hasFocusAndSelection(view) {
    if (view.editable && !view.hasFocus())
      return false;
    return hasSelection2(view);
  }
  function hasSelection2(view) {
    let sel = view.domSelectionRange();
    if (!sel.anchorNode)
      return false;
    try {
      return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) && (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
    } catch (_3) {
      return false;
    }
  }
  function anchorInRightPlace(view) {
    let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
    let domSel = view.domSelectionRange();
    return isEquivalentPosition2(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
  }
  function moveSelectionBlock(state, dir) {
    let { $anchor, $head } = state.selection;
    let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
    let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
    return $start && Selection.findFrom($start, dir);
  }
  function apply(view, sel) {
    view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
    return true;
  }
  function selectHorizontally(view, dir, mods) {
    let sel = view.state.selection;
    if (sel instanceof TextSelection) {
      if (mods.indexOf("s") > -1) {
        let { $head } = sel, node2 = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter;
        if (!node2 || node2.isText || !node2.isLeaf)
          return false;
        let $newHead = view.state.doc.resolve($head.pos + node2.nodeSize * (dir < 0 ? -1 : 1));
        return apply(view, new TextSelection(sel.$anchor, $newHead));
      } else if (!sel.empty) {
        return false;
      } else if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) {
        let next = moveSelectionBlock(view.state, dir);
        if (next && next instanceof NodeSelection)
          return apply(view, next);
        return false;
      } else if (!(mac2 && mods.indexOf("m") > -1)) {
        let $head = sel.$head, node2 = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
        if (!node2 || node2.isText)
          return false;
        let nodePos = dir < 0 ? $head.pos - node2.nodeSize : $head.pos;
        if (!(node2.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
          return false;
        if (NodeSelection.isSelectable(node2)) {
          return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node2.nodeSize) : $head));
        } else if (webkit2) {
          return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node2.nodeSize)));
        } else {
          return false;
        }
      }
    } else if (sel instanceof NodeSelection && sel.node.isInline) {
      return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
    } else {
      let next = moveSelectionBlock(view.state, dir);
      if (next)
        return apply(view, next);
      return false;
    }
  }
  function nodeLen(node2) {
    return node2.nodeType == 3 ? node2.nodeValue.length : node2.childNodes.length;
  }
  function isIgnorable(dom, dir) {
    let desc = dom.pmViewDesc;
    return desc && desc.size == 0 && (dir < 0 || dom.nextSibling || dom.nodeName != "BR");
  }
  function skipIgnoredNodes(view, dir) {
    return dir < 0 ? skipIgnoredNodesBefore(view) : skipIgnoredNodesAfter(view);
  }
  function skipIgnoredNodesBefore(view) {
    let sel = view.domSelectionRange();
    let node2 = sel.focusNode, offset = sel.focusOffset;
    if (!node2)
      return;
    let moveNode, moveOffset, force = false;
    if (gecko2 && node2.nodeType == 1 && offset < nodeLen(node2) && isIgnorable(node2.childNodes[offset], -1))
      force = true;
    for (; ; ) {
      if (offset > 0) {
        if (node2.nodeType != 1) {
          break;
        } else {
          let before = node2.childNodes[offset - 1];
          if (isIgnorable(before, -1)) {
            moveNode = node2;
            moveOffset = --offset;
          } else if (before.nodeType == 3) {
            node2 = before;
            offset = node2.nodeValue.length;
          } else
            break;
        }
      } else if (isBlockNode(node2)) {
        break;
      } else {
        let prev = node2.previousSibling;
        while (prev && isIgnorable(prev, -1)) {
          moveNode = node2.parentNode;
          moveOffset = domIndex2(prev);
          prev = prev.previousSibling;
        }
        if (!prev) {
          node2 = node2.parentNode;
          if (node2 == view.dom)
            break;
          offset = 0;
        } else {
          node2 = prev;
          offset = nodeLen(node2);
        }
      }
    }
    if (force)
      setSelFocus(view, node2, offset);
    else if (moveNode)
      setSelFocus(view, moveNode, moveOffset);
  }
  function skipIgnoredNodesAfter(view) {
    let sel = view.domSelectionRange();
    let node2 = sel.focusNode, offset = sel.focusOffset;
    if (!node2)
      return;
    let len = nodeLen(node2);
    let moveNode, moveOffset;
    for (; ; ) {
      if (offset < len) {
        if (node2.nodeType != 1)
          break;
        let after = node2.childNodes[offset];
        if (isIgnorable(after, 1)) {
          moveNode = node2;
          moveOffset = ++offset;
        } else
          break;
      } else if (isBlockNode(node2)) {
        break;
      } else {
        let next = node2.nextSibling;
        while (next && isIgnorable(next, 1)) {
          moveNode = next.parentNode;
          moveOffset = domIndex2(next) + 1;
          next = next.nextSibling;
        }
        if (!next) {
          node2 = node2.parentNode;
          if (node2 == view.dom)
            break;
          offset = len = 0;
        } else {
          node2 = next;
          offset = 0;
          len = nodeLen(node2);
        }
      }
    }
    if (moveNode)
      setSelFocus(view, moveNode, moveOffset);
  }
  function isBlockNode(dom) {
    let desc = dom.pmViewDesc;
    return desc && desc.node && desc.node.isBlock;
  }
  function textNodeAfter2(node2, offset) {
    while (node2 && offset == node2.childNodes.length && !hasBlockDesc(node2)) {
      offset = domIndex2(node2) + 1;
      node2 = node2.parentNode;
    }
    while (node2 && offset < node2.childNodes.length) {
      let next = node2.childNodes[offset];
      if (next.nodeType == 3)
        return next;
      if (next.nodeType == 1 && next.contentEditable == "false")
        break;
      node2 = next;
      offset = 0;
    }
  }
  function textNodeBefore2(node2, offset) {
    while (node2 && !offset && !hasBlockDesc(node2)) {
      offset = domIndex2(node2);
      node2 = node2.parentNode;
    }
    while (node2 && offset) {
      let next = node2.childNodes[offset - 1];
      if (next.nodeType == 3)
        return next;
      if (next.nodeType == 1 && next.contentEditable == "false")
        break;
      node2 = next;
      offset = node2.childNodes.length;
    }
  }
  function setSelFocus(view, node2, offset) {
    if (node2.nodeType != 3) {
      let before, after;
      if (after = textNodeAfter2(node2, offset)) {
        node2 = after;
        offset = 0;
      } else if (before = textNodeBefore2(node2, offset)) {
        node2 = before;
        offset = before.nodeValue.length;
      }
    }
    let sel = view.domSelection();
    if (selectionCollapsed(sel)) {
      let range = document.createRange();
      range.setEnd(node2, offset);
      range.setStart(node2, offset);
      sel.removeAllRanges();
      sel.addRange(range);
    } else if (sel.extend) {
      sel.extend(node2, offset);
    }
    view.domObserver.setCurSelection();
    let { state } = view;
    setTimeout(() => {
      if (view.state == state)
        selectionToDOM(view);
    }, 50);
  }
  function findDirection(view, pos) {
    let $pos = view.state.doc.resolve(pos);
    if (!(chrome2 || windows2) && $pos.parent.inlineContent) {
      let coords = view.coordsAtPos(pos);
      if (pos > $pos.start()) {
        let before = view.coordsAtPos(pos - 1);
        let mid = (before.top + before.bottom) / 2;
        if (mid > coords.top && mid < coords.bottom && Math.abs(before.left - coords.left) > 1)
          return before.left < coords.left ? "ltr" : "rtl";
      }
      if (pos < $pos.end()) {
        let after = view.coordsAtPos(pos + 1);
        let mid = (after.top + after.bottom) / 2;
        if (mid > coords.top && mid < coords.bottom && Math.abs(after.left - coords.left) > 1)
          return after.left > coords.left ? "ltr" : "rtl";
      }
    }
    let computed = getComputedStyle(view.dom).direction;
    return computed == "rtl" ? "rtl" : "ltr";
  }
  function selectVertically(view, dir, mods) {
    let sel = view.state.selection;
    if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
      return false;
    if (mac2 && mods.indexOf("m") > -1)
      return false;
    let { $from, $to } = sel;
    if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
      let next = moveSelectionBlock(view.state, dir);
      if (next && next instanceof NodeSelection)
        return apply(view, next);
    }
    if (!$from.parent.inlineContent) {
      let side = dir < 0 ? $from : $to;
      let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
      return beyond ? apply(view, beyond) : false;
    }
    return false;
  }
  function stopNativeHorizontalDelete(view, dir) {
    if (!(view.state.selection instanceof TextSelection))
      return true;
    let { $head, $anchor, empty: empty4 } = view.state.selection;
    if (!$head.sameParent($anchor))
      return true;
    if (!empty4)
      return false;
    if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
      return true;
    let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
    if (nextNode && !nextNode.isText) {
      let tr = view.state.tr;
      if (dir < 0)
        tr.delete($head.pos - nextNode.nodeSize, $head.pos);
      else
        tr.delete($head.pos, $head.pos + nextNode.nodeSize);
      view.dispatch(tr);
      return true;
    }
    return false;
  }
  function switchEditable(view, node2, state) {
    view.domObserver.stop();
    node2.contentEditable = state;
    view.domObserver.start();
  }
  function safariDownArrowBug(view) {
    if (!safari2 || view.state.selection.$head.parentOffset > 0)
      return false;
    let { focusNode, focusOffset } = view.domSelectionRange();
    if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 && focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
      let child = focusNode.firstChild;
      switchEditable(view, child, "true");
      setTimeout(() => switchEditable(view, child, "false"), 20);
    }
    return false;
  }
  function getMods(event) {
    let result = "";
    if (event.ctrlKey)
      result += "c";
    if (event.metaKey)
      result += "m";
    if (event.altKey)
      result += "a";
    if (event.shiftKey)
      result += "s";
    return result;
  }
  function captureKeyDown(view, event) {
    let code3 = event.keyCode, mods = getMods(event);
    if (code3 == 8 || mac2 && code3 == 72 && mods == "c") {
      return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodes(view, -1);
    } else if (code3 == 46 && !event.shiftKey || mac2 && code3 == 68 && mods == "c") {
      return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodes(view, 1);
    } else if (code3 == 13 || code3 == 27) {
      return true;
    } else if (code3 == 37 || mac2 && code3 == 66 && mods == "c") {
      let dir = code3 == 37 ? findDirection(view, view.state.selection.from) == "ltr" ? -1 : 1 : -1;
      return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
    } else if (code3 == 39 || mac2 && code3 == 70 && mods == "c") {
      let dir = code3 == 39 ? findDirection(view, view.state.selection.from) == "ltr" ? 1 : -1 : 1;
      return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
    } else if (code3 == 38 || mac2 && code3 == 80 && mods == "c") {
      return selectVertically(view, -1, mods) || skipIgnoredNodes(view, -1);
    } else if (code3 == 40 || mac2 && code3 == 78 && mods == "c") {
      return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodes(view, 1);
    } else if (mods == (mac2 ? "m" : "c") && (code3 == 66 || code3 == 73 || code3 == 89 || code3 == 90)) {
      return true;
    }
    return false;
  }
  function serializeForClipboard(view, slice2) {
    view.someProp("transformCopied", (f3) => {
      slice2 = f3(slice2, view);
    });
    let context = [], { content: content4, openStart, openEnd } = slice2;
    while (openStart > 1 && openEnd > 1 && content4.childCount == 1 && content4.firstChild.childCount == 1) {
      openStart--;
      openEnd--;
      let node2 = content4.firstChild;
      context.push(node2.type.name, node2.attrs != node2.type.defaultAttrs ? node2.attrs : null);
      content4 = node2.content;
    }
    let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
    let doc5 = detachedDoc(), wrap3 = doc5.createElement("div");
    wrap3.appendChild(serializer.serializeFragment(content4, { document: doc5 }));
    let firstChild = wrap3.firstChild, needsWrap, wrappers = 0;
    while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
      for (let i3 = needsWrap.length - 1; i3 >= 0; i3--) {
        let wrapper = doc5.createElement(needsWrap[i3]);
        while (wrap3.firstChild)
          wrapper.appendChild(wrap3.firstChild);
        wrap3.appendChild(wrapper);
        wrappers++;
      }
      firstChild = wrap3.firstChild;
    }
    if (firstChild && firstChild.nodeType == 1)
      firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
    let text5 = view.someProp("clipboardTextSerializer", (f3) => f3(slice2, view)) || slice2.content.textBetween(0, slice2.content.size, "\n\n");
    return { dom: wrap3, text: text5, slice: slice2 };
  }
  function parseFromClipboard(view, text5, html2, plainText, $context) {
    let inCode = $context.parent.type.spec.code;
    let dom, slice2;
    if (!html2 && !text5)
      return null;
    let asText = text5 && (plainText || inCode || !html2);
    if (asText) {
      view.someProp("transformPastedText", (f3) => {
        text5 = f3(text5, inCode || plainText, view);
      });
      if (inCode)
        return text5 ? new Slice(Fragment.from(view.state.schema.text(text5.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
      let parsed = view.someProp("clipboardTextParser", (f3) => f3(text5, $context, plainText, view));
      if (parsed) {
        slice2 = parsed;
      } else {
        let marks2 = $context.marks();
        let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
        dom = document.createElement("div");
        text5.split(/(?:\r\n?|\n)+/).forEach((block) => {
          let p6 = dom.appendChild(document.createElement("p"));
          if (block)
            p6.appendChild(serializer.serializeNode(schema.text(block, marks2)));
        });
      }
    } else {
      view.someProp("transformPastedHTML", (f3) => {
        html2 = f3(html2, view);
      });
      dom = readHTML(html2);
      if (webkit2)
        restoreReplacedSpaces(dom);
    }
    let contextNode = dom && dom.querySelector("[data-pm-slice]");
    let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
    if (sliceData && sliceData[3])
      for (let i3 = +sliceData[3]; i3 > 0; i3--) {
        let child = dom.firstChild;
        while (child && child.nodeType != 1)
          child = child.nextSibling;
        if (!child)
          break;
        dom = child;
      }
    if (!slice2) {
      let parser2 = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
      slice2 = parser2.parseSlice(dom, {
        preserveWhitespace: !!(asText || sliceData),
        context: $context,
        ruleFromNode(dom2) {
          if (dom2.nodeName == "BR" && !dom2.nextSibling && dom2.parentNode && !inlineParents.test(dom2.parentNode.nodeName))
            return { ignore: true };
          return null;
        }
      });
    }
    if (sliceData) {
      slice2 = addContext(closeSlice(slice2, +sliceData[1], +sliceData[2]), sliceData[4]);
    } else {
      slice2 = Slice.maxOpen(normalizeSiblings(slice2.content, $context), true);
      if (slice2.openStart || slice2.openEnd) {
        let openStart = 0, openEnd = 0;
        for (let node2 = slice2.content.firstChild; openStart < slice2.openStart && !node2.type.spec.isolating; openStart++, node2 = node2.firstChild) {
        }
        for (let node2 = slice2.content.lastChild; openEnd < slice2.openEnd && !node2.type.spec.isolating; openEnd++, node2 = node2.lastChild) {
        }
        slice2 = closeSlice(slice2, openStart, openEnd);
      }
    }
    view.someProp("transformPasted", (f3) => {
      slice2 = f3(slice2, view);
    });
    return slice2;
  }
  var inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
  function normalizeSiblings(fragment, $context) {
    if (fragment.childCount < 2)
      return fragment;
    for (let d6 = $context.depth; d6 >= 0; d6--) {
      let parent = $context.node(d6);
      let match = parent.contentMatchAt($context.index(d6));
      let lastWrap, result = [];
      fragment.forEach((node2) => {
        if (!result)
          return;
        let wrap3 = match.findWrapping(node2.type), inLast;
        if (!wrap3)
          return result = null;
        if (inLast = result.length && lastWrap.length && addToSibling(wrap3, lastWrap, node2, result[result.length - 1], 0)) {
          result[result.length - 1] = inLast;
        } else {
          if (result.length)
            result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
          let wrapped = withWrappers(node2, wrap3);
          result.push(wrapped);
          match = match.matchType(wrapped.type);
          lastWrap = wrap3;
        }
      });
      if (result)
        return Fragment.from(result);
    }
    return fragment;
  }
  function withWrappers(node2, wrap3, from2 = 0) {
    for (let i3 = wrap3.length - 1; i3 >= from2; i3--)
      node2 = wrap3[i3].create(null, Fragment.from(node2));
    return node2;
  }
  function addToSibling(wrap3, lastWrap, node2, sibling, depth2) {
    if (depth2 < wrap3.length && depth2 < lastWrap.length && wrap3[depth2] == lastWrap[depth2]) {
      let inner = addToSibling(wrap3, lastWrap, node2, sibling.lastChild, depth2 + 1);
      if (inner)
        return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
      let match = sibling.contentMatchAt(sibling.childCount);
      if (match.matchType(depth2 == wrap3.length - 1 ? node2.type : wrap3[depth2 + 1]))
        return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node2, wrap3, depth2 + 1))));
    }
  }
  function closeRight(node2, depth2) {
    if (depth2 == 0)
      return node2;
    let fragment = node2.content.replaceChild(node2.childCount - 1, closeRight(node2.lastChild, depth2 - 1));
    let fill = node2.contentMatchAt(node2.childCount).fillBefore(Fragment.empty, true);
    return node2.copy(fragment.append(fill));
  }
  function closeRange(fragment, side, from2, to, depth2, openEnd) {
    let node2 = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node2.content;
    if (fragment.childCount > 1)
      openEnd = 0;
    if (depth2 < to - 1)
      inner = closeRange(inner, side, from2, to, depth2 + 1, openEnd);
    if (depth2 >= from2)
      inner = side < 0 ? node2.contentMatchAt(0).fillBefore(inner, openEnd <= depth2).append(inner) : inner.append(node2.contentMatchAt(node2.childCount).fillBefore(Fragment.empty, true));
    return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node2.copy(inner));
  }
  function closeSlice(slice2, openStart, openEnd) {
    if (openStart < slice2.openStart)
      slice2 = new Slice(closeRange(slice2.content, -1, openStart, slice2.openStart, 0, slice2.openEnd), openStart, slice2.openEnd);
    if (openEnd < slice2.openEnd)
      slice2 = new Slice(closeRange(slice2.content, 1, openEnd, slice2.openEnd, 0, 0), slice2.openStart, openEnd);
    return slice2;
  }
  var wrapMap = {
    thead: ["table"],
    tbody: ["table"],
    tfoot: ["table"],
    caption: ["table"],
    colgroup: ["table"],
    col: ["table", "colgroup"],
    tr: ["table", "tbody"],
    td: ["table", "tbody", "tr"],
    th: ["table", "tbody", "tr"]
  };
  var _detachedDoc = null;
  function detachedDoc() {
    return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
  }
  function readHTML(html2) {
    let metas = /^(\s*<meta [^>]*>)*/.exec(html2);
    if (metas)
      html2 = html2.slice(metas[0].length);
    let elt = detachedDoc().createElement("div");
    let firstTag = /<([a-z][^>\s]+)/i.exec(html2), wrap3;
    if (wrap3 = firstTag && wrapMap[firstTag[1].toLowerCase()])
      html2 = wrap3.map((n5) => "<" + n5 + ">").join("") + html2 + wrap3.map((n5) => "</" + n5 + ">").reverse().join("");
    elt.innerHTML = html2;
    if (wrap3)
      for (let i3 = 0; i3 < wrap3.length; i3++)
        elt = elt.querySelector(wrap3[i3]) || elt;
    return elt;
  }
  function restoreReplacedSpaces(dom) {
    let nodes = dom.querySelectorAll(chrome2 ? "span:not([class]):not([style])" : "span.Apple-converted-space");
    for (let i3 = 0; i3 < nodes.length; i3++) {
      let node2 = nodes[i3];
      if (node2.childNodes.length == 1 && node2.textContent == "\xA0" && node2.parentNode)
        node2.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node2);
    }
  }
  function addContext(slice2, context) {
    if (!slice2.size)
      return slice2;
    let schema = slice2.content.firstChild.type.schema, array;
    try {
      array = JSON.parse(context);
    } catch (e3) {
      return slice2;
    }
    let { content: content4, openStart, openEnd } = slice2;
    for (let i3 = array.length - 2; i3 >= 0; i3 -= 2) {
      let type = schema.nodes[array[i3]];
      if (!type || type.hasRequiredAttrs())
        break;
      content4 = Fragment.from(type.create(array[i3 + 1], content4));
      openStart++;
      openEnd++;
    }
    return new Slice(content4, openStart, openEnd);
  }
  var handlers2 = {};
  var editHandlers = {};
  var passiveHandlers = { touchstart: true, touchmove: true };
  var InputState2 = class {
    constructor() {
      this.shiftKey = false;
      this.mouseDown = null;
      this.lastKeyCode = null;
      this.lastKeyCodeTime = 0;
      this.lastClick = { time: 0, x: 0, y: 0, type: "" };
      this.lastSelectionOrigin = null;
      this.lastSelectionTime = 0;
      this.lastIOSEnter = 0;
      this.lastIOSEnterFallbackTimeout = -1;
      this.lastFocus = 0;
      this.lastTouch = 0;
      this.lastAndroidDelete = 0;
      this.composing = false;
      this.compositionNode = null;
      this.composingTimeout = -1;
      this.compositionNodes = [];
      this.compositionEndedAt = -2e8;
      this.compositionID = 1;
      this.compositionPendingChanges = 0;
      this.domChangeCount = 0;
      this.eventHandlers = /* @__PURE__ */ Object.create(null);
      this.hideSelectionGuard = null;
    }
  };
  function initInput(view) {
    for (let event in handlers2) {
      let handler = handlers2[event];
      view.dom.addEventListener(event, view.input.eventHandlers[event] = (event2) => {
        if (eventBelongsToView(view, event2) && !runCustomHandler(view, event2) && (view.editable || !(event2.type in editHandlers)))
          handler(view, event2);
      }, passiveHandlers[event] ? { passive: true } : void 0);
    }
    if (safari2)
      view.dom.addEventListener("input", () => null);
    ensureListeners(view);
  }
  function setSelectionOrigin(view, origin) {
    view.input.lastSelectionOrigin = origin;
    view.input.lastSelectionTime = Date.now();
  }
  function destroyInput(view) {
    view.domObserver.stop();
    for (let type in view.input.eventHandlers)
      view.dom.removeEventListener(type, view.input.eventHandlers[type]);
    clearTimeout(view.input.composingTimeout);
    clearTimeout(view.input.lastIOSEnterFallbackTimeout);
  }
  function ensureListeners(view) {
    view.someProp("handleDOMEvents", (currentHandlers) => {
      for (let type in currentHandlers)
        if (!view.input.eventHandlers[type])
          view.dom.addEventListener(type, view.input.eventHandlers[type] = (event) => runCustomHandler(view, event));
    });
  }
  function runCustomHandler(view, event) {
    return view.someProp("handleDOMEvents", (handlers3) => {
      let handler = handlers3[event.type];
      return handler ? handler(view, event) || event.defaultPrevented : false;
    });
  }
  function eventBelongsToView(view, event) {
    if (!event.bubbles)
      return true;
    if (event.defaultPrevented)
      return false;
    for (let node2 = event.target; node2 != view.dom; node2 = node2.parentNode)
      if (!node2 || node2.nodeType == 11 || node2.pmViewDesc && node2.pmViewDesc.stopEvent(event))
        return false;
    return true;
  }
  function dispatchEvent2(view, event) {
    if (!runCustomHandler(view, event) && handlers2[event.type] && (view.editable || !(event.type in editHandlers)))
      handlers2[event.type](view, event);
  }
  editHandlers.keydown = (view, _event) => {
    let event = _event;
    view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
    if (inOrNearComposition(view, event))
      return;
    view.input.lastKeyCode = event.keyCode;
    view.input.lastKeyCodeTime = Date.now();
    if (android3 && chrome2 && event.keyCode == 13)
      return;
    if (event.keyCode != 229)
      view.domObserver.forceFlush();
    if (ios2 && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
      let now = Date.now();
      view.input.lastIOSEnter = now;
      view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
        if (view.input.lastIOSEnter == now) {
          view.someProp("handleKeyDown", (f3) => f3(view, keyEvent(13, "Enter")));
          view.input.lastIOSEnter = 0;
        }
      }, 200);
    } else if (view.someProp("handleKeyDown", (f3) => f3(view, event)) || captureKeyDown(view, event)) {
      event.preventDefault();
    } else {
      setSelectionOrigin(view, "key");
    }
  };
  editHandlers.keyup = (view, event) => {
    if (event.keyCode == 16)
      view.input.shiftKey = false;
  };
  editHandlers.keypress = (view, _event) => {
    let event = _event;
    if (inOrNearComposition(view, event) || !event.charCode || event.ctrlKey && !event.altKey || mac2 && event.metaKey)
      return;
    if (view.someProp("handleKeyPress", (f3) => f3(view, event))) {
      event.preventDefault();
      return;
    }
    let sel = view.state.selection;
    if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
      let text5 = String.fromCharCode(event.charCode);
      if (!/[\r\n]/.test(text5) && !view.someProp("handleTextInput", (f3) => f3(view, sel.$from.pos, sel.$to.pos, text5)))
        view.dispatch(view.state.tr.insertText(text5).scrollIntoView());
      event.preventDefault();
    }
  };
  function eventCoords(event) {
    return { left: event.clientX, top: event.clientY };
  }
  function isNear(event, click) {
    let dx = click.x - event.clientX, dy = click.y - event.clientY;
    return dx * dx + dy * dy < 100;
  }
  function runHandlerOnContext(view, propName, pos, inside2, event) {
    if (inside2 == -1)
      return false;
    let $pos = view.state.doc.resolve(inside2);
    for (let i3 = $pos.depth + 1; i3 > 0; i3--) {
      if (view.someProp(propName, (f3) => i3 > $pos.depth ? f3(view, pos, $pos.nodeAfter, $pos.before(i3), event, true) : f3(view, pos, $pos.node(i3), $pos.before(i3), event, false)))
        return true;
    }
    return false;
  }
  function updateSelection(view, selection, origin) {
    if (!view.focused)
      view.focus();
    let tr = view.state.tr.setSelection(selection);
    if (origin == "pointer")
      tr.setMeta("pointer", true);
    view.dispatch(tr);
  }
  function selectClickedLeaf(view, inside2) {
    if (inside2 == -1)
      return false;
    let $pos = view.state.doc.resolve(inside2), node2 = $pos.nodeAfter;
    if (node2 && node2.isAtom && NodeSelection.isSelectable(node2)) {
      updateSelection(view, new NodeSelection($pos), "pointer");
      return true;
    }
    return false;
  }
  function selectClickedNode(view, inside2) {
    if (inside2 == -1)
      return false;
    let sel = view.state.selection, selectedNode, selectAt;
    if (sel instanceof NodeSelection)
      selectedNode = sel.node;
    let $pos = view.state.doc.resolve(inside2);
    for (let i3 = $pos.depth + 1; i3 > 0; i3--) {
      let node2 = i3 > $pos.depth ? $pos.nodeAfter : $pos.node(i3);
      if (NodeSelection.isSelectable(node2)) {
        if (selectedNode && sel.$from.depth > 0 && i3 >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
          selectAt = $pos.before(sel.$from.depth);
        else
          selectAt = $pos.before(i3);
        break;
      }
    }
    if (selectAt != null) {
      updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
      return true;
    } else {
      return false;
    }
  }
  function handleSingleClick(view, pos, inside2, event, selectNode) {
    return runHandlerOnContext(view, "handleClickOn", pos, inside2, event) || view.someProp("handleClick", (f3) => f3(view, pos, event)) || (selectNode ? selectClickedNode(view, inside2) : selectClickedLeaf(view, inside2));
  }
  function handleDoubleClick(view, pos, inside2, event) {
    return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside2, event) || view.someProp("handleDoubleClick", (f3) => f3(view, pos, event));
  }
  function handleTripleClick(view, pos, inside2, event) {
    return runHandlerOnContext(view, "handleTripleClickOn", pos, inside2, event) || view.someProp("handleTripleClick", (f3) => f3(view, pos, event)) || defaultTripleClick(view, inside2, event);
  }
  function defaultTripleClick(view, inside2, event) {
    if (event.button != 0)
      return false;
    let doc5 = view.state.doc;
    if (inside2 == -1) {
      if (doc5.inlineContent) {
        updateSelection(view, TextSelection.create(doc5, 0, doc5.content.size), "pointer");
        return true;
      }
      return false;
    }
    let $pos = doc5.resolve(inside2);
    for (let i3 = $pos.depth + 1; i3 > 0; i3--) {
      let node2 = i3 > $pos.depth ? $pos.nodeAfter : $pos.node(i3);
      let nodePos = $pos.before(i3);
      if (node2.inlineContent)
        updateSelection(view, TextSelection.create(doc5, nodePos + 1, nodePos + 1 + node2.content.size), "pointer");
      else if (NodeSelection.isSelectable(node2))
        updateSelection(view, NodeSelection.create(doc5, nodePos), "pointer");
      else
        continue;
      return true;
    }
  }
  function forceDOMFlush(view) {
    return endComposition(view);
  }
  var selectNodeModifier = mac2 ? "metaKey" : "ctrlKey";
  handlers2.mousedown = (view, _event) => {
    let event = _event;
    view.input.shiftKey = event.shiftKey;
    let flushed = forceDOMFlush(view);
    let now = Date.now(), type = "singleClick";
    if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
      if (view.input.lastClick.type == "singleClick")
        type = "doubleClick";
      else if (view.input.lastClick.type == "doubleClick")
        type = "tripleClick";
    }
    view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
    let pos = view.posAtCoords(eventCoords(event));
    if (!pos)
      return;
    if (type == "singleClick") {
      if (view.input.mouseDown)
        view.input.mouseDown.done();
      view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
    } else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
      event.preventDefault();
    } else {
      setSelectionOrigin(view, "pointer");
    }
  };
  var MouseDown = class {
    constructor(view, pos, event, flushed) {
      this.view = view;
      this.pos = pos;
      this.event = event;
      this.flushed = flushed;
      this.delayedSelectionSync = false;
      this.mightDrag = null;
      this.startDoc = view.state.doc;
      this.selectNode = !!event[selectNodeModifier];
      this.allowDefault = event.shiftKey;
      let targetNode, targetPos;
      if (pos.inside > -1) {
        targetNode = view.state.doc.nodeAt(pos.inside);
        targetPos = pos.inside;
      } else {
        let $pos = view.state.doc.resolve(pos.pos);
        targetNode = $pos.parent;
        targetPos = $pos.depth ? $pos.before() : 0;
      }
      const target = flushed ? null : event.target;
      const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
      this.target = targetDesc ? targetDesc.dom : null;
      let { selection } = view.state;
      if (event.button == 0 && targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false || selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
        this.mightDrag = {
          node: targetNode,
          pos: targetPos,
          addAttr: !!(this.target && !this.target.draggable),
          setUneditable: !!(this.target && gecko2 && !this.target.hasAttribute("contentEditable"))
        };
      if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
        this.view.domObserver.stop();
        if (this.mightDrag.addAttr)
          this.target.draggable = true;
        if (this.mightDrag.setUneditable)
          setTimeout(() => {
            if (this.view.input.mouseDown == this)
              this.target.setAttribute("contentEditable", "false");
          }, 20);
        this.view.domObserver.start();
      }
      view.root.addEventListener("mouseup", this.up = this.up.bind(this));
      view.root.addEventListener("mousemove", this.move = this.move.bind(this));
      setSelectionOrigin(view, "pointer");
    }
    done() {
      this.view.root.removeEventListener("mouseup", this.up);
      this.view.root.removeEventListener("mousemove", this.move);
      if (this.mightDrag && this.target) {
        this.view.domObserver.stop();
        if (this.mightDrag.addAttr)
          this.target.removeAttribute("draggable");
        if (this.mightDrag.setUneditable)
          this.target.removeAttribute("contentEditable");
        this.view.domObserver.start();
      }
      if (this.delayedSelectionSync)
        setTimeout(() => selectionToDOM(this.view));
      this.view.input.mouseDown = null;
    }
    up(event) {
      this.done();
      if (!this.view.dom.contains(event.target))
        return;
      let pos = this.pos;
      if (this.view.state.doc != this.startDoc)
        pos = this.view.posAtCoords(eventCoords(event));
      this.updateAllowDefault(event);
      if (this.allowDefault || !pos) {
        setSelectionOrigin(this.view, "pointer");
      } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
        event.preventDefault();
      } else if (event.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
      safari2 && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
      // cursor, but still report that the node is selected
      // when asked through getSelection. You'll then get a
      // situation where clicking at the point where that
      // (hidden) cursor is doesn't change the selection, and
      // thus doesn't get a reaction from ProseMirror. This
      // works around that.
      chrome2 && !this.view.state.selection.visible && Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2)) {
        updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
        event.preventDefault();
      } else {
        setSelectionOrigin(this.view, "pointer");
      }
    }
    move(event) {
      this.updateAllowDefault(event);
      setSelectionOrigin(this.view, "pointer");
      if (event.buttons == 0)
        this.done();
    }
    updateAllowDefault(event) {
      if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 || Math.abs(this.event.y - event.clientY) > 4))
        this.allowDefault = true;
    }
  };
  handlers2.touchstart = (view) => {
    view.input.lastTouch = Date.now();
    forceDOMFlush(view);
    setSelectionOrigin(view, "pointer");
  };
  handlers2.touchmove = (view) => {
    view.input.lastTouch = Date.now();
    setSelectionOrigin(view, "pointer");
  };
  handlers2.contextmenu = (view) => forceDOMFlush(view);
  function inOrNearComposition(view, event) {
    if (view.composing)
      return true;
    if (safari2 && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
      view.input.compositionEndedAt = -2e8;
      return true;
    }
    return false;
  }
  var timeoutComposition = android3 ? 5e3 : -1;
  editHandlers.compositionstart = editHandlers.compositionupdate = (view) => {
    if (!view.composing) {
      view.domObserver.flush();
      let { state } = view, $pos = state.selection.$from;
      if (state.selection.empty && (state.storedMarks || !$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some((m4) => m4.type.spec.inclusive === false))) {
        view.markCursor = view.state.storedMarks || $pos.marks();
        endComposition(view, true);
        view.markCursor = null;
      } else {
        endComposition(view);
        if (gecko2 && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
          let sel = view.domSelectionRange();
          for (let node2 = sel.focusNode, offset = sel.focusOffset; node2 && node2.nodeType == 1 && offset != 0; ) {
            let before = offset < 0 ? node2.lastChild : node2.childNodes[offset - 1];
            if (!before)
              break;
            if (before.nodeType == 3) {
              view.domSelection().collapse(before, before.nodeValue.length);
              break;
            } else {
              node2 = before;
              offset = -1;
            }
          }
        }
      }
      view.input.composing = true;
    }
    scheduleComposeEnd(view, timeoutComposition);
  };
  editHandlers.compositionend = (view, event) => {
    if (view.composing) {
      view.input.composing = false;
      view.input.compositionEndedAt = event.timeStamp;
      view.input.compositionPendingChanges = view.domObserver.pendingRecords().length ? view.input.compositionID : 0;
      view.input.compositionNode = null;
      if (view.input.compositionPendingChanges)
        Promise.resolve().then(() => view.domObserver.flush());
      view.input.compositionID++;
      scheduleComposeEnd(view, 20);
    }
  };
  function scheduleComposeEnd(view, delay) {
    clearTimeout(view.input.composingTimeout);
    if (delay > -1)
      view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
  }
  function clearComposition(view) {
    if (view.composing) {
      view.input.composing = false;
      view.input.compositionEndedAt = timestampFromCustomEvent();
    }
    while (view.input.compositionNodes.length > 0)
      view.input.compositionNodes.pop().markParentsDirty();
  }
  function findCompositionNode2(view) {
    let sel = view.domSelectionRange();
    if (!sel.focusNode)
      return null;
    let textBefore = textNodeBefore$1(sel.focusNode, sel.focusOffset);
    let textAfter = textNodeAfter$1(sel.focusNode, sel.focusOffset);
    if (textBefore && textAfter && textBefore != textAfter) {
      let descAfter = textAfter.pmViewDesc;
      if (!descAfter || !descAfter.isText(textAfter.nodeValue)) {
        return textAfter;
      } else if (view.input.compositionNode == textAfter) {
        let descBefore = textBefore.pmViewDesc;
        if (!(!descBefore || !descBefore.isText(textBefore.nodeValue)))
          return textAfter;
      }
    }
    return textBefore || textAfter;
  }
  function timestampFromCustomEvent() {
    let event = document.createEvent("Event");
    event.initEvent("event", true, true);
    return event.timeStamp;
  }
  function endComposition(view, forceUpdate = false) {
    if (android3 && view.domObserver.flushingSoon >= 0)
      return;
    view.domObserver.forceFlush();
    clearComposition(view);
    if (forceUpdate || view.docView && view.docView.dirty) {
      let sel = selectionFromDOM(view);
      if (sel && !sel.eq(view.state.selection))
        view.dispatch(view.state.tr.setSelection(sel));
      else
        view.updateState(view.state);
      return true;
    }
    return false;
  }
  function captureCopy2(view, dom) {
    if (!view.dom.parentNode)
      return;
    let wrap3 = view.dom.parentNode.appendChild(document.createElement("div"));
    wrap3.appendChild(dom);
    wrap3.style.cssText = "position: fixed; left: -10000px; top: 10px";
    let sel = getSelection(), range = document.createRange();
    range.selectNodeContents(dom);
    view.dom.blur();
    sel.removeAllRanges();
    sel.addRange(range);
    setTimeout(() => {
      if (wrap3.parentNode)
        wrap3.parentNode.removeChild(wrap3);
      view.focus();
    }, 50);
  }
  var brokenClipboardAPI2 = ie3 && ie_version < 15 || ios2 && webkit_version < 604;
  handlers2.copy = editHandlers.cut = (view, _event) => {
    let event = _event;
    let sel = view.state.selection, cut = event.type == "cut";
    if (sel.empty)
      return;
    let data = brokenClipboardAPI2 ? null : event.clipboardData;
    let slice2 = sel.content(), { dom, text: text5 } = serializeForClipboard(view, slice2);
    if (data) {
      event.preventDefault();
      data.clearData();
      data.setData("text/html", dom.innerHTML);
      data.setData("text/plain", text5);
    } else {
      captureCopy2(view, dom);
    }
    if (cut)
      view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
  };
  function sliceSingleNode(slice2) {
    return slice2.openStart == 0 && slice2.openEnd == 0 && slice2.content.childCount == 1 ? slice2.content.firstChild : null;
  }
  function capturePaste2(view, event) {
    if (!view.dom.parentNode)
      return;
    let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
    let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
    if (!plainText)
      target.contentEditable = "true";
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
    setTimeout(() => {
      view.focus();
      if (target.parentNode)
        target.parentNode.removeChild(target);
      if (plainText)
        doPaste2(view, target.value, null, plain, event);
      else
        doPaste2(view, target.textContent, target.innerHTML, plain, event);
    }, 50);
  }
  function doPaste2(view, text5, html2, preferPlain, event) {
    let slice2 = parseFromClipboard(view, text5, html2, preferPlain, view.state.selection.$from);
    if (view.someProp("handlePaste", (f3) => f3(view, event, slice2 || Slice.empty)))
      return true;
    if (!slice2)
      return false;
    let singleNode = sliceSingleNode(slice2);
    let tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, preferPlain) : view.state.tr.replaceSelection(slice2);
    view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
    return true;
  }
  function getText(clipboardData) {
    let text5 = clipboardData.getData("text/plain") || clipboardData.getData("Text");
    if (text5)
      return text5;
    let uris = clipboardData.getData("text/uri-list");
    return uris ? uris.replace(/\r?\n/g, " ") : "";
  }
  editHandlers.paste = (view, _event) => {
    let event = _event;
    if (view.composing && !android3)
      return;
    let data = brokenClipboardAPI2 ? null : event.clipboardData;
    let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
    if (data && doPaste2(view, getText(data), data.getData("text/html"), plain, event))
      event.preventDefault();
    else
      capturePaste2(view, event);
  };
  var Dragging = class {
    constructor(slice2, move, node2) {
      this.slice = slice2;
      this.move = move;
      this.node = node2;
    }
  };
  var dragCopyModifier = mac2 ? "altKey" : "ctrlKey";
  handlers2.dragstart = (view, _event) => {
    let event = _event;
    let mouseDown = view.input.mouseDown;
    if (mouseDown)
      mouseDown.done();
    if (!event.dataTransfer)
      return;
    let sel = view.state.selection;
    let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
    let node2;
    if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to))
      ;
    else if (mouseDown && mouseDown.mightDrag) {
      node2 = NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos);
    } else if (event.target && event.target.nodeType == 1) {
      let desc = view.docView.nearestDesc(event.target, true);
      if (desc && desc.node.type.spec.draggable && desc != view.docView)
        node2 = NodeSelection.create(view.state.doc, desc.posBefore);
    }
    let draggedSlice = (node2 || view.state.selection).content();
    let { dom, text: text5, slice: slice2 } = serializeForClipboard(view, draggedSlice);
    event.dataTransfer.clearData();
    event.dataTransfer.setData(brokenClipboardAPI2 ? "Text" : "text/html", dom.innerHTML);
    event.dataTransfer.effectAllowed = "copyMove";
    if (!brokenClipboardAPI2)
      event.dataTransfer.setData("text/plain", text5);
    view.dragging = new Dragging(slice2, !event[dragCopyModifier], node2);
  };
  handlers2.dragend = (view) => {
    let dragging = view.dragging;
    window.setTimeout(() => {
      if (view.dragging == dragging)
        view.dragging = null;
    }, 50);
  };
  editHandlers.dragover = editHandlers.dragenter = (_3, e3) => e3.preventDefault();
  editHandlers.drop = (view, _event) => {
    let event = _event;
    let dragging = view.dragging;
    view.dragging = null;
    if (!event.dataTransfer)
      return;
    let eventPos = view.posAtCoords(eventCoords(event));
    if (!eventPos)
      return;
    let $mouse = view.state.doc.resolve(eventPos.pos);
    let slice2 = dragging && dragging.slice;
    if (slice2) {
      view.someProp("transformPasted", (f3) => {
        slice2 = f3(slice2, view);
      });
    } else {
      slice2 = parseFromClipboard(view, getText(event.dataTransfer), brokenClipboardAPI2 ? null : event.dataTransfer.getData("text/html"), false, $mouse);
    }
    let move = !!(dragging && !event[dragCopyModifier]);
    if (view.someProp("handleDrop", (f3) => f3(view, event, slice2 || Slice.empty, move))) {
      event.preventDefault();
      return;
    }
    if (!slice2)
      return;
    event.preventDefault();
    let insertPos = slice2 ? dropPoint(view.state.doc, $mouse.pos, slice2) : $mouse.pos;
    if (insertPos == null)
      insertPos = $mouse.pos;
    let tr = view.state.tr;
    if (move) {
      let { node: node2 } = dragging;
      if (node2)
        node2.replace(tr);
      else
        tr.deleteSelection();
    }
    let pos = tr.mapping.map(insertPos);
    let isNode = slice2.openStart == 0 && slice2.openEnd == 0 && slice2.content.childCount == 1;
    let beforeInsert = tr.doc;
    if (isNode)
      tr.replaceRangeWith(pos, pos, slice2.content.firstChild);
    else
      tr.replaceRange(pos, pos, slice2);
    if (tr.doc.eq(beforeInsert))
      return;
    let $pos = tr.doc.resolve(pos);
    if (isNode && NodeSelection.isSelectable(slice2.content.firstChild) && $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice2.content.firstChild)) {
      tr.setSelection(new NodeSelection($pos));
    } else {
      let end = tr.mapping.map(insertPos);
      tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
      tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
    }
    view.focus();
    view.dispatch(tr.setMeta("uiEvent", "drop"));
  };
  handlers2.focus = (view) => {
    view.input.lastFocus = Date.now();
    if (!view.focused) {
      view.domObserver.stop();
      view.dom.classList.add("ProseMirror-focused");
      view.domObserver.start();
      view.focused = true;
      setTimeout(() => {
        if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
          selectionToDOM(view);
      }, 20);
    }
  };
  handlers2.blur = (view, _event) => {
    let event = _event;
    if (view.focused) {
      view.domObserver.stop();
      view.dom.classList.remove("ProseMirror-focused");
      view.domObserver.start();
      if (event.relatedTarget && view.dom.contains(event.relatedTarget))
        view.domObserver.currentSelection.clear();
      view.focused = false;
    }
  };
  handlers2.beforeinput = (view, _event) => {
    let event = _event;
    if (chrome2 && android3 && event.inputType == "deleteContentBackward") {
      view.domObserver.flushSoon();
      let { domChangeCount } = view.input;
      setTimeout(() => {
        if (view.input.domChangeCount != domChangeCount)
          return;
        view.dom.blur();
        view.focus();
        if (view.someProp("handleKeyDown", (f3) => f3(view, keyEvent(8, "Backspace"))))
          return;
        let { $cursor } = view.state.selection;
        if ($cursor && $cursor.pos > 0)
          view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
      }, 50);
    }
  };
  for (let prop in editHandlers)
    handlers2[prop] = editHandlers[prop];
  function compareObjs(a2, b4) {
    if (a2 == b4)
      return true;
    for (let p6 in a2)
      if (a2[p6] !== b4[p6])
        return false;
    for (let p6 in b4)
      if (!(p6 in a2))
        return false;
    return true;
  }
  var WidgetType2 = class _WidgetType {
    constructor(toDOM, spec) {
      this.toDOM = toDOM;
      this.spec = spec || noSpec;
      this.side = this.spec.side || 0;
    }
    map(mapping, span, offset, oldOffset) {
      let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
      return deleted ? null : new Decoration2(pos - offset, pos - offset, this);
    }
    valid() {
      return true;
    }
    eq(other) {
      return this == other || other instanceof _WidgetType && (this.spec.key && this.spec.key == other.spec.key || this.toDOM == other.toDOM && compareObjs(this.spec, other.spec));
    }
    destroy(node2) {
      if (this.spec.destroy)
        this.spec.destroy(node2);
    }
  };
  var InlineType = class _InlineType {
    constructor(attrs, spec) {
      this.attrs = attrs;
      this.spec = spec || noSpec;
    }
    map(mapping, span, offset, oldOffset) {
      let from2 = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
      let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
      return from2 >= to ? null : new Decoration2(from2, to, this);
    }
    valid(_3, span) {
      return span.from < span.to;
    }
    eq(other) {
      return this == other || other instanceof _InlineType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
    }
    static is(span) {
      return span.type instanceof _InlineType;
    }
    destroy() {
    }
  };
  var NodeType3 = class _NodeType {
    constructor(attrs, spec) {
      this.attrs = attrs;
      this.spec = spec || noSpec;
    }
    map(mapping, span, offset, oldOffset) {
      let from2 = mapping.mapResult(span.from + oldOffset, 1);
      if (from2.deleted)
        return null;
      let to = mapping.mapResult(span.to + oldOffset, -1);
      if (to.deleted || to.pos <= from2.pos)
        return null;
      return new Decoration2(from2.pos - offset, to.pos - offset, this);
    }
    valid(node2, span) {
      let { index: index2, offset } = node2.content.findIndex(span.from), child;
      return offset == span.from && !(child = node2.child(index2)).isText && offset + child.nodeSize == span.to;
    }
    eq(other) {
      return this == other || other instanceof _NodeType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
    }
    destroy() {
    }
  };
  var Decoration2 = class _Decoration {
    /**
    @internal
    */
    constructor(from2, to, type) {
      this.from = from2;
      this.to = to;
      this.type = type;
    }
    /**
    @internal
    */
    copy(from2, to) {
      return new _Decoration(from2, to, this.type);
    }
    /**
    @internal
    */
    eq(other, offset = 0) {
      return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
    }
    /**
    @internal
    */
    map(mapping, offset, oldOffset) {
      return this.type.map(mapping, this, offset, oldOffset);
    }
    /**
    Creates a widget decoration, which is a DOM node that's shown in
    the document at the given position. It is recommended that you
    delay rendering the widget by passing a function that will be
    called when the widget is actually drawn in a view, but you can
    also directly pass a DOM node. `getPos` can be used to find the
    widget's current document position.
    */
    static widget(pos, toDOM, spec) {
      return new _Decoration(pos, pos, new WidgetType2(toDOM, spec));
    }
    /**
    Creates an inline decoration, which adds the given attributes to
    each inline node between `from` and `to`.
    */
    static inline(from2, to, attrs, spec) {
      return new _Decoration(from2, to, new InlineType(attrs, spec));
    }
    /**
    Creates a node decoration. `from` and `to` should point precisely
    before and after a node in the document. That node, and only that
    node, will receive the given attributes.
    */
    static node(from2, to, attrs, spec) {
      return new _Decoration(from2, to, new NodeType3(attrs, spec));
    }
    /**
    The spec provided when creating this decoration. Can be useful
    if you've stored extra information in that object.
    */
    get spec() {
      return this.type.spec;
    }
    /**
    @internal
    */
    get inline() {
      return this.type instanceof InlineType;
    }
    /**
    @internal
    */
    get widget() {
      return this.type instanceof WidgetType2;
    }
  };
  var none4 = [];
  var noSpec = {};
  var DecorationSet = class _DecorationSet {
    /**
    @internal
    */
    constructor(local, children) {
      this.local = local.length ? local : none4;
      this.children = children.length ? children : none4;
    }
    /**
    Create a set of decorations, using the structure of the given
    document. This will consume (modify) the `decorations` array, so
    you must make a copy if you want need to preserve that.
    */
    static create(doc5, decorations2) {
      return decorations2.length ? buildTree2(decorations2, doc5, 0, noSpec) : empty3;
    }
    /**
    Find all decorations in this set which touch the given range
    (including decorations that start or end directly at the
    boundaries) and match the given predicate on their spec. When
    `start` and `end` are omitted, all decorations in the set are
    considered. When `predicate` isn't given, all decorations are
    assumed to match.
    */
    find(start, end, predicate) {
      let result = [];
      this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
      return result;
    }
    findInner(start, end, result, offset, predicate) {
      for (let i3 = 0; i3 < this.local.length; i3++) {
        let span = this.local[i3];
        if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
          result.push(span.copy(span.from + offset, span.to + offset));
      }
      for (let i3 = 0; i3 < this.children.length; i3 += 3) {
        if (this.children[i3] < end && this.children[i3 + 1] > start) {
          let childOff = this.children[i3] + 1;
          this.children[i3 + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
        }
      }
    }
    /**
    Map the set of decorations in response to a change in the
    document.
    */
    map(mapping, doc5, options) {
      if (this == empty3 || mapping.maps.length == 0)
        return this;
      return this.mapInner(mapping, doc5, 0, 0, options || noSpec);
    }
    /**
    @internal
    */
    mapInner(mapping, node2, offset, oldOffset, options) {
      let newLocal;
      for (let i3 = 0; i3 < this.local.length; i3++) {
        let mapped = this.local[i3].map(mapping, offset, oldOffset);
        if (mapped && mapped.type.valid(node2, mapped))
          (newLocal || (newLocal = [])).push(mapped);
        else if (options.onRemove)
          options.onRemove(this.local[i3].spec);
      }
      if (this.children.length)
        return mapChildren(this.children, newLocal || [], mapping, node2, offset, oldOffset, options);
      else
        return newLocal ? new _DecorationSet(newLocal.sort(byPos), none4) : empty3;
    }
    /**
    Add the given array of decorations to the ones in the set,
    producing a new set. Consumes the `decorations` array. Needs
    access to the current document to create the appropriate tree
    structure.
    */
    add(doc5, decorations2) {
      if (!decorations2.length)
        return this;
      if (this == empty3)
        return _DecorationSet.create(doc5, decorations2);
      return this.addInner(doc5, decorations2, 0);
    }
    addInner(doc5, decorations2, offset) {
      let children, childIndex = 0;
      doc5.forEach((childNode, childOffset) => {
        let baseOffset = childOffset + offset, found2;
        if (!(found2 = takeSpansForNode(decorations2, childNode, baseOffset)))
          return;
        if (!children)
          children = this.children.slice();
        while (childIndex < children.length && children[childIndex] < childOffset)
          childIndex += 3;
        if (children[childIndex] == childOffset)
          children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found2, baseOffset + 1);
        else
          children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree2(found2, childNode, baseOffset + 1, noSpec));
        childIndex += 3;
      });
      let local = moveSpans(childIndex ? withoutNulls(decorations2) : decorations2, -offset);
      for (let i3 = 0; i3 < local.length; i3++)
        if (!local[i3].type.valid(doc5, local[i3]))
          local.splice(i3--, 1);
      return new _DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
    }
    /**
    Create a new set that contains the decorations in this set, minus
    the ones in the given array.
    */
    remove(decorations2) {
      if (decorations2.length == 0 || this == empty3)
        return this;
      return this.removeInner(decorations2, 0);
    }
    removeInner(decorations2, offset) {
      let children = this.children, local = this.local;
      for (let i3 = 0; i3 < children.length; i3 += 3) {
        let found2;
        let from2 = children[i3] + offset, to = children[i3 + 1] + offset;
        for (let j6 = 0, span; j6 < decorations2.length; j6++)
          if (span = decorations2[j6]) {
            if (span.from > from2 && span.to < to) {
              decorations2[j6] = null;
              (found2 || (found2 = [])).push(span);
            }
          }
        if (!found2)
          continue;
        if (children == this.children)
          children = this.children.slice();
        let removed = children[i3 + 2].removeInner(found2, from2 + 1);
        if (removed != empty3) {
          children[i3 + 2] = removed;
        } else {
          children.splice(i3, 3);
          i3 -= 3;
        }
      }
      if (local.length) {
        for (let i3 = 0, span; i3 < decorations2.length; i3++)
          if (span = decorations2[i3]) {
            for (let j6 = 0; j6 < local.length; j6++)
              if (local[j6].eq(span, offset)) {
                if (local == this.local)
                  local = this.local.slice();
                local.splice(j6--, 1);
              }
          }
      }
      if (children == this.children && local == this.local)
        return this;
      return local.length || children.length ? new _DecorationSet(local, children) : empty3;
    }
    forChild(offset, node2) {
      if (this == empty3)
        return this;
      if (node2.isLeaf)
        return _DecorationSet.empty;
      let child, local;
      for (let i3 = 0; i3 < this.children.length; i3 += 3)
        if (this.children[i3] >= offset) {
          if (this.children[i3] == offset)
            child = this.children[i3 + 2];
          break;
        }
      let start = offset + 1, end = start + node2.content.size;
      for (let i3 = 0; i3 < this.local.length; i3++) {
        let dec2 = this.local[i3];
        if (dec2.from < end && dec2.to > start && dec2.type instanceof InlineType) {
          let from2 = Math.max(start, dec2.from) - start, to = Math.min(end, dec2.to) - start;
          if (from2 < to)
            (local || (local = [])).push(dec2.copy(from2, to));
        }
      }
      if (local) {
        let localSet = new _DecorationSet(local.sort(byPos), none4);
        return child ? new DecorationGroup([localSet, child]) : localSet;
      }
      return child || empty3;
    }
    /**
    @internal
    */
    eq(other) {
      if (this == other)
        return true;
      if (!(other instanceof _DecorationSet) || this.local.length != other.local.length || this.children.length != other.children.length)
        return false;
      for (let i3 = 0; i3 < this.local.length; i3++)
        if (!this.local[i3].eq(other.local[i3]))
          return false;
      for (let i3 = 0; i3 < this.children.length; i3 += 3)
        if (this.children[i3] != other.children[i3] || this.children[i3 + 1] != other.children[i3 + 1] || !this.children[i3 + 2].eq(other.children[i3 + 2]))
          return false;
      return true;
    }
    /**
    @internal
    */
    locals(node2) {
      return removeOverlap(this.localsInner(node2));
    }
    /**
    @internal
    */
    localsInner(node2) {
      if (this == empty3)
        return none4;
      if (node2.inlineContent || !this.local.some(InlineType.is))
        return this.local;
      let result = [];
      for (let i3 = 0; i3 < this.local.length; i3++) {
        if (!(this.local[i3].type instanceof InlineType))
          result.push(this.local[i3]);
      }
      return result;
    }
  };
  DecorationSet.empty = new DecorationSet([], []);
  DecorationSet.removeOverlap = removeOverlap;
  var empty3 = DecorationSet.empty;
  var DecorationGroup = class _DecorationGroup {
    constructor(members) {
      this.members = members;
    }
    map(mapping, doc5) {
      const mappedDecos = this.members.map((member) => member.map(mapping, doc5, noSpec));
      return _DecorationGroup.from(mappedDecos);
    }
    forChild(offset, child) {
      if (child.isLeaf)
        return DecorationSet.empty;
      let found2 = [];
      for (let i3 = 0; i3 < this.members.length; i3++) {
        let result = this.members[i3].forChild(offset, child);
        if (result == empty3)
          continue;
        if (result instanceof _DecorationGroup)
          found2 = found2.concat(result.members);
        else
          found2.push(result);
      }
      return _DecorationGroup.from(found2);
    }
    eq(other) {
      if (!(other instanceof _DecorationGroup) || other.members.length != this.members.length)
        return false;
      for (let i3 = 0; i3 < this.members.length; i3++)
        if (!this.members[i3].eq(other.members[i3]))
          return false;
      return true;
    }
    locals(node2) {
      let result, sorted = true;
      for (let i3 = 0; i3 < this.members.length; i3++) {
        let locals = this.members[i3].localsInner(node2);
        if (!locals.length)
          continue;
        if (!result) {
          result = locals;
        } else {
          if (sorted) {
            result = result.slice();
            sorted = false;
          }
          for (let j6 = 0; j6 < locals.length; j6++)
            result.push(locals[j6]);
        }
      }
      return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none4;
    }
    // Create a group for the given array of decoration sets, or return
    // a single set when possible.
    static from(members) {
      switch (members.length) {
        case 0:
          return empty3;
        case 1:
          return members[0];
        default:
          return new _DecorationGroup(members.every((m4) => m4 instanceof DecorationSet) ? members : members.reduce((r4, m4) => r4.concat(m4 instanceof DecorationSet ? m4 : m4.members), []));
      }
    }
  };
  function mapChildren(oldChildren, newLocal, mapping, node2, offset, oldOffset, options) {
    let children = oldChildren.slice();
    for (let i3 = 0, baseOffset = oldOffset; i3 < mapping.maps.length; i3++) {
      let moved = 0;
      mapping.maps[i3].forEach((oldStart, oldEnd, newStart, newEnd) => {
        let dSize = newEnd - newStart - (oldEnd - oldStart);
        for (let i4 = 0; i4 < children.length; i4 += 3) {
          let end = children[i4 + 1];
          if (end < 0 || oldStart > end + baseOffset - moved)
            continue;
          let start = children[i4] + baseOffset - moved;
          if (oldEnd >= start) {
            children[i4 + 1] = oldStart <= start ? -2 : -1;
          } else if (oldStart >= baseOffset && dSize) {
            children[i4] += dSize;
            children[i4 + 1] += dSize;
          }
        }
        moved += dSize;
      });
      baseOffset = mapping.maps[i3].map(baseOffset, -1);
    }
    let mustRebuild = false;
    for (let i3 = 0; i3 < children.length; i3 += 3)
      if (children[i3 + 1] < 0) {
        if (children[i3 + 1] == -2) {
          mustRebuild = true;
          children[i3 + 1] = -1;
          continue;
        }
        let from2 = mapping.map(oldChildren[i3] + oldOffset), fromLocal = from2 - offset;
        if (fromLocal < 0 || fromLocal >= node2.content.size) {
          mustRebuild = true;
          continue;
        }
        let to = mapping.map(oldChildren[i3 + 1] + oldOffset, -1), toLocal = to - offset;
        let { index: index2, offset: childOffset } = node2.content.findIndex(fromLocal);
        let childNode = node2.maybeChild(index2);
        if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
          let mapped = children[i3 + 2].mapInner(mapping, childNode, from2 + 1, oldChildren[i3] + oldOffset + 1, options);
          if (mapped != empty3) {
            children[i3] = fromLocal;
            children[i3 + 1] = toLocal;
            children[i3 + 2] = mapped;
          } else {
            children[i3 + 1] = -2;
            mustRebuild = true;
          }
        } else {
          mustRebuild = true;
        }
      }
    if (mustRebuild) {
      let decorations2 = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
      let built = buildTree2(decorations2, node2, 0, options);
      newLocal = built.local;
      for (let i3 = 0; i3 < children.length; i3 += 3)
        if (children[i3 + 1] < 0) {
          children.splice(i3, 3);
          i3 -= 3;
        }
      for (let i3 = 0, j6 = 0; i3 < built.children.length; i3 += 3) {
        let from2 = built.children[i3];
        while (j6 < children.length && children[j6] < from2)
          j6 += 3;
        children.splice(j6, 0, built.children[i3], built.children[i3 + 1], built.children[i3 + 2]);
      }
    }
    return new DecorationSet(newLocal.sort(byPos), children);
  }
  function moveSpans(spans, offset) {
    if (!offset || !spans.length)
      return spans;
    let result = [];
    for (let i3 = 0; i3 < spans.length; i3++) {
      let span = spans[i3];
      result.push(new Decoration2(span.from + offset, span.to + offset, span.type));
    }
    return result;
  }
  function mapAndGatherRemainingDecorations(children, oldChildren, decorations2, mapping, offset, oldOffset, options) {
    function gather(set, oldOffset2) {
      for (let i3 = 0; i3 < set.local.length; i3++) {
        let mapped = set.local[i3].map(mapping, offset, oldOffset2);
        if (mapped)
          decorations2.push(mapped);
        else if (options.onRemove)
          options.onRemove(set.local[i3].spec);
      }
      for (let i3 = 0; i3 < set.children.length; i3 += 3)
        gather(set.children[i3 + 2], set.children[i3] + oldOffset2 + 1);
    }
    for (let i3 = 0; i3 < children.length; i3 += 3)
      if (children[i3 + 1] == -1)
        gather(children[i3 + 2], oldChildren[i3] + oldOffset + 1);
    return decorations2;
  }
  function takeSpansForNode(spans, node2, offset) {
    if (node2.isLeaf)
      return null;
    let end = offset + node2.nodeSize, found2 = null;
    for (let i3 = 0, span; i3 < spans.length; i3++) {
      if ((span = spans[i3]) && span.from > offset && span.to < end) {
        (found2 || (found2 = [])).push(span);
        spans[i3] = null;
      }
    }
    return found2;
  }
  function withoutNulls(array) {
    let result = [];
    for (let i3 = 0; i3 < array.length; i3++)
      if (array[i3] != null)
        result.push(array[i3]);
    return result;
  }
  function buildTree2(spans, node2, offset, options) {
    let children = [], hasNulls = false;
    node2.forEach((childNode, localStart) => {
      let found2 = takeSpansForNode(spans, childNode, localStart + offset);
      if (found2) {
        hasNulls = true;
        let subtree = buildTree2(found2, childNode, offset + localStart + 1, options);
        if (subtree != empty3)
          children.push(localStart, localStart + childNode.nodeSize, subtree);
      }
    });
    let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
    for (let i3 = 0; i3 < locals.length; i3++)
      if (!locals[i3].type.valid(node2, locals[i3])) {
        if (options.onRemove)
          options.onRemove(locals[i3].spec);
        locals.splice(i3--, 1);
      }
    return locals.length || children.length ? new DecorationSet(locals, children) : empty3;
  }
  function byPos(a2, b4) {
    return a2.from - b4.from || a2.to - b4.to;
  }
  function removeOverlap(spans) {
    let working = spans;
    for (let i3 = 0; i3 < working.length - 1; i3++) {
      let span = working[i3];
      if (span.from != span.to)
        for (let j6 = i3 + 1; j6 < working.length; j6++) {
          let next = working[j6];
          if (next.from == span.from) {
            if (next.to != span.to) {
              if (working == spans)
                working = spans.slice();
              working[j6] = next.copy(next.from, span.to);
              insertAhead(working, j6 + 1, next.copy(span.to, next.to));
            }
            continue;
          } else {
            if (next.from < span.to) {
              if (working == spans)
                working = spans.slice();
              working[i3] = span.copy(span.from, next.from);
              insertAhead(working, j6, span.copy(next.from, span.to));
            }
            break;
          }
        }
    }
    return working;
  }
  function insertAhead(array, i3, deco) {
    while (i3 < array.length && byPos(deco, array[i3]) > 0)
      i3++;
    array.splice(i3, 0, deco);
  }
  function viewDecorations(view) {
    let found2 = [];
    view.someProp("decorations", (f3) => {
      let result = f3(view.state);
      if (result && result != empty3)
        found2.push(result);
    });
    if (view.cursorWrapper)
      found2.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
    return DecorationGroup.from(found2);
  }
  var observeOptions2 = {
    childList: true,
    characterData: true,
    characterDataOldValue: true,
    attributes: true,
    attributeOldValue: true,
    subtree: true
  };
  var useCharData2 = ie3 && ie_version <= 11;
  var SelectionState = class {
    constructor() {
      this.anchorNode = null;
      this.anchorOffset = 0;
      this.focusNode = null;
      this.focusOffset = 0;
    }
    set(sel) {
      this.anchorNode = sel.anchorNode;
      this.anchorOffset = sel.anchorOffset;
      this.focusNode = sel.focusNode;
      this.focusOffset = sel.focusOffset;
    }
    clear() {
      this.anchorNode = this.focusNode = null;
    }
    eq(sel) {
      return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset && sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
    }
  };
  var DOMObserver2 = class {
    constructor(view, handleDOMChange) {
      this.view = view;
      this.handleDOMChange = handleDOMChange;
      this.queue = [];
      this.flushingSoon = -1;
      this.observer = null;
      this.currentSelection = new SelectionState();
      this.onCharData = null;
      this.suppressingSelectionUpdates = false;
      this.observer = window.MutationObserver && new window.MutationObserver((mutations) => {
        for (let i3 = 0; i3 < mutations.length; i3++)
          this.queue.push(mutations[i3]);
        if (ie3 && ie_version <= 11 && mutations.some((m4) => m4.type == "childList" && m4.removedNodes.length || m4.type == "characterData" && m4.oldValue.length > m4.target.nodeValue.length))
          this.flushSoon();
        else
          this.flush();
      });
      if (useCharData2) {
        this.onCharData = (e3) => {
          this.queue.push({ target: e3.target, type: "characterData", oldValue: e3.prevValue });
          this.flushSoon();
        };
      }
      this.onSelectionChange = this.onSelectionChange.bind(this);
    }
    flushSoon() {
      if (this.flushingSoon < 0)
        this.flushingSoon = window.setTimeout(() => {
          this.flushingSoon = -1;
          this.flush();
        }, 20);
    }
    forceFlush() {
      if (this.flushingSoon > -1) {
        window.clearTimeout(this.flushingSoon);
        this.flushingSoon = -1;
        this.flush();
      }
    }
    start() {
      if (this.observer) {
        this.observer.takeRecords();
        this.observer.observe(this.view.dom, observeOptions2);
      }
      if (this.onCharData)
        this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.connectSelection();
    }
    stop() {
      if (this.observer) {
        let take = this.observer.takeRecords();
        if (take.length) {
          for (let i3 = 0; i3 < take.length; i3++)
            this.queue.push(take[i3]);
          window.setTimeout(() => this.flush(), 20);
        }
        this.observer.disconnect();
      }
      if (this.onCharData)
        this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      this.disconnectSelection();
    }
    connectSelection() {
      this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
    }
    disconnectSelection() {
      this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
    }
    suppressSelectionUpdates() {
      this.suppressingSelectionUpdates = true;
      setTimeout(() => this.suppressingSelectionUpdates = false, 50);
    }
    onSelectionChange() {
      if (!hasFocusAndSelection(this.view))
        return;
      if (this.suppressingSelectionUpdates)
        return selectionToDOM(this.view);
      if (ie3 && ie_version <= 11 && !this.view.state.selection.empty) {
        let sel = this.view.domSelectionRange();
        if (sel.focusNode && isEquivalentPosition2(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
          return this.flushSoon();
      }
      this.flush();
    }
    setCurSelection() {
      this.currentSelection.set(this.view.domSelectionRange());
    }
    ignoreSelectionChange(sel) {
      if (!sel.focusNode)
        return true;
      let ancestors = /* @__PURE__ */ new Set(), container;
      for (let scan = sel.focusNode; scan; scan = parentNode(scan))
        ancestors.add(scan);
      for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
        if (ancestors.has(scan)) {
          container = scan;
          break;
        }
      let desc = container && this.view.docView.nearestDesc(container);
      if (desc && desc.ignoreMutation({
        type: "selection",
        target: container.nodeType == 3 ? container.parentNode : container
      })) {
        this.setCurSelection();
        return true;
      }
    }
    pendingRecords() {
      if (this.observer)
        for (let mut of this.observer.takeRecords())
          this.queue.push(mut);
      return this.queue;
    }
    flush() {
      let { view } = this;
      if (!view.docView || this.flushingSoon > -1)
        return;
      let mutations = this.pendingRecords();
      if (mutations.length)
        this.queue = [];
      let sel = view.domSelectionRange();
      let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
      let from2 = -1, to = -1, typeOver = false, added = [];
      if (view.editable) {
        for (let i3 = 0; i3 < mutations.length; i3++) {
          let result = this.registerMutation(mutations[i3], added);
          if (result) {
            from2 = from2 < 0 ? result.from : Math.min(result.from, from2);
            to = to < 0 ? result.to : Math.max(result.to, to);
            if (result.typeOver)
              typeOver = true;
          }
        }
      }
      if (gecko2 && added.length > 1) {
        let brs = added.filter((n5) => n5.nodeName == "BR");
        if (brs.length == 2) {
          let a2 = brs[0], b4 = brs[1];
          if (a2.parentNode && a2.parentNode.parentNode == b4.parentNode)
            b4.remove();
          else
            a2.remove();
        }
      }
      let readSel = null;
      if (from2 < 0 && newSel && view.input.lastFocus > Date.now() - 200 && Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 && selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) && readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
        view.input.lastFocus = 0;
        selectionToDOM(view);
        this.currentSelection.set(sel);
        view.scrollToSelection();
      } else if (from2 > -1 || newSel) {
        if (from2 > -1) {
          view.docView.markDirty(from2, to);
          checkCSS(view);
        }
        this.handleDOMChange(from2, to, typeOver, added);
        if (view.docView && view.docView.dirty)
          view.updateState(view.state);
        else if (!this.currentSelection.eq(sel))
          selectionToDOM(view);
        this.currentSelection.set(sel);
      }
    }
    registerMutation(mut, added) {
      if (added.indexOf(mut.target) > -1)
        return null;
      let desc = this.view.docView.nearestDesc(mut.target);
      if (mut.type == "attributes" && (desc == this.view.docView || mut.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
      mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style")))
        return null;
      if (!desc || desc.ignoreMutation(mut))
        return null;
      if (mut.type == "childList") {
        for (let i3 = 0; i3 < mut.addedNodes.length; i3++)
          added.push(mut.addedNodes[i3]);
        if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
          return { from: desc.posBefore, to: desc.posAfter };
        let prev = mut.previousSibling, next = mut.nextSibling;
        if (ie3 && ie_version <= 11 && mut.addedNodes.length) {
          for (let i3 = 0; i3 < mut.addedNodes.length; i3++) {
            let { previousSibling, nextSibling } = mut.addedNodes[i3];
            if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
              prev = previousSibling;
            if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
              next = nextSibling;
          }
        }
        let fromOffset = prev && prev.parentNode == mut.target ? domIndex2(prev) + 1 : 0;
        let from2 = desc.localPosFromDOM(mut.target, fromOffset, -1);
        let toOffset = next && next.parentNode == mut.target ? domIndex2(next) : mut.target.childNodes.length;
        let to = desc.localPosFromDOM(mut.target, toOffset, 1);
        return { from: from2, to };
      } else if (mut.type == "attributes") {
        return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
      } else {
        return {
          from: desc.posAtStart,
          to: desc.posAtEnd,
          // An event was generated for a text change that didn't change
          // any text. Mark the dom change to fall back to assuming the
          // selection was typed over with an identical value if it can't
          // find another change.
          typeOver: mut.target.nodeValue == mut.oldValue
        };
      }
    }
  };
  var cssChecked = /* @__PURE__ */ new WeakMap();
  var cssCheckWarned = false;
  function checkCSS(view) {
    if (cssChecked.has(view))
      return;
    cssChecked.set(view, null);
    if (["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
      view.requiresGeckoHackNode = gecko2;
      if (cssCheckWarned)
        return;
      console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
      cssCheckWarned = true;
    }
  }
  function rangeToSelectionRange(view, range) {
    let anchorNode = range.startContainer, anchorOffset = range.startOffset;
    let focusNode = range.endContainer, focusOffset = range.endOffset;
    let currentAnchor = view.domAtPos(view.state.selection.anchor);
    if (isEquivalentPosition2(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
      [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  function safariShadowSelectionRange(view, selection) {
    if (selection.getComposedRanges) {
      let range = selection.getComposedRanges(view.root)[0];
      if (range)
        return rangeToSelectionRange(view, range);
    }
    let found2;
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found2 = event.getTargetRanges()[0];
    }
    view.dom.addEventListener("beforeinput", read, true);
    document.execCommand("indent");
    view.dom.removeEventListener("beforeinput", read, true);
    return found2 ? rangeToSelectionRange(view, found2) : null;
  }
  function parseBetween(view, from_, to_) {
    let { node: parent, fromOffset, toOffset, from: from2, to } = view.docView.parseRange(from_, to_);
    let domSel = view.domSelectionRange();
    let find2;
    let anchor = domSel.anchorNode;
    if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
      find2 = [{ node: anchor, offset: domSel.anchorOffset }];
      if (!selectionCollapsed(domSel))
        find2.push({ node: domSel.focusNode, offset: domSel.focusOffset });
    }
    if (chrome2 && view.input.lastKeyCode === 8) {
      for (let off = toOffset; off > fromOffset; off--) {
        let node2 = parent.childNodes[off - 1], desc = node2.pmViewDesc;
        if (node2.nodeName == "BR" && !desc) {
          toOffset = off;
          break;
        }
        if (!desc || desc.size)
          break;
      }
    }
    let startDoc = view.state.doc;
    let parser2 = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
    let $from = startDoc.resolve(from2);
    let sel = null, doc5 = parser2.parse(parent, {
      topNode: $from.parent,
      topMatch: $from.parent.contentMatchAt($from.index()),
      topOpen: true,
      from: fromOffset,
      to: toOffset,
      preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
      findPositions: find2,
      ruleFromNode,
      context: $from
    });
    if (find2 && find2[0].pos != null) {
      let anchor2 = find2[0].pos, head = find2[1] && find2[1].pos;
      if (head == null)
        head = anchor2;
      sel = { anchor: anchor2 + from2, head: head + from2 };
    }
    return { doc: doc5, sel, from: from2, to };
  }
  function ruleFromNode(dom) {
    let desc = dom.pmViewDesc;
    if (desc) {
      return desc.parseRule();
    } else if (dom.nodeName == "BR" && dom.parentNode) {
      if (safari2 && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
        let skip = document.createElement("div");
        skip.appendChild(document.createElement("li"));
        return { skip };
      } else if (dom.parentNode.lastChild == dom || safari2 && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
        return { ignore: true };
      }
    } else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
      return { ignore: true };
    }
    return null;
  }
  var isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
  function readDOMChange(view, from2, to, typeOver, addedNodes) {
    let compositionID = view.input.compositionPendingChanges || (view.composing ? view.input.compositionID : 0);
    view.input.compositionPendingChanges = 0;
    if (from2 < 0) {
      let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
      let newSel = selectionFromDOM(view, origin);
      if (newSel && !view.state.selection.eq(newSel)) {
        if (chrome2 && android3 && view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime && view.someProp("handleKeyDown", (f3) => f3(view, keyEvent(13, "Enter"))))
          return;
        let tr2 = view.state.tr.setSelection(newSel);
        if (origin == "pointer")
          tr2.setMeta("pointer", true);
        else if (origin == "key")
          tr2.scrollIntoView();
        if (compositionID)
          tr2.setMeta("composition", compositionID);
        view.dispatch(tr2);
      }
      return;
    }
    let $before = view.state.doc.resolve(from2);
    let shared = $before.sharedDepth(to);
    from2 = $before.before(shared + 1);
    to = view.state.doc.resolve(to).after(shared + 1);
    let sel = view.state.selection;
    let parse2 = parseBetween(view, from2, to);
    let doc5 = view.state.doc, compare2 = doc5.slice(parse2.from, parse2.to);
    let preferredPos, preferredSide;
    if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
      preferredPos = view.state.selection.to;
      preferredSide = "end";
    } else {
      preferredPos = view.state.selection.from;
      preferredSide = "start";
    }
    view.input.lastKeyCode = null;
    let change = findDiff2(compare2.content, parse2.doc.content, parse2.from, preferredPos, preferredSide);
    if ((ios2 && view.input.lastIOSEnter > Date.now() - 225 || android3) && addedNodes.some((n5) => n5.nodeType == 1 && !isInline.test(n5.nodeName)) && (!change || change.endA >= change.endB) && view.someProp("handleKeyDown", (f3) => f3(view, keyEvent(13, "Enter")))) {
      view.input.lastIOSEnter = 0;
      return;
    }
    if (!change) {
      if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) && !view.composing && !(parse2.sel && parse2.sel.anchor != parse2.sel.head)) {
        change = { start: sel.from, endA: sel.to, endB: sel.to };
      } else {
        if (parse2.sel) {
          let sel2 = resolveSelection(view, view.state.doc, parse2.sel);
          if (sel2 && !sel2.eq(view.state.selection)) {
            let tr2 = view.state.tr.setSelection(sel2);
            if (compositionID)
              tr2.setMeta("composition", compositionID);
            view.dispatch(tr2);
          }
        }
        return;
      }
    }
    view.input.domChangeCount++;
    if (view.state.selection.from < view.state.selection.to && change.start == change.endB && view.state.selection instanceof TextSelection) {
      if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 && view.state.selection.from >= parse2.from) {
        change.start = view.state.selection.from;
      } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 && view.state.selection.to <= parse2.to) {
        change.endB += view.state.selection.to - change.endA;
        change.endA = view.state.selection.to;
      }
    }
    if (ie3 && ie_version <= 11 && change.endB == change.start + 1 && change.endA == change.start && change.start > parse2.from && parse2.doc.textBetween(change.start - parse2.from - 1, change.start - parse2.from + 1) == " \xA0") {
      change.start--;
      change.endA--;
      change.endB--;
    }
    let $from = parse2.doc.resolveNoCache(change.start - parse2.from);
    let $to = parse2.doc.resolveNoCache(change.endB - parse2.from);
    let $fromA = doc5.resolve(change.start);
    let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
    let nextSel;
    if ((ios2 && view.input.lastIOSEnter > Date.now() - 225 && (!inlineChange || addedNodes.some((n5) => n5.nodeName == "DIV" || n5.nodeName == "P")) || !inlineChange && $from.pos < parse2.doc.content.size && !$from.sameParent($to) && (nextSel = Selection.findFrom(parse2.doc.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos) && view.someProp("handleKeyDown", (f3) => f3(view, keyEvent(13, "Enter")))) {
      view.input.lastIOSEnter = 0;
      return;
    }
    if (view.state.selection.anchor > change.start && looksLikeBackspace(doc5, change.start, change.endA, $from, $to) && view.someProp("handleKeyDown", (f3) => f3(view, keyEvent(8, "Backspace")))) {
      if (android3 && chrome2)
        view.domObserver.suppressSelectionUpdates();
      return;
    }
    if (chrome2 && android3 && change.endB == change.start)
      view.input.lastAndroidDelete = Date.now();
    if (android3 && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth && parse2.sel && parse2.sel.anchor == parse2.sel.head && parse2.sel.head == change.endA) {
      change.endB -= 2;
      $to = parse2.doc.resolveNoCache(change.endB - parse2.from);
      setTimeout(() => {
        view.someProp("handleKeyDown", function(f3) {
          return f3(view, keyEvent(13, "Enter"));
        });
      }, 20);
    }
    let chFrom = change.start, chTo = change.endA;
    let tr, storedMarks, markChange;
    if (inlineChange) {
      if ($from.pos == $to.pos) {
        if (ie3 && ie_version <= 11 && $from.parentOffset == 0) {
          view.domObserver.suppressSelectionUpdates();
          setTimeout(() => selectionToDOM(view), 20);
        }
        tr = view.state.tr.delete(chFrom, chTo);
        storedMarks = doc5.resolve(change.start).marksAcross(doc5.resolve(change.endA));
      } else if (
        // Adding or removing a mark
        change.endA == change.endB && (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))
      ) {
        tr = view.state.tr;
        if (markChange.type == "add")
          tr.addMark(chFrom, chTo, markChange.mark);
        else
          tr.removeMark(chFrom, chTo, markChange.mark);
      } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
        let text5 = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
        if (view.someProp("handleTextInput", (f3) => f3(view, chFrom, chTo, text5)))
          return;
        tr = view.state.tr.insertText(text5, chFrom, chTo);
      }
    }
    if (!tr)
      tr = view.state.tr.replace(chFrom, chTo, parse2.doc.slice(change.start - parse2.from, change.endB - parse2.from));
    if (parse2.sel) {
      let sel2 = resolveSelection(view, tr.doc, parse2.sel);
      if (sel2 && !(chrome2 && android3 && view.composing && sel2.empty && (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) && (sel2.head == chFrom || sel2.head == tr.mapping.map(chTo) - 1) || ie3 && sel2.empty && sel2.head == chFrom))
        tr.setSelection(sel2);
    }
    if (storedMarks)
      tr.ensureMarks(storedMarks);
    if (compositionID)
      tr.setMeta("composition", compositionID);
    view.dispatch(tr.scrollIntoView());
  }
  function resolveSelection(view, doc5, parsedSel) {
    if (Math.max(parsedSel.anchor, parsedSel.head) > doc5.content.size)
      return null;
    return selectionBetween(view, doc5.resolve(parsedSel.anchor), doc5.resolve(parsedSel.head));
  }
  function isMarkChange(cur2, prev) {
    let curMarks = cur2.firstChild.marks, prevMarks = prev.firstChild.marks;
    let added = curMarks, removed = prevMarks, type, mark, update;
    for (let i3 = 0; i3 < prevMarks.length; i3++)
      added = prevMarks[i3].removeFromSet(added);
    for (let i3 = 0; i3 < curMarks.length; i3++)
      removed = curMarks[i3].removeFromSet(removed);
    if (added.length == 1 && removed.length == 0) {
      mark = added[0];
      type = "add";
      update = (node2) => node2.mark(mark.addToSet(node2.marks));
    } else if (added.length == 0 && removed.length == 1) {
      mark = removed[0];
      type = "remove";
      update = (node2) => node2.mark(mark.removeFromSet(node2.marks));
    } else {
      return null;
    }
    let updated = [];
    for (let i3 = 0; i3 < prev.childCount; i3++)
      updated.push(update(prev.child(i3)));
    if (Fragment.from(updated).eq(cur2))
      return { mark, type };
  }
  function looksLikeBackspace(old, start, end, $newStart, $newEnd) {
    if (
      // The content must have shrunk
      end - start <= $newEnd.pos - $newStart.pos || // newEnd must point directly at or after the end of the block that newStart points into
      skipClosingAndOpening($newStart, true, false) < $newEnd.pos
    )
      return false;
    let $start = old.resolve(start);
    if (!$newStart.parent.isTextblock) {
      let after = $start.nodeAfter;
      return after != null && end == start + after.nodeSize;
    }
    if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
      return false;
    let $next = old.resolve(skipClosingAndOpening($start, true, true));
    if (!$next.parent.isTextblock || $next.pos > end || skipClosingAndOpening($next, true, false) < end)
      return false;
    return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
  }
  function skipClosingAndOpening($pos, fromEnd, mayOpen) {
    let depth2 = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
    while (depth2 > 0 && (fromEnd || $pos.indexAfter(depth2) == $pos.node(depth2).childCount)) {
      depth2--;
      end++;
      fromEnd = false;
    }
    if (mayOpen) {
      let next = $pos.node(depth2).maybeChild($pos.indexAfter(depth2));
      while (next && !next.isLeaf) {
        next = next.firstChild;
        end++;
      }
    }
    return end;
  }
  function findDiff2(a2, b4, pos, preferredPos, preferredSide) {
    let start = a2.findDiffStart(b4, pos);
    if (start == null)
      return null;
    let { a: endA, b: endB } = a2.findDiffEnd(b4, pos + a2.size, pos + b4.size);
    if (preferredSide == "end") {
      let adjust = Math.max(0, start - Math.min(endA, endB));
      preferredPos -= endA + adjust - start;
    }
    if (endA < start && a2.size < b4.size) {
      let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
      start -= move;
      if (start && start < b4.size && isSurrogatePair(b4.textBetween(start - 1, start + 1)))
        start += move ? 1 : -1;
      endB = start + (endB - endA);
      endA = start;
    } else if (endB < start) {
      let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
      start -= move;
      if (start && start < a2.size && isSurrogatePair(a2.textBetween(start - 1, start + 1)))
        start += move ? 1 : -1;
      endA = start + (endA - endB);
      endB = start;
    }
    return { start, endA, endB };
  }
  function isSurrogatePair(str) {
    if (str.length != 2)
      return false;
    let a2 = str.charCodeAt(0), b4 = str.charCodeAt(1);
    return a2 >= 56320 && a2 <= 57343 && b4 >= 55296 && b4 <= 56319;
  }
  var EditorView2 = class {
    /**
    Create a view. `place` may be a DOM node that the editor should
    be appended to, a function that will place it into the document,
    or an object whose `mount` property holds the node to use as the
    document container. If it is `null`, the editor will not be
    added to the document.
    */
    constructor(place, props) {
      this._root = null;
      this.focused = false;
      this.trackWrites = null;
      this.mounted = false;
      this.markCursor = null;
      this.cursorWrapper = null;
      this.lastSelectedViewDesc = void 0;
      this.input = new InputState2();
      this.prevDirectPlugins = [];
      this.pluginViews = [];
      this.requiresGeckoHackNode = false;
      this.dragging = null;
      this._props = props;
      this.state = props.state;
      this.directPlugins = props.plugins || [];
      this.directPlugins.forEach(checkStateComponent);
      this.dispatch = this.dispatch.bind(this);
      this.dom = place && place.mount || document.createElement("div");
      if (place) {
        if (place.appendChild)
          place.appendChild(this.dom);
        else if (typeof place == "function")
          place(this.dom);
        else if (place.mount)
          this.mounted = true;
      }
      this.editable = getEditable(this);
      updateCursorWrapper(this);
      this.nodeViews = buildNodeViews(this);
      this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
      this.domObserver = new DOMObserver2(this, (from2, to, typeOver, added) => readDOMChange(this, from2, to, typeOver, added));
      this.domObserver.start();
      initInput(this);
      this.updatePluginViews();
    }
    /**
    Holds `true` when a
    [composition](https://w3c.github.io/uievents/#events-compositionevents)
    is active.
    */
    get composing() {
      return this.input.composing;
    }
    /**
    The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
    */
    get props() {
      if (this._props.state != this.state) {
        let prev = this._props;
        this._props = {};
        for (let name2 in prev)
          this._props[name2] = prev[name2];
        this._props.state = this.state;
      }
      return this._props;
    }
    /**
    Update the view's props. Will immediately cause an update to
    the DOM.
    */
    update(props) {
      if (props.handleDOMEvents != this._props.handleDOMEvents)
        ensureListeners(this);
      let prevProps = this._props;
      this._props = props;
      if (props.plugins) {
        props.plugins.forEach(checkStateComponent);
        this.directPlugins = props.plugins;
      }
      this.updateStateInner(props.state, prevProps);
    }
    /**
    Update the view by updating existing props object with the object
    given as argument. Equivalent to `view.update(Object.assign({},
    view.props, props))`.
    */
    setProps(props) {
      let updated = {};
      for (let name2 in this._props)
        updated[name2] = this._props[name2];
      updated.state = this.state;
      for (let name2 in props)
        updated[name2] = props[name2];
      this.update(updated);
    }
    /**
    Update the editor's `state` prop, without touching any of the
    other props.
    */
    updateState(state) {
      this.updateStateInner(state, this._props);
    }
    updateStateInner(state, prevProps) {
      var _a2;
      let prev = this.state, redraw = false, updateSel2 = false;
      if (state.storedMarks && this.composing) {
        clearComposition(this);
        updateSel2 = true;
      }
      this.state = state;
      let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
      if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
        let nodeViews = buildNodeViews(this);
        if (changedNodeViews(nodeViews, this.nodeViews)) {
          this.nodeViews = nodeViews;
          redraw = true;
        }
      }
      if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
        ensureListeners(this);
      }
      this.editable = getEditable(this);
      updateCursorWrapper(this);
      let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
      let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset" : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
      let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
      if (updateDoc || !state.selection.eq(prev.selection))
        updateSel2 = true;
      let oldScrollPos = scroll == "preserve" && updateSel2 && this.dom.style.overflowAnchor == null && storeScrollPos(this);
      if (updateSel2) {
        this.domObserver.stop();
        let forceSelUpdate = updateDoc && (ie3 || chrome2) && !this.composing && !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
        if (updateDoc) {
          let chromeKludge = chrome2 ? this.trackWrites = this.domSelectionRange().focusNode : null;
          if (this.composing)
            this.input.compositionNode = findCompositionNode2(this);
          if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
            this.docView.updateOuterDeco(outerDeco);
            this.docView.destroy();
            this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
          }
          if (chromeKludge && !this.trackWrites)
            forceSelUpdate = true;
        }
        if (forceSelUpdate || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && anchorInRightPlace(this))) {
          selectionToDOM(this, forceSelUpdate);
        } else {
          syncNodeSelection(this, state.selection);
          this.domObserver.setCurSelection();
        }
        this.domObserver.start();
      }
      this.updatePluginViews(prev);
      if (((_a2 = this.dragging) === null || _a2 === void 0 ? void 0 : _a2.node) && !prev.doc.eq(state.doc))
        this.updateDraggedNode(this.dragging, prev);
      if (scroll == "reset") {
        this.dom.scrollTop = 0;
      } else if (scroll == "to selection") {
        this.scrollToSelection();
      } else if (oldScrollPos) {
        resetScrollPos(oldScrollPos);
      }
    }
    /**
    @internal
    */
    scrollToSelection() {
      let startDOM = this.domSelectionRange().focusNode;
      if (this.someProp("handleScrollToSelection", (f3) => f3(this)))
        ;
      else if (this.state.selection instanceof NodeSelection) {
        let target = this.docView.domAfterPos(this.state.selection.from);
        if (target.nodeType == 1)
          scrollRectIntoView2(this, target.getBoundingClientRect(), startDOM);
      } else {
        scrollRectIntoView2(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
      }
    }
    destroyPluginViews() {
      let view;
      while (view = this.pluginViews.pop())
        if (view.destroy)
          view.destroy();
    }
    updatePluginViews(prevState) {
      if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
        this.prevDirectPlugins = this.directPlugins;
        this.destroyPluginViews();
        for (let i3 = 0; i3 < this.directPlugins.length; i3++) {
          let plugin2 = this.directPlugins[i3];
          if (plugin2.spec.view)
            this.pluginViews.push(plugin2.spec.view(this));
        }
        for (let i3 = 0; i3 < this.state.plugins.length; i3++) {
          let plugin2 = this.state.plugins[i3];
          if (plugin2.spec.view)
            this.pluginViews.push(plugin2.spec.view(this));
        }
      } else {
        for (let i3 = 0; i3 < this.pluginViews.length; i3++) {
          let pluginView = this.pluginViews[i3];
          if (pluginView.update)
            pluginView.update(this, prevState);
        }
      }
    }
    updateDraggedNode(dragging, prev) {
      let sel = dragging.node, found2 = -1;
      if (this.state.doc.nodeAt(sel.from) == sel.node) {
        found2 = sel.from;
      } else {
        let movedPos = sel.from + (this.state.doc.content.size - prev.doc.content.size);
        let moved = movedPos > 0 && this.state.doc.nodeAt(movedPos);
        if (moved == sel.node)
          found2 = movedPos;
      }
      this.dragging = new Dragging(dragging.slice, dragging.move, found2 < 0 ? void 0 : NodeSelection.create(this.state.doc, found2));
    }
    someProp(propName, f3) {
      let prop = this._props && this._props[propName], value;
      if (prop != null && (value = f3 ? f3(prop) : prop))
        return value;
      for (let i3 = 0; i3 < this.directPlugins.length; i3++) {
        let prop2 = this.directPlugins[i3].props[propName];
        if (prop2 != null && (value = f3 ? f3(prop2) : prop2))
          return value;
      }
      let plugins = this.state.plugins;
      if (plugins)
        for (let i3 = 0; i3 < plugins.length; i3++) {
          let prop2 = plugins[i3].props[propName];
          if (prop2 != null && (value = f3 ? f3(prop2) : prop2))
            return value;
        }
    }
    /**
    Query whether the view has focus.
    */
    hasFocus() {
      if (ie3) {
        let node2 = this.root.activeElement;
        if (node2 == this.dom)
          return true;
        if (!node2 || !this.dom.contains(node2))
          return false;
        while (node2 && this.dom != node2 && this.dom.contains(node2)) {
          if (node2.contentEditable == "false")
            return false;
          node2 = node2.parentElement;
        }
        return true;
      }
      return this.root.activeElement == this.dom;
    }
    /**
    Focus the editor.
    */
    focus() {
      this.domObserver.stop();
      if (this.editable)
        focusPreventScroll2(this.dom);
      selectionToDOM(this);
      this.domObserver.start();
    }
    /**
    Get the document root in which the editor exists. This will
    usually be the top-level `document`, but might be a [shadow
    DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
    root if the editor is inside one.
    */
    get root() {
      let cached = this._root;
      if (cached == null)
        for (let search3 = this.dom.parentNode; search3; search3 = search3.parentNode) {
          if (search3.nodeType == 9 || search3.nodeType == 11 && search3.host) {
            if (!search3.getSelection)
              Object.getPrototypeOf(search3).getSelection = () => search3.ownerDocument.getSelection();
            return this._root = search3;
          }
        }
      return cached || document;
    }
    /**
    When an existing editor view is moved to a new document or
    shadow tree, call this to make it recompute its root.
    */
    updateRoot() {
      this._root = null;
    }
    /**
    Given a pair of viewport coordinates, return the document
    position that corresponds to them. May return null if the given
    coordinates aren't inside of the editor. When an object is
    returned, its `pos` property is the position nearest to the
    coordinates, and its `inside` property holds the position of the
    inner node that the position falls inside of, or -1 if it is at
    the top level, not in any node.
    */
    posAtCoords(coords) {
      return posAtCoords2(this, coords);
    }
    /**
    Returns the viewport rectangle at a given document position.
    `left` and `right` will be the same number, as this returns a
    flat cursor-ish rectangle. If the position is between two things
    that aren't directly adjacent, `side` determines which element
    is used. When < 0, the element before the position is used,
    otherwise the element after.
    */
    coordsAtPos(pos, side = 1) {
      return coordsAtPos(this, pos, side);
    }
    /**
    Find the DOM position that corresponds to the given document
    position. When `side` is negative, find the position as close as
    possible to the content before the position. When positive,
    prefer positions close to the content after the position. When
    zero, prefer as shallow a position as possible.
    
    Note that you should **not** mutate the editor's internal DOM,
    only inspect it (and even that is usually not necessary).
    */
    domAtPos(pos, side = 0) {
      return this.docView.domFromPos(pos, side);
    }
    /**
    Find the DOM node that represents the document node after the
    given position. May return `null` when the position doesn't point
    in front of a node or if the node is inside an opaque node view.
    
    This is intended to be able to call things like
    `getBoundingClientRect` on that DOM node. Do **not** mutate the
    editor DOM directly, or add styling this way, since that will be
    immediately overriden by the editor as it redraws the node.
    */
    nodeDOM(pos) {
      let desc = this.docView.descAt(pos);
      return desc ? desc.nodeDOM : null;
    }
    /**
    Find the document position that corresponds to a given DOM
    position. (Whenever possible, it is preferable to inspect the
    document structure directly, rather than poking around in the
    DOM, but sometimes—for example when interpreting an event
    target—you don't have a choice.)
    
    The `bias` parameter can be used to influence which side of a DOM
    node to use when the position is inside a leaf node.
    */
    posAtDOM(node2, offset, bias = -1) {
      let pos = this.docView.posFromDOM(node2, offset, bias);
      if (pos == null)
        throw new RangeError("DOM position not inside the editor");
      return pos;
    }
    /**
    Find out whether the selection is at the end of a textblock when
    moving in a given direction. When, for example, given `"left"`,
    it will return true if moving left from the current cursor
    position would leave that position's parent textblock. Will apply
    to the view's current state by default, but it is possible to
    pass a different state.
    */
    endOfTextblock(dir, state) {
      return endOfTextblock(this, state || this.state, dir);
    }
    /**
    Run the editor's paste logic with the given HTML string. The
    `event`, if given, will be passed to the
    [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
    */
    pasteHTML(html2, event) {
      return doPaste2(this, "", html2, false, event || new ClipboardEvent("paste"));
    }
    /**
    Run the editor's paste logic with the given plain-text input.
    */
    pasteText(text5, event) {
      return doPaste2(this, text5, null, true, event || new ClipboardEvent("paste"));
    }
    /**
    Removes the editor from the DOM and destroys all [node
    views](https://prosemirror.net/docs/ref/#view.NodeView).
    */
    destroy() {
      if (!this.docView)
        return;
      destroyInput(this);
      this.destroyPluginViews();
      if (this.mounted) {
        this.docView.update(this.state.doc, [], viewDecorations(this), this);
        this.dom.textContent = "";
      } else if (this.dom.parentNode) {
        this.dom.parentNode.removeChild(this.dom);
      }
      this.docView.destroy();
      this.docView = null;
      clearReusedRange();
    }
    /**
    This is true when the view has been
    [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
    used anymore).
    */
    get isDestroyed() {
      return this.docView == null;
    }
    /**
    Used for testing.
    */
    dispatchEvent(event) {
      return dispatchEvent2(this, event);
    }
    /**
    Dispatch a transaction. Will call
    [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
    when given, and otherwise defaults to applying the transaction to
    the current state and calling
    [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
    This method is bound to the view instance, so that it can be
    easily passed around.
    */
    dispatch(tr) {
      let dispatchTransaction = this._props.dispatchTransaction;
      if (dispatchTransaction)
        dispatchTransaction.call(this, tr);
      else
        this.updateState(this.state.apply(tr));
    }
    /**
    @internal
    */
    domSelectionRange() {
      let sel = this.domSelection();
      return safari2 && this.root.nodeType === 11 && deepActiveElement2(this.dom.ownerDocument) == this.dom && safariShadowSelectionRange(this, sel) || sel;
    }
    /**
    @internal
    */
    domSelection() {
      return this.root.getSelection();
    }
  };
  function computeDocDeco(view) {
    let attrs = /* @__PURE__ */ Object.create(null);
    attrs.class = "ProseMirror";
    attrs.contenteditable = String(view.editable);
    view.someProp("attributes", (value) => {
      if (typeof value == "function")
        value = value(view.state);
      if (value)
        for (let attr in value) {
          if (attr == "class")
            attrs.class += " " + value[attr];
          else if (attr == "style")
            attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
          else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
            attrs[attr] = String(value[attr]);
        }
    });
    if (!attrs.translate)
      attrs.translate = "no";
    return [Decoration2.node(0, view.state.doc.content.size, attrs)];
  }
  function updateCursorWrapper(view) {
    if (view.markCursor) {
      let dom = document.createElement("img");
      dom.className = "ProseMirror-separator";
      dom.setAttribute("mark-placeholder", "true");
      dom.setAttribute("alt", "");
      view.cursorWrapper = { dom, deco: Decoration2.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
    } else {
      view.cursorWrapper = null;
    }
  }
  function getEditable(view) {
    return !view.someProp("editable", (value) => value(view.state) === false);
  }
  function selectionContextChanged(sel1, sel2) {
    let depth2 = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
    return sel1.$anchor.start(depth2) != sel2.$anchor.start(depth2);
  }
  function buildNodeViews(view) {
    let result = /* @__PURE__ */ Object.create(null);
    function add2(obj) {
      for (let prop in obj)
        if (!Object.prototype.hasOwnProperty.call(result, prop))
          result[prop] = obj[prop];
    }
    view.someProp("nodeViews", add2);
    view.someProp("markViews", add2);
    return result;
  }
  function changedNodeViews(a2, b4) {
    let nA = 0, nB = 0;
    for (let prop in a2) {
      if (a2[prop] != b4[prop])
        return true;
      nA++;
    }
    for (let _3 in b4)
      nB++;
    return nA != nB;
  }
  function checkStateComponent(plugin2) {
    if (plugin2.spec.state || plugin2.spec.filterTransaction || plugin2.spec.appendTransaction)
      throw new RangeError("Plugins passed directly to the view must not have a state component");
  }

  // node_modules/prosemirror-inputrules/dist/index.js
  var InputRule = class {
    // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)
    /**
    Create an input rule. The rule applies when the user typed
    something and the text directly in front of the cursor matches
    `match`, which should end with `$`.
    
    The `handler` can be a string, in which case the matched text, or
    the first matched group in the regexp, is replaced by that
    string.
    
    Or a it can be a function, which will be called with the match
    array produced by
    [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),
    as well as the start and end of the matched range, and which can
    return a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) that describes the
    rule's effect, or null to indicate the input was not handled.
    */
    constructor(match, handler, options = {}) {
      this.match = match;
      this.match = match;
      this.handler = typeof handler == "string" ? stringHandler(handler) : handler;
      this.undoable = options.undoable !== false;
      this.inCode = options.inCode || false;
    }
  };
  function stringHandler(string4) {
    return function(state, match, start, end) {
      let insert2 = string4;
      if (match[1]) {
        let offset = match[0].lastIndexOf(match[1]);
        insert2 += match[0].slice(offset + match[1].length);
        start += offset;
        let cutOff = start - end;
        if (cutOff > 0) {
          insert2 = match[0].slice(offset - cutOff, offset) + insert2;
          start = end;
        }
      }
      return state.tr.insertText(insert2, start, end);
    };
  }
  var undoInputRule = (state, dispatch) => {
    let plugins = state.plugins;
    for (let i3 = 0; i3 < plugins.length; i3++) {
      let plugin2 = plugins[i3], undoable;
      if (plugin2.spec.isInputRules && (undoable = plugin2.getState(state))) {
        if (dispatch) {
          let tr = state.tr, toUndo = undoable.transform;
          for (let j6 = toUndo.steps.length - 1; j6 >= 0; j6--)
            tr.step(toUndo.steps[j6].invert(toUndo.docs[j6]));
          if (undoable.text) {
            let marks2 = tr.doc.resolve(undoable.from).marks();
            tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks2));
          } else {
            tr.delete(undoable.from, undoable.to);
          }
          dispatch(tr);
        }
        return true;
      }
    }
    return false;
  };
  var emDash = new InputRule(/--$/, "\u2014");
  var ellipsis = new InputRule(/\.\.\.$/, "\u2026");
  var openDoubleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "\u201C");
  var closeDoubleQuote = new InputRule(/"$/, "\u201D");
  var openSingleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "\u2018");
  var closeSingleQuote = new InputRule(/'$/, "\u2019");
  function wrappingInputRule(regexp, nodeType, getAttrs2 = null, joinPredicate) {
    return new InputRule(regexp, (state, match, start, end) => {
      let attrs = getAttrs2 instanceof Function ? getAttrs2(match) : getAttrs2;
      let tr = state.tr.delete(start, end);
      let $start = tr.doc.resolve(start), range = $start.blockRange(), wrapping = range && findWrapping(range, nodeType, attrs);
      if (!wrapping)
        return null;
      tr.wrap(range, wrapping);
      let before = tr.doc.resolve(start - 1).nodeBefore;
      if (before && before.type == nodeType && canJoin(tr.doc, start - 1) && (!joinPredicate || joinPredicate(match, before)))
        tr.join(start - 1);
      return tr;
    });
  }
  function textblockTypeInputRule(regexp, nodeType, getAttrs2 = null) {
    return new InputRule(regexp, (state, match, start, end) => {
      let $start = state.doc.resolve(start);
      let attrs = getAttrs2 instanceof Function ? getAttrs2(match) : getAttrs2;
      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType))
        return null;
      return state.tr.delete(start, end).setBlockType(start, start, nodeType, attrs);
    });
  }

  // node_modules/@milkdown/prose/lib/index.js
  var nav3 = typeof navigator != "undefined" ? navigator : null;
  var doc4 = typeof document != "undefined" ? document : null;
  var agent2 = nav3 && nav3.userAgent || "";
  var ie_edge3 = /Edge\/(\d+)/.exec(agent2);
  var ie_upto103 = /MSIE \d/.exec(agent2);
  var ie_11up3 = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent2);
  var ie4 = !!(ie_upto103 || ie_11up3 || ie_edge3);
  var ie_version2 = ie_upto103 ? document.documentMode : ie_11up3 ? +ie_11up3[1] : ie_edge3 ? +ie_edge3[1] : 0;
  var gecko3 = !ie4 && /gecko\/(\d+)/i.test(agent2);
  var gecko_version = gecko3 && +(/Firefox\/(\d+)/.exec(agent2) || [0, 0])[1];
  var _chrome2 = !ie4 && /Chrome\/(\d+)/.exec(agent2);
  var chrome3 = !!_chrome2;
  var chrome_version2 = _chrome2 ? +_chrome2[1] : 0;
  var safari3 = !ie4 && !!nav3 && /Apple Computer/.test(nav3.vendor);
  var ios3 = safari3 && (/Mobile\/\w+/.test(agent2) || !!nav3 && nav3.maxTouchPoints > 2);
  var mac3 = ios3 || (nav3 ? /Mac/.test(nav3.platform) : false);
  var android4 = /Android \d/.test(agent2);
  var webkit3 = !!doc4 && "webkitFontSmoothing" in doc4.documentElement.style;
  var webkit_version2 = webkit3 ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
  var browser2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    android: android4,
    chrome: chrome3,
    chrome_version: chrome_version2,
    gecko: gecko3,
    gecko_version,
    ie: ie4,
    ie_version: ie_version2,
    ios: ios3,
    mac: mac3,
    safari: safari3,
    webkit: webkit3,
    webkit_version: webkit_version2
  });
  function run(view, from2, to, text5, rules, plugin2) {
    if (view.composing)
      return false;
    const state = view.state;
    const $from = state.doc.resolve(from2);
    if ($from.parent.type.spec.code)
      return false;
    const textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - 500), $from.parentOffset, void 0, "\uFFFC") + text5;
    for (let i3 = 0; i3 < rules.length; i3++) {
      const match = rules[i3].match.exec(textBefore);
      const tr = match && match[0] && rules[i3].handler(state, match, from2 - (match[0].length - text5.length), to);
      if (!tr)
        continue;
      view.dispatch(tr.setMeta(plugin2, { transform: tr, from: from2, to, text: text5 }));
      return true;
    }
    return false;
  }
  var customInputRulesKey = new PluginKey("MILKDOWN_CUSTOM_INPUTRULES");
  function customInputRules({ rules }) {
    const plugin2 = new Plugin({
      key: customInputRulesKey,
      isInputRules: true,
      state: {
        init() {
          return null;
        },
        apply(tr, prev) {
          const stored = tr.getMeta(this);
          if (stored)
            return stored;
          return tr.selectionSet || tr.docChanged ? null : prev;
        }
      },
      props: {
        handleTextInput(view, from2, to, text5) {
          return run(view, from2, to, text5, rules, plugin2);
        },
        handleDOMEvents: {
          compositionend: (view) => {
            setTimeout(() => {
              const { $cursor } = view.state.selection;
              if ($cursor)
                run(view, $cursor.pos, $cursor.pos, "", rules, plugin2);
            });
            return false;
          }
        },
        handleKeyDown(view, event) {
          if (event.key !== "Enter")
            return false;
          const { $cursor } = view.state.selection;
          if ($cursor)
            return run(view, $cursor.pos, $cursor.pos, "\n", rules, plugin2);
          return false;
        }
      }
    });
    return plugin2;
  }
  function markRule(regexp, markType, options = {}) {
    return new InputRule(regexp, (state, match, start, end) => {
      var _a2, _b, _c, _d;
      const { tr } = state;
      const matchLength = match.length;
      let group = match[matchLength - 1];
      let fullMatch = match[0];
      let initialStoredMarks = [];
      let markEnd = end;
      const captured = {
        group,
        fullMatch,
        start,
        end
      };
      const result = (_a2 = options.updateCaptured) == null ? void 0 : _a2.call(options, captured);
      Object.assign(captured, result);
      ({ group, fullMatch, start, end } = captured);
      if (fullMatch === null)
        return null;
      if ((group == null ? void 0 : group.trim()) === "")
        return null;
      if (group) {
        const startSpaces = fullMatch.search(/\S/);
        const textStart = start + fullMatch.indexOf(group);
        const textEnd = textStart + group.length;
        initialStoredMarks = (_b = tr.storedMarks) != null ? _b : [];
        if (textEnd < end)
          tr.delete(textEnd, end);
        if (textStart > start)
          tr.delete(start + startSpaces, textStart);
        markEnd = start + startSpaces + group.length;
        const attrs = (_c = options.getAttr) == null ? void 0 : _c.call(options, match);
        tr.addMark(start, markEnd, markType.create(attrs));
        tr.setStoredMarks(initialStoredMarks);
        (_d = options.beforeDispatch) == null ? void 0 : _d.call(options, { match, start, end, tr });
      }
      return tr;
    });
  }
  function cloneTr(tr) {
    return Object.assign(Object.create(tr), tr).setTime(Date.now());
  }
  function equalNodeType(nodeType, node2) {
    return Array.isArray(nodeType) && nodeType.includes(node2.type) || node2.type === nodeType;
  }
  function findParentNodeClosestToPos(predicate) {
    return ($pos) => {
      for (let i3 = $pos.depth; i3 > 0; i3--) {
        const node2 = $pos.node(i3);
        if (predicate(node2)) {
          return {
            pos: i3 > 0 ? $pos.before(i3) : 0,
            start: $pos.start(i3),
            depth: i3,
            node: node2
          };
        }
      }
      return void 0;
    };
  }
  function findParentNode(predicate) {
    return (selection) => {
      return findParentNodeClosestToPos(predicate)(selection.$from);
    };
  }
  function findSelectedNodeOfType(selection, nodeType) {
    if (!(selection instanceof NodeSelection))
      return;
    const { node: node2, $from } = selection;
    if (equalNodeType(nodeType, node2))
      return { node: node2, pos: $from.pos, start: $from.start($from.depth), depth: $from.depth };
    return void 0;
  }

  // node_modules/prosemirror-commands/dist/index.js
  var deleteSelection = (state, dispatch) => {
    if (state.selection.empty)
      return false;
    if (dispatch)
      dispatch(state.tr.deleteSelection().scrollIntoView());
    return true;
  };
  function atBlockStart(state, view) {
    let { $cursor } = state.selection;
    if (!$cursor || (view ? !view.endOfTextblock("backward", state) : $cursor.parentOffset > 0))
      return null;
    return $cursor;
  }
  var joinBackward = (state, dispatch, view) => {
    let $cursor = atBlockStart(state, view);
    if (!$cursor)
      return false;
    let $cut = findCutBefore($cursor);
    if (!$cut) {
      let range = $cursor.blockRange(), target = range && liftTarget(range);
      if (target == null)
        return false;
      if (dispatch)
        dispatch(state.tr.lift(range, target).scrollIntoView());
      return true;
    }
    let before = $cut.nodeBefore;
    if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
      return true;
    if ($cursor.parent.content.size == 0 && (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
      let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
      if (delStep && delStep.slice.size < delStep.to - delStep.from) {
        if (dispatch) {
          let tr = state.tr.step(delStep);
          tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1) : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
          dispatch(tr.scrollIntoView());
        }
        return true;
      }
    }
    if (before.isAtom && $cut.depth == $cursor.depth - 1) {
      if (dispatch)
        dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
      return true;
    }
    return false;
  };
  function textblockAt(node2, side, only = false) {
    for (let scan = node2; scan; scan = side == "start" ? scan.firstChild : scan.lastChild) {
      if (scan.isTextblock)
        return true;
      if (only && scan.childCount != 1)
        return false;
    }
    return false;
  }
  var selectNodeBackward = (state, dispatch, view) => {
    let { $head, empty: empty4 } = state.selection, $cut = $head;
    if (!empty4)
      return false;
    if ($head.parent.isTextblock) {
      if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
        return false;
      $cut = findCutBefore($head);
    }
    let node2 = $cut && $cut.nodeBefore;
    if (!node2 || !NodeSelection.isSelectable(node2))
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node2.nodeSize)).scrollIntoView());
    return true;
  };
  function findCutBefore($pos) {
    if (!$pos.parent.type.spec.isolating)
      for (let i3 = $pos.depth - 1; i3 >= 0; i3--) {
        if ($pos.index(i3) > 0)
          return $pos.doc.resolve($pos.before(i3 + 1));
        if ($pos.node(i3).type.spec.isolating)
          break;
      }
    return null;
  }
  function atBlockEnd(state, view) {
    let { $cursor } = state.selection;
    if (!$cursor || (view ? !view.endOfTextblock("forward", state) : $cursor.parentOffset < $cursor.parent.content.size))
      return null;
    return $cursor;
  }
  var joinForward = (state, dispatch, view) => {
    let $cursor = atBlockEnd(state, view);
    if (!$cursor)
      return false;
    let $cut = findCutAfter($cursor);
    if (!$cut)
      return false;
    let after = $cut.nodeAfter;
    if (deleteBarrier(state, $cut, dispatch))
      return true;
    if ($cursor.parent.content.size == 0 && (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
      let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
      if (delStep && delStep.slice.size < delStep.to - delStep.from) {
        if (dispatch) {
          let tr = state.tr.step(delStep);
          tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1) : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
          dispatch(tr.scrollIntoView());
        }
        return true;
      }
    }
    if (after.isAtom && $cut.depth == $cursor.depth - 1) {
      if (dispatch)
        dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
      return true;
    }
    return false;
  };
  var selectNodeForward = (state, dispatch, view) => {
    let { $head, empty: empty4 } = state.selection, $cut = $head;
    if (!empty4)
      return false;
    if ($head.parent.isTextblock) {
      if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
        return false;
      $cut = findCutAfter($head);
    }
    let node2 = $cut && $cut.nodeAfter;
    if (!node2 || !NodeSelection.isSelectable(node2))
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
    return true;
  };
  function findCutAfter($pos) {
    if (!$pos.parent.type.spec.isolating)
      for (let i3 = $pos.depth - 1; i3 >= 0; i3--) {
        let parent = $pos.node(i3);
        if ($pos.index(i3) + 1 < parent.childCount)
          return $pos.doc.resolve($pos.after(i3 + 1));
        if (parent.type.spec.isolating)
          break;
      }
    return null;
  }
  var newlineInCode = (state, dispatch) => {
    let { $head, $anchor } = state.selection;
    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
      return false;
    if (dispatch)
      dispatch(state.tr.insertText("\n").scrollIntoView());
    return true;
  };
  function defaultBlockAt(match) {
    for (let i3 = 0; i3 < match.edgeCount; i3++) {
      let { type } = match.edge(i3);
      if (type.isTextblock && !type.hasRequiredAttrs())
        return type;
    }
    return null;
  }
  var exitCode = (state, dispatch) => {
    let { $head, $anchor } = state.selection;
    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
      return false;
    let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
    if (!type || !above.canReplaceWith(after, after, type))
      return false;
    if (dispatch) {
      let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
      tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
  var createParagraphNear = (state, dispatch) => {
    let sel = state.selection, { $from, $to } = sel;
    if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
      return false;
    let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
    if (!type || !type.isTextblock)
      return false;
    if (dispatch) {
      let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
      let tr = state.tr.insert(side, type.createAndFill());
      tr.setSelection(TextSelection.create(tr.doc, side + 1));
      dispatch(tr.scrollIntoView());
    }
    return true;
  };
  var liftEmptyBlock = (state, dispatch) => {
    let { $cursor } = state.selection;
    if (!$cursor || $cursor.parent.content.size)
      return false;
    if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
      let before = $cursor.before();
      if (canSplit(state.doc, before)) {
        if (dispatch)
          dispatch(state.tr.split(before).scrollIntoView());
        return true;
      }
    }
    let range = $cursor.blockRange(), target = range && liftTarget(range);
    if (target == null)
      return false;
    if (dispatch)
      dispatch(state.tr.lift(range, target).scrollIntoView());
    return true;
  };
  function splitBlockAs(splitNode) {
    return (state, dispatch) => {
      let { $from, $to } = state.selection;
      if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
        if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
          return false;
        if (dispatch)
          dispatch(state.tr.split($from.pos).scrollIntoView());
        return true;
      }
      if (!$from.parent.isBlock)
        return false;
      if (dispatch) {
        let atEnd = $to.parentOffset == $to.parent.content.size;
        let tr = state.tr;
        if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
          tr.deleteSelection();
        let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
        let splitType = splitNode && splitNode($to.parent, atEnd);
        let types2 = splitType ? [splitType] : atEnd && deflt ? [{ type: deflt }] : void 0;
        let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types2);
        if (!types2 && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : void 0)) {
          if (deflt)
            types2 = [{ type: deflt }];
          can = true;
        }
        if (can) {
          tr.split(tr.mapping.map($from.pos), 1, types2);
          if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
            let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
            if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
              tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
          }
        }
        dispatch(tr.scrollIntoView());
      }
      return true;
    };
  }
  var splitBlock = splitBlockAs();
  var selectAll2 = (state, dispatch) => {
    if (dispatch)
      dispatch(state.tr.setSelection(new AllSelection(state.doc)));
    return true;
  };
  function joinMaybeClear(state, $pos, dispatch) {
    let before = $pos.nodeBefore, after = $pos.nodeAfter, index2 = $pos.index();
    if (!before || !after || !before.type.compatibleContent(after.type))
      return false;
    if (!before.content.size && $pos.parent.canReplace(index2 - 1, index2)) {
      if (dispatch)
        dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
      return true;
    }
    if (!$pos.parent.canReplace(index2, index2 + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
      return false;
    if (dispatch)
      dispatch(state.tr.clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount)).join($pos.pos).scrollIntoView());
    return true;
  }
  function deleteBarrier(state, $cut, dispatch) {
    let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
    if (before.type.spec.isolating || after.type.spec.isolating)
      return false;
    if (joinMaybeClear(state, $cut, dispatch))
      return true;
    let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
    if (canDelAfter && (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) && match.matchType(conn[0] || after.type).validEnd) {
      if (dispatch) {
        let end = $cut.pos + after.nodeSize, wrap3 = Fragment.empty;
        for (let i3 = conn.length - 1; i3 >= 0; i3--)
          wrap3 = Fragment.from(conn[i3].create(null, wrap3));
        wrap3 = Fragment.from(before.copy(wrap3));
        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap3, 1, 0), conn.length, true));
        let joinAt = end + 2 * conn.length;
        if (canJoin(tr.doc, joinAt))
          tr.join(joinAt);
        dispatch(tr.scrollIntoView());
      }
      return true;
    }
    let selAfter = Selection.findFrom($cut, 1);
    let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
    if (target != null && target >= $cut.depth) {
      if (dispatch)
        dispatch(state.tr.lift(range, target).scrollIntoView());
      return true;
    }
    if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
      let at4 = before, wrap3 = [];
      for (; ; ) {
        wrap3.push(at4);
        if (at4.isTextblock)
          break;
        at4 = at4.lastChild;
      }
      let afterText = after, afterDepth = 1;
      for (; !afterText.isTextblock; afterText = afterText.firstChild)
        afterDepth++;
      if (at4.canReplace(at4.childCount, at4.childCount, afterText.content)) {
        if (dispatch) {
          let end = Fragment.empty;
          for (let i3 = wrap3.length - 1; i3 >= 0; i3--)
            end = Fragment.from(wrap3[i3].copy(end));
          let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap3.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap3.length, 0), 0, true));
          dispatch(tr.scrollIntoView());
        }
        return true;
      }
    }
    return false;
  }
  function selectTextblockSide(side) {
    return function(state, dispatch) {
      let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
      let depth2 = $pos.depth;
      while ($pos.node(depth2).isInline) {
        if (!depth2)
          return false;
        depth2--;
      }
      if (!$pos.node(depth2).isTextblock)
        return false;
      if (dispatch)
        dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth2) : $pos.end(depth2))));
      return true;
    };
  }
  var selectTextblockStart = selectTextblockSide(-1);
  var selectTextblockEnd = selectTextblockSide(1);
  function wrapIn(nodeType, attrs = null) {
    return function(state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
      if (!wrapping)
        return false;
      if (dispatch)
        dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
      return true;
    };
  }
  function setBlockType2(nodeType, attrs = null) {
    return function(state, dispatch) {
      let applicable = false;
      for (let i3 = 0; i3 < state.selection.ranges.length && !applicable; i3++) {
        let { $from: { pos: from2 }, $to: { pos: to } } = state.selection.ranges[i3];
        state.doc.nodesBetween(from2, to, (node2, pos) => {
          if (applicable)
            return false;
          if (!node2.isTextblock || node2.hasMarkup(nodeType, attrs))
            return;
          if (node2.type == nodeType) {
            applicable = true;
          } else {
            let $pos = state.doc.resolve(pos), index2 = $pos.index();
            applicable = $pos.parent.canReplaceWith(index2, index2 + 1, nodeType);
          }
        });
      }
      if (!applicable)
        return false;
      if (dispatch) {
        let tr = state.tr;
        for (let i3 = 0; i3 < state.selection.ranges.length; i3++) {
          let { $from: { pos: from2 }, $to: { pos: to } } = state.selection.ranges[i3];
          tr.setBlockType(from2, to, nodeType, attrs);
        }
        dispatch(tr.scrollIntoView());
      }
      return true;
    };
  }
  function markApplies(doc5, ranges, type) {
    for (let i3 = 0; i3 < ranges.length; i3++) {
      let { $from, $to } = ranges[i3];
      let can = $from.depth == 0 ? doc5.inlineContent && doc5.type.allowsMarkType(type) : false;
      doc5.nodesBetween($from.pos, $to.pos, (node2) => {
        if (can)
          return false;
        can = node2.inlineContent && node2.type.allowsMarkType(type);
      });
      if (can)
        return true;
    }
    return false;
  }
  function toggleMark(markType, attrs = null) {
    return function(state, dispatch) {
      let { empty: empty4, $cursor, ranges } = state.selection;
      if (empty4 && !$cursor || !markApplies(state.doc, ranges, markType))
        return false;
      if (dispatch) {
        if ($cursor) {
          if (markType.isInSet(state.storedMarks || $cursor.marks()))
            dispatch(state.tr.removeStoredMark(markType));
          else
            dispatch(state.tr.addStoredMark(markType.create(attrs)));
        } else {
          let has = false, tr = state.tr;
          for (let i3 = 0; !has && i3 < ranges.length; i3++) {
            let { $from, $to } = ranges[i3];
            has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
          }
          for (let i3 = 0; i3 < ranges.length; i3++) {
            let { $from, $to } = ranges[i3];
            if (has) {
              tr.removeMark($from.pos, $to.pos, markType);
            } else {
              let from2 = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;
              let spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
              let spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
              if (from2 + spaceStart < to) {
                from2 += spaceStart;
                to -= spaceEnd;
              }
              tr.addMark(from2, to, markType.create(attrs));
            }
          }
          dispatch(tr.scrollIntoView());
        }
      }
      return true;
    };
  }
  function chainCommands(...commands) {
    return function(state, dispatch, view) {
      for (let i3 = 0; i3 < commands.length; i3++)
        if (commands[i3](state, dispatch, view))
          return true;
      return false;
    };
  }
  var backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
  var del = chainCommands(deleteSelection, joinForward, selectNodeForward);
  var pcBaseKeymap = {
    "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
    "Mod-Enter": exitCode,
    "Backspace": backspace,
    "Mod-Backspace": backspace,
    "Shift-Backspace": backspace,
    "Delete": del,
    "Mod-Delete": del,
    "Mod-a": selectAll2
  };
  var macBaseKeymap = {
    "Ctrl-h": pcBaseKeymap["Backspace"],
    "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
    "Ctrl-d": pcBaseKeymap["Delete"],
    "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
    "Alt-Delete": pcBaseKeymap["Mod-Delete"],
    "Alt-d": pcBaseKeymap["Mod-Delete"],
    "Ctrl-a": selectTextblockStart,
    "Ctrl-e": selectTextblockEnd
  };
  for (let key in pcBaseKeymap)
    macBaseKeymap[key] = pcBaseKeymap[key];
  var mac4 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
  var baseKeymap = mac4 ? macBaseKeymap : pcBaseKeymap;

  // node_modules/prosemirror-keymap/dist/index.js
  var mac5 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
  function normalizeKeyName2(name2) {
    let parts = name2.split(/-(?!$)/), result = parts[parts.length - 1];
    if (result == "Space")
      result = " ";
    let alt, ctrl, shift2, meta2;
    for (let i3 = 0; i3 < parts.length - 1; i3++) {
      let mod = parts[i3];
      if (/^(cmd|meta|m)$/i.test(mod))
        meta2 = true;
      else if (/^a(lt)?$/i.test(mod))
        alt = true;
      else if (/^(c|ctrl|control)$/i.test(mod))
        ctrl = true;
      else if (/^s(hift)?$/i.test(mod))
        shift2 = true;
      else if (/^mod$/i.test(mod)) {
        if (mac5)
          meta2 = true;
        else
          ctrl = true;
      } else
        throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt)
      result = "Alt-" + result;
    if (ctrl)
      result = "Ctrl-" + result;
    if (meta2)
      result = "Meta-" + result;
    if (shift2)
      result = "Shift-" + result;
    return result;
  }
  function normalize2(map6) {
    let copy2 = /* @__PURE__ */ Object.create(null);
    for (let prop in map6)
      copy2[normalizeKeyName2(prop)] = map6[prop];
    return copy2;
  }
  function modifiers2(name2, event, shift2 = true) {
    if (event.altKey)
      name2 = "Alt-" + name2;
    if (event.ctrlKey)
      name2 = "Ctrl-" + name2;
    if (event.metaKey)
      name2 = "Meta-" + name2;
    if (shift2 && event.shiftKey)
      name2 = "Shift-" + name2;
    return name2;
  }
  function keymap2(bindings) {
    return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
  }
  function keydownHandler(bindings) {
    let map6 = normalize2(bindings);
    return function(view, event) {
      let name2 = keyName(event), baseName, direct = map6[modifiers2(name2, event)];
      if (direct && direct(view.state, view.dispatch, view))
        return true;
      if (name2.length == 1 && name2 != " ") {
        if (event.shiftKey) {
          let noShift = map6[modifiers2(name2, event, false)];
          if (noShift && noShift(view.state, view.dispatch, view))
            return true;
        }
        if ((event.shiftKey || event.altKey || event.metaKey || name2.charCodeAt(0) > 127) && (baseName = base[event.keyCode]) && baseName != name2) {
          let fromCode = map6[modifiers2(baseName, event)];
          if (fromCode && fromCode(view.state, view.dispatch, view))
            return true;
        }
      }
      return false;
    };
  }

  // node_modules/@milkdown/core/lib/index.es.js
  var ve = (e3, t4, r4) => {
    if (!t4.has(e3))
      throw TypeError("Cannot " + r4);
  };
  var s = (e3, t4, r4) => (ve(e3, t4, "read from private field"), r4 ? r4.call(e3) : t4.get(e3));
  var d4 = (e3, t4, r4) => {
    if (t4.has(e3))
      throw TypeError("Cannot add the same private member more than once");
    t4 instanceof WeakSet ? t4.add(e3) : t4.set(e3, r4);
  };
  var c3 = (e3, t4, r4, i3) => (ve(e3, t4, "write to private field"), i3 ? i3.call(e3, r4) : t4.set(e3, r4), r4);
  function k3(e3, t4) {
    return e3.meta = __spreadValues({
      package: "@milkdown/core",
      group: "System"
    }, t4), e3;
  }
  var De = {
    strong: (e3, t4, r4, i3) => {
      const n5 = e3.marker || r4.options.strong || "*", a2 = r4.enter("strong"), h3 = r4.createTracker(i3);
      let m4 = h3.move(n5 + n5);
      return m4 += h3.move(
        r4.containerPhrasing(e3, __spreadValues({
          before: m4,
          after: n5
        }, h3.current()))
      ), m4 += h3.move(n5 + n5), a2(), m4;
    },
    emphasis: (e3, t4, r4, i3) => {
      const n5 = e3.marker || r4.options.emphasis || "*", a2 = r4.enter("emphasis"), h3 = r4.createTracker(i3);
      let m4 = h3.move(n5);
      return m4 += h3.move(
        r4.containerPhrasing(e3, __spreadValues({
          before: m4,
          after: n5
        }, h3.current()))
      ), m4 += h3.move(n5), a2(), m4;
    }
  };
  var L3 = K("ConfigReady");
  function ot(e3) {
    const t4 = (r4) => (r4.record(L3), () => __async(this, null, function* () {
      return yield e3(r4), r4.done(L3), () => {
        r4.clearTimer(L3);
      };
    }));
    return k3(t4, {
      displayName: "Config"
    }), t4;
  }
  var M4 = K("InitReady");
  var G3 = H([], "initTimer");
  var ke = H({}, "editor");
  var ue = H([], "inputRules");
  var N2 = H([], "prosePlugins");
  var pe = H([], "remarkPlugins");
  var fe = H([], "nodeView");
  var ye = H([], "markView");
  var P3 = H(unified().use(remarkParse).use(remarkStringify), "remark");
  var Q2 = H({
    handlers: De
  }, "remarkStringifyOptions");
  function at(e3) {
    const t4 = (r4) => (r4.inject(ke, e3).inject(N2, []).inject(pe, []).inject(ue, []).inject(fe, []).inject(ye, []).inject(Q2, {
      handlers: De
    }).inject(P3, unified().use(remarkParse).use(remarkStringify)).inject(G3, [L3]).record(M4), () => __async(this, null, function* () {
      yield r4.waitTimers(G3);
      const i3 = r4.get(Q2);
      return r4.set(P3, unified().use(remarkParse).use(remarkStringify, i3)), r4.done(M4), () => {
        r4.remove(ke).remove(N2).remove(pe).remove(ue).remove(fe).remove(ye).remove(Q2).remove(P3).remove(G3).clearTimer(M4);
      };
    }));
    return k3(t4, {
      displayName: "Init"
    }), t4;
  }
  var R3 = K("SchemaReady");
  var U3 = H([], "schemaTimer");
  var b2 = H({}, "schema");
  var X = H([], "nodes");
  var Z2 = H([], "marks");
  function Te(e3) {
    var t4;
    return __spreadProps(__spreadValues({}, e3), {
      parseDOM: (t4 = e3.parseDOM) == null ? void 0 : t4.map((r4) => __spreadValues({ priority: e3.priority }, r4))
    });
  }
  var Ee = (e3) => (e3.inject(b2, {}).inject(X, []).inject(Z2, []).inject(U3, [M4]).record(R3), () => __async(void 0, null, function* () {
    yield e3.waitTimers(U3);
    const t4 = e3.get(P3), i3 = e3.get(pe).reduce((m4, f3) => m4.use(f3.plugin, f3.options), t4);
    e3.set(P3, i3);
    const n5 = Object.fromEntries(e3.get(X).map(([m4, f3]) => [m4, Te(f3)])), a2 = Object.fromEntries(e3.get(Z2).map(([m4, f3]) => [m4, Te(f3)])), h3 = new Schema({ nodes: n5, marks: a2 });
    return e3.set(b2, h3), e3.done(R3), () => {
      e3.remove(b2).remove(X).remove(Z2).remove(U3).clearTimer(R3);
    };
  }));
  k3(Ee, {
    displayName: "Schema"
  });
  var W2 = K("ParserReady");
  var Ie = () => {
    throw p();
  };
  var Y = H(Ie, "parser");
  var x4 = H([], "parserTimer");
  var Ve = (e3) => (e3.inject(Y, Ie).inject(x4, [R3]).record(W2), () => __async(void 0, null, function* () {
    yield e3.waitTimers(x4);
    const t4 = e3.get(P3), r4 = e3.get(b2);
    return e3.set(Y, H2.create(r4, t4)), e3.done(W2), () => {
      e3.remove(Y).remove(x4).clearTimer(W2);
    };
  }));
  k3(Ve, {
    displayName: "Parser"
  });
  var $ = K("SerializerReady");
  var ee = H([], "serializerTimer");
  var Me = () => {
    throw p();
  };
  var te = H(Me, "serializer");
  var Ne = (e3) => (e3.inject(te, Me).inject(ee, [R3]).record($), () => __async(void 0, null, function* () {
    yield e3.waitTimers(ee);
    const t4 = e3.get(P3), r4 = e3.get(b2);
    return e3.set(te, K2.create(r4, t4)), e3.done($), () => {
      e3.remove(te).remove(ee).clearTimer($);
    };
  }));
  k3(Ne, {
    displayName: "Serializer"
  });
  var re = H("", "defaultValue");
  var V2 = H({}, "editorState");
  var se = H((e3) => e3, "stateOptions");
  var ie5 = H([], "editorStateTimer");
  var q4 = K("EditorStateReady");
  function ct(e3, t4, r4) {
    if (typeof e3 == "string")
      return t4(e3);
    if (e3.type === "html")
      return DOMParser.fromSchema(r4).parse(e3.dom);
    if (e3.type === "json")
      return Node.fromJSON(r4, e3.value);
    throw l(e3);
  }
  var mt = new PluginKey("MILKDOWN_STATE_TRACKER");
  function dt(e3) {
    const t4 = chainCommands(
      undoInputRule,
      deleteSelection,
      joinBackward,
      selectNodeBackward
    );
    return e3.Backspace = t4, e3;
  }
  var _e = (e3) => (e3.inject(re, "").inject(V2, {}).inject(se, (t4) => t4).inject(ie5, [W2, $, J3]).record(q4), () => __async(void 0, null, function* () {
    yield e3.waitTimers(ie5);
    const t4 = e3.get(b2), r4 = e3.get(Y), i3 = e3.get(ue), n5 = e3.get(se), a2 = e3.get(N2), h3 = e3.get(re), m4 = ct(h3, r4, t4), f3 = [
      ...a2,
      new Plugin({
        key: mt,
        state: {
          init: () => {
          },
          apply: (Be2, F4, ft2, Le2) => {
            e3.set(V2, Le2);
          }
        }
      }),
      customInputRules({ rules: i3 }),
      keymap2(dt(baseKeymap))
    ];
    e3.set(N2, f3);
    const B3 = n5({
      schema: t4,
      doc: m4,
      plugins: f3
    }), l5 = EditorState2.create(B3);
    return e3.set(V2, l5), e3.done(q4), () => {
      e3.remove(re).remove(V2).remove(se).remove(ie5).clearTimer(q4);
    };
  }));
  k3(_e, {
    displayName: "EditorState"
  });
  var ne = K("EditorViewReady");
  var H3 = H({}, "editorView");
  var oe = H([], "editorViewTimer");
  var ae = H({}, "editorViewOptions");
  var ce = H(null, "root");
  var we = H(null, "rootDOM");
  var ge = H({}, "rootAttrs");
  function ht(e3, t4) {
    const r4 = document.createElement("div");
    r4.className = "milkdown", e3.appendChild(r4), t4.set(we, r4);
    const i3 = t4.get(ge);
    return Object.entries(i3).forEach(([n5, a2]) => r4.setAttribute(n5, a2)), r4;
  }
  function lt2(e3) {
    e3.classList.add("editor"), e3.setAttribute("role", "textbox");
  }
  var ut = new PluginKey("MILKDOWN_VIEW_CLEAR");
  var ze = (e3) => (e3.inject(ce, document.body).inject(H3, {}).inject(ae, {}).inject(we, null).inject(ge, {}).inject(oe, [q4]).record(ne), () => __async(void 0, null, function* () {
    yield e3.wait(M4);
    const t4 = e3.get(ce) || document.body, r4 = typeof t4 == "string" ? document.querySelector(t4) : t4;
    e3.update(N2, (f3) => [
      new Plugin({
        key: ut,
        view: (B3) => {
          const l5 = r4 ? ht(r4, e3) : void 0;
          return (() => {
            if (l5 && r4) {
              const F4 = B3.dom;
              r4.replaceChild(l5, F4), l5.appendChild(F4);
            }
          })(), {
            destroy: () => {
              l5 != null && l5.parentNode && (l5 == null || l5.parentNode.replaceChild(B3.dom, l5)), l5 == null || l5.remove();
            }
          };
        }
      }),
      ...f3
    ]), yield e3.waitTimers(oe);
    const i3 = e3.get(V2), n5 = e3.get(ae), a2 = Object.fromEntries(e3.get(fe)), h3 = Object.fromEntries(e3.get(ye)), m4 = new EditorView2(r4, __spreadValues({
      state: i3,
      nodeViews: a2,
      markViews: h3
    }, n5));
    return lt2(m4.dom), e3.set(H3, m4), e3.done(ne), () => {
      m4 == null || m4.destroy(), e3.remove(ce).remove(H3).remove(ae).remove(we).remove(ge).remove(oe).clearTimer(ne);
    };
  }));
  k3(ze, {
    displayName: "EditorView"
  });
  var T3;
  var g4;
  var Ke = class {
    constructor() {
      d4(this, T3, void 0);
      d4(this, g4, void 0);
      c3(this, T3, new G()), c3(this, g4, null), this.setCtx = (t4) => {
        c3(this, g4, t4);
      };
    }
    get ctx() {
      return s(this, g4);
    }
    /// Register a command into the manager.
    create(t4, r4) {
      const i3 = t4.create(s(this, T3).sliceMap);
      return i3.set(r4), i3;
    }
    get(t4) {
      return s(this, T3).get(t4).get();
    }
    remove(t4) {
      return s(this, T3).remove(t4);
    }
    call(t4, r4) {
      if (s(this, g4) == null)
        throw y();
      const n5 = this.get(t4)(r4), a2 = s(this, g4).get(H3);
      return n5(a2.state, a2.dispatch, a2);
    }
  };
  T3 = /* @__PURE__ */ new WeakMap(), g4 = /* @__PURE__ */ new WeakMap();
  function Et(e3 = "cmdKey") {
    return H(() => () => false, e3);
  }
  var je = H(new Ke(), "commands");
  var me = H([R3], "commandsTimer");
  var J3 = K("CommandsReady");
  var Ae = (e3) => {
    const t4 = new Ke();
    return t4.setCtx(e3), e3.inject(je, t4).inject(me, [R3]).record(J3), () => __async(void 0, null, function* () {
      return yield e3.waitTimers(me), e3.done(J3), () => {
        e3.remove(je).remove(me).clearTimer(J3);
      };
    });
  };
  k3(Ae, {
    displayName: "Commands"
  });
  var pt = /* @__PURE__ */ ((e3) => (e3.Idle = "Idle", e3.OnCreate = "OnCreate", e3.Created = "Created", e3.OnDestroy = "OnDestroy", e3.Destroyed = "Destroyed", e3))(pt || {});
  var j3;
  var p3;
  var y3;
  var D2;
  var _2;
  var z3;
  var u3;
  var w4;
  var O2;
  var K3;
  var S5;
  var E3;
  var A3;
  var C4;
  var I2;
  var Ce = class Ce2 {
    constructor() {
      d4(this, j3, void 0);
      d4(this, p3, void 0);
      d4(this, y3, void 0);
      d4(this, D2, void 0);
      d4(this, _2, void 0);
      d4(this, z3, void 0);
      d4(this, u3, void 0);
      d4(this, w4, void 0);
      d4(this, O2, void 0);
      d4(this, K3, void 0);
      d4(this, S5, void 0);
      d4(this, E3, void 0);
      d4(this, A3, void 0);
      d4(this, C4, void 0);
      d4(this, I2, void 0);
      c3(this, j3, false), c3(this, p3, "Idle"), c3(this, y3, []), c3(this, D2, () => {
      }), c3(this, _2, new G()), c3(this, z3, new J()), c3(this, u3, /* @__PURE__ */ new Map()), c3(this, w4, /* @__PURE__ */ new Map()), c3(this, O2, new U(s(this, _2), s(this, z3))), c3(this, K3, () => {
        const t4 = ot((i3) => __async(this, null, function* () {
          yield Promise.all(s(this, y3).map((n5) => n5(i3)));
        })), r4 = [
          Ee,
          Ve,
          Ne,
          Ae,
          _e,
          ze,
          at(this),
          t4
        ];
        s(this, S5).call(this, r4, s(this, w4));
      }), c3(this, S5, (t4, r4) => {
        t4.forEach((i3) => {
          const n5 = s(this, O2).produce(s(this, j3) ? i3.meta : void 0), a2 = i3(n5);
          r4.set(i3, { ctx: n5, handler: a2, cleanup: void 0 });
        });
      }), c3(this, E3, (t4, r4 = false) => Promise.all(
        [t4].flat().map((i3) => {
          const n5 = s(this, u3).get(i3), a2 = n5 == null ? void 0 : n5.cleanup;
          return r4 ? s(this, u3).delete(i3) : s(this, u3).set(i3, { ctx: void 0, handler: void 0, cleanup: void 0 }), typeof a2 == "function" ? a2() : a2;
        })
      )), c3(this, A3, () => __async(this, null, function* () {
        yield Promise.all([...s(this, w4).entries()].map(([t4, { cleanup: r4 }]) => typeof r4 == "function" ? r4() : r4)), s(this, w4).clear();
      })), c3(this, C4, (t4) => {
        c3(this, p3, t4), s(this, D2).call(this, t4);
      }), c3(this, I2, (t4) => [...t4.entries()].map((_0) => __async(this, [_0], function* ([r4, i3]) {
        const { ctx: n5, handler: a2 } = i3;
        if (!a2)
          return;
        const h3 = yield a2();
        t4.set(r4, { ctx: n5, handler: a2, cleanup: h3 });
      }))), this.enableInspector = (t4 = true) => (c3(this, j3, t4), this), this.onStatusChange = (t4) => (c3(this, D2, t4), this), this.config = (t4) => (s(this, y3).push(t4), this), this.removeConfig = (t4) => (c3(this, y3, s(this, y3).filter((r4) => r4 !== t4)), this), this.use = (t4) => {
        const r4 = [t4].flat();
        return r4.flat().forEach((i3) => {
          s(this, u3).set(i3, {
            ctx: void 0,
            handler: void 0,
            cleanup: void 0
          });
        }), s(this, p3) === "Created" && s(this, S5).call(this, r4, s(this, u3)), this;
      }, this.remove = (t4) => __async(this, null, function* () {
        return s(this, p3) === "OnCreate" ? (console.warn("[Milkdown]: You are trying to remove plugins when the editor is creating, this is not recommended, please check your code."), new Promise((r4) => {
          setTimeout(() => {
            r4(this.remove(t4));
          }, 50);
        })) : (yield s(this, E3).call(this, [t4].flat(), true), this);
      }), this.create = () => __async(this, null, function* () {
        return s(this, p3) === "OnCreate" ? this : (s(this, p3) === "Created" && (yield this.destroy()), s(this, C4).call(this, "OnCreate"), s(this, K3).call(this), s(this, S5).call(this, [...s(this, u3).keys()], s(this, u3)), yield Promise.all(
          [
            s(this, I2).call(this, s(this, w4)),
            s(this, I2).call(this, s(this, u3))
          ].flat()
        ), s(this, C4).call(this, "Created"), this);
      }), this.destroy = (t4 = false) => __async(this, null, function* () {
        return s(this, p3) === "Destroyed" || s(this, p3) === "OnDestroy" ? this : s(this, p3) === "OnCreate" ? new Promise((r4) => {
          setTimeout(() => {
            r4(this.destroy(t4));
          }, 50);
        }) : (t4 && c3(this, y3, []), s(this, C4).call(this, "OnDestroy"), yield s(this, E3).call(this, [...s(this, u3).keys()], t4), yield s(this, A3).call(this), s(this, C4).call(this, "Destroyed"), this);
      }), this.action = (t4) => t4(s(this, O2)), this.inspect = () => s(this, j3) ? [...s(this, w4).values(), ...s(this, u3).values()].map(({ ctx: t4 }) => {
        var r4;
        return (r4 = t4 == null ? void 0 : t4.inspector) == null ? void 0 : r4.read();
      }).filter((t4) => !!t4) : (console.warn("[Milkdown]: You are trying to collect inspection when inspector is disabled, please enable inspector by `editor.enableInspector()` first."), []);
    }
    /// Create a new editor instance.
    static make() {
      return new Ce2();
    }
    /// Get the ctx of the editor.
    get ctx() {
      return s(this, O2);
    }
    /// Get the status of the editor.
    get status() {
      return s(this, p3);
    }
  };
  j3 = /* @__PURE__ */ new WeakMap(), p3 = /* @__PURE__ */ new WeakMap(), y3 = /* @__PURE__ */ new WeakMap(), D2 = /* @__PURE__ */ new WeakMap(), _2 = /* @__PURE__ */ new WeakMap(), z3 = /* @__PURE__ */ new WeakMap(), u3 = /* @__PURE__ */ new WeakMap(), w4 = /* @__PURE__ */ new WeakMap(), O2 = /* @__PURE__ */ new WeakMap(), K3 = /* @__PURE__ */ new WeakMap(), S5 = /* @__PURE__ */ new WeakMap(), E3 = /* @__PURE__ */ new WeakMap(), A3 = /* @__PURE__ */ new WeakMap(), C4 = /* @__PURE__ */ new WeakMap(), I2 = /* @__PURE__ */ new WeakMap();
  var Oe = Ce;

  // node_modules/@milkdown/plugin-history/lib/index.es.js
  var index_es_exports2 = {};
  __export(index_es_exports2, {
    history: () => x5,
    historyKeymap: () => i2,
    historyProviderConfig: () => e2,
    historyProviderPlugin: () => n3,
    redoCommand: () => m3,
    undoCommand: () => s2
  });

  // node_modules/rope-sequence/dist/index.js
  var GOOD_LEAF_SIZE = 200;
  var RopeSequence = function RopeSequence2() {
  };
  RopeSequence.prototype.append = function append(other) {
    if (!other.length) {
      return this;
    }
    other = RopeSequence.from(other);
    return !this.length && other || other.length < GOOD_LEAF_SIZE && this.leafAppend(other) || this.length < GOOD_LEAF_SIZE && other.leafPrepend(this) || this.appendInner(other);
  };
  RopeSequence.prototype.prepend = function prepend(other) {
    if (!other.length) {
      return this;
    }
    return RopeSequence.from(other).append(this);
  };
  RopeSequence.prototype.appendInner = function appendInner(other) {
    return new Append(this, other);
  };
  RopeSequence.prototype.slice = function slice(from2, to) {
    if (from2 === void 0)
      from2 = 0;
    if (to === void 0)
      to = this.length;
    if (from2 >= to) {
      return RopeSequence.empty;
    }
    return this.sliceInner(Math.max(0, from2), Math.min(this.length, to));
  };
  RopeSequence.prototype.get = function get(i3) {
    if (i3 < 0 || i3 >= this.length) {
      return void 0;
    }
    return this.getInner(i3);
  };
  RopeSequence.prototype.forEach = function forEach(f3, from2, to) {
    if (from2 === void 0)
      from2 = 0;
    if (to === void 0)
      to = this.length;
    if (from2 <= to) {
      this.forEachInner(f3, from2, to, 0);
    } else {
      this.forEachInvertedInner(f3, from2, to, 0);
    }
  };
  RopeSequence.prototype.map = function map4(f3, from2, to) {
    if (from2 === void 0)
      from2 = 0;
    if (to === void 0)
      to = this.length;
    var result = [];
    this.forEach(function(elt, i3) {
      return result.push(f3(elt, i3));
    }, from2, to);
    return result;
  };
  RopeSequence.from = function from(values) {
    if (values instanceof RopeSequence) {
      return values;
    }
    return values && values.length ? new Leaf(values) : RopeSequence.empty;
  };
  var Leaf = /* @__PURE__ */ function(RopeSequence3) {
    function Leaf2(values) {
      RopeSequence3.call(this);
      this.values = values;
    }
    if (RopeSequence3)
      Leaf2.__proto__ = RopeSequence3;
    Leaf2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
    Leaf2.prototype.constructor = Leaf2;
    var prototypeAccessors = { length: { configurable: true }, depth: { configurable: true } };
    Leaf2.prototype.flatten = function flatten2() {
      return this.values;
    };
    Leaf2.prototype.sliceInner = function sliceInner(from2, to) {
      if (from2 == 0 && to == this.length) {
        return this;
      }
      return new Leaf2(this.values.slice(from2, to));
    };
    Leaf2.prototype.getInner = function getInner(i3) {
      return this.values[i3];
    };
    Leaf2.prototype.forEachInner = function forEachInner(f3, from2, to, start) {
      for (var i3 = from2; i3 < to; i3++) {
        if (f3(this.values[i3], start + i3) === false) {
          return false;
        }
      }
    };
    Leaf2.prototype.forEachInvertedInner = function forEachInvertedInner(f3, from2, to, start) {
      for (var i3 = from2 - 1; i3 >= to; i3--) {
        if (f3(this.values[i3], start + i3) === false) {
          return false;
        }
      }
    };
    Leaf2.prototype.leafAppend = function leafAppend(other) {
      if (this.length + other.length <= GOOD_LEAF_SIZE) {
        return new Leaf2(this.values.concat(other.flatten()));
      }
    };
    Leaf2.prototype.leafPrepend = function leafPrepend(other) {
      if (this.length + other.length <= GOOD_LEAF_SIZE) {
        return new Leaf2(other.flatten().concat(this.values));
      }
    };
    prototypeAccessors.length.get = function() {
      return this.values.length;
    };
    prototypeAccessors.depth.get = function() {
      return 0;
    };
    Object.defineProperties(Leaf2.prototype, prototypeAccessors);
    return Leaf2;
  }(RopeSequence);
  RopeSequence.empty = new Leaf([]);
  var Append = /* @__PURE__ */ function(RopeSequence3) {
    function Append2(left, right) {
      RopeSequence3.call(this);
      this.left = left;
      this.right = right;
      this.length = left.length + right.length;
      this.depth = Math.max(left.depth, right.depth) + 1;
    }
    if (RopeSequence3)
      Append2.__proto__ = RopeSequence3;
    Append2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
    Append2.prototype.constructor = Append2;
    Append2.prototype.flatten = function flatten2() {
      return this.left.flatten().concat(this.right.flatten());
    };
    Append2.prototype.getInner = function getInner(i3) {
      return i3 < this.left.length ? this.left.get(i3) : this.right.get(i3 - this.left.length);
    };
    Append2.prototype.forEachInner = function forEachInner(f3, from2, to, start) {
      var leftLen = this.left.length;
      if (from2 < leftLen && this.left.forEachInner(f3, from2, Math.min(to, leftLen), start) === false) {
        return false;
      }
      if (to > leftLen && this.right.forEachInner(f3, Math.max(from2 - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false) {
        return false;
      }
    };
    Append2.prototype.forEachInvertedInner = function forEachInvertedInner(f3, from2, to, start) {
      var leftLen = this.left.length;
      if (from2 > leftLen && this.right.forEachInvertedInner(f3, from2 - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false) {
        return false;
      }
      if (to < leftLen && this.left.forEachInvertedInner(f3, Math.min(from2, leftLen), to, start) === false) {
        return false;
      }
    };
    Append2.prototype.sliceInner = function sliceInner(from2, to) {
      if (from2 == 0 && to == this.length) {
        return this;
      }
      var leftLen = this.left.length;
      if (to <= leftLen) {
        return this.left.slice(from2, to);
      }
      if (from2 >= leftLen) {
        return this.right.slice(from2 - leftLen, to - leftLen);
      }
      return this.left.slice(from2, leftLen).append(this.right.slice(0, to - leftLen));
    };
    Append2.prototype.leafAppend = function leafAppend(other) {
      var inner = this.right.leafAppend(other);
      if (inner) {
        return new Append2(this.left, inner);
      }
    };
    Append2.prototype.leafPrepend = function leafPrepend(other) {
      var inner = this.left.leafPrepend(other);
      if (inner) {
        return new Append2(inner, this.right);
      }
    };
    Append2.prototype.appendInner = function appendInner2(other) {
      if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1) {
        return new Append2(this.left, new Append2(this.right, other));
      }
      return new Append2(this, other);
    };
    return Append2;
  }(RopeSequence);
  var dist_default2 = RopeSequence;

  // node_modules/prosemirror-history/dist/index.js
  var max_empty_items = 500;
  var Branch = class _Branch {
    constructor(items, eventCount) {
      this.items = items;
      this.eventCount = eventCount;
    }
    // Pop the latest event off the branch's history and apply it
    // to a document transform.
    popEvent(state, preserveItems) {
      if (this.eventCount == 0)
        return null;
      let end = this.items.length;
      for (; ; end--) {
        let next = this.items.get(end - 1);
        if (next.selection) {
          --end;
          break;
        }
      }
      let remap, mapFrom;
      if (preserveItems) {
        remap = this.remapping(end, this.items.length);
        mapFrom = remap.maps.length;
      }
      let transform = state.tr;
      let selection, remaining;
      let addAfter = [], addBefore = [];
      this.items.forEach((item, i3) => {
        if (!item.step) {
          if (!remap) {
            remap = this.remapping(end, i3 + 1);
            mapFrom = remap.maps.length;
          }
          mapFrom--;
          addBefore.push(item);
          return;
        }
        if (remap) {
          addBefore.push(new Item(item.map));
          let step = item.step.map(remap.slice(mapFrom)), map6;
          if (step && transform.maybeStep(step).doc) {
            map6 = transform.mapping.maps[transform.mapping.maps.length - 1];
            addAfter.push(new Item(map6, void 0, void 0, addAfter.length + addBefore.length));
          }
          mapFrom--;
          if (map6)
            remap.appendMap(map6, mapFrom);
        } else {
          transform.maybeStep(item.step);
        }
        if (item.selection) {
          selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
          remaining = new _Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
          return false;
        }
      }, this.items.length, 0);
      return { remaining, transform, selection };
    }
    // Create a new branch with the given transform added.
    addTransform(transform, selection, histOptions, preserveItems) {
      let newItems = [], eventCount = this.eventCount;
      let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
      for (let i3 = 0; i3 < transform.steps.length; i3++) {
        let step = transform.steps[i3].invert(transform.docs[i3]);
        let item = new Item(transform.mapping.maps[i3], step, selection), merged;
        if (merged = lastItem && lastItem.merge(item)) {
          item = merged;
          if (i3)
            newItems.pop();
          else
            oldItems = oldItems.slice(0, oldItems.length - 1);
        }
        newItems.push(item);
        if (selection) {
          eventCount++;
          selection = void 0;
        }
        if (!preserveItems)
          lastItem = item;
      }
      let overflow = eventCount - histOptions.depth;
      if (overflow > DEPTH_OVERFLOW) {
        oldItems = cutOffEvents(oldItems, overflow);
        eventCount -= overflow;
      }
      return new _Branch(oldItems.append(newItems), eventCount);
    }
    remapping(from2, to) {
      let maps = new Mapping();
      this.items.forEach((item, i3) => {
        let mirrorPos = item.mirrorOffset != null && i3 - item.mirrorOffset >= from2 ? maps.maps.length - item.mirrorOffset : void 0;
        maps.appendMap(item.map, mirrorPos);
      }, from2, to);
      return maps;
    }
    addMaps(array) {
      if (this.eventCount == 0)
        return this;
      return new _Branch(this.items.append(array.map((map6) => new Item(map6))), this.eventCount);
    }
    // When the collab module receives remote changes, the history has
    // to know about those, so that it can adjust the steps that were
    // rebased on top of the remote changes, and include the position
    // maps for the remote changes in its array of items.
    rebased(rebasedTransform, rebasedCount) {
      if (!this.eventCount)
        return this;
      let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
      let mapping = rebasedTransform.mapping;
      let newUntil = rebasedTransform.steps.length;
      let eventCount = this.eventCount;
      this.items.forEach((item) => {
        if (item.selection)
          eventCount--;
      }, start);
      let iRebased = rebasedCount;
      this.items.forEach((item) => {
        let pos = mapping.getMirror(--iRebased);
        if (pos == null)
          return;
        newUntil = Math.min(newUntil, pos);
        let map6 = mapping.maps[pos];
        if (item.step) {
          let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
          let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
          if (selection)
            eventCount++;
          rebasedItems.push(new Item(map6, step, selection));
        } else {
          rebasedItems.push(new Item(map6));
        }
      }, start);
      let newMaps = [];
      for (let i3 = rebasedCount; i3 < newUntil; i3++)
        newMaps.push(new Item(mapping.maps[i3]));
      let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
      let branch = new _Branch(items, eventCount);
      if (branch.emptyItemCount() > max_empty_items)
        branch = branch.compress(this.items.length - rebasedItems.length);
      return branch;
    }
    emptyItemCount() {
      let count = 0;
      this.items.forEach((item) => {
        if (!item.step)
          count++;
      });
      return count;
    }
    // Compressing a branch means rewriting it to push the air (map-only
    // items) out. During collaboration, these naturally accumulate
    // because each remote change adds one. The `upto` argument is used
    // to ensure that only the items below a given level are compressed,
    // because `rebased` relies on a clean, untouched set of items in
    // order to associate old items with rebased steps.
    compress(upto = this.items.length) {
      let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
      let items = [], events = 0;
      this.items.forEach((item, i3) => {
        if (i3 >= upto) {
          items.push(item);
          if (item.selection)
            events++;
        } else if (item.step) {
          let step = item.step.map(remap.slice(mapFrom)), map6 = step && step.getMap();
          mapFrom--;
          if (map6)
            remap.appendMap(map6, mapFrom);
          if (step) {
            let selection = item.selection && item.selection.map(remap.slice(mapFrom));
            if (selection)
              events++;
            let newItem = new Item(map6.invert(), step, selection), merged, last = items.length - 1;
            if (merged = items.length && items[last].merge(newItem))
              items[last] = merged;
            else
              items.push(newItem);
          }
        } else if (item.map) {
          mapFrom--;
        }
      }, this.items.length, 0);
      return new _Branch(dist_default2.from(items.reverse()), events);
    }
  };
  Branch.empty = new Branch(dist_default2.empty, 0);
  function cutOffEvents(items, n5) {
    let cutPoint;
    items.forEach((item, i3) => {
      if (item.selection && n5-- == 0) {
        cutPoint = i3;
        return false;
      }
    });
    return items.slice(cutPoint);
  }
  var Item = class _Item {
    constructor(map6, step, selection, mirrorOffset) {
      this.map = map6;
      this.step = step;
      this.selection = selection;
      this.mirrorOffset = mirrorOffset;
    }
    merge(other) {
      if (this.step && other.step && !other.selection) {
        let step = other.step.merge(this.step);
        if (step)
          return new _Item(step.getMap().invert(), step, this.selection);
      }
    }
  };
  var HistoryState2 = class {
    constructor(done, undone, prevRanges, prevTime, prevComposition) {
      this.done = done;
      this.undone = undone;
      this.prevRanges = prevRanges;
      this.prevTime = prevTime;
      this.prevComposition = prevComposition;
    }
  };
  var DEPTH_OVERFLOW = 20;
  function applyTransaction(history3, state, tr, options) {
    let historyTr = tr.getMeta(historyKey), rebased;
    if (historyTr)
      return historyTr.historyState;
    if (tr.getMeta(closeHistoryKey))
      history3 = new HistoryState2(history3.done, history3.undone, null, 0, -1);
    let appended = tr.getMeta("appendedTransaction");
    if (tr.steps.length == 0) {
      return history3;
    } else if (appended && appended.getMeta(historyKey)) {
      if (appended.getMeta(historyKey).redo)
        return new HistoryState2(history3.done.addTransform(tr, void 0, options, mustPreserveItems(state)), history3.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history3.prevTime, history3.prevComposition);
      else
        return new HistoryState2(history3.done, history3.undone.addTransform(tr, void 0, options, mustPreserveItems(state)), null, history3.prevTime, history3.prevComposition);
    } else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
      let composition = tr.getMeta("composition");
      let newGroup = history3.prevTime == 0 || !appended && history3.prevComposition != composition && (history3.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history3.prevRanges));
      let prevRanges = appended ? mapRanges(history3.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
      return new HistoryState2(history3.done.addTransform(tr, newGroup ? state.selection.getBookmark() : void 0, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time, composition == null ? history3.prevComposition : composition);
    } else if (rebased = tr.getMeta("rebased")) {
      return new HistoryState2(history3.done.rebased(tr, rebased), history3.undone.rebased(tr, rebased), mapRanges(history3.prevRanges, tr.mapping), history3.prevTime, history3.prevComposition);
    } else {
      return new HistoryState2(history3.done.addMaps(tr.mapping.maps), history3.undone.addMaps(tr.mapping.maps), mapRanges(history3.prevRanges, tr.mapping), history3.prevTime, history3.prevComposition);
    }
  }
  function isAdjacentTo(transform, prevRanges) {
    if (!prevRanges)
      return false;
    if (!transform.docChanged)
      return true;
    let adjacent = false;
    transform.mapping.maps[0].forEach((start, end) => {
      for (let i3 = 0; i3 < prevRanges.length; i3 += 2)
        if (start <= prevRanges[i3 + 1] && end >= prevRanges[i3])
          adjacent = true;
    });
    return adjacent;
  }
  function rangesFor(map6) {
    let result = [];
    map6.forEach((_from, _to, from2, to) => result.push(from2, to));
    return result;
  }
  function mapRanges(ranges, mapping) {
    if (!ranges)
      return null;
    let result = [];
    for (let i3 = 0; i3 < ranges.length; i3 += 2) {
      let from2 = mapping.map(ranges[i3], 1), to = mapping.map(ranges[i3 + 1], -1);
      if (from2 <= to)
        result.push(from2, to);
    }
    return result;
  }
  function histTransaction(history3, state, redo3) {
    let preserveItems = mustPreserveItems(state);
    let histOptions = historyKey.get(state).spec.config;
    let pop = (redo3 ? history3.undone : history3.done).popEvent(state, preserveItems);
    if (!pop)
      return null;
    let selection = pop.selection.resolve(pop.transform.doc);
    let added = (redo3 ? history3.done : history3.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
    let newHist = new HistoryState2(redo3 ? added : pop.remaining, redo3 ? pop.remaining : added, null, 0, -1);
    return pop.transform.setSelection(selection).setMeta(historyKey, { redo: redo3, historyState: newHist });
  }
  var cachedPreserveItems = false;
  var cachedPreserveItemsPlugins = null;
  function mustPreserveItems(state) {
    let plugins = state.plugins;
    if (cachedPreserveItemsPlugins != plugins) {
      cachedPreserveItems = false;
      cachedPreserveItemsPlugins = plugins;
      for (let i3 = 0; i3 < plugins.length; i3++)
        if (plugins[i3].spec.historyPreserveItems) {
          cachedPreserveItems = true;
          break;
        }
    }
    return cachedPreserveItems;
  }
  var historyKey = new PluginKey("history");
  var closeHistoryKey = new PluginKey("closeHistory");
  function history2(config2 = {}) {
    config2 = {
      depth: config2.depth || 100,
      newGroupDelay: config2.newGroupDelay || 500
    };
    return new Plugin({
      key: historyKey,
      state: {
        init() {
          return new HistoryState2(Branch.empty, Branch.empty, null, 0, -1);
        },
        apply(tr, hist, state) {
          return applyTransaction(hist, state, tr, config2);
        }
      },
      config: config2,
      props: {
        handleDOMEvents: {
          beforeinput(view, e3) {
            let inputType = e3.inputType;
            let command2 = inputType == "historyUndo" ? undo2 : inputType == "historyRedo" ? redo2 : null;
            if (!command2)
              return false;
            e3.preventDefault();
            return command2(view.state, view.dispatch);
          }
        }
      }
    });
  }
  function buildCommand(redo3, scroll) {
    return (state, dispatch) => {
      let hist = historyKey.getState(state);
      if (!hist || (redo3 ? hist.undone : hist.done).eventCount == 0)
        return false;
      if (dispatch) {
        let tr = histTransaction(hist, state, redo3);
        if (tr)
          dispatch(scroll ? tr.scrollIntoView() : tr);
      }
      return true;
    };
  }
  var undo2 = buildCommand(false, true);
  var redo2 = buildCommand(true, true);
  var undoNoScroll = buildCommand(false, false);
  var redoNoScroll = buildCommand(true, false);

  // node_modules/nanoid/index.browser.js
  var random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
  var customRandom = (alphabet, defaultSize, getRandom) => {
    let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
    let step = -~(1.6 * mask * defaultSize / alphabet.length);
    return (size = defaultSize) => {
      let id2 = "";
      while (true) {
        let bytes = getRandom(step);
        let j6 = step;
        while (j6--) {
          id2 += alphabet[bytes[j6] & mask] || "";
          if (id2.length === size)
            return id2;
        }
      }
    };
  };
  var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);

  // node_modules/@milkdown/utils/lib/index.es.js
  var J4 = customAlphabet("abcedfghicklmn", 10);
  function re2(n5, o2) {
    const r4 = Et(n5), t4 = (e3) => () => __async(this, null, function* () {
      t4.key = r4, yield e3.wait(J3);
      const a2 = o2(e3);
      return e3.get(je).create(r4, a2), t4.run = (s4) => e3.get(je).call(n5, s4), () => {
        e3.get(je).remove(r4);
      };
    });
    return t4;
  }
  function oe2(n5) {
    const o2 = (r4) => () => __async(this, null, function* () {
      yield r4.wait(R3);
      const t4 = n5(r4);
      return r4.update(ue, (e3) => [...e3, t4]), o2.inputRule = t4, () => {
        r4.update(ue, (e3) => e3.filter((a2) => a2 !== t4));
      };
    });
    return o2;
  }
  function Q3(n5, o2) {
    const r4 = (t4) => () => __async(this, null, function* () {
      const e3 = o2(t4);
      return t4.update(Z2, (a2) => [...a2.filter((s4) => s4[0] !== n5), [n5, e3]]), r4.id = n5, r4.schema = e3, () => {
        t4.update(Z2, (a2) => a2.filter(([s4]) => s4 !== n5));
      };
    });
    return r4.type = (t4) => {
      const e3 = t4.get(b2).marks[n5];
      if (!e3)
        throw x(n5);
      return e3;
    }, r4;
  }
  function W3(n5, o2) {
    const r4 = (t4) => () => __async(this, null, function* () {
      const e3 = o2(t4);
      return t4.update(X, (a2) => [...a2.filter((s4) => s4[0] !== n5), [n5, e3]]), r4.id = n5, r4.schema = e3, () => {
        t4.update(X, (a2) => a2.filter(([s4]) => s4 !== n5));
      };
    });
    return r4.type = (t4) => {
      const e3 = t4.get(b2).nodes[n5];
      if (!e3)
        throw M(n5);
      return e3;
    }, r4;
  }
  function ue2(n5) {
    let o2;
    const r4 = (t4) => () => __async(this, null, function* () {
      return yield t4.wait(R3), o2 = n5(t4), t4.update(N2, (e3) => [...e3, o2]), () => {
        t4.update(N2, (e3) => e3.filter((a2) => a2 !== o2));
      };
    });
    return r4.plugin = () => o2, r4.key = () => o2.spec.key, r4;
  }
  function X2(n5) {
    const o2 = (r4) => () => __async(this, null, function* () {
      yield r4.wait(R3);
      const t4 = n5(r4), e3 = keymap2(t4);
      return r4.update(N2, (a2) => [...a2, e3]), o2.keymap = t4, () => {
        r4.update(N2, (a2) => a2.filter((s4) => s4 !== e3));
      };
    });
    return o2;
  }
  function h2(n5, o2) {
    const r4 = H(n5, o2), t4 = (e3) => (e3.inject(r4), () => () => {
      e3.remove(r4);
    });
    return t4.key = r4, t4;
  }
  function fe2(n5, o2) {
    const r4 = h2(o2, n5), t4 = W3(n5, (a2) => a2.get(r4.key)(a2)), e3 = [r4, t4];
    return e3.id = t4.id, e3.node = t4, e3.type = (a2) => t4.type(a2), e3.schema = t4.schema, e3.ctx = r4, e3.key = r4.key, e3.extendSchema = (a2) => (s4) => () => {
      const i3 = s4.get(r4.key), c5 = a2(i3)(s4);
      s4.update(X, (m4) => [...m4.filter((S8) => S8[0] !== n5), [n5, c5]]), e3.schema = c5;
    }, e3;
  }
  function ye2(n5, o2) {
    const r4 = h2(o2, n5), t4 = Q3(n5, (a2) => a2.get(r4.key)(a2)), e3 = [r4, t4];
    return e3.id = t4.id, e3.mark = t4, e3.type = t4.type, e3.schema = t4.schema, e3.ctx = r4, e3.key = r4.key, e3.extendSchema = (a2) => (s4) => () => {
      const i3 = s4.get(r4.key), c5 = a2(i3)(s4);
      s4.update(Z2, (m4) => [...m4.filter((S8) => S8[0] !== n5), [n5, c5]]), e3.schema = c5;
    }, e3;
  }
  function ge2(n5, o2) {
    const r4 = Object.fromEntries(Object.entries(o2).map(([s4, { shortcuts: i3 }]) => [s4, i3])), t4 = h2(r4, `${n5}Keymap`), e3 = X2((s4) => {
      const i3 = s4.get(t4.key), u5 = Object.entries(o2).flatMap(([c5, { command: m4 }]) => [i3[c5]].flat().map((V4) => [V4, m4(s4)]));
      return Object.fromEntries(u5);
    }), a2 = [t4, e3];
    return a2.ctx = t4, a2.shortcuts = e3, a2.key = t4.key, a2.keymap = e3.keymap, a2;
  }
  var he = (n5, o2 = () => ({})) => h2(o2, `${n5}Attr`);
  var we2 = (n5, o2 = () => ({})) => h2(o2, `${n5}Attr`);
  function ke2(n5, o2, r4) {
    const t4 = h2(r4 != null ? r4 : {}, n5), e3 = (s4) => () => __async(this, null, function* () {
      yield s4.wait(M4);
      const u5 = {
        plugin: o2(s4),
        options: s4.get(t4.key)
      };
      return s4.update(pe, (c5) => [...c5, u5]), () => {
        s4.update(pe, (c5) => c5.filter((m4) => m4 !== u5));
      };
    }), a2 = [t4, e3];
    return a2.id = n5, a2.plugin = e3, a2.options = t4, a2;
  }

  // node_modules/@milkdown/plugin-history/lib/index.es.js
  function t3(o2, r4) {
    return Object.assign(o2, {
      meta: __spreadValues({
        package: "@milkdown/plugin-history"
      }, r4)
    }), o2;
  }
  var s2 = re2("Undo", () => () => undo2);
  t3(s2, {
    displayName: "Command<undo>"
  });
  var m3 = re2("Redo", () => () => redo2);
  t3(m3, {
    displayName: "Command<redo>"
  });
  var e2 = h2({}, "historyProviderConfig");
  t3(e2, {
    displayName: "Ctx<historyProviderConfig>"
  });
  var n3 = ue2((o2) => history2(o2.get(e2.key)));
  t3(n3, {
    displayName: "Ctx<historyProviderPlugin>"
  });
  var i2 = ge2("historyKeymap", {
    Undo: {
      shortcuts: "Mod-z",
      command: (o2) => {
        const r4 = o2.get(je);
        return () => r4.call(s2.key);
      }
    },
    Redo: {
      shortcuts: ["Mod-y", "Shift-Mod-z"],
      command: (o2) => {
        const r4 = o2.get(je);
        return () => r4.call(m3.key);
      }
    }
  });
  t3(i2.ctx, {
    displayName: "KeymapCtx<history>"
  });
  t3(i2.shortcuts, {
    displayName: "Keymap<history>"
  });
  var x5 = [e2, n3, i2, s2, m3].flat();

  // node_modules/@milkdown/plugin-indent/lib/index.es.js
  var index_es_exports3 = {};
  __export(index_es_exports3, {
    indent: () => p4,
    indentConfig: () => r2,
    indentPlugin: () => s3
  });
  function u4(n5, i3) {
    const { doc: t4, selection: e3 } = n5;
    if (!t4 || !e3 || !(e3 instanceof TextSelection || e3 instanceof AllSelection))
      return n5;
    const { to: c5 } = e3, o2 = i3.type === "space" ? Array(i3.size).fill(" ").join("") : "	";
    return n5.insertText(o2, c5);
  }
  var r2 = h2({ type: "space", size: 2 }, "indentConfig");
  r2.meta = {
    package: "@milkdown/plugin-indent",
    displayName: "Ctx<indentConfig>"
  };
  var s3 = X2((n5) => ({
    Tab: (i3, t4) => {
      const e3 = n5.get(r2.key), { tr: c5 } = i3, o2 = u4(c5, e3);
      return o2.docChanged ? (t4 == null || t4(o2), true) : false;
    }
  }));
  s3.meta = {
    package: "@milkdown/plugin-indent",
    displayName: "Shortcut<indent>"
  };
  var p4 = [r2, s3];

  // node_modules/@milkdown/plugin-trailing/lib/index.es.js
  var index_es_exports4 = {};
  __export(index_es_exports4, {
    trailing: () => P4,
    trailingConfig: () => l4,
    trailingPlugin: () => p5
  });
  var l4 = h2({
    shouldAppend: (n5) => !(!n5 || ["heading", "paragraph"].includes(n5.type.name)),
    getNode: (n5) => n5.schema.nodes.paragraph.create()
  }, "trailingConfig");
  l4.meta = {
    package: "@milkdown/plugin-trailing",
    displayName: "Ctx<trailingConfig>"
  };
  var p5 = ue2((n5) => {
    const c5 = new PluginKey("MILKDOWN_TRAILING"), { shouldAppend: s4, getNode: r4 } = n5.get(l4.key), g5 = new Plugin({
      key: c5,
      state: {
        init: (i3, e3) => {
          const t4 = e3.tr.doc.lastChild;
          return s4(t4, e3);
        },
        apply: (i3, e3, t4, o2) => {
          if (!i3.docChanged)
            return e3;
          const a2 = i3.doc.lastChild;
          return s4(a2, o2);
        }
      },
      appendTransaction: (i3, e3, t4) => {
        const { doc: o2, tr: a2 } = t4, d6 = r4 == null ? void 0 : r4(t4), u5 = g5.getState(t4), m4 = o2.content.size;
        if (!(!u5 || !d6))
          return a2.insert(m4, d6);
      }
    });
    return g5;
  });
  p5.meta = {
    package: "@milkdown/plugin-trailing",
    displayName: "Prose<trailing>"
  };
  var P4 = [l4, p5];

  // node_modules/@milkdown/preset-commonmark/lib/index.es.js
  var index_es_exports5 = {};
  __export(index_es_exports5, {
    blockquoteAttr: () => ye3,
    blockquoteKeymap: () => he2,
    blockquoteSchema: () => q5,
    bulletListAttr: () => Se,
    bulletListKeymap: () => we3,
    bulletListSchema: () => O3,
    codeBlockAttr: () => fe3,
    codeBlockKeymap: () => Ie2,
    codeBlockSchema: () => W4,
    commands: () => Vt,
    commonmark: () => cr,
    createCodeBlockCommand: () => Ne2,
    createCodeBlockInputRule: () => ut2,
    docSchema: () => mt2,
    downgradeHeadingCommand: () => ue3,
    emphasisAttr: () => Z3,
    emphasisKeymap: () => te2,
    emphasisSchema: () => R4,
    emphasisStarInputRule: () => nt,
    emphasisUnderscoreInputRule: () => ot2,
    hardbreakAttr: () => Me2,
    hardbreakClearMarkPlugin: () => Mt,
    hardbreakFilterNodes: () => Ue,
    hardbreakFilterPlugin: () => bt,
    hardbreakKeymap: () => Le,
    hardbreakSchema: () => S6,
    headingAttr: () => ce2,
    headingIdGenerator: () => j4,
    headingKeymap: () => ge3,
    headingSchema: () => H4,
    hrAttr: () => xe,
    hrSchema: () => F3,
    htmlAttr: () => Ee2,
    htmlSchema: () => Pe,
    imageAttr: () => Ce3,
    imageSchema: () => v2,
    inlineCodeAttr: () => oe3,
    inlineCodeInputRule: () => lt3,
    inlineCodeKeymap: () => le,
    inlineCodeSchema: () => x6,
    inlineNodesCursorPlugin: () => Ct,
    inputRules: () => Wt,
    insertHardbreakCommand: () => be,
    insertHrCommand: () => ht2,
    insertHrInputRule: () => kt,
    insertImageCommand: () => gt,
    insertImageInputRule: () => Pt,
    keymap: () => Ut,
    liftFirstListItemCommand: () => De2,
    liftListItemCommand: () => Te2,
    linkAttr: () => ie6,
    linkSchema: () => B2,
    listItemAttr: () => ve2,
    listItemKeymap: () => _e2,
    listItemSchema: () => M5,
    markInputRules: () => Ft,
    orderedListAttr: () => He,
    orderedListKeymap: () => Re,
    orderedListSchema: () => T4,
    paragraphAttr: () => de,
    paragraphKeymap: () => pe2,
    paragraphSchema: () => w5,
    plugins: () => Jt,
    remarkAddOrderInListPlugin: () => $e,
    remarkHtmlTransformer: () => Fe,
    remarkInlineLinkPlugin: () => We,
    remarkLineBreak: () => qe,
    remarkMarker: () => Ve2,
    schema: () => qt,
    sinkListItemCommand: () => Oe2,
    splitListItemCommand: () => Ke2,
    strongAttr: () => re3,
    strongInputRule: () => st,
    strongKeymap: () => ne2,
    strongSchema: () => $2,
    syncHeadingIdPlugin: () => Lt,
    syncListOrderPlugin: () => xt,
    textSchema: () => It,
    toggleEmphasisCommand: () => ee2,
    toggleInlineCodeCommand: () => se2,
    toggleLinkCommand: () => it,
    toggleStrongCommand: () => ae2,
    turnIntoTextCommand: () => me2,
    updateCodeBlockLanguageCommand: () => Et2,
    updateImageCommand: () => yt,
    updateLinkCommand: () => dt2,
    wrapInBlockquoteCommand: () => ke3,
    wrapInBlockquoteInputRule: () => ct2,
    wrapInBulletListCommand: () => Ae2,
    wrapInBulletListInputRule: () => ft,
    wrapInHeadingCommand: () => L4,
    wrapInHeadingInputRule: () => pt2,
    wrapInOrderedListCommand: () => Be,
    wrapInOrderedListInputRule: () => Nt
  });

  // node_modules/escape-string-regexp/index.js
  function escapeStringRegexp(string4) {
    if (typeof string4 !== "string") {
      throw new TypeError("Expected a string");
    }
    return string4.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  }

  // node_modules/@sindresorhus/transliterate/replacements.js
  var replacements = [
    // German umlauts
    ["\xDF", "ss"],
    ["\u1E9E", "Ss"],
    ["\xE4", "ae"],
    ["\xC4", "Ae"],
    ["\xF6", "oe"],
    ["\xD6", "Oe"],
    ["\xFC", "ue"],
    ["\xDC", "Ue"],
    // Latin
    ["\xC0", "A"],
    ["\xC1", "A"],
    ["\xC2", "A"],
    ["\xC3", "A"],
    ["\xC4", "Ae"],
    ["\xC5", "A"],
    ["\xC6", "AE"],
    ["\xC7", "C"],
    ["\xC8", "E"],
    ["\xC9", "E"],
    ["\xCA", "E"],
    ["\xCB", "E"],
    ["\xCC", "I"],
    ["\xCD", "I"],
    ["\xCE", "I"],
    ["\xCF", "I"],
    ["\xD0", "D"],
    ["\xD1", "N"],
    ["\xD2", "O"],
    ["\xD3", "O"],
    ["\xD4", "O"],
    ["\xD5", "O"],
    ["\xD6", "Oe"],
    ["\u0150", "O"],
    ["\xD8", "O"],
    ["\xD9", "U"],
    ["\xDA", "U"],
    ["\xDB", "U"],
    ["\xDC", "Ue"],
    ["\u0170", "U"],
    ["\xDD", "Y"],
    ["\xDE", "TH"],
    ["\xDF", "ss"],
    ["\xE0", "a"],
    ["\xE1", "a"],
    ["\xE2", "a"],
    ["\xE3", "a"],
    ["\xE4", "ae"],
    ["\xE5", "a"],
    ["\xE6", "ae"],
    ["\xE7", "c"],
    ["\xE8", "e"],
    ["\xE9", "e"],
    ["\xEA", "e"],
    ["\xEB", "e"],
    ["\xEC", "i"],
    ["\xED", "i"],
    ["\xEE", "i"],
    ["\xEF", "i"],
    ["\xF0", "d"],
    ["\xF1", "n"],
    ["\xF2", "o"],
    ["\xF3", "o"],
    ["\xF4", "o"],
    ["\xF5", "o"],
    ["\xF6", "oe"],
    ["\u0151", "o"],
    ["\xF8", "o"],
    ["\xF9", "u"],
    ["\xFA", "u"],
    ["\xFB", "u"],
    ["\xFC", "ue"],
    ["\u0171", "u"],
    ["\xFD", "y"],
    ["\xFE", "th"],
    ["\xFF", "y"],
    ["\u1E9E", "SS"],
    // Vietnamese
    ["\xE0", "a"],
    ["\xC0", "A"],
    ["\xE1", "a"],
    ["\xC1", "A"],
    ["\xE2", "a"],
    ["\xC2", "A"],
    ["\xE3", "a"],
    ["\xC3", "A"],
    ["\xE8", "e"],
    ["\xC8", "E"],
    ["\xE9", "e"],
    ["\xC9", "E"],
    ["\xEA", "e"],
    ["\xCA", "E"],
    ["\xEC", "i"],
    ["\xCC", "I"],
    ["\xED", "i"],
    ["\xCD", "I"],
    ["\xF2", "o"],
    ["\xD2", "O"],
    ["\xF3", "o"],
    ["\xD3", "O"],
    ["\xF4", "o"],
    ["\xD4", "O"],
    ["\xF5", "o"],
    ["\xD5", "O"],
    ["\xF9", "u"],
    ["\xD9", "U"],
    ["\xFA", "u"],
    ["\xDA", "U"],
    ["\xFD", "y"],
    ["\xDD", "Y"],
    ["\u0103", "a"],
    ["\u0102", "A"],
    ["\u0110", "D"],
    ["\u0111", "d"],
    ["\u0129", "i"],
    ["\u0128", "I"],
    ["\u0169", "u"],
    ["\u0168", "U"],
    ["\u01A1", "o"],
    ["\u01A0", "O"],
    ["\u01B0", "u"],
    ["\u01AF", "U"],
    ["\u1EA1", "a"],
    ["\u1EA0", "A"],
    ["\u1EA3", "a"],
    ["\u1EA2", "A"],
    ["\u1EA5", "a"],
    ["\u1EA4", "A"],
    ["\u1EA7", "a"],
    ["\u1EA6", "A"],
    ["\u1EA9", "a"],
    ["\u1EA8", "A"],
    ["\u1EAB", "a"],
    ["\u1EAA", "A"],
    ["\u1EAD", "a"],
    ["\u1EAC", "A"],
    ["\u1EAF", "a"],
    ["\u1EAE", "A"],
    ["\u1EB1", "a"],
    ["\u1EB0", "A"],
    ["\u1EB3", "a"],
    ["\u1EB2", "A"],
    ["\u1EB5", "a"],
    ["\u1EB4", "A"],
    ["\u1EB7", "a"],
    ["\u1EB6", "A"],
    ["\u1EB9", "e"],
    ["\u1EB8", "E"],
    ["\u1EBB", "e"],
    ["\u1EBA", "E"],
    ["\u1EBD", "e"],
    ["\u1EBC", "E"],
    ["\u1EBF", "e"],
    ["\u1EBE", "E"],
    ["\u1EC1", "e"],
    ["\u1EC0", "E"],
    ["\u1EC3", "e"],
    ["\u1EC2", "E"],
    ["\u1EC5", "e"],
    ["\u1EC4", "E"],
    ["\u1EC7", "e"],
    ["\u1EC6", "E"],
    ["\u1EC9", "i"],
    ["\u1EC8", "I"],
    ["\u1ECB", "i"],
    ["\u1ECA", "I"],
    ["\u1ECD", "o"],
    ["\u1ECC", "O"],
    ["\u1ECF", "o"],
    ["\u1ECE", "O"],
    ["\u1ED1", "o"],
    ["\u1ED0", "O"],
    ["\u1ED3", "o"],
    ["\u1ED2", "O"],
    ["\u1ED5", "o"],
    ["\u1ED4", "O"],
    ["\u1ED7", "o"],
    ["\u1ED6", "O"],
    ["\u1ED9", "o"],
    ["\u1ED8", "O"],
    ["\u1EDB", "o"],
    ["\u1EDA", "O"],
    ["\u1EDD", "o"],
    ["\u1EDC", "O"],
    ["\u1EDF", "o"],
    ["\u1EDE", "O"],
    ["\u1EE1", "o"],
    ["\u1EE0", "O"],
    ["\u1EE3", "o"],
    ["\u1EE2", "O"],
    ["\u1EE5", "u"],
    ["\u1EE4", "U"],
    ["\u1EE7", "u"],
    ["\u1EE6", "U"],
    ["\u1EE9", "u"],
    ["\u1EE8", "U"],
    ["\u1EEB", "u"],
    ["\u1EEA", "U"],
    ["\u1EED", "u"],
    ["\u1EEC", "U"],
    ["\u1EEF", "u"],
    ["\u1EEE", "U"],
    ["\u1EF1", "u"],
    ["\u1EF0", "U"],
    ["\u1EF3", "y"],
    ["\u1EF2", "Y"],
    ["\u1EF5", "y"],
    ["\u1EF4", "Y"],
    ["\u1EF7", "y"],
    ["\u1EF6", "Y"],
    ["\u1EF9", "y"],
    ["\u1EF8", "Y"],
    // Arabic
    ["\u0621", "e"],
    ["\u0622", "a"],
    ["\u0623", "a"],
    ["\u0624", "w"],
    ["\u0625", "i"],
    ["\u0626", "y"],
    ["\u0627", "a"],
    ["\u0628", "b"],
    ["\u0629", "t"],
    ["\u062A", "t"],
    ["\u062B", "th"],
    ["\u062C", "j"],
    ["\u062D", "h"],
    ["\u062E", "kh"],
    ["\u062F", "d"],
    ["\u0630", "dh"],
    ["\u0631", "r"],
    ["\u0632", "z"],
    ["\u0633", "s"],
    ["\u0634", "sh"],
    ["\u0635", "s"],
    ["\u0636", "d"],
    ["\u0637", "t"],
    ["\u0638", "z"],
    ["\u0639", "e"],
    ["\u063A", "gh"],
    ["\u0640", "_"],
    ["\u0641", "f"],
    ["\u0642", "q"],
    ["\u0643", "k"],
    ["\u0644", "l"],
    ["\u0645", "m"],
    ["\u0646", "n"],
    ["\u0647", "h"],
    ["\u0648", "w"],
    ["\u0649", "a"],
    ["\u064A", "y"],
    ["\u064E\u200E", "a"],
    ["\u064F", "u"],
    ["\u0650\u200E", "i"],
    ["\u0660", "0"],
    ["\u0661", "1"],
    ["\u0662", "2"],
    ["\u0663", "3"],
    ["\u0664", "4"],
    ["\u0665", "5"],
    ["\u0666", "6"],
    ["\u0667", "7"],
    ["\u0668", "8"],
    ["\u0669", "9"],
    // Persian / Farsi
    ["\u0686", "ch"],
    ["\u06A9", "k"],
    ["\u06AF", "g"],
    ["\u067E", "p"],
    ["\u0698", "zh"],
    ["\u06CC", "y"],
    ["\u06F0", "0"],
    ["\u06F1", "1"],
    ["\u06F2", "2"],
    ["\u06F3", "3"],
    ["\u06F4", "4"],
    ["\u06F5", "5"],
    ["\u06F6", "6"],
    ["\u06F7", "7"],
    ["\u06F8", "8"],
    ["\u06F9", "9"],
    // Pashto
    ["\u067C", "p"],
    ["\u0681", "z"],
    ["\u0685", "c"],
    ["\u0689", "d"],
    ["\uFEAB", "d"],
    ["\uFEAD", "r"],
    ["\u0693", "r"],
    ["\uFEAF", "z"],
    ["\u0696", "g"],
    ["\u069A", "x"],
    ["\u06AB", "g"],
    ["\u06BC", "n"],
    ["\u06C0", "e"],
    ["\u06D0", "e"],
    ["\u06CD", "ai"],
    // Urdu
    ["\u0679", "t"],
    ["\u0688", "d"],
    ["\u0691", "r"],
    ["\u06BA", "n"],
    ["\u06C1", "h"],
    ["\u06BE", "h"],
    ["\u06D2", "e"],
    // Russian
    ["\u0410", "A"],
    ["\u0430", "a"],
    ["\u0411", "B"],
    ["\u0431", "b"],
    ["\u0412", "V"],
    ["\u0432", "v"],
    ["\u0413", "G"],
    ["\u0433", "g"],
    ["\u0414", "D"],
    ["\u0434", "d"],
    ["\u044A\u0435", "ye"],
    ["\u042A\u0435", "Ye"],
    ["\u044A\u0415", "yE"],
    ["\u042A\u0415", "YE"],
    ["\u0415", "E"],
    ["\u0435", "e"],
    ["\u0401", "Yo"],
    ["\u0451", "yo"],
    ["\u0416", "Zh"],
    ["\u0436", "zh"],
    ["\u0417", "Z"],
    ["\u0437", "z"],
    ["\u0418", "I"],
    ["\u0438", "i"],
    ["\u044B\u0439", "iy"],
    ["\u042B\u0439", "Iy"],
    ["\u042B\u0419", "IY"],
    ["\u044B\u0419", "iY"],
    ["\u0419", "Y"],
    ["\u0439", "y"],
    ["\u041A", "K"],
    ["\u043A", "k"],
    ["\u041B", "L"],
    ["\u043B", "l"],
    ["\u041C", "M"],
    ["\u043C", "m"],
    ["\u041D", "N"],
    ["\u043D", "n"],
    ["\u041E", "O"],
    ["\u043E", "o"],
    ["\u041F", "P"],
    ["\u043F", "p"],
    ["\u0420", "R"],
    ["\u0440", "r"],
    ["\u0421", "S"],
    ["\u0441", "s"],
    ["\u0422", "T"],
    ["\u0442", "t"],
    ["\u0423", "U"],
    ["\u0443", "u"],
    ["\u0424", "F"],
    ["\u0444", "f"],
    ["\u0425", "Kh"],
    ["\u0445", "kh"],
    ["\u0426", "Ts"],
    ["\u0446", "ts"],
    ["\u0427", "Ch"],
    ["\u0447", "ch"],
    ["\u0428", "Sh"],
    ["\u0448", "sh"],
    ["\u0429", "Sch"],
    ["\u0449", "sch"],
    ["\u042A", ""],
    ["\u044A", ""],
    ["\u042B", "Y"],
    ["\u044B", "y"],
    ["\u042C", ""],
    ["\u044C", ""],
    ["\u042D", "E"],
    ["\u044D", "e"],
    ["\u042E", "Yu"],
    ["\u044E", "yu"],
    ["\u042F", "Ya"],
    ["\u044F", "ya"],
    // Romanian
    ["\u0103", "a"],
    ["\u0102", "A"],
    ["\u0219", "s"],
    ["\u0218", "S"],
    ["\u021B", "t"],
    ["\u021A", "T"],
    ["\u0163", "t"],
    ["\u0162", "T"],
    // Turkish
    ["\u015F", "s"],
    ["\u015E", "S"],
    ["\xE7", "c"],
    ["\xC7", "C"],
    ["\u011F", "g"],
    ["\u011E", "G"],
    ["\u0131", "i"],
    ["\u0130", "I"],
    // Armenian
    ["\u0561", "a"],
    ["\u0531", "A"],
    ["\u0562", "b"],
    ["\u0532", "B"],
    ["\u0563", "g"],
    ["\u0533", "G"],
    ["\u0564", "d"],
    ["\u0534", "D"],
    ["\u0565", "ye"],
    ["\u0535", "Ye"],
    ["\u0566", "z"],
    ["\u0536", "Z"],
    ["\u0567", "e"],
    ["\u0537", "E"],
    ["\u0568", "y"],
    ["\u0538", "Y"],
    ["\u0569", "t"],
    ["\u0539", "T"],
    ["\u056A", "zh"],
    ["\u053A", "Zh"],
    ["\u056B", "i"],
    ["\u053B", "I"],
    ["\u056C", "l"],
    ["\u053C", "L"],
    ["\u056D", "kh"],
    ["\u053D", "Kh"],
    ["\u056E", "ts"],
    ["\u053E", "Ts"],
    ["\u056F", "k"],
    ["\u053F", "K"],
    ["\u0570", "h"],
    ["\u0540", "H"],
    ["\u0571", "dz"],
    ["\u0541", "Dz"],
    ["\u0572", "gh"],
    ["\u0542", "Gh"],
    ["\u0573", "tch"],
    ["\u0543", "Tch"],
    ["\u0574", "m"],
    ["\u0544", "M"],
    ["\u0575", "y"],
    ["\u0545", "Y"],
    ["\u0576", "n"],
    ["\u0546", "N"],
    ["\u0577", "sh"],
    ["\u0547", "Sh"],
    ["\u0578", "vo"],
    ["\u0548", "Vo"],
    ["\u0579", "ch"],
    ["\u0549", "Ch"],
    ["\u057A", "p"],
    ["\u054A", "P"],
    ["\u057B", "j"],
    ["\u054B", "J"],
    ["\u057C", "r"],
    ["\u054C", "R"],
    ["\u057D", "s"],
    ["\u054D", "S"],
    ["\u057E", "v"],
    ["\u054E", "V"],
    ["\u057F", "t"],
    ["\u054F", "T"],
    ["\u0580", "r"],
    ["\u0550", "R"],
    ["\u0581", "c"],
    ["\u0551", "C"],
    ["\u0578\u0582", "u"],
    ["\u0548\u0552", "U"],
    ["\u0548\u0582", "U"],
    ["\u0583", "p"],
    ["\u0553", "P"],
    ["\u0584", "q"],
    ["\u0554", "Q"],
    ["\u0585", "o"],
    ["\u0555", "O"],
    ["\u0586", "f"],
    ["\u0556", "F"],
    ["\u0587", "yev"],
    // Georgian
    ["\u10D0", "a"],
    ["\u10D1", "b"],
    ["\u10D2", "g"],
    ["\u10D3", "d"],
    ["\u10D4", "e"],
    ["\u10D5", "v"],
    ["\u10D6", "z"],
    ["\u10D7", "t"],
    ["\u10D8", "i"],
    ["\u10D9", "k"],
    ["\u10DA", "l"],
    ["\u10DB", "m"],
    ["\u10DC", "n"],
    ["\u10DD", "o"],
    ["\u10DE", "p"],
    ["\u10DF", "zh"],
    ["\u10E0", "r"],
    ["\u10E1", "s"],
    ["\u10E2", "t"],
    ["\u10E3", "u"],
    ["\u10E4", "ph"],
    ["\u10E5", "q"],
    ["\u10E6", "gh"],
    ["\u10E7", "k"],
    ["\u10E8", "sh"],
    ["\u10E9", "ch"],
    ["\u10EA", "ts"],
    ["\u10EB", "dz"],
    ["\u10EC", "ts"],
    ["\u10ED", "tch"],
    ["\u10EE", "kh"],
    ["\u10EF", "j"],
    ["\u10F0", "h"],
    // Czech
    ["\u010D", "c"],
    ["\u010F", "d"],
    ["\u011B", "e"],
    ["\u0148", "n"],
    ["\u0159", "r"],
    ["\u0161", "s"],
    ["\u0165", "t"],
    ["\u016F", "u"],
    ["\u017E", "z"],
    ["\u010C", "C"],
    ["\u010E", "D"],
    ["\u011A", "E"],
    ["\u0147", "N"],
    ["\u0158", "R"],
    ["\u0160", "S"],
    ["\u0164", "T"],
    ["\u016E", "U"],
    ["\u017D", "Z"],
    // Dhivehi
    ["\u0780", "h"],
    ["\u0781", "sh"],
    ["\u0782", "n"],
    ["\u0783", "r"],
    ["\u0784", "b"],
    ["\u0785", "lh"],
    ["\u0786", "k"],
    ["\u0787", "a"],
    ["\u0788", "v"],
    ["\u0789", "m"],
    ["\u078A", "f"],
    ["\u078B", "dh"],
    ["\u078C", "th"],
    ["\u078D", "l"],
    ["\u078E", "g"],
    ["\u078F", "gn"],
    ["\u0790", "s"],
    ["\u0791", "d"],
    ["\u0792", "z"],
    ["\u0793", "t"],
    ["\u0794", "y"],
    ["\u0795", "p"],
    ["\u0796", "j"],
    ["\u0797", "ch"],
    ["\u0798", "tt"],
    ["\u0799", "hh"],
    ["\u079A", "kh"],
    ["\u079B", "th"],
    ["\u079C", "z"],
    ["\u079D", "sh"],
    ["\u079E", "s"],
    ["\u079F", "d"],
    ["\u07A0", "t"],
    ["\u07A1", "z"],
    ["\u07A2", "a"],
    ["\u07A3", "gh"],
    ["\u07A4", "q"],
    ["\u07A5", "w"],
    ["\u07A6", "a"],
    ["\u07A7", "aa"],
    ["\u07A8", "i"],
    ["\u07A9", "ee"],
    ["\u07AA", "u"],
    ["\u07AB", "oo"],
    ["\u07AC", "e"],
    ["\u07AD", "ey"],
    ["\u07AE", "o"],
    ["\u07AF", "oa"],
    ["\u07B0", ""],
    // Greek
    ["\u03B1", "a"],
    ["\u03B2", "v"],
    ["\u03B3", "g"],
    ["\u03B4", "d"],
    ["\u03B5", "e"],
    ["\u03B6", "z"],
    ["\u03B7", "i"],
    ["\u03B8", "th"],
    ["\u03B9", "i"],
    ["\u03BA", "k"],
    ["\u03BB", "l"],
    ["\u03BC", "m"],
    ["\u03BD", "n"],
    ["\u03BE", "ks"],
    ["\u03BF", "o"],
    ["\u03C0", "p"],
    ["\u03C1", "r"],
    ["\u03C3", "s"],
    ["\u03C4", "t"],
    ["\u03C5", "y"],
    ["\u03C6", "f"],
    ["\u03C7", "x"],
    ["\u03C8", "ps"],
    ["\u03C9", "o"],
    ["\u03AC", "a"],
    ["\u03AD", "e"],
    ["\u03AF", "i"],
    ["\u03CC", "o"],
    ["\u03CD", "y"],
    ["\u03AE", "i"],
    ["\u03CE", "o"],
    ["\u03C2", "s"],
    ["\u03CA", "i"],
    ["\u03B0", "y"],
    ["\u03CB", "y"],
    ["\u0390", "i"],
    ["\u0391", "A"],
    ["\u0392", "B"],
    ["\u0393", "G"],
    ["\u0394", "D"],
    ["\u0395", "E"],
    ["\u0396", "Z"],
    ["\u0397", "I"],
    ["\u0398", "TH"],
    ["\u0399", "I"],
    ["\u039A", "K"],
    ["\u039B", "L"],
    ["\u039C", "M"],
    ["\u039D", "N"],
    ["\u039E", "KS"],
    ["\u039F", "O"],
    ["\u03A0", "P"],
    ["\u03A1", "R"],
    ["\u03A3", "S"],
    ["\u03A4", "T"],
    ["\u03A5", "Y"],
    ["\u03A6", "F"],
    ["\u03A7", "X"],
    ["\u03A8", "PS"],
    ["\u03A9", "O"],
    ["\u0386", "A"],
    ["\u0388", "E"],
    ["\u038A", "I"],
    ["\u038C", "O"],
    ["\u038E", "Y"],
    ["\u0389", "I"],
    ["\u038F", "O"],
    ["\u03AA", "I"],
    ["\u03AB", "Y"],
    // Disabled as it conflicts with German and Latin.
    // Hungarian
    // ['ä', 'a'],
    // ['Ä', 'A'],
    // ['ö', 'o'],
    // ['Ö', 'O'],
    // ['ü', 'u'],
    // ['Ü', 'U'],
    // ['ű', 'u'],
    // ['Ű', 'U'],
    // Latvian
    ["\u0101", "a"],
    ["\u0113", "e"],
    ["\u0123", "g"],
    ["\u012B", "i"],
    ["\u0137", "k"],
    ["\u013C", "l"],
    ["\u0146", "n"],
    ["\u016B", "u"],
    ["\u0100", "A"],
    ["\u0112", "E"],
    ["\u0122", "G"],
    ["\u012A", "I"],
    ["\u0136", "K"],
    ["\u013B", "L"],
    ["\u0145", "N"],
    ["\u016A", "U"],
    ["\u010D", "c"],
    ["\u0161", "s"],
    ["\u017E", "z"],
    ["\u010C", "C"],
    ["\u0160", "S"],
    ["\u017D", "Z"],
    // Lithuanian
    ["\u0105", "a"],
    ["\u010D", "c"],
    ["\u0119", "e"],
    ["\u0117", "e"],
    ["\u012F", "i"],
    ["\u0161", "s"],
    ["\u0173", "u"],
    ["\u016B", "u"],
    ["\u017E", "z"],
    ["\u0104", "A"],
    ["\u010C", "C"],
    ["\u0118", "E"],
    ["\u0116", "E"],
    ["\u012E", "I"],
    ["\u0160", "S"],
    ["\u0172", "U"],
    ["\u016A", "U"],
    // Macedonian
    ["\u040C", "Kj"],
    ["\u045C", "kj"],
    ["\u0409", "Lj"],
    ["\u0459", "lj"],
    ["\u040A", "Nj"],
    ["\u045A", "nj"],
    ["\u0422\u0441", "Ts"],
    ["\u0442\u0441", "ts"],
    // Polish
    ["\u0105", "a"],
    ["\u0107", "c"],
    ["\u0119", "e"],
    ["\u0142", "l"],
    ["\u0144", "n"],
    ["\u015B", "s"],
    ["\u017A", "z"],
    ["\u017C", "z"],
    ["\u0104", "A"],
    ["\u0106", "C"],
    ["\u0118", "E"],
    ["\u0141", "L"],
    ["\u0143", "N"],
    ["\u015A", "S"],
    ["\u0179", "Z"],
    ["\u017B", "Z"],
    // Disabled as it conflicts with Vietnamese.
    // Serbian
    // ['љ', 'lj'],
    // ['њ', 'nj'],
    // ['Љ', 'Lj'],
    // ['Њ', 'Nj'],
    // ['đ', 'dj'],
    // ['Đ', 'Dj'],
    // ['ђ', 'dj'],
    // ['ј', 'j'],
    // ['ћ', 'c'],
    // ['џ', 'dz'],
    // ['Ђ', 'Dj'],
    // ['Ј', 'j'],
    // ['Ћ', 'C'],
    // ['Џ', 'Dz'],
    // Disabled as it conflicts with German and Latin.
    // Slovak
    // ['ä', 'a'],
    // ['Ä', 'A'],
    // ['ľ', 'l'],
    // ['ĺ', 'l'],
    // ['ŕ', 'r'],
    // ['Ľ', 'L'],
    // ['Ĺ', 'L'],
    // ['Ŕ', 'R'],
    // Disabled as it conflicts with German and Latin.
    // Swedish
    // ['å', 'o'],
    // ['Å', 'o'],
    // ['ä', 'a'],
    // ['Ä', 'A'],
    // ['ë', 'e'],
    // ['Ë', 'E'],
    // ['ö', 'o'],
    // ['Ö', 'O'],
    // Ukrainian
    ["\u0404", "Ye"],
    ["\u0406", "I"],
    ["\u0407", "Yi"],
    ["\u0490", "G"],
    ["\u0454", "ye"],
    ["\u0456", "i"],
    ["\u0457", "yi"],
    ["\u0491", "g"],
    // Dutch
    ["\u0132", "IJ"],
    ["\u0133", "ij"],
    // Danish
    // ['Æ', 'Ae'],
    // ['Ø', 'Oe'],
    // ['Å', 'Aa'],
    // ['æ', 'ae'],
    // ['ø', 'oe'],
    // ['å', 'aa']
    // Currencies
    ["\xA2", "c"],
    ["\xA5", "Y"],
    ["\u07FF", "b"],
    ["\u09F3", "t"],
    ["\u0AF1", "Bo"],
    ["\u0E3F", "B"],
    ["\u20A0", "CE"],
    ["\u20A1", "C"],
    ["\u20A2", "Cr"],
    ["\u20A3", "F"],
    ["\u20A5", "m"],
    ["\u20A6", "N"],
    ["\u20A7", "Pt"],
    ["\u20A8", "Rs"],
    ["\u20A9", "W"],
    ["\u20AB", "s"],
    ["\u20AC", "E"],
    ["\u20AD", "K"],
    ["\u20AE", "T"],
    ["\u20AF", "Dp"],
    ["\u20B0", "S"],
    ["\u20B1", "P"],
    ["\u20B2", "G"],
    ["\u20B3", "A"],
    ["\u20B4", "S"],
    ["\u20B5", "C"],
    ["\u20B6", "tt"],
    ["\u20B7", "S"],
    ["\u20B8", "T"],
    ["\u20B9", "R"],
    ["\u20BA", "L"],
    ["\u20BD", "P"],
    ["\u20BF", "B"],
    ["\uFE69", "$"],
    ["\uFFE0", "c"],
    ["\uFFE5", "Y"],
    ["\uFFE6", "W"],
    // Latin
    ["\u{1D400}", "A"],
    ["\u{1D401}", "B"],
    ["\u{1D402}", "C"],
    ["\u{1D403}", "D"],
    ["\u{1D404}", "E"],
    ["\u{1D405}", "F"],
    ["\u{1D406}", "G"],
    ["\u{1D407}", "H"],
    ["\u{1D408}", "I"],
    ["\u{1D409}", "J"],
    ["\u{1D40A}", "K"],
    ["\u{1D40B}", "L"],
    ["\u{1D40C}", "M"],
    ["\u{1D40D}", "N"],
    ["\u{1D40E}", "O"],
    ["\u{1D40F}", "P"],
    ["\u{1D410}", "Q"],
    ["\u{1D411}", "R"],
    ["\u{1D412}", "S"],
    ["\u{1D413}", "T"],
    ["\u{1D414}", "U"],
    ["\u{1D415}", "V"],
    ["\u{1D416}", "W"],
    ["\u{1D417}", "X"],
    ["\u{1D418}", "Y"],
    ["\u{1D419}", "Z"],
    ["\u{1D41A}", "a"],
    ["\u{1D41B}", "b"],
    ["\u{1D41C}", "c"],
    ["\u{1D41D}", "d"],
    ["\u{1D41E}", "e"],
    ["\u{1D41F}", "f"],
    ["\u{1D420}", "g"],
    ["\u{1D421}", "h"],
    ["\u{1D422}", "i"],
    ["\u{1D423}", "j"],
    ["\u{1D424}", "k"],
    ["\u{1D425}", "l"],
    ["\u{1D426}", "m"],
    ["\u{1D427}", "n"],
    ["\u{1D428}", "o"],
    ["\u{1D429}", "p"],
    ["\u{1D42A}", "q"],
    ["\u{1D42B}", "r"],
    ["\u{1D42C}", "s"],
    ["\u{1D42D}", "t"],
    ["\u{1D42E}", "u"],
    ["\u{1D42F}", "v"],
    ["\u{1D430}", "w"],
    ["\u{1D431}", "x"],
    ["\u{1D432}", "y"],
    ["\u{1D433}", "z"],
    ["\u{1D434}", "A"],
    ["\u{1D435}", "B"],
    ["\u{1D436}", "C"],
    ["\u{1D437}", "D"],
    ["\u{1D438}", "E"],
    ["\u{1D439}", "F"],
    ["\u{1D43A}", "G"],
    ["\u{1D43B}", "H"],
    ["\u{1D43C}", "I"],
    ["\u{1D43D}", "J"],
    ["\u{1D43E}", "K"],
    ["\u{1D43F}", "L"],
    ["\u{1D440}", "M"],
    ["\u{1D441}", "N"],
    ["\u{1D442}", "O"],
    ["\u{1D443}", "P"],
    ["\u{1D444}", "Q"],
    ["\u{1D445}", "R"],
    ["\u{1D446}", "S"],
    ["\u{1D447}", "T"],
    ["\u{1D448}", "U"],
    ["\u{1D449}", "V"],
    ["\u{1D44A}", "W"],
    ["\u{1D44B}", "X"],
    ["\u{1D44C}", "Y"],
    ["\u{1D44D}", "Z"],
    ["\u{1D44E}", "a"],
    ["\u{1D44F}", "b"],
    ["\u{1D450}", "c"],
    ["\u{1D451}", "d"],
    ["\u{1D452}", "e"],
    ["\u{1D453}", "f"],
    ["\u{1D454}", "g"],
    ["\u{1D456}", "i"],
    ["\u{1D457}", "j"],
    ["\u{1D458}", "k"],
    ["\u{1D459}", "l"],
    ["\u{1D45A}", "m"],
    ["\u{1D45B}", "n"],
    ["\u{1D45C}", "o"],
    ["\u{1D45D}", "p"],
    ["\u{1D45E}", "q"],
    ["\u{1D45F}", "r"],
    ["\u{1D460}", "s"],
    ["\u{1D461}", "t"],
    ["\u{1D462}", "u"],
    ["\u{1D463}", "v"],
    ["\u{1D464}", "w"],
    ["\u{1D465}", "x"],
    ["\u{1D466}", "y"],
    ["\u{1D467}", "z"],
    ["\u{1D468}", "A"],
    ["\u{1D469}", "B"],
    ["\u{1D46A}", "C"],
    ["\u{1D46B}", "D"],
    ["\u{1D46C}", "E"],
    ["\u{1D46D}", "F"],
    ["\u{1D46E}", "G"],
    ["\u{1D46F}", "H"],
    ["\u{1D470}", "I"],
    ["\u{1D471}", "J"],
    ["\u{1D472}", "K"],
    ["\u{1D473}", "L"],
    ["\u{1D474}", "M"],
    ["\u{1D475}", "N"],
    ["\u{1D476}", "O"],
    ["\u{1D477}", "P"],
    ["\u{1D478}", "Q"],
    ["\u{1D479}", "R"],
    ["\u{1D47A}", "S"],
    ["\u{1D47B}", "T"],
    ["\u{1D47C}", "U"],
    ["\u{1D47D}", "V"],
    ["\u{1D47E}", "W"],
    ["\u{1D47F}", "X"],
    ["\u{1D480}", "Y"],
    ["\u{1D481}", "Z"],
    ["\u{1D482}", "a"],
    ["\u{1D483}", "b"],
    ["\u{1D484}", "c"],
    ["\u{1D485}", "d"],
    ["\u{1D486}", "e"],
    ["\u{1D487}", "f"],
    ["\u{1D488}", "g"],
    ["\u{1D489}", "h"],
    ["\u{1D48A}", "i"],
    ["\u{1D48B}", "j"],
    ["\u{1D48C}", "k"],
    ["\u{1D48D}", "l"],
    ["\u{1D48E}", "m"],
    ["\u{1D48F}", "n"],
    ["\u{1D490}", "o"],
    ["\u{1D491}", "p"],
    ["\u{1D492}", "q"],
    ["\u{1D493}", "r"],
    ["\u{1D494}", "s"],
    ["\u{1D495}", "t"],
    ["\u{1D496}", "u"],
    ["\u{1D497}", "v"],
    ["\u{1D498}", "w"],
    ["\u{1D499}", "x"],
    ["\u{1D49A}", "y"],
    ["\u{1D49B}", "z"],
    ["\u{1D49C}", "A"],
    ["\u{1D49E}", "C"],
    ["\u{1D49F}", "D"],
    ["\u{1D4A2}", "g"],
    ["\u{1D4A5}", "J"],
    ["\u{1D4A6}", "K"],
    ["\u{1D4A9}", "N"],
    ["\u{1D4AA}", "O"],
    ["\u{1D4AB}", "P"],
    ["\u{1D4AC}", "Q"],
    ["\u{1D4AE}", "S"],
    ["\u{1D4AF}", "T"],
    ["\u{1D4B0}", "U"],
    ["\u{1D4B1}", "V"],
    ["\u{1D4B2}", "W"],
    ["\u{1D4B3}", "X"],
    ["\u{1D4B4}", "Y"],
    ["\u{1D4B5}", "Z"],
    ["\u{1D4B6}", "a"],
    ["\u{1D4B7}", "b"],
    ["\u{1D4B8}", "c"],
    ["\u{1D4B9}", "d"],
    ["\u{1D4BB}", "f"],
    ["\u{1D4BD}", "h"],
    ["\u{1D4BE}", "i"],
    ["\u{1D4BF}", "j"],
    ["\u{1D4C0}", "h"],
    ["\u{1D4C1}", "l"],
    ["\u{1D4C2}", "m"],
    ["\u{1D4C3}", "n"],
    ["\u{1D4C5}", "p"],
    ["\u{1D4C6}", "q"],
    ["\u{1D4C7}", "r"],
    ["\u{1D4C8}", "s"],
    ["\u{1D4C9}", "t"],
    ["\u{1D4CA}", "u"],
    ["\u{1D4CB}", "v"],
    ["\u{1D4CC}", "w"],
    ["\u{1D4CD}", "x"],
    ["\u{1D4CE}", "y"],
    ["\u{1D4CF}", "z"],
    ["\u{1D4D0}", "A"],
    ["\u{1D4D1}", "B"],
    ["\u{1D4D2}", "C"],
    ["\u{1D4D3}", "D"],
    ["\u{1D4D4}", "E"],
    ["\u{1D4D5}", "F"],
    ["\u{1D4D6}", "G"],
    ["\u{1D4D7}", "H"],
    ["\u{1D4D8}", "I"],
    ["\u{1D4D9}", "J"],
    ["\u{1D4DA}", "K"],
    ["\u{1D4DB}", "L"],
    ["\u{1D4DC}", "M"],
    ["\u{1D4DD}", "N"],
    ["\u{1D4DE}", "O"],
    ["\u{1D4DF}", "P"],
    ["\u{1D4E0}", "Q"],
    ["\u{1D4E1}", "R"],
    ["\u{1D4E2}", "S"],
    ["\u{1D4E3}", "T"],
    ["\u{1D4E4}", "U"],
    ["\u{1D4E5}", "V"],
    ["\u{1D4E6}", "W"],
    ["\u{1D4E7}", "X"],
    ["\u{1D4E8}", "Y"],
    ["\u{1D4E9}", "Z"],
    ["\u{1D4EA}", "a"],
    ["\u{1D4EB}", "b"],
    ["\u{1D4EC}", "c"],
    ["\u{1D4ED}", "d"],
    ["\u{1D4EE}", "e"],
    ["\u{1D4EF}", "f"],
    ["\u{1D4F0}", "g"],
    ["\u{1D4F1}", "h"],
    ["\u{1D4F2}", "i"],
    ["\u{1D4F3}", "j"],
    ["\u{1D4F4}", "k"],
    ["\u{1D4F5}", "l"],
    ["\u{1D4F6}", "m"],
    ["\u{1D4F7}", "n"],
    ["\u{1D4F8}", "o"],
    ["\u{1D4F9}", "p"],
    ["\u{1D4FA}", "q"],
    ["\u{1D4FB}", "r"],
    ["\u{1D4FC}", "s"],
    ["\u{1D4FD}", "t"],
    ["\u{1D4FE}", "u"],
    ["\u{1D4FF}", "v"],
    ["\u{1D500}", "w"],
    ["\u{1D501}", "x"],
    ["\u{1D502}", "y"],
    ["\u{1D503}", "z"],
    ["\u{1D504}", "A"],
    ["\u{1D505}", "B"],
    ["\u{1D507}", "D"],
    ["\u{1D508}", "E"],
    ["\u{1D509}", "F"],
    ["\u{1D50A}", "G"],
    ["\u{1D50D}", "J"],
    ["\u{1D50E}", "K"],
    ["\u{1D50F}", "L"],
    ["\u{1D510}", "M"],
    ["\u{1D511}", "N"],
    ["\u{1D512}", "O"],
    ["\u{1D513}", "P"],
    ["\u{1D514}", "Q"],
    ["\u{1D516}", "S"],
    ["\u{1D517}", "T"],
    ["\u{1D518}", "U"],
    ["\u{1D519}", "V"],
    ["\u{1D51A}", "W"],
    ["\u{1D51B}", "X"],
    ["\u{1D51C}", "Y"],
    ["\u{1D51E}", "a"],
    ["\u{1D51F}", "b"],
    ["\u{1D520}", "c"],
    ["\u{1D521}", "d"],
    ["\u{1D522}", "e"],
    ["\u{1D523}", "f"],
    ["\u{1D524}", "g"],
    ["\u{1D525}", "h"],
    ["\u{1D526}", "i"],
    ["\u{1D527}", "j"],
    ["\u{1D528}", "k"],
    ["\u{1D529}", "l"],
    ["\u{1D52A}", "m"],
    ["\u{1D52B}", "n"],
    ["\u{1D52C}", "o"],
    ["\u{1D52D}", "p"],
    ["\u{1D52E}", "q"],
    ["\u{1D52F}", "r"],
    ["\u{1D530}", "s"],
    ["\u{1D531}", "t"],
    ["\u{1D532}", "u"],
    ["\u{1D533}", "v"],
    ["\u{1D534}", "w"],
    ["\u{1D535}", "x"],
    ["\u{1D536}", "y"],
    ["\u{1D537}", "z"],
    ["\u{1D538}", "A"],
    ["\u{1D539}", "B"],
    ["\u{1D53B}", "D"],
    ["\u{1D53C}", "E"],
    ["\u{1D53D}", "F"],
    ["\u{1D53E}", "G"],
    ["\u{1D540}", "I"],
    ["\u{1D541}", "J"],
    ["\u{1D542}", "K"],
    ["\u{1D543}", "L"],
    ["\u{1D544}", "M"],
    ["\u{1D546}", "N"],
    ["\u{1D54A}", "S"],
    ["\u{1D54B}", "T"],
    ["\u{1D54C}", "U"],
    ["\u{1D54D}", "V"],
    ["\u{1D54E}", "W"],
    ["\u{1D54F}", "X"],
    ["\u{1D550}", "Y"],
    ["\u{1D552}", "a"],
    ["\u{1D553}", "b"],
    ["\u{1D554}", "c"],
    ["\u{1D555}", "d"],
    ["\u{1D556}", "e"],
    ["\u{1D557}", "f"],
    ["\u{1D558}", "g"],
    ["\u{1D559}", "h"],
    ["\u{1D55A}", "i"],
    ["\u{1D55B}", "j"],
    ["\u{1D55C}", "k"],
    ["\u{1D55D}", "l"],
    ["\u{1D55E}", "m"],
    ["\u{1D55F}", "n"],
    ["\u{1D560}", "o"],
    ["\u{1D561}", "p"],
    ["\u{1D562}", "q"],
    ["\u{1D563}", "r"],
    ["\u{1D564}", "s"],
    ["\u{1D565}", "t"],
    ["\u{1D566}", "u"],
    ["\u{1D567}", "v"],
    ["\u{1D568}", "w"],
    ["\u{1D569}", "x"],
    ["\u{1D56A}", "y"],
    ["\u{1D56B}", "z"],
    ["\u{1D56C}", "A"],
    ["\u{1D56D}", "B"],
    ["\u{1D56E}", "C"],
    ["\u{1D56F}", "D"],
    ["\u{1D570}", "E"],
    ["\u{1D571}", "F"],
    ["\u{1D572}", "G"],
    ["\u{1D573}", "H"],
    ["\u{1D574}", "I"],
    ["\u{1D575}", "J"],
    ["\u{1D576}", "K"],
    ["\u{1D577}", "L"],
    ["\u{1D578}", "M"],
    ["\u{1D579}", "N"],
    ["\u{1D57A}", "O"],
    ["\u{1D57B}", "P"],
    ["\u{1D57C}", "Q"],
    ["\u{1D57D}", "R"],
    ["\u{1D57E}", "S"],
    ["\u{1D57F}", "T"],
    ["\u{1D580}", "U"],
    ["\u{1D581}", "V"],
    ["\u{1D582}", "W"],
    ["\u{1D583}", "X"],
    ["\u{1D584}", "Y"],
    ["\u{1D585}", "Z"],
    ["\u{1D586}", "a"],
    ["\u{1D587}", "b"],
    ["\u{1D588}", "c"],
    ["\u{1D589}", "d"],
    ["\u{1D58A}", "e"],
    ["\u{1D58B}", "f"],
    ["\u{1D58C}", "g"],
    ["\u{1D58D}", "h"],
    ["\u{1D58E}", "i"],
    ["\u{1D58F}", "j"],
    ["\u{1D590}", "k"],
    ["\u{1D591}", "l"],
    ["\u{1D592}", "m"],
    ["\u{1D593}", "n"],
    ["\u{1D594}", "o"],
    ["\u{1D595}", "p"],
    ["\u{1D596}", "q"],
    ["\u{1D597}", "r"],
    ["\u{1D598}", "s"],
    ["\u{1D599}", "t"],
    ["\u{1D59A}", "u"],
    ["\u{1D59B}", "v"],
    ["\u{1D59C}", "w"],
    ["\u{1D59D}", "x"],
    ["\u{1D59E}", "y"],
    ["\u{1D59F}", "z"],
    ["\u{1D5A0}", "A"],
    ["\u{1D5A1}", "B"],
    ["\u{1D5A2}", "C"],
    ["\u{1D5A3}", "D"],
    ["\u{1D5A4}", "E"],
    ["\u{1D5A5}", "F"],
    ["\u{1D5A6}", "G"],
    ["\u{1D5A7}", "H"],
    ["\u{1D5A8}", "I"],
    ["\u{1D5A9}", "J"],
    ["\u{1D5AA}", "K"],
    ["\u{1D5AB}", "L"],
    ["\u{1D5AC}", "M"],
    ["\u{1D5AD}", "N"],
    ["\u{1D5AE}", "O"],
    ["\u{1D5AF}", "P"],
    ["\u{1D5B0}", "Q"],
    ["\u{1D5B1}", "R"],
    ["\u{1D5B2}", "S"],
    ["\u{1D5B3}", "T"],
    ["\u{1D5B4}", "U"],
    ["\u{1D5B5}", "V"],
    ["\u{1D5B6}", "W"],
    ["\u{1D5B7}", "X"],
    ["\u{1D5B8}", "Y"],
    ["\u{1D5B9}", "Z"],
    ["\u{1D5BA}", "a"],
    ["\u{1D5BB}", "b"],
    ["\u{1D5BC}", "c"],
    ["\u{1D5BD}", "d"],
    ["\u{1D5BE}", "e"],
    ["\u{1D5BF}", "f"],
    ["\u{1D5C0}", "g"],
    ["\u{1D5C1}", "h"],
    ["\u{1D5C2}", "i"],
    ["\u{1D5C3}", "j"],
    ["\u{1D5C4}", "k"],
    ["\u{1D5C5}", "l"],
    ["\u{1D5C6}", "m"],
    ["\u{1D5C7}", "n"],
    ["\u{1D5C8}", "o"],
    ["\u{1D5C9}", "p"],
    ["\u{1D5CA}", "q"],
    ["\u{1D5CB}", "r"],
    ["\u{1D5CC}", "s"],
    ["\u{1D5CD}", "t"],
    ["\u{1D5CE}", "u"],
    ["\u{1D5CF}", "v"],
    ["\u{1D5D0}", "w"],
    ["\u{1D5D1}", "x"],
    ["\u{1D5D2}", "y"],
    ["\u{1D5D3}", "z"],
    ["\u{1D5D4}", "A"],
    ["\u{1D5D5}", "B"],
    ["\u{1D5D6}", "C"],
    ["\u{1D5D7}", "D"],
    ["\u{1D5D8}", "E"],
    ["\u{1D5D9}", "F"],
    ["\u{1D5DA}", "G"],
    ["\u{1D5DB}", "H"],
    ["\u{1D5DC}", "I"],
    ["\u{1D5DD}", "J"],
    ["\u{1D5DE}", "K"],
    ["\u{1D5DF}", "L"],
    ["\u{1D5E0}", "M"],
    ["\u{1D5E1}", "N"],
    ["\u{1D5E2}", "O"],
    ["\u{1D5E3}", "P"],
    ["\u{1D5E4}", "Q"],
    ["\u{1D5E5}", "R"],
    ["\u{1D5E6}", "S"],
    ["\u{1D5E7}", "T"],
    ["\u{1D5E8}", "U"],
    ["\u{1D5E9}", "V"],
    ["\u{1D5EA}", "W"],
    ["\u{1D5EB}", "X"],
    ["\u{1D5EC}", "Y"],
    ["\u{1D5ED}", "Z"],
    ["\u{1D5EE}", "a"],
    ["\u{1D5EF}", "b"],
    ["\u{1D5F0}", "c"],
    ["\u{1D5F1}", "d"],
    ["\u{1D5F2}", "e"],
    ["\u{1D5F3}", "f"],
    ["\u{1D5F4}", "g"],
    ["\u{1D5F5}", "h"],
    ["\u{1D5F6}", "i"],
    ["\u{1D5F7}", "j"],
    ["\u{1D5F8}", "k"],
    ["\u{1D5F9}", "l"],
    ["\u{1D5FA}", "m"],
    ["\u{1D5FB}", "n"],
    ["\u{1D5FC}", "o"],
    ["\u{1D5FD}", "p"],
    ["\u{1D5FE}", "q"],
    ["\u{1D5FF}", "r"],
    ["\u{1D600}", "s"],
    ["\u{1D601}", "t"],
    ["\u{1D602}", "u"],
    ["\u{1D603}", "v"],
    ["\u{1D604}", "w"],
    ["\u{1D605}", "x"],
    ["\u{1D606}", "y"],
    ["\u{1D607}", "z"],
    ["\u{1D608}", "A"],
    ["\u{1D609}", "B"],
    ["\u{1D60A}", "C"],
    ["\u{1D60B}", "D"],
    ["\u{1D60C}", "E"],
    ["\u{1D60D}", "F"],
    ["\u{1D60E}", "G"],
    ["\u{1D60F}", "H"],
    ["\u{1D610}", "I"],
    ["\u{1D611}", "J"],
    ["\u{1D612}", "K"],
    ["\u{1D613}", "L"],
    ["\u{1D614}", "M"],
    ["\u{1D615}", "N"],
    ["\u{1D616}", "O"],
    ["\u{1D617}", "P"],
    ["\u{1D618}", "Q"],
    ["\u{1D619}", "R"],
    ["\u{1D61A}", "S"],
    ["\u{1D61B}", "T"],
    ["\u{1D61C}", "U"],
    ["\u{1D61D}", "V"],
    ["\u{1D61E}", "W"],
    ["\u{1D61F}", "X"],
    ["\u{1D620}", "Y"],
    ["\u{1D621}", "Z"],
    ["\u{1D622}", "a"],
    ["\u{1D623}", "b"],
    ["\u{1D624}", "c"],
    ["\u{1D625}", "d"],
    ["\u{1D626}", "e"],
    ["\u{1D627}", "f"],
    ["\u{1D628}", "g"],
    ["\u{1D629}", "h"],
    ["\u{1D62A}", "i"],
    ["\u{1D62B}", "j"],
    ["\u{1D62C}", "k"],
    ["\u{1D62D}", "l"],
    ["\u{1D62E}", "m"],
    ["\u{1D62F}", "n"],
    ["\u{1D630}", "o"],
    ["\u{1D631}", "p"],
    ["\u{1D632}", "q"],
    ["\u{1D633}", "r"],
    ["\u{1D634}", "s"],
    ["\u{1D635}", "t"],
    ["\u{1D636}", "u"],
    ["\u{1D637}", "v"],
    ["\u{1D638}", "w"],
    ["\u{1D639}", "x"],
    ["\u{1D63A}", "y"],
    ["\u{1D63B}", "z"],
    ["\u{1D63C}", "A"],
    ["\u{1D63D}", "B"],
    ["\u{1D63E}", "C"],
    ["\u{1D63F}", "D"],
    ["\u{1D640}", "E"],
    ["\u{1D641}", "F"],
    ["\u{1D642}", "G"],
    ["\u{1D643}", "H"],
    ["\u{1D644}", "I"],
    ["\u{1D645}", "J"],
    ["\u{1D646}", "K"],
    ["\u{1D647}", "L"],
    ["\u{1D648}", "M"],
    ["\u{1D649}", "N"],
    ["\u{1D64A}", "O"],
    ["\u{1D64B}", "P"],
    ["\u{1D64C}", "Q"],
    ["\u{1D64D}", "R"],
    ["\u{1D64E}", "S"],
    ["\u{1D64F}", "T"],
    ["\u{1D650}", "U"],
    ["\u{1D651}", "V"],
    ["\u{1D652}", "W"],
    ["\u{1D653}", "X"],
    ["\u{1D654}", "Y"],
    ["\u{1D655}", "Z"],
    ["\u{1D656}", "a"],
    ["\u{1D657}", "b"],
    ["\u{1D658}", "c"],
    ["\u{1D659}", "d"],
    ["\u{1D65A}", "e"],
    ["\u{1D65B}", "f"],
    ["\u{1D65C}", "g"],
    ["\u{1D65D}", "h"],
    ["\u{1D65E}", "i"],
    ["\u{1D65F}", "j"],
    ["\u{1D660}", "k"],
    ["\u{1D661}", "l"],
    ["\u{1D662}", "m"],
    ["\u{1D663}", "n"],
    ["\u{1D664}", "o"],
    ["\u{1D665}", "p"],
    ["\u{1D666}", "q"],
    ["\u{1D667}", "r"],
    ["\u{1D668}", "s"],
    ["\u{1D669}", "t"],
    ["\u{1D66A}", "u"],
    ["\u{1D66B}", "v"],
    ["\u{1D66C}", "w"],
    ["\u{1D66D}", "x"],
    ["\u{1D66E}", "y"],
    ["\u{1D66F}", "z"],
    ["\u{1D670}", "A"],
    ["\u{1D671}", "B"],
    ["\u{1D672}", "C"],
    ["\u{1D673}", "D"],
    ["\u{1D674}", "E"],
    ["\u{1D675}", "F"],
    ["\u{1D676}", "G"],
    ["\u{1D677}", "H"],
    ["\u{1D678}", "I"],
    ["\u{1D679}", "J"],
    ["\u{1D67A}", "K"],
    ["\u{1D67B}", "L"],
    ["\u{1D67C}", "M"],
    ["\u{1D67D}", "N"],
    ["\u{1D67E}", "O"],
    ["\u{1D67F}", "P"],
    ["\u{1D680}", "Q"],
    ["\u{1D681}", "R"],
    ["\u{1D682}", "S"],
    ["\u{1D683}", "T"],
    ["\u{1D684}", "U"],
    ["\u{1D685}", "V"],
    ["\u{1D686}", "W"],
    ["\u{1D687}", "X"],
    ["\u{1D688}", "Y"],
    ["\u{1D689}", "Z"],
    ["\u{1D68A}", "a"],
    ["\u{1D68B}", "b"],
    ["\u{1D68C}", "c"],
    ["\u{1D68D}", "d"],
    ["\u{1D68E}", "e"],
    ["\u{1D68F}", "f"],
    ["\u{1D690}", "g"],
    ["\u{1D691}", "h"],
    ["\u{1D692}", "i"],
    ["\u{1D693}", "j"],
    ["\u{1D694}", "k"],
    ["\u{1D695}", "l"],
    ["\u{1D696}", "m"],
    ["\u{1D697}", "n"],
    ["\u{1D698}", "o"],
    ["\u{1D699}", "p"],
    ["\u{1D69A}", "q"],
    ["\u{1D69B}", "r"],
    ["\u{1D69C}", "s"],
    ["\u{1D69D}", "t"],
    ["\u{1D69E}", "u"],
    ["\u{1D69F}", "v"],
    ["\u{1D6A0}", "w"],
    ["\u{1D6A1}", "x"],
    ["\u{1D6A2}", "y"],
    ["\u{1D6A3}", "z"],
    // Dotless letters
    ["\u{1D6A4}", "l"],
    ["\u{1D6A5}", "j"],
    // Greek
    ["\u{1D6E2}", "A"],
    ["\u{1D6E3}", "B"],
    ["\u{1D6E4}", "G"],
    ["\u{1D6E5}", "D"],
    ["\u{1D6E6}", "E"],
    ["\u{1D6E7}", "Z"],
    ["\u{1D6E8}", "I"],
    ["\u{1D6E9}", "TH"],
    ["\u{1D6EA}", "I"],
    ["\u{1D6EB}", "K"],
    ["\u{1D6EC}", "L"],
    ["\u{1D6ED}", "M"],
    ["\u{1D6EE}", "N"],
    ["\u{1D6EF}", "KS"],
    ["\u{1D6F0}", "O"],
    ["\u{1D6F1}", "P"],
    ["\u{1D6F2}", "R"],
    ["\u{1D6F3}", "TH"],
    ["\u{1D6F4}", "S"],
    ["\u{1D6F5}", "T"],
    ["\u{1D6F6}", "Y"],
    ["\u{1D6F7}", "F"],
    ["\u{1D6F8}", "x"],
    ["\u{1D6F9}", "PS"],
    ["\u{1D6FA}", "O"],
    ["\u{1D6FB}", "D"],
    ["\u{1D6FC}", "a"],
    ["\u{1D6FD}", "b"],
    ["\u{1D6FE}", "g"],
    ["\u{1D6FF}", "d"],
    ["\u{1D700}", "e"],
    ["\u{1D701}", "z"],
    ["\u{1D702}", "i"],
    ["\u{1D703}", "th"],
    ["\u{1D704}", "i"],
    ["\u{1D705}", "k"],
    ["\u{1D706}", "l"],
    ["\u{1D707}", "m"],
    ["\u{1D708}", "n"],
    ["\u{1D709}", "ks"],
    ["\u{1D70A}", "o"],
    ["\u{1D70B}", "p"],
    ["\u{1D70C}", "r"],
    ["\u{1D70D}", "s"],
    ["\u{1D70E}", "s"],
    ["\u{1D70F}", "t"],
    ["\u{1D710}", "y"],
    ["\u{1D711}", "f"],
    ["\u{1D712}", "x"],
    ["\u{1D713}", "ps"],
    ["\u{1D714}", "o"],
    ["\u{1D715}", "d"],
    ["\u{1D716}", "E"],
    ["\u{1D717}", "TH"],
    ["\u{1D718}", "K"],
    ["\u{1D719}", "f"],
    ["\u{1D71A}", "r"],
    ["\u{1D71B}", "p"],
    ["\u{1D71C}", "A"],
    ["\u{1D71D}", "V"],
    ["\u{1D71E}", "G"],
    ["\u{1D71F}", "D"],
    ["\u{1D720}", "E"],
    ["\u{1D721}", "Z"],
    ["\u{1D722}", "I"],
    ["\u{1D723}", "TH"],
    ["\u{1D724}", "I"],
    ["\u{1D725}", "K"],
    ["\u{1D726}", "L"],
    ["\u{1D727}", "M"],
    ["\u{1D728}", "N"],
    ["\u{1D729}", "KS"],
    ["\u{1D72A}", "O"],
    ["\u{1D72B}", "P"],
    ["\u{1D72C}", "S"],
    ["\u{1D72D}", "TH"],
    ["\u{1D72E}", "S"],
    ["\u{1D72F}", "T"],
    ["\u{1D730}", "Y"],
    ["\u{1D731}", "F"],
    ["\u{1D732}", "X"],
    ["\u{1D733}", "PS"],
    ["\u{1D734}", "O"],
    ["\u{1D735}", "D"],
    ["\u{1D736}", "a"],
    ["\u{1D737}", "v"],
    ["\u{1D738}", "g"],
    ["\u{1D739}", "d"],
    ["\u{1D73A}", "e"],
    ["\u{1D73B}", "z"],
    ["\u{1D73C}", "i"],
    ["\u{1D73D}", "th"],
    ["\u{1D73E}", "i"],
    ["\u{1D73F}", "k"],
    ["\u{1D740}", "l"],
    ["\u{1D741}", "m"],
    ["\u{1D742}", "n"],
    ["\u{1D743}", "ks"],
    ["\u{1D744}", "o"],
    ["\u{1D745}", "p"],
    ["\u{1D746}", "r"],
    ["\u{1D747}", "s"],
    ["\u{1D748}", "s"],
    ["\u{1D749}", "t"],
    ["\u{1D74A}", "y"],
    ["\u{1D74B}", "f"],
    ["\u{1D74C}", "x"],
    ["\u{1D74D}", "ps"],
    ["\u{1D74E}", "o"],
    ["\u{1D74F}", "a"],
    ["\u{1D750}", "e"],
    ["\u{1D751}", "i"],
    ["\u{1D752}", "k"],
    ["\u{1D753}", "f"],
    ["\u{1D754}", "r"],
    ["\u{1D755}", "p"],
    ["\u{1D756}", "A"],
    ["\u{1D757}", "B"],
    ["\u{1D758}", "G"],
    ["\u{1D759}", "D"],
    ["\u{1D75A}", "E"],
    ["\u{1D75B}", "Z"],
    ["\u{1D75C}", "I"],
    ["\u{1D75D}", "TH"],
    ["\u{1D75E}", "I"],
    ["\u{1D75F}", "K"],
    ["\u{1D760}", "L"],
    ["\u{1D761}", "M"],
    ["\u{1D762}", "N"],
    ["\u{1D763}", "KS"],
    ["\u{1D764}", "O"],
    ["\u{1D765}", "P"],
    ["\u{1D766}", "R"],
    ["\u{1D767}", "TH"],
    ["\u{1D768}", "S"],
    ["\u{1D769}", "T"],
    ["\u{1D76A}", "Y"],
    ["\u{1D76B}", "F"],
    ["\u{1D76C}", "X"],
    ["\u{1D76D}", "PS"],
    ["\u{1D76E}", "O"],
    ["\u{1D76F}", "D"],
    ["\u{1D770}", "a"],
    ["\u{1D771}", "v"],
    ["\u{1D772}", "g"],
    ["\u{1D773}", "d"],
    ["\u{1D774}", "e"],
    ["\u{1D775}", "z"],
    ["\u{1D776}", "i"],
    ["\u{1D777}", "th"],
    ["\u{1D778}", "i"],
    ["\u{1D779}", "k"],
    ["\u{1D77A}", "l"],
    ["\u{1D77B}", "m"],
    ["\u{1D77C}", "n"],
    ["\u{1D77D}", "ks"],
    ["\u{1D77E}", "o"],
    ["\u{1D77F}", "p"],
    ["\u{1D780}", "r"],
    ["\u{1D781}", "s"],
    ["\u{1D782}", "s"],
    ["\u{1D783}", "t"],
    ["\u{1D784}", "y"],
    ["\u{1D785}", "f"],
    ["\u{1D786}", "x"],
    ["\u{1D787}", "ps"],
    ["\u{1D788}", "o"],
    ["\u{1D789}", "a"],
    ["\u{1D78A}", "e"],
    ["\u{1D78B}", "i"],
    ["\u{1D78C}", "k"],
    ["\u{1D78D}", "f"],
    ["\u{1D78E}", "r"],
    ["\u{1D78F}", "p"],
    ["\u{1D790}", "A"],
    ["\u{1D791}", "V"],
    ["\u{1D792}", "G"],
    ["\u{1D793}", "D"],
    ["\u{1D794}", "E"],
    ["\u{1D795}", "Z"],
    ["\u{1D796}", "I"],
    ["\u{1D797}", "TH"],
    ["\u{1D798}", "I"],
    ["\u{1D799}", "K"],
    ["\u{1D79A}", "L"],
    ["\u{1D79B}", "M"],
    ["\u{1D79C}", "N"],
    ["\u{1D79D}", "KS"],
    ["\u{1D79E}", "O"],
    ["\u{1D79F}", "P"],
    ["\u{1D7A0}", "S"],
    ["\u{1D7A1}", "TH"],
    ["\u{1D7A2}", "S"],
    ["\u{1D7A3}", "T"],
    ["\u{1D7A4}", "Y"],
    ["\u{1D7A5}", "F"],
    ["\u{1D7A6}", "X"],
    ["\u{1D7A7}", "PS"],
    ["\u{1D7A8}", "O"],
    ["\u{1D7A9}", "D"],
    ["\u{1D7AA}", "av"],
    ["\u{1D7AB}", "g"],
    ["\u{1D7AC}", "d"],
    ["\u{1D7AD}", "e"],
    ["\u{1D7AE}", "z"],
    ["\u{1D7AF}", "i"],
    ["\u{1D7B0}", "i"],
    ["\u{1D7B1}", "th"],
    ["\u{1D7B2}", "i"],
    ["\u{1D7B3}", "k"],
    ["\u{1D7B4}", "l"],
    ["\u{1D7B5}", "m"],
    ["\u{1D7B6}", "n"],
    ["\u{1D7B7}", "ks"],
    ["\u{1D7B8}", "o"],
    ["\u{1D7B9}", "p"],
    ["\u{1D7BA}", "r"],
    ["\u{1D7BB}", "s"],
    ["\u{1D7BC}", "s"],
    ["\u{1D7BD}", "t"],
    ["\u{1D7BE}", "y"],
    ["\u{1D7BF}", "f"],
    ["\u{1D7C0}", "x"],
    ["\u{1D7C1}", "ps"],
    ["\u{1D7C2}", "o"],
    ["\u{1D7C3}", "a"],
    ["\u{1D7C4}", "e"],
    ["\u{1D7C5}", "i"],
    ["\u{1D7C6}", "k"],
    ["\u{1D7C7}", "f"],
    ["\u{1D7C8}", "r"],
    ["\u{1D7C9}", "p"],
    ["\u{1D7CA}", "F"],
    ["\u{1D7CB}", "f"],
    ["\u249C", "(a)"],
    ["\u249D", "(b)"],
    ["\u249E", "(c)"],
    ["\u249F", "(d)"],
    ["\u24A0", "(e)"],
    ["\u24A1", "(f)"],
    ["\u24A2", "(g)"],
    ["\u24A3", "(h)"],
    ["\u24A4", "(i)"],
    ["\u24A5", "(j)"],
    ["\u24A6", "(k)"],
    ["\u24A7", "(l)"],
    ["\u24A8", "(m)"],
    ["\u24A9", "(n)"],
    ["\u24AA", "(o)"],
    ["\u24AB", "(p)"],
    ["\u24AC", "(q)"],
    ["\u24AD", "(r)"],
    ["\u24AE", "(s)"],
    ["\u24AF", "(t)"],
    ["\u24B0", "(u)"],
    ["\u24B1", "(v)"],
    ["\u24B2", "(w)"],
    ["\u24B3", "(x)"],
    ["\u24B4", "(y)"],
    ["\u24B5", "(z)"],
    ["\u24B6", "(A)"],
    ["\u24B7", "(B)"],
    ["\u24B8", "(C)"],
    ["\u24B9", "(D)"],
    ["\u24BA", "(E)"],
    ["\u24BB", "(F)"],
    ["\u24BC", "(G)"],
    ["\u24BD", "(H)"],
    ["\u24BE", "(I)"],
    ["\u24BF", "(J)"],
    ["\u24C0", "(K)"],
    ["\u24C1", "(L)"],
    ["\u24C3", "(N)"],
    ["\u24C4", "(O)"],
    ["\u24C5", "(P)"],
    ["\u24C6", "(Q)"],
    ["\u24C7", "(R)"],
    ["\u24C8", "(S)"],
    ["\u24C9", "(T)"],
    ["\u24CA", "(U)"],
    ["\u24CB", "(V)"],
    ["\u24CC", "(W)"],
    ["\u24CD", "(X)"],
    ["\u24CE", "(Y)"],
    ["\u24CF", "(Z)"],
    ["\u24D0", "(a)"],
    ["\u24D1", "(b)"],
    ["\u24D2", "(b)"],
    ["\u24D3", "(c)"],
    ["\u24D4", "(e)"],
    ["\u24D5", "(f)"],
    ["\u24D6", "(g)"],
    ["\u24D7", "(h)"],
    ["\u24D8", "(i)"],
    ["\u24D9", "(j)"],
    ["\u24DA", "(k)"],
    ["\u24DB", "(l)"],
    ["\u24DC", "(m)"],
    ["\u24DD", "(n)"],
    ["\u24DE", "(o)"],
    ["\u24DF", "(p)"],
    ["\u24E0", "(q)"],
    ["\u24E1", "(r)"],
    ["\u24E2", "(s)"],
    ["\u24E3", "(t)"],
    ["\u24E4", "(u)"],
    ["\u24E5", "(v)"],
    ["\u24E6", "(w)"],
    ["\u24E7", "(x)"],
    ["\u24E8", "(y)"],
    ["\u24E9", "(z)"],
    // Maltese
    ["\u010A", "C"],
    ["\u010B", "c"],
    ["\u0120", "G"],
    ["\u0121", "g"],
    ["\u0126", "H"],
    ["\u0127", "h"],
    ["\u017B", "Z"],
    ["\u017C", "z"],
    // Numbers
    ["\u{1D7CE}", "0"],
    ["\u{1D7CF}", "1"],
    ["\u{1D7D0}", "2"],
    ["\u{1D7D1}", "3"],
    ["\u{1D7D2}", "4"],
    ["\u{1D7D3}", "5"],
    ["\u{1D7D4}", "6"],
    ["\u{1D7D5}", "7"],
    ["\u{1D7D6}", "8"],
    ["\u{1D7D7}", "9"],
    ["\u{1D7D8}", "0"],
    ["\u{1D7D9}", "1"],
    ["\u{1D7DA}", "2"],
    ["\u{1D7DB}", "3"],
    ["\u{1D7DC}", "4"],
    ["\u{1D7DD}", "5"],
    ["\u{1D7DE}", "6"],
    ["\u{1D7DF}", "7"],
    ["\u{1D7E0}", "8"],
    ["\u{1D7E1}", "9"],
    ["\u{1D7E2}", "0"],
    ["\u{1D7E3}", "1"],
    ["\u{1D7E4}", "2"],
    ["\u{1D7E5}", "3"],
    ["\u{1D7E6}", "4"],
    ["\u{1D7E7}", "5"],
    ["\u{1D7E8}", "6"],
    ["\u{1D7E9}", "7"],
    ["\u{1D7EA}", "8"],
    ["\u{1D7EB}", "9"],
    ["\u{1D7EC}", "0"],
    ["\u{1D7ED}", "1"],
    ["\u{1D7EE}", "2"],
    ["\u{1D7EF}", "3"],
    ["\u{1D7F0}", "4"],
    ["\u{1D7F1}", "5"],
    ["\u{1D7F2}", "6"],
    ["\u{1D7F3}", "7"],
    ["\u{1D7F4}", "8"],
    ["\u{1D7F5}", "9"],
    ["\u{1D7F6}", "0"],
    ["\u{1D7F7}", "1"],
    ["\u{1D7F8}", "2"],
    ["\u{1D7F9}", "3"],
    ["\u{1D7FA}", "4"],
    ["\u{1D7FB}", "5"],
    ["\u{1D7FC}", "6"],
    ["\u{1D7FD}", "7"],
    ["\u{1D7FE}", "8"],
    ["\u{1D7FF}", "9"],
    ["\u2460", "1"],
    ["\u2461", "2"],
    ["\u2462", "3"],
    ["\u2463", "4"],
    ["\u2464", "5"],
    ["\u2465", "6"],
    ["\u2466", "7"],
    ["\u2467", "8"],
    ["\u2468", "9"],
    ["\u2469", "10"],
    ["\u246A", "11"],
    ["\u246B", "12"],
    ["\u246C", "13"],
    ["\u246D", "14"],
    ["\u246E", "15"],
    ["\u246F", "16"],
    ["\u2470", "17"],
    ["\u2471", "18"],
    ["\u2472", "19"],
    ["\u2473", "20"],
    ["\u2474", "1"],
    ["\u2475", "2"],
    ["\u2476", "3"],
    ["\u2477", "4"],
    ["\u2478", "5"],
    ["\u2479", "6"],
    ["\u247A", "7"],
    ["\u247B", "8"],
    ["\u247C", "9"],
    ["\u247D", "10"],
    ["\u247E", "11"],
    ["\u247F", "12"],
    ["\u2480", "13"],
    ["\u2481", "14"],
    ["\u2482", "15"],
    ["\u2483", "16"],
    ["\u2484", "17"],
    ["\u2485", "18"],
    ["\u2486", "19"],
    ["\u2487", "20"],
    ["\u2488", "1."],
    ["\u2489", "2."],
    ["\u248A", "3."],
    ["\u248B", "4."],
    ["\u248C", "5."],
    ["\u248D", "6."],
    ["\u248E", "7."],
    ["\u248F", "8."],
    ["\u2490", "9."],
    ["\u2491", "10."],
    ["\u2492", "11."],
    ["\u2493", "12."],
    ["\u2494", "13."],
    ["\u2495", "14."],
    ["\u2496", "15."],
    ["\u2497", "16."],
    ["\u2498", "17."],
    ["\u2499", "18."],
    ["\u249A", "19."],
    ["\u249B", "20."],
    ["\u24EA", "0"],
    ["\u24EB", "11"],
    ["\u24EC", "12"],
    ["\u24ED", "13"],
    ["\u24EE", "14"],
    ["\u24EF", "15"],
    ["\u24F0", "16"],
    ["\u24F1", "17"],
    ["\u24F2", "18"],
    ["\u24F3", "19"],
    ["\u24F4", "20"],
    ["\u24F5", "1"],
    ["\u24F6", "2"],
    ["\u24F7", "3"],
    ["\u24F8", "4"],
    ["\u24F9", "5"],
    ["\u24FA", "6"],
    ["\u24FB", "7"],
    ["\u24FC", "8"],
    ["\u24FD", "9"],
    ["\u24FE", "10"],
    ["\u24FF", "0"],
    // Punctuation
    ["\u{1F670}", "&"],
    ["\u{1F671}", "&"],
    ["\u{1F672}", "&"],
    ["\u{1F673}", "&"],
    ["\u{1F674}", "&"],
    ["\u{1F675}", "&"],
    ["\u{1F676}", '"'],
    ["\u{1F677}", '"'],
    ["\u{1F678}", '"'],
    ["\u203D", "?!"],
    ["\u{1F679}", "?!"],
    ["\u{1F67A}", "?!"],
    ["\u{1F67B}", "?!"],
    ["\u{1F67C}", "/"],
    ["\u{1F67D}", "\\"],
    // Alchemy
    ["\u{1F707}", "AR"],
    ["\u{1F708}", "V"],
    ["\u{1F709}", "V"],
    ["\u{1F706}", "VR"],
    ["\u{1F705}", "VF"],
    ["\u{1F729}", "2"],
    ["\u{1F72A}", "5"],
    ["\u{1F761}", "f"],
    ["\u{1F762}", "W"],
    ["\u{1F763}", "U"],
    ["\u{1F767}", "V"],
    ["\u{1F768}", "T"],
    ["\u{1F76A}", "V"],
    ["\u{1F76B}", "MB"],
    ["\u{1F76C}", "VB"],
    ["\u{1F772}", "3B"],
    ["\u{1F773}", "3B"],
    // Emojis
    ["\u{1F4AF}", "100"],
    ["\u{1F519}", "BACK"],
    ["\u{1F51A}", "END"],
    ["\u{1F51B}", "ON!"],
    ["\u{1F51C}", "SOON"],
    ["\u{1F51D}", "TOP"],
    ["\u{1F51E}", "18"],
    ["\u{1F524}", "abc"],
    ["\u{1F520}", "ABCD"],
    ["\u{1F521}", "abcd"],
    ["\u{1F522}", "1234"],
    ["\u{1F523}", "T&@%"],
    ["#\uFE0F\u20E3", "#"],
    ["*\uFE0F\u20E3", "*"],
    ["0\uFE0F\u20E3", "0"],
    ["1\uFE0F\u20E3", "1"],
    ["2\uFE0F\u20E3", "2"],
    ["3\uFE0F\u20E3", "3"],
    ["4\uFE0F\u20E3", "4"],
    ["5\uFE0F\u20E3", "5"],
    ["6\uFE0F\u20E3", "6"],
    ["7\uFE0F\u20E3", "7"],
    ["8\uFE0F\u20E3", "8"],
    ["9\uFE0F\u20E3", "9"],
    ["\u{1F51F}", "10"],
    ["\u{1F170}\uFE0F", "A"],
    ["\u{1F171}\uFE0F", "B"],
    ["\u{1F18E}", "AB"],
    ["\u{1F191}", "CL"],
    ["\u{1F17E}\uFE0F", "O"],
    ["\u{1F17F}", "P"],
    ["\u{1F198}", "SOS"],
    ["\u{1F172}", "C"],
    ["\u{1F173}", "D"],
    ["\u{1F174}", "E"],
    ["\u{1F175}", "F"],
    ["\u{1F176}", "G"],
    ["\u{1F177}", "H"],
    ["\u{1F178}", "I"],
    ["\u{1F179}", "J"],
    ["\u{1F17A}", "K"],
    ["\u{1F17B}", "L"],
    ["\u{1F17C}", "M"],
    ["\u{1F17D}", "N"],
    ["\u{1F180}", "Q"],
    ["\u{1F181}", "R"],
    ["\u{1F182}", "S"],
    ["\u{1F183}", "T"],
    ["\u{1F184}", "U"],
    ["\u{1F185}", "V"],
    ["\u{1F186}", "W"],
    ["\u{1F187}", "X"],
    ["\u{1F188}", "Y"],
    ["\u{1F189}", "Z"]
  ];
  var replacements_default = replacements;

  // node_modules/@sindresorhus/transliterate/index.js
  var doCustomReplacements = (string4, replacements2) => {
    for (const [key, value] of replacements2) {
      string4 = string4.replace(new RegExp(escapeStringRegexp(key), "g"), value);
    }
    return string4;
  };
  function transliterate(string4, options) {
    if (typeof string4 !== "string") {
      throw new TypeError(`Expected a string, got \`${typeof string4}\``);
    }
    options = __spreadValues({
      customReplacements: []
    }, options);
    const customReplacements = new Map([
      ...replacements_default,
      ...options.customReplacements
    ]);
    string4 = string4.normalize();
    string4 = doCustomReplacements(string4, customReplacements);
    string4 = string4.normalize("NFD").replace(new RegExp("\\p{Diacritic}", "gu"), "").normalize();
    return string4;
  }

  // node_modules/@sindresorhus/slugify/overridable-replacements.js
  var overridableReplacements = [
    ["&", " and "],
    ["\u{1F984}", " unicorn "],
    ["\u2665", " love "]
  ];
  var overridable_replacements_default = overridableReplacements;

  // node_modules/@sindresorhus/slugify/index.js
  var decamelize = (string4) => {
    return string4.replace(/([A-Z]{2,})(\d+)/g, "$1 $2").replace(/([a-z\d]+)([A-Z]{2,})/g, "$1 $2").replace(/([a-z\d])([A-Z])/g, "$1 $2").replace(/([A-Z]+)([A-Z][a-rt-z\d]+)/g, "$1 $2");
  };
  var removeMootSeparators = (string4, separator) => {
    const escapedSeparator = escapeStringRegexp(separator);
    return string4.replace(new RegExp(`${escapedSeparator}{2,}`, "g"), separator).replace(new RegExp(`^${escapedSeparator}|${escapedSeparator}$`, "g"), "");
  };
  var buildPatternSlug = (options) => {
    let negationSetPattern = "a-z\\d";
    negationSetPattern += options.lowercase ? "" : "A-Z";
    if (options.preserveCharacters.length > 0) {
      for (const character of options.preserveCharacters) {
        if (character === options.separator) {
          throw new Error(`The separator character \`${options.separator}\` cannot be included in preserved characters: ${options.preserveCharacters}`);
        }
        negationSetPattern += escapeStringRegexp(character);
      }
    }
    return new RegExp(`[^${negationSetPattern}]+`, "g");
  };
  function slugify(string4, options) {
    if (typeof string4 !== "string") {
      throw new TypeError(`Expected a string, got \`${typeof string4}\``);
    }
    options = __spreadValues({
      separator: "-",
      lowercase: true,
      decamelize: true,
      customReplacements: [],
      preserveLeadingUnderscore: false,
      preserveTrailingDash: false,
      preserveCharacters: []
    }, options);
    const shouldPrependUnderscore = options.preserveLeadingUnderscore && string4.startsWith("_");
    const shouldAppendDash = options.preserveTrailingDash && string4.endsWith("-");
    const customReplacements = new Map([
      ...overridable_replacements_default,
      ...options.customReplacements
    ]);
    string4 = transliterate(string4, { customReplacements });
    if (options.decamelize) {
      string4 = decamelize(string4);
    }
    const patternSlug = buildPatternSlug(options);
    if (options.lowercase) {
      string4 = string4.toLowerCase();
    }
    string4 = string4.replace(/([a-zA-Z\d]+)'([ts])(\s|$)/g, "$1$2$3");
    string4 = string4.replace(patternSlug, options.separator);
    string4 = string4.replace(/\\/g, "");
    if (options.separator) {
      string4 = removeMootSeparators(string4, options.separator);
    }
    if (shouldPrependUnderscore) {
      string4 = `_${string4}`;
    }
    if (shouldAppendDash) {
      string4 = `${string4}-`;
    }
    return string4;
  }

  // node_modules/prosemirror-schema-list/dist/index.js
  function splitListItem(itemType, itemAttrs) {
    return function(state, dispatch) {
      let { $from, $to, node: node2 } = state.selection;
      if (node2 && node2.isBlock || $from.depth < 2 || !$from.sameParent($to))
        return false;
      let grandParent = $from.node(-1);
      if (grandParent.type != itemType)
        return false;
      if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {
        if ($from.depth == 3 || $from.node(-3).type != itemType || $from.index(-2) != $from.node(-2).childCount - 1)
          return false;
        if (dispatch) {
          let wrap3 = Fragment.empty;
          let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
          for (let d6 = $from.depth - depthBefore; d6 >= $from.depth - 3; d6--)
            wrap3 = Fragment.from($from.node(d6).copy(wrap3));
          let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
          wrap3 = wrap3.append(Fragment.from(itemType.createAndFill()));
          let start = $from.before($from.depth - (depthBefore - 1));
          let tr2 = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap3, 4 - depthBefore, 0));
          let sel = -1;
          tr2.doc.nodesBetween(start, tr2.doc.content.size, (node3, pos) => {
            if (sel > -1)
              return false;
            if (node3.isTextblock && node3.content.size == 0)
              sel = pos + 1;
          });
          if (sel > -1)
            tr2.setSelection(Selection.near(tr2.doc.resolve(sel)));
          dispatch(tr2.scrollIntoView());
        }
        return true;
      }
      let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
      let tr = state.tr.delete($from.pos, $to.pos);
      let types2 = nextType ? [itemAttrs ? { type: itemType, attrs: itemAttrs } : null, { type: nextType }] : void 0;
      if (!canSplit(tr.doc, $from.pos, 2, types2))
        return false;
      if (dispatch)
        dispatch(tr.split($from.pos, 2, types2).scrollIntoView());
      return true;
    };
  }
  function liftListItem(itemType) {
    return function(state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange($to, (node2) => node2.childCount > 0 && node2.firstChild.type == itemType);
      if (!range)
        return false;
      if (!dispatch)
        return true;
      if ($from.node(range.depth - 1).type == itemType)
        return liftToOuterList(state, dispatch, itemType, range);
      else
        return liftOutOfList(state, dispatch, range);
    };
  }
  function liftToOuterList(state, dispatch, itemType, range) {
    let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
    if (end < endOfList) {
      tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
      range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
    }
    const target = liftTarget(range);
    if (target == null)
      return false;
    tr.lift(range, target);
    let after = tr.mapping.map(end, -1) - 1;
    if (canJoin(tr.doc, after))
      tr.join(after);
    dispatch(tr.scrollIntoView());
    return true;
  }
  function liftOutOfList(state, dispatch, range) {
    let tr = state.tr, list4 = range.parent;
    for (let pos = range.end, i3 = range.endIndex - 1, e3 = range.startIndex; i3 > e3; i3--) {
      pos -= list4.child(i3).nodeSize;
      tr.delete(pos - 1, pos + 1);
    }
    let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
    if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
      return false;
    let atStart = range.startIndex == 0, atEnd = range.endIndex == list4.childCount;
    let parent = $start.node(-1), indexBefore = $start.index(-1);
    if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list4))))
      return false;
    let start = $start.pos, end = start + item.nodeSize;
    tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list4.copy(Fragment.empty))).append(atEnd ? Fragment.empty : Fragment.from(list4.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
    dispatch(tr.scrollIntoView());
    return true;
  }
  function sinkListItem(itemType) {
    return function(state, dispatch) {
      let { $from, $to } = state.selection;
      let range = $from.blockRange($to, (node2) => node2.childCount > 0 && node2.firstChild.type == itemType);
      if (!range)
        return false;
      let startIndex = range.startIndex;
      if (startIndex == 0)
        return false;
      let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
      if (nodeBefore.type != itemType)
        return false;
      if (dispatch) {
        let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
        let inner = Fragment.from(nestedBefore ? itemType.create() : null);
        let slice2 = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
        let before = range.start, after = range.end;
        dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice2, 1, true)).scrollIntoView());
      }
      return true;
    };
  }

  // node_modules/mdast-util-definitions/lib/index.js
  function definitions(tree) {
    const cache2 = /* @__PURE__ */ new Map();
    if (!tree || !tree.type) {
      throw new Error("mdast-util-definitions expected node");
    }
    visit(tree, "definition", function(definition4) {
      const id2 = clean(definition4.identifier);
      if (id2 && !cache2.get(id2)) {
        cache2.set(id2, definition4);
      }
    });
    return definition3;
    function definition3(identifier) {
      const id2 = clean(identifier);
      return cache2.get(id2);
    }
  }
  function clean(value) {
    return String(value || "").toUpperCase();
  }

  // node_modules/remark-inline-links/lib/index.js
  function remarkInlineLinks() {
    return function(tree) {
      const definition3 = definitions(tree);
      visit(tree, function(node2, index2, parent) {
        if (node2.type === "definition" && parent !== void 0 && typeof index2 === "number") {
          parent.children.splice(index2, 1);
          return [SKIP, index2];
        }
        if (node2.type === "imageReference" || node2.type === "linkReference") {
          const def = definition3(node2.identifier);
          if (def && parent && typeof index2 === "number") {
            parent.children[index2] = node2.type === "imageReference" ? { type: "image", url: def.url, title: def.title, alt: node2.alt } : {
              type: "link",
              url: def.url,
              title: def.title,
              children: node2.children
            };
            return [SKIP, index2];
          }
        }
      });
    };
  }

  // node_modules/@milkdown/preset-commonmark/lib/index.es.js
  function at2(t4, e3) {
    var o2;
    if (!(e3.childCount >= 1 && ((o2 = e3.lastChild) == null ? void 0 : o2.type.name) === "hardbreak")) {
      t4.next(e3.content);
      return;
    }
    const a2 = [];
    e3.content.forEach((s4, l5, i3) => {
      i3 !== e3.childCount - 1 && a2.push(s4);
    }), t4.next(Fragment.fromArray(a2));
  }
  function n4(t4, e3) {
    return Object.assign(t4, {
      meta: __spreadValues({
        package: "@milkdown/preset-commonmark"
      }, e3)
    }), t4;
  }
  var Z3 = we2("emphasis");
  n4(Z3, {
    displayName: "Attr<emphasis>",
    group: "Emphasis"
  });
  var R4 = ye2("emphasis", (t4) => ({
    attrs: {
      marker: {
        default: t4.get(Q2).emphasis || "*"
      }
    },
    parseDOM: [
      { tag: "i" },
      { tag: "em" },
      { style: "font-style", getAttrs: (e3) => e3 === "italic" }
    ],
    toDOM: (e3) => ["em", t4.get(Z3.key)(e3)],
    parseMarkdown: {
      match: (e3) => e3.type === "emphasis",
      runner: (e3, r4, a2) => {
        e3.openMark(a2, { marker: r4.marker }), e3.next(r4.children), e3.closeMark(a2);
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "emphasis",
      runner: (e3, r4) => {
        e3.withMark(r4, "emphasis", void 0, {
          marker: r4.attrs.marker
        });
      }
    }
  }));
  n4(R4.mark, {
    displayName: "MarkSchema<emphasis>",
    group: "Emphasis"
  });
  n4(R4.ctx, {
    displayName: "MarkSchemaCtx<emphasis>",
    group: "Emphasis"
  });
  var ee2 = re2("ToggleEmphasis", (t4) => () => toggleMark(R4.type(t4)));
  n4(ee2, {
    displayName: "Command<toggleEmphasisCommand>",
    group: "Emphasis"
  });
  var nt = oe2((t4) => markRule(/(?:^|[^*])\*([^*]+)\*$/, R4.type(t4), {
    getAttr: () => ({
      marker: "*"
    }),
    updateCaptured: ({ fullMatch: e3, start: r4 }) => e3.startsWith("*") ? {} : { fullMatch: e3.slice(1), start: r4 + 1 }
  }));
  n4(nt, {
    displayName: "InputRule<emphasis>|Star",
    group: "Emphasis"
  });
  var ot2 = oe2((t4) => markRule(/(?:^|[^_])_([^_]+)_$/, R4.type(t4), {
    getAttr: () => ({
      marker: "_"
    }),
    updateCaptured: ({ fullMatch: e3, start: r4 }) => e3.startsWith("_") ? {} : { fullMatch: e3.slice(1), start: r4 + 1 }
  }));
  n4(ot2, {
    displayName: "InputRule<emphasis>|Underscore",
    group: "Emphasis"
  });
  var te2 = ge2("emphasisKeymap", {
    ToggleEmphasis: {
      shortcuts: "Mod-i",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(ee2.key);
      }
    }
  });
  n4(te2.ctx, {
    displayName: "KeymapCtx<emphasis>",
    group: "Emphasis"
  });
  n4(te2.shortcuts, {
    displayName: "Keymap<emphasis>",
    group: "Emphasis"
  });
  var re3 = we2("strong");
  n4(re3, {
    displayName: "Attr<strong>",
    group: "Strong"
  });
  var $2 = ye2("strong", (t4) => ({
    attrs: {
      marker: {
        default: t4.get(Q2).strong || "*"
      }
    },
    parseDOM: [
      { tag: "b" },
      { tag: "strong" },
      { style: "font-style", getAttrs: (e3) => e3 === "bold" }
    ],
    toDOM: (e3) => ["strong", t4.get(re3.key)(e3)],
    parseMarkdown: {
      match: (e3) => e3.type === "strong",
      runner: (e3, r4, a2) => {
        e3.openMark(a2, { marker: r4.marker }), e3.next(r4.children), e3.closeMark(a2);
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "strong",
      runner: (e3, r4) => {
        e3.withMark(r4, "strong", void 0, {
          marker: r4.attrs.marker
        });
      }
    }
  }));
  n4($2.mark, {
    displayName: "MarkSchema<strong>",
    group: "Strong"
  });
  n4($2.ctx, {
    displayName: "MarkSchemaCtx<strong>",
    group: "Strong"
  });
  var ae2 = re2("ToggleStrong", (t4) => () => toggleMark($2.type(t4)));
  n4(ae2, {
    displayName: "Command<toggleStrongCommand>",
    group: "Strong"
  });
  var st = oe2((t4) => markRule(/(?:\*\*|__)([^*_]+)(?:\*\*|__)$/, $2.type(t4), {
    getAttr: (e3) => ({
      marker: e3[0].startsWith("*") ? "*" : "_"
    })
  }));
  n4(st, {
    displayName: "InputRule<strong>",
    group: "Strong"
  });
  var ne2 = ge2("strongKeymap", {
    ToggleBold: {
      shortcuts: ["Mod-b"],
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(ae2.key);
      }
    }
  });
  n4(ne2.ctx, {
    displayName: "KeymapCtx<strong>",
    group: "Strong"
  });
  n4(ne2.shortcuts, {
    displayName: "Keymap<strong>",
    group: "Strong"
  });
  var oe3 = we2("inlineCode");
  n4(oe3, {
    displayName: "Attr<inlineCode>",
    group: "InlineCode"
  });
  var x6 = ye2("inlineCode", (t4) => ({
    priority: 100,
    code: true,
    inclusive: false,
    parseDOM: [{ tag: "code" }],
    toDOM: (e3) => ["code", t4.get(oe3.key)(e3)],
    parseMarkdown: {
      match: (e3) => e3.type === "inlineCode",
      runner: (e3, r4, a2) => {
        e3.openMark(a2), e3.addText(r4.value), e3.closeMark(a2);
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "inlineCode",
      runner: (e3, r4, a2) => {
        e3.withMark(r4, "inlineCode", a2.text || "");
      }
    }
  }));
  n4(x6.mark, {
    displayName: "MarkSchema<inlineCode>",
    group: "InlineCode"
  });
  n4(x6.ctx, {
    displayName: "MarkSchemaCtx<inlineCode>",
    group: "InlineCode"
  });
  var se2 = re2("ToggleInlineCode", (t4) => () => (e3, r4) => {
    const { selection: a2, tr: o2 } = e3;
    if (a2.empty)
      return false;
    const { from: s4, to: l5 } = a2;
    return e3.doc.rangeHasMark(s4, l5, x6.type(t4)) ? (r4 == null || r4(o2.removeMark(s4, l5, x6.type(t4))), true) : (Object.keys(e3.schema.marks).filter((m4) => m4 !== x6.type.name).map((m4) => e3.schema.marks[m4]).forEach((m4) => {
      o2.removeMark(s4, l5, m4);
    }), r4 == null || r4(o2.addMark(s4, l5, x6.type(t4).create())), true);
  });
  n4(se2, {
    displayName: "Command<toggleInlineCodeCommand>",
    group: "InlineCode"
  });
  var lt3 = oe2((t4) => markRule(/(?:\`)([^\`]+)(?:\`)$/, x6.type(t4)));
  n4(lt3, {
    displayName: "InputRule<inlineCodeInputRule>",
    group: "InlineCode"
  });
  var le = ge2("inlineCodeKeymap", {
    ToggleInlineCode: {
      shortcuts: "Mod-e",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(se2.key);
      }
    }
  });
  n4(le.ctx, {
    displayName: "KeymapCtx<inlineCode>",
    group: "InlineCode"
  });
  n4(le.shortcuts, {
    displayName: "Keymap<inlineCode>",
    group: "InlineCode"
  });
  var ie6 = we2("link");
  n4(ie6, {
    displayName: "Attr<link>",
    group: "Link"
  });
  var B2 = ye2("link", (t4) => ({
    attrs: {
      href: {},
      title: { default: null }
    },
    parseDOM: [
      {
        tag: "a[href]",
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return { href: e3.getAttribute("href"), title: e3.getAttribute("title") };
        }
      }
    ],
    toDOM: (e3) => ["a", __spreadValues(__spreadValues({}, t4.get(ie6.key)(e3)), e3.attrs)],
    parseMarkdown: {
      match: (e3) => e3.type === "link",
      runner: (e3, r4, a2) => {
        const o2 = r4.url, s4 = r4.title;
        e3.openMark(a2, { href: o2, title: s4 }), e3.next(r4.children), e3.closeMark(a2);
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "link",
      runner: (e3, r4) => {
        e3.withMark(r4, "link", void 0, {
          title: r4.attrs.title,
          url: r4.attrs.href
        });
      }
    }
  }));
  n4(B2.mark, {
    displayName: "MarkSchema<link>",
    group: "Link"
  });
  var it = re2("ToggleLink", (t4) => (e3 = {}) => toggleMark(B2.type(t4), e3));
  n4(it, {
    displayName: "Command<toggleLinkCommand>",
    group: "Link"
  });
  var dt2 = re2("UpdateLink", (t4) => (e3 = {}) => (r4, a2) => {
    if (!a2)
      return false;
    let o2, s4 = -1;
    const { selection: l5 } = r4, { from: i3, to: d6 } = l5;
    if (r4.doc.nodesBetween(i3, i3 === d6 ? d6 + 1 : d6, (y4, b4) => {
      if (B2.type(t4).isInSet(y4.marks))
        return o2 = y4, s4 = b4, false;
    }), !o2)
      return false;
    const m4 = o2.marks.find(({ type: y4 }) => y4 === B2.type(t4));
    if (!m4)
      return false;
    const p6 = s4, k4 = s4 + o2.nodeSize, { tr: g5 } = r4, C6 = B2.type(t4).create(__spreadValues(__spreadValues({}, m4.attrs), e3));
    return C6 ? (a2(
      g5.removeMark(p6, k4, m4).addMark(p6, k4, C6).setSelection(new TextSelection(g5.selection.$anchor)).scrollIntoView()
    ), true) : false;
  });
  n4(dt2, {
    displayName: "Command<updateLinkCommand>",
    group: "Link"
  });
  var mt2 = W3("doc", () => ({
    content: "block+",
    parseMarkdown: {
      match: ({ type: t4 }) => t4 === "root",
      runner: (t4, e3, r4) => {
        t4.injectRoot(e3, r4);
      }
    },
    toMarkdown: {
      match: (t4) => t4.type.name === "doc",
      runner: (t4, e3) => {
        t4.openNode("root"), t4.next(e3.content);
      }
    }
  }));
  n4(mt2, {
    displayName: "NodeSchema<doc>",
    group: "Doc"
  });
  var de = he("paragraph");
  n4(de, {
    displayName: "Attr<paragraph>",
    group: "Paragraph"
  });
  var w5 = fe2("paragraph", (t4) => ({
    content: "inline*",
    group: "block",
    parseDOM: [{ tag: "p" }],
    toDOM: (e3) => ["p", t4.get(de.key)(e3), 0],
    parseMarkdown: {
      match: (e3) => e3.type === "paragraph",
      runner: (e3, r4, a2) => {
        e3.openNode(a2), r4.children ? e3.next(r4.children) : e3.addText(r4.value || ""), e3.closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "paragraph",
      runner: (e3, r4) => {
        e3.openNode("paragraph"), at2(e3, r4), e3.closeNode();
      }
    }
  }));
  n4(w5.node, {
    displayName: "NodeSchema<paragraph>",
    group: "Paragraph"
  });
  n4(w5.ctx, {
    displayName: "NodeSchemaCtx<paragraph>",
    group: "Paragraph"
  });
  var me2 = re2("TurnIntoText", (t4) => () => setBlockType2(w5.type(t4)));
  n4(me2, {
    displayName: "Command<turnIntoTextCommand>",
    group: "Paragraph"
  });
  var pe2 = ge2("paragraphKeymap", {
    TurnIntoText: {
      shortcuts: "Mod-Alt-0",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(me2.key);
      }
    }
  });
  n4(pe2.ctx, {
    displayName: "KeymapCtx<paragraph>",
    group: "Paragraph"
  });
  n4(pe2.shortcuts, {
    displayName: "Keymap<paragraph>",
    group: "Paragraph"
  });
  var Dt = Array(6).fill(0).map((t4, e3) => e3 + 1);
  function _t(t4) {
    return slugify(t4.textContent);
  }
  var j4 = h2(_t, "headingIdGenerator");
  n4(j4, {
    displayName: "Ctx<HeadingIdGenerator>",
    group: "Heading"
  });
  var ce2 = he("heading");
  n4(ce2, {
    displayName: "Attr<heading>",
    group: "Heading"
  });
  var H4 = fe2("heading", (t4) => {
    const e3 = t4.get(j4.key);
    return {
      content: "inline*",
      group: "block",
      defining: true,
      attrs: {
        id: {
          default: ""
        },
        level: {
          default: 1
        }
      },
      parseDOM: Dt.map((r4) => ({
        tag: `h${r4}`,
        getAttrs: (a2) => {
          if (!(a2 instanceof HTMLElement))
            throw S(a2);
          return { level: r4, id: a2.id };
        }
      })),
      toDOM: (r4) => [
        `h${r4.attrs.level}`,
        __spreadProps(__spreadValues({}, t4.get(ce2.key)(r4)), {
          id: r4.attrs.id || e3(r4)
        }),
        0
      ],
      parseMarkdown: {
        match: ({ type: r4 }) => r4 === "heading",
        runner: (r4, a2, o2) => {
          const s4 = a2.depth;
          r4.openNode(o2, { level: s4 }), r4.next(a2.children), r4.closeNode();
        }
      },
      toMarkdown: {
        match: (r4) => r4.type.name === "heading",
        runner: (r4, a2) => {
          r4.openNode("heading", void 0, { depth: a2.attrs.level }), at2(r4, a2), r4.closeNode();
        }
      }
    };
  });
  n4(H4.node, {
    displayName: "NodeSchema<heading>",
    group: "Heading"
  });
  n4(H4.ctx, {
    displayName: "NodeSchemaCtx<heading>",
    group: "Heading"
  });
  var pt2 = oe2((t4) => textblockTypeInputRule(new RegExp("^(?<hashes>#+)\\s$"), H4.type(t4), (e3) => {
    var l5, i3;
    const r4 = ((i3 = (l5 = e3.groups) == null ? void 0 : l5.hashes) == null ? void 0 : i3.length) || 0, a2 = t4.get(H3), { $from: o2 } = a2.state.selection, s4 = o2.node();
    if (s4.type.name === "heading") {
      let d6 = Number(s4.attrs.level) + Number(r4);
      return d6 > 6 && (d6 = 6), { level: d6 };
    }
    return { level: r4 };
  }));
  n4(pt2, {
    displayName: "InputRule<wrapInHeadingInputRule>",
    group: "Heading"
  });
  var L4 = re2("WrapInHeading", (t4) => (e3) => (e3 != null ? e3 : e3 = 1, e3 < 1 ? setBlockType2(w5.type(t4)) : setBlockType2(H4.type(t4), { level: e3 })));
  n4(L4, {
    displayName: "Command<wrapInHeadingCommand>",
    group: "Heading"
  });
  var ue3 = re2("DowngradeHeading", (t4) => () => (e3, r4, a2) => {
    const { $from: o2 } = e3.selection, s4 = o2.node();
    if (s4.type !== H4.type(t4) || !e3.selection.empty || o2.parentOffset !== 0)
      return false;
    const l5 = s4.attrs.level - 1;
    return l5 ? (r4 == null || r4(
      e3.tr.setNodeMarkup(e3.selection.$from.before(), void 0, __spreadProps(__spreadValues({}, s4.attrs), {
        level: l5
      }))
    ), true) : setBlockType2(w5.type(t4))(e3, r4, a2);
  });
  n4(ue3, {
    displayName: "Command<downgradeHeadingCommand>",
    group: "Heading"
  });
  var ge3 = ge2("headingKeymap", {
    TurnIntoH1: {
      shortcuts: "Mod-Alt-1",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(L4.key, 1);
      }
    },
    TurnIntoH2: {
      shortcuts: "Mod-Alt-2",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(L4.key, 2);
      }
    },
    TurnIntoH3: {
      shortcuts: "Mod-Alt-3",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(L4.key, 3);
      }
    },
    TurnIntoH4: {
      shortcuts: "Mod-Alt-4",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(L4.key, 4);
      }
    },
    TurnIntoH5: {
      shortcuts: "Mod-Alt-5",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(L4.key, 5);
      }
    },
    TurnIntoH6: {
      shortcuts: "Mod-Alt-6",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(L4.key, 6);
      }
    },
    DowngradeHeading: {
      shortcuts: ["Delete", "Backspace"],
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(ue3.key);
      }
    }
  });
  n4(ge3.ctx, {
    displayName: "KeymapCtx<heading>",
    group: "Heading"
  });
  n4(ge3.shortcuts, {
    displayName: "Keymap<heading>",
    group: "Heading"
  });
  var ye3 = he("blockquote");
  n4(ye3, {
    displayName: "Attr<blockquote>",
    group: "Blockquote"
  });
  var q5 = fe2("blockquote", (t4) => ({
    content: "block+",
    group: "block",
    defining: true,
    parseDOM: [{ tag: "blockquote" }],
    toDOM: (e3) => ["blockquote", t4.get(ye3.key)(e3), 0],
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "blockquote",
      runner: (e3, r4, a2) => {
        e3.openNode(a2).next(r4.children).closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "blockquote",
      runner: (e3, r4) => {
        e3.openNode("blockquote").next(r4.content).closeNode();
      }
    }
  }));
  n4(q5.node, {
    displayName: "NodeSchema<blockquote>",
    group: "Blockquote"
  });
  n4(q5.ctx, {
    displayName: "NodeSchemaCtx<blockquote>",
    group: "Blockquote"
  });
  var ct2 = oe2((t4) => wrappingInputRule(/^\s*>\s$/, q5.type(t4)));
  n4(ct2, {
    displayName: "InputRule<wrapInBlockquoteInputRule>",
    group: "Blockquote"
  });
  var ke3 = re2("WrapInBlockquote", (t4) => () => wrapIn(q5.type(t4)));
  n4(ke3, {
    displayName: "Command<wrapInBlockquoteCommand>",
    group: "Blockquote"
  });
  var he2 = ge2("blockquoteKeymap", {
    WrapInBlockquote: {
      shortcuts: "Mod-Shift-b",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(ke3.key);
      }
    }
  });
  n4(he2.ctx, {
    displayName: "KeymapCtx<blockquote>",
    group: "Blockquote"
  });
  n4(he2.shortcuts, {
    displayName: "Keymap<blockquote>",
    group: "Blockquote"
  });
  var fe3 = he("codeBlock", () => ({
    pre: {},
    code: {}
  }));
  n4(fe3, {
    displayName: "Attr<codeBlock>",
    group: "CodeBlock"
  });
  var W4 = fe2("code_block", (t4) => ({
    content: "text*",
    group: "block",
    marks: "",
    defining: true,
    code: true,
    attrs: {
      language: {
        default: ""
      }
    },
    parseDOM: [
      {
        tag: "pre",
        preserveWhitespace: "full",
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return { language: e3.dataset.language };
        }
      }
    ],
    toDOM: (e3) => {
      const r4 = t4.get(fe3.key)(e3);
      return [
        "pre",
        __spreadProps(__spreadValues({}, r4.pre), {
          "data-language": e3.attrs.language
        }),
        ["code", r4.code, 0]
      ];
    },
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "code",
      runner: (e3, r4, a2) => {
        const o2 = r4.lang, s4 = r4.value;
        e3.openNode(a2, { language: o2 }), s4 && e3.addText(s4), e3.closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "code_block",
      runner: (e3, r4) => {
        var a2;
        e3.addNode("code", void 0, ((a2 = r4.content.firstChild) == null ? void 0 : a2.text) || "", {
          lang: r4.attrs.language
        });
      }
    }
  }));
  n4(W4.node, {
    displayName: "NodeSchema<codeBlock>",
    group: "CodeBlock"
  });
  n4(W4.ctx, {
    displayName: "NodeSchemaCtx<codeBlock>",
    group: "CodeBlock"
  });
  var ut2 = oe2((t4) => textblockTypeInputRule(new RegExp("^```(?<language>[a-z]*)?[\\s\\n]$"), W4.type(t4), (e3) => {
    var _a2;
    var r4;
    return {
      language: (_a2 = (r4 = e3.groups) == null ? void 0 : r4.language) != null ? _a2 : ""
    };
  }));
  n4(ut2, {
    displayName: "InputRule<createCodeBlockInputRule>",
    group: "CodeBlock"
  });
  var Ne2 = re2("CreateCodeBlock", (t4) => (e3 = "") => setBlockType2(W4.type(t4), { language: e3 }));
  n4(Ne2, {
    displayName: "Command<createCodeBlockCommand>",
    group: "CodeBlock"
  });
  var Et2 = re2("UpdateCodeBlockLanguage", () => ({ pos: t4, language: e3 } = { pos: -1, language: "" }) => (r4, a2) => t4 >= 0 ? (a2 == null || a2(r4.tr.setNodeAttribute(t4, "language", e3)), true) : false);
  n4(Et2, {
    displayName: "Command<updateCodeBlockLanguageCommand>",
    group: "CodeBlock"
  });
  var Ie2 = ge2("codeBlockKeymap", {
    CreateCodeBlock: {
      shortcuts: "Mod-Alt-c",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(Ne2.key);
      }
    }
  });
  n4(Ie2.ctx, {
    displayName: "KeymapCtx<codeBlock>",
    group: "CodeBlock"
  });
  n4(Ie2.shortcuts, {
    displayName: "Keymap<codeBlock>",
    group: "CodeBlock"
  });
  var Ce3 = he("image");
  n4(Ce3, {
    displayName: "Attr<image>",
    group: "Image"
  });
  var v2 = fe2("image", (t4) => ({
    inline: true,
    group: "inline",
    selectable: true,
    draggable: true,
    marks: "",
    atom: true,
    defining: true,
    isolating: true,
    attrs: {
      src: { default: "" },
      alt: { default: "" },
      title: { default: "" }
    },
    parseDOM: [
      {
        tag: "img[src]",
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return {
            src: e3.getAttribute("src") || "",
            alt: e3.getAttribute("alt") || "",
            title: e3.getAttribute("title") || e3.getAttribute("alt") || ""
          };
        }
      }
    ],
    toDOM: (e3) => ["img", __spreadValues(__spreadValues({}, t4.get(Ce3.key)(e3)), e3.attrs)],
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "image",
      runner: (e3, r4, a2) => {
        const o2 = r4.url, s4 = r4.alt, l5 = r4.title;
        e3.addNode(a2, {
          src: o2,
          alt: s4,
          title: l5
        });
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "image",
      runner: (e3, r4) => {
        e3.addNode("image", void 0, void 0, {
          title: r4.attrs.title,
          url: r4.attrs.src,
          alt: r4.attrs.alt
        });
      }
    }
  }));
  n4(v2.node, {
    displayName: "NodeSchema<image>",
    group: "Image"
  });
  n4(v2.ctx, {
    displayName: "NodeSchemaCtx<image>",
    group: "Image"
  });
  var gt = re2("InsertImage", (t4) => (e3 = {}) => (r4, a2) => {
    if (!a2)
      return true;
    const { src: o2 = "", alt: s4 = "", title: l5 = "" } = e3, i3 = v2.type(t4).create({ src: o2, alt: s4, title: l5 });
    return i3 && a2(r4.tr.replaceSelectionWith(i3).scrollIntoView()), true;
  });
  n4(gt, {
    displayName: "Command<insertImageCommand>",
    group: "Image"
  });
  var yt = re2("UpdateImage", (t4) => (e3 = {}) => (r4, a2) => {
    const o2 = findSelectedNodeOfType(r4.selection, v2.type(t4));
    if (!o2)
      return false;
    const { node: s4, pos: l5 } = o2, i3 = __spreadValues({}, s4.attrs), { src: d6, alt: m4, title: p6 } = e3;
    return d6 !== void 0 && (i3.src = d6), m4 !== void 0 && (i3.alt = m4), p6 !== void 0 && (i3.title = p6), a2 == null || a2(r4.tr.setNodeMarkup(l5, void 0, i3).scrollIntoView()), true;
  });
  n4(yt, {
    displayName: "Command<updateImageCommand>",
    group: "Image"
  });
  var Pt = oe2((t4) => new InputRule(
    new RegExp('!\\[(?<alt>.*?)]\\((?<filename>.*?)\\s*(?="|\\))"?(?<title>[^"]+)?"?\\)'),
    (e3, r4, a2, o2) => {
      const [s4, l5, i3 = "", d6] = r4;
      return s4 ? e3.tr.replaceWith(a2, o2, v2.type(t4).create({ src: i3, alt: l5, title: d6 })) : null;
    }
  ));
  n4(Pt, {
    displayName: "InputRule<insertImageInputRule>",
    group: "Image"
  });
  var Me2 = he("hardbreak", (t4) => ({
    "data-is-inline": t4.attrs.isInline
  }));
  n4(Me2, {
    displayName: "Attr<hardbreak>",
    group: "Hardbreak"
  });
  var S6 = fe2("hardbreak", (t4) => ({
    inline: true,
    group: "inline",
    attrs: {
      isInline: {
        default: false
      }
    },
    selectable: false,
    parseDOM: [{ tag: "br" }],
    toDOM: (e3) => ["br", t4.get(Me2.key)(e3)],
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "break",
      runner: (e3, r4, a2) => {
        var o2;
        e3.addNode(a2, { isInline: !!((o2 = r4.data) != null && o2.isInline) });
      }
    },
    leafText: () => `
`,
    toMarkdown: {
      match: (e3) => e3.type.name === "hardbreak",
      runner: (e3, r4) => {
        r4.attrs.isInline ? e3.addNode("text", void 0, `
`) : e3.addNode("break");
      }
    }
  }));
  n4(S6.node, {
    displayName: "NodeSchema<hardbreak>",
    group: "Hardbreak"
  });
  n4(S6.ctx, {
    displayName: "NodeSchemaCtx<hardbreak>",
    group: "Hardbreak"
  });
  var be = re2("InsertHardbreak", (t4) => () => (e3, r4) => {
    var s4;
    const { selection: a2, tr: o2 } = e3;
    if (!(a2 instanceof TextSelection))
      return false;
    if (a2.empty) {
      const l5 = a2.$from.node();
      if (l5.childCount > 0 && ((s4 = l5.lastChild) == null ? void 0 : s4.type.name) === "hardbreak")
        return r4 == null || r4(
          o2.replaceRangeWith(a2.to - 1, a2.to, e3.schema.node("paragraph")).setSelection(Selection.near(o2.doc.resolve(a2.to))).scrollIntoView()
        ), true;
    }
    return r4 == null || r4(o2.setMeta("hardbreak", true).replaceSelectionWith(S6.type(t4).create()).scrollIntoView()), true;
  });
  n4(be, {
    displayName: "Command<insertHardbreakCommand>",
    group: "Hardbreak"
  });
  var Le = ge2("hardbreakKeymap", {
    InsertHardbreak: {
      shortcuts: "Shift-Enter",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(be.key);
      }
    }
  });
  n4(Le.ctx, {
    displayName: "KeymapCtx<hardbreak>",
    group: "Hardbreak"
  });
  n4(Le.shortcuts, {
    displayName: "Keymap<hardbreak>",
    group: "Hardbreak"
  });
  var xe = he("hr");
  n4(xe, {
    displayName: "Attr<hr>",
    group: "Hr"
  });
  var F3 = fe2("hr", (t4) => ({
    group: "block",
    parseDOM: [{ tag: "hr" }],
    toDOM: (e3) => ["hr", t4.get(xe.key)(e3)],
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "thematicBreak",
      runner: (e3, r4, a2) => {
        e3.addNode(a2);
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "hr",
      runner: (e3) => {
        e3.addNode("thematicBreak");
      }
    }
  }));
  n4(F3.node, {
    displayName: "NodeSchema<hr>",
    group: "Hr"
  });
  n4(F3.ctx, {
    displayName: "NodeSchemaCtx<hr>",
    group: "Hr"
  });
  var kt = oe2((t4) => new InputRule(
    /^(?:---|___\s|\*\*\*\s)$/,
    (e3, r4, a2, o2) => {
      const { tr: s4 } = e3;
      return r4[0] && s4.replaceWith(a2 - 1, o2, F3.type(t4).create()), s4;
    }
  ));
  n4(kt, {
    displayName: "InputRule<insertHrInputRule>",
    group: "Hr"
  });
  var ht2 = re2("InsertHr", (t4) => () => (e3, r4) => {
    if (!r4)
      return true;
    const a2 = w5.node.type(t4).create(), { tr: o2, selection: s4 } = e3, { from: l5 } = s4, i3 = F3.type(t4).create();
    if (!i3)
      return true;
    const d6 = o2.replaceSelectionWith(i3).insert(l5, a2), m4 = Selection.findFrom(d6.doc.resolve(l5), 1, true);
    return m4 && r4(d6.setSelection(m4).scrollIntoView()), true;
  });
  n4(ht2, {
    displayName: "Command<insertHrCommand>",
    group: "Hr"
  });
  var Se = he("bulletList");
  n4(Se, {
    displayName: "Attr<bulletList>",
    group: "BulletList"
  });
  var O3 = fe2("bullet_list", (t4) => ({
    content: "listItem+",
    group: "block",
    attrs: {
      spread: {
        default: false
      }
    },
    parseDOM: [
      {
        tag: "ul",
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return {
            spread: e3.dataset.spread
          };
        }
      }
    ],
    toDOM: (e3) => [
      "ul",
      __spreadProps(__spreadValues({}, t4.get(Se.key)(e3)), {
        "data-spread": e3.attrs.spread
      }),
      0
    ],
    parseMarkdown: {
      match: ({ type: e3, ordered: r4 }) => e3 === "list" && !r4,
      runner: (e3, r4, a2) => {
        const o2 = r4.spread != null ? `${r4.spread}` : "false";
        e3.openNode(a2, { spread: o2 }).next(r4.children).closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "bullet_list",
      runner: (e3, r4) => {
        e3.openNode("list", void 0, { ordered: false, spread: r4.attrs.spread === "true" }).next(r4.content).closeNode();
      }
    }
  }));
  n4(O3.node, {
    displayName: "NodeSchema<bulletList>",
    group: "BulletList"
  });
  n4(O3.ctx, {
    displayName: "NodeSchemaCtx<bulletList>",
    group: "BulletList"
  });
  var ft = oe2((t4) => wrappingInputRule(/^\s*([-+*])\s$/, O3.type(t4)));
  n4(ft, {
    displayName: "InputRule<wrapInBulletListInputRule>",
    group: "BulletList"
  });
  var Ae2 = re2("WrapInBulletList", (t4) => () => wrapIn(O3.type(t4)));
  n4(Ae2, {
    displayName: "Command<wrapInBulletListCommand>",
    group: "BulletList"
  });
  var we3 = ge2("bulletListKeymap", {
    WrapInBulletList: {
      shortcuts: "Mod-Alt-8",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(Ae2.key);
      }
    }
  });
  n4(we3.ctx, {
    displayName: "KeymapCtx<bulletListKeymap>",
    group: "BulletList"
  });
  n4(we3.shortcuts, {
    displayName: "Keymap<bulletListKeymap>",
    group: "BulletList"
  });
  var He = he("orderedList");
  n4(He, {
    displayName: "Attr<orderedList>",
    group: "OrderedList"
  });
  var T4 = fe2("ordered_list", (t4) => ({
    content: "listItem+",
    group: "block",
    attrs: {
      order: {
        default: 1
      },
      spread: {
        default: false
      }
    },
    parseDOM: [
      {
        tag: "ol",
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return {
            spread: e3.dataset.spread,
            order: e3.hasAttribute("start") ? Number(e3.getAttribute("start")) : 1
          };
        }
      }
    ],
    toDOM: (e3) => [
      "ol",
      __spreadProps(__spreadValues(__spreadValues({}, t4.get(He.key)(e3)), e3.attrs.order === 1 ? {} : e3.attrs.order), {
        "data-spread": e3.attrs.spread
      }),
      0
    ],
    parseMarkdown: {
      match: ({ type: e3, ordered: r4 }) => e3 === "list" && !!r4,
      runner: (e3, r4, a2) => {
        const o2 = r4.spread != null ? `${r4.spread}` : "true";
        e3.openNode(a2, { spread: o2 }).next(r4.children).closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "ordered_list",
      runner: (e3, r4) => {
        e3.openNode("list", void 0, { ordered: true, start: 1, spread: r4.attrs.spread === "true" }), e3.next(r4.content), e3.closeNode();
      }
    }
  }));
  n4(T4.node, {
    displayName: "NodeSchema<orderedList>",
    group: "OrderedList"
  });
  n4(T4.ctx, {
    displayName: "NodeSchemaCtx<orderedList>",
    group: "OrderedList"
  });
  var Nt = oe2((t4) => wrappingInputRule(
    /^\s*(\d+)\.\s$/,
    T4.type(t4),
    (e3) => ({ order: Number(e3[1]) }),
    (e3, r4) => r4.childCount + r4.attrs.order === Number(e3[1])
  ));
  n4(Nt, {
    displayName: "InputRule<wrapInOrderedListInputRule>",
    group: "OrderedList"
  });
  var Be = re2("WrapInOrderedList", (t4) => () => wrapIn(T4.type(t4)));
  n4(Be, {
    displayName: "Command<wrapInOrderedListCommand>",
    group: "OrderedList"
  });
  var Re = ge2("orderedListKeymap", {
    WrapInOrderedList: {
      shortcuts: "Mod-Alt-7",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(Be.key);
      }
    }
  });
  n4(Re.ctx, {
    displayName: "KeymapCtx<orderedList>",
    group: "OrderedList"
  });
  n4(Re.shortcuts, {
    displayName: "Keymap<orderedList>",
    group: "OrderedList"
  });
  var ve2 = he("listItem");
  n4(ve2, {
    displayName: "Attr<listItem>",
    group: "ListItem"
  });
  var M5 = fe2("list_item", (t4) => ({
    group: "listItem",
    content: "block+",
    attrs: {
      label: {
        default: "\u2022"
      },
      listType: {
        default: "bullet"
      },
      spread: {
        default: "true"
      }
    },
    defining: true,
    parseDOM: [
      {
        tag: "li",
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return {
            label: e3.dataset.label,
            listType: e3.dataset["list-type"],
            spread: e3.dataset.spread
          };
        }
      }
    ],
    toDOM: (e3) => [
      "li",
      __spreadProps(__spreadValues({}, t4.get(ve2.key)(e3)), {
        "data-label": e3.attrs.label,
        "data-list-type": e3.attrs.listType,
        "data-spread": e3.attrs.spread
      }),
      0
    ],
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "listItem",
      runner: (e3, r4, a2) => {
        const o2 = r4.label != null ? `${r4.label}.` : "\u2022", s4 = r4.label != null ? "ordered" : "bullet", l5 = r4.spread != null ? `${r4.spread}` : "true";
        e3.openNode(a2, { label: o2, listType: s4, spread: l5 }), e3.next(r4.children), e3.closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "list_item",
      runner: (e3, r4) => {
        e3.openNode("listItem", void 0, { spread: r4.attrs.spread === "true" }), e3.next(r4.content), e3.closeNode();
      }
    }
  }));
  n4(M5.node, {
    displayName: "NodeSchema<listItem>",
    group: "ListItem"
  });
  n4(M5.ctx, {
    displayName: "NodeSchemaCtx<listItem>",
    group: "ListItem"
  });
  var Oe2 = re2("SinkListItem", (t4) => () => sinkListItem(M5.type(t4)));
  n4(Oe2, {
    displayName: "Command<sinkListItemCommand>",
    group: "ListItem"
  });
  var Te2 = re2("LiftListItem", (t4) => () => liftListItem(M5.type(t4)));
  n4(Te2, {
    displayName: "Command<liftListItemCommand>",
    group: "ListItem"
  });
  var Ke2 = re2("SplitListItem", (t4) => () => splitListItem(M5.type(t4)));
  n4(Ke2, {
    displayName: "Command<splitListItemCommand>",
    group: "ListItem"
  });
  function $t(t4) {
    return (e3, r4, a2) => {
      const { selection: o2 } = e3;
      if (!(o2 instanceof TextSelection))
        return false;
      const { empty: s4, $from: l5 } = o2;
      if (!s4 || l5.parentOffset !== 0)
        return false;
      const i3 = l5.node(-1);
      return i3.type !== M5.type(t4) || i3.firstChild !== l5.node() || l5.node(-2).childCount > 1 ? false : liftListItem(M5.type(t4))(e3, r4, a2);
    };
  }
  var De2 = re2("LiftFirstListItem", (t4) => () => $t(t4));
  n4(De2, {
    displayName: "Command<liftFirstListItemCommand>",
    group: "ListItem"
  });
  var _e2 = ge2("listItemKeymap", {
    NextListItem: {
      shortcuts: "Enter",
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(Ke2.key);
      }
    },
    SinkListItem: {
      shortcuts: ["Tab", "Mod-]"],
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(Oe2.key);
      }
    },
    LiftListItem: {
      shortcuts: ["Shift-Tab", "Mod-["],
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(Te2.key);
      }
    },
    LiftFirstListItem: {
      shortcuts: ["Backspace", "Delete"],
      command: (t4) => {
        const e3 = t4.get(je);
        return () => e3.call(De2.key);
      }
    }
  });
  n4(_e2.ctx, {
    displayName: "KeymapCtx<listItem>",
    group: "ListItem"
  });
  n4(_e2.shortcuts, {
    displayName: "Keymap<listItem>",
    group: "ListItem"
  });
  var It = W3("text", () => ({
    group: "inline",
    parseMarkdown: {
      match: ({ type: t4 }) => t4 === "text",
      runner: (t4, e3) => {
        t4.addText(e3.value);
      }
    },
    toMarkdown: {
      match: (t4) => t4.type.name === "text",
      runner: (t4, e3) => {
        t4.addNode("text", void 0, e3.text);
      }
    }
  }));
  n4(It, {
    displayName: "NodeSchema<text>",
    group: "Text"
  });
  var Ee2 = he("html");
  n4(Ee2, {
    displayName: "Attr<html>",
    group: "Html"
  });
  var Pe = fe2("html", (t4) => ({
    atom: true,
    group: "inline",
    inline: true,
    attrs: {
      value: {
        default: ""
      }
    },
    toDOM: (e3) => {
      const r4 = document.createElement("span"), a2 = __spreadProps(__spreadValues({}, t4.get(Ee2.key)(e3)), {
        "data-value": e3.attrs.value,
        "data-type": "html"
      });
      return r4.textContent = e3.attrs.value, ["span", a2, e3.attrs.value];
    },
    parseDOM: [{
      tag: 'span[data-type="html"]',
      getAttrs: (e3) => {
        var _a2;
        return {
          value: (_a2 = e3.dataset.value) != null ? _a2 : ""
        };
      }
    }],
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "html",
      runner: (e3, r4, a2) => {
        e3.addNode(a2, { value: r4.value });
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "html",
      runner: (e3, r4) => {
        e3.addNode("html", void 0, r4.attrs.value);
      }
    }
  }));
  n4(Pe.node, {
    displayName: "NodeSchema<html>",
    group: "Html"
  });
  n4(Pe.ctx, {
    displayName: "NodeSchemaCtx<html>",
    group: "Html"
  });
  var qt = [
    mt2,
    de,
    w5,
    j4,
    ce2,
    H4,
    Me2,
    S6,
    ye3,
    q5,
    fe3,
    W4,
    xe,
    F3,
    Ce3,
    v2,
    Se,
    O3,
    He,
    T4,
    ve2,
    M5,
    Z3,
    R4,
    re3,
    $2,
    oe3,
    x6,
    ie6,
    B2,
    Ee2,
    Pe,
    It
  ].flat();
  var Wt = [
    ct2,
    ft,
    Nt,
    ut2,
    kt,
    pt2
  ].flat();
  var Ft = [
    nt,
    ot2,
    lt3,
    st
  ];
  var Vt = [
    me2,
    ke3,
    L4,
    ue3,
    Ne2,
    be,
    ht2,
    gt,
    yt,
    Be,
    Ae2,
    Oe2,
    Ke2,
    Te2,
    De2,
    ee2,
    se2,
    ae2,
    it,
    dt2
  ];
  var Ut = [
    he2,
    Ie2,
    Le,
    ge3,
    _e2,
    Re,
    we3,
    pe2,
    te2,
    le,
    ne2
  ].flat();
  var $e = ke2("remarkAddOrderInList", () => () => (t4) => {
    visit(t4, "list", (e3) => {
      var _a2;
      if (e3.ordered) {
        const r4 = (_a2 = e3.start) != null ? _a2 : 1;
        e3.children.forEach((a2, o2) => {
          a2.label = o2 + r4;
        });
      }
    });
  });
  n4($e.plugin, {
    displayName: "Remark<remarkAddOrderInListPlugin>",
    group: "Remark"
  });
  n4($e.options, {
    displayName: "RemarkConfig<remarkAddOrderInListPlugin>",
    group: "Remark"
  });
  var qe = ke2("remarkLineBreak", () => () => (t4) => {
    const e3 = /[\t ]*(?:\r?\n|\r)/g;
    visit(t4, "text", (r4, a2, o2) => {
      if (!r4.value || typeof r4.value != "string")
        return;
      const s4 = [];
      let l5 = 0;
      e3.lastIndex = 0;
      let i3 = e3.exec(r4.value);
      for (; i3; ) {
        const m4 = i3.index;
        l5 !== m4 && s4.push({ type: "text", value: r4.value.slice(l5, m4) }), s4.push({ type: "break", data: { isInline: true } }), l5 = m4 + i3[0].length, i3 = e3.exec(r4.value);
      }
      if (s4.length > 0 && o2 && typeof a2 == "number")
        return l5 < r4.value.length && s4.push({ type: "text", value: r4.value.slice(l5) }), o2.children.splice(a2, 1, ...s4), a2 + s4.length;
    });
  });
  n4(qe.plugin, {
    displayName: "Remark<remarkLineBreak>",
    group: "Remark"
  });
  n4(qe.options, {
    displayName: "RemarkConfig<remarkLineBreak>",
    group: "Remark"
  });
  var We = ke2("remarkInlineLink", () => remarkInlineLinks);
  n4(We.plugin, {
    displayName: "Remark<remarkInlineLinkPlugin>",
    group: "Remark"
  });
  n4(We.options, {
    displayName: "RemarkConfig<remarkInlineLinkPlugin>",
    group: "Remark"
  });
  var Gt = (t4) => !!t4.children;
  var jt = (t4) => t4.type === "html";
  function zt(t4, e3) {
    return r4(t4, 0, null)[0];
    function r4(a2, o2, s4) {
      if (Gt(a2)) {
        const l5 = [];
        for (let i3 = 0, d6 = a2.children.length; i3 < d6; i3++) {
          const m4 = a2.children[i3];
          if (m4) {
            const p6 = r4(m4, i3, a2);
            if (p6)
              for (let k4 = 0, g5 = p6.length; k4 < g5; k4++) {
                const C6 = p6[k4];
                C6 && l5.push(C6);
              }
          }
        }
        a2.children = l5;
      }
      return e3(a2, o2, s4);
    }
  }
  var Fe = ke2("remarkHTMLTransformer", () => () => (t4) => {
    zt(t4, (e3, r4, a2) => jt(e3) ? ((a2 == null ? void 0 : a2.type) === "root" && (e3.children = [__spreadValues({}, e3)], delete e3.value, e3.type = "paragraph"), [e3]) : [e3]);
  });
  n4(Fe.plugin, {
    displayName: "Remark<remarkHtmlTransformer>",
    group: "Remark"
  });
  n4(Fe.options, {
    displayName: "RemarkConfig<remarkHtmlTransformer>",
    group: "Remark"
  });
  var Ve2 = ke2("remarkMarker", () => () => (t4, e3) => {
    const r4 = (a2) => e3.value.charAt(a2.position.start.offset);
    visit(t4, (a2) => ["strong", "emphasis"].includes(a2.type), (a2) => {
      a2.marker = r4(a2);
    });
  });
  n4(Ve2.plugin, {
    displayName: "Remark<remarkMarker>",
    group: "Remark"
  });
  n4(Ve2.options, {
    displayName: "RemarkConfig<remarkMarker>",
    group: "Remark"
  });
  var Ct = ue2(() => {
    let t4 = false;
    const e3 = new PluginKey("MILKDOWN_INLINE_NODES_CURSOR"), r4 = new Plugin({
      key: e3,
      state: {
        init() {
          return false;
        },
        apply(a2) {
          if (!a2.selection.empty)
            return false;
          const o2 = a2.selection.$from, s4 = o2.nodeBefore, l5 = o2.nodeAfter;
          return !!(s4 && l5 && s4.isInline && !s4.isText && l5.isInline && !l5.isText);
        }
      },
      props: {
        handleDOMEvents: {
          compositionend: (a2, o2) => t4 ? (t4 = false, requestAnimationFrame(() => {
            if (r4.getState(a2.state)) {
              const l5 = a2.state.selection.from;
              o2.preventDefault(), a2.dispatch(a2.state.tr.insertText(o2.data || "", l5));
            }
          }), true) : false,
          compositionstart: (a2) => (r4.getState(a2.state) && (t4 = true), false),
          beforeinput: (a2, o2) => {
            if (r4.getState(a2.state) && o2 instanceof InputEvent && o2.data && !t4) {
              const l5 = a2.state.selection.from;
              return o2.preventDefault(), a2.dispatch(a2.state.tr.insertText(o2.data || "", l5)), true;
            }
            return false;
          }
        },
        decorations(a2) {
          if (r4.getState(a2)) {
            const l5 = a2.selection.$from.pos, i3 = document.createElement("span"), d6 = Decoration2.widget(l5, i3, {
              side: -1
            }), m4 = document.createElement("span"), p6 = Decoration2.widget(l5, m4);
            return setTimeout(() => {
              i3.contentEditable = "true", m4.contentEditable = "true";
            }), DecorationSet.create(a2.doc, [d6, p6]);
          }
          return DecorationSet.empty;
        }
      }
    });
    return r4;
  });
  n4(Ct, {
    displayName: "Prose<inlineNodesCursorPlugin>",
    group: "Prose"
  });
  var Mt = ue2((t4) => new Plugin({
    key: new PluginKey("MILKDOWN_HARDBREAK_MARKS"),
    appendTransaction: (e3, r4, a2) => {
      if (!e3.length)
        return;
      const [o2] = e3;
      if (!o2)
        return;
      const [s4] = o2.steps;
      if (o2.getMeta("hardbreak")) {
        if (!(s4 instanceof ReplaceStep))
          return;
        const { from: d6 } = s4;
        return a2.tr.setNodeMarkup(d6, S6.type(t4), void 0, []);
      }
      if (s4 instanceof AddMarkStep) {
        let d6 = a2.tr;
        const { from: m4, to: p6 } = s4;
        return a2.doc.nodesBetween(m4, p6, (k4, g5) => {
          k4.type === S6.type(t4) && (d6 = d6.setNodeMarkup(g5, S6.type(t4), void 0, []));
        }), d6;
      }
    }
  }));
  n4(Mt, {
    displayName: "Prose<hardbreakClearMarkPlugin>",
    group: "Prose"
  });
  var Ue = h2(["table", "code_block"], "hardbreakFilterNodes");
  n4(Ue, {
    displayName: "Ctx<hardbreakFilterNodes>",
    group: "Prose"
  });
  var bt = ue2((t4) => {
    const e3 = t4.get(Ue.key);
    return new Plugin({
      key: new PluginKey("MILKDOWN_HARDBREAK_FILTER"),
      filterTransaction: (r4, a2) => {
        const o2 = r4.getMeta("hardbreak"), [s4] = r4.steps;
        if (o2 && s4) {
          const { from: l5 } = s4, i3 = a2.doc.resolve(l5);
          let d6 = i3.depth, m4 = true;
          for (; d6 > 0; )
            e3.includes(i3.node(d6).type.name) && (m4 = false), d6--;
          return m4;
        }
        return true;
      }
    });
  });
  n4(bt, {
    displayName: "Prose<hardbreakFilterPlugin>",
    group: "Prose"
  });
  var Lt = ue2((t4) => {
    const e3 = new PluginKey("MILKDOWN_HEADING_ID"), r4 = (a2) => {
      if (a2.composing)
        return;
      const o2 = t4.get(j4.key), s4 = a2.state.tr.setMeta("addToHistory", false);
      let l5 = false;
      a2.state.doc.descendants((i3, d6) => {
        if (i3.type === H4.type(t4)) {
          if (i3.textContent.trim().length === 0)
            return;
          const m4 = i3.attrs, p6 = o2(i3);
          m4.id !== p6 && (l5 = true, s4.setMeta(e3, true).setNodeMarkup(d6, void 0, __spreadProps(__spreadValues({}, m4), {
            id: p6
          })));
        }
      }), l5 && a2.dispatch(s4);
    };
    return new Plugin({
      key: e3,
      view: (a2) => (r4(a2), {
        update: (o2) => {
          r4(o2);
        }
      })
    });
  });
  n4(Lt, {
    displayName: "Prose<syncHeadingIdPlugin>",
    group: "Prose"
  });
  var xt = ue2((t4) => {
    const e3 = (r4) => {
      if (r4.composing || !r4.editable)
        return;
      const a2 = T4.type(t4), o2 = O3.type(t4), s4 = M5.type(t4), l5 = r4.state, i3 = (p6, k4) => {
        let g5 = false;
        const C6 = `${k4 + 1}.`;
        return p6.label !== C6 && (p6.label = C6, g5 = true), g5;
      };
      let d6 = l5.tr, m4 = false;
      l5.doc.descendants((p6, k4, g5, C6) => {
        if (p6.type === o2) {
          const y4 = p6.maybeChild(0);
          (y4 == null ? void 0 : y4.type) === s4 && y4.attrs.listType === "ordered" && (m4 = true, d6.setNodeMarkup(k4, a2, { spread: "true" }), p6.descendants((b4, Ge, Qt, St) => {
            if (b4.type === s4) {
              const je2 = __spreadValues({}, b4.attrs);
              i3(je2, St) && (d6 = d6.setNodeMarkup(Ge, void 0, je2));
            }
            return false;
          }));
        } else if (p6.type === s4 && (g5 == null ? void 0 : g5.type) === a2) {
          const y4 = __spreadValues({}, p6.attrs);
          let b4 = false;
          y4.listType !== "ordered" && (y4.listType = "ordered", b4 = true), (g5 == null ? void 0 : g5.maybeChild(0)) && (b4 = i3(y4, C6)), b4 && (d6 = d6.setNodeMarkup(k4, void 0, y4), m4 = true);
        }
      }), m4 && r4.dispatch(d6.setMeta("addToHistory", false));
    };
    return new Plugin({
      key: new PluginKey("MILKDOWN_KEEP_LIST_ORDER"),
      view: (r4) => (e3(r4), {
        update: (a2) => {
          e3(a2);
        }
      })
    });
  });
  n4(xt, {
    displayName: "Prose<syncListOrderPlugin>",
    group: "Prose"
  });
  var Jt = [
    Mt,
    Ue,
    bt,
    Ct,
    $e,
    We,
    qe,
    Fe,
    Ve2,
    Lt,
    xt
  ].flat();
  var cr = [qt, Wt, Ft, Vt, Ut, Jt].flat();

  // node_modules/@milkdown/preset-gfm/lib/index.es.js
  var index_es_exports6 = {};
  __export(index_es_exports6, {
    addColAfterCommand: () => Ne3,
    addColBeforeCommand: () => we4,
    addRowAfterCommand: () => Se2,
    addRowBeforeCommand: () => Te3,
    addRowWithAlignment: () => ce3,
    autoInsertZeroSpaceInTablePlugin: () => xe2,
    breakTableCommand: () => z4,
    columnResizingPlugin: () => ve3,
    commands: () => dt3,
    createTable: () => se3,
    deleteSelectedCellsCommand: () => ke4,
    extendListItemSchemaForTask: () => Me3,
    findTable: () => w6,
    footnoteDefinitionSchema: () => Z4,
    footnoteReferenceSchema: () => V3,
    getAllCellsInTable: () => Je,
    getCellsInCol: () => b3,
    getCellsInRow: () => C5,
    gfm: () => wt,
    goToNextTableCellCommand: () => G4,
    goToPrevTableCellCommand: () => W5,
    inputRules: () => at3,
    insertTableCommand: () => fe4,
    insertTableInputRule: () => pe3,
    keymap: () => rt,
    markInputRules: () => st2,
    moveCol: () => nt2,
    moveColCommand: () => ge4,
    moveRow: () => lt4,
    moveRowCommand: () => he3,
    plugins: () => ct3,
    remarkGFMPlugin: () => U4,
    schema: () => it2,
    selectCol: () => et,
    selectColCommand: () => Ce4,
    selectLine: () => ie7,
    selectRow: () => Ye,
    selectRowCommand: () => be2,
    selectTable: () => Qe,
    selectTableCommand: () => ye4,
    setAlignCommand: () => Re2,
    strikethroughAttr: () => K4,
    strikethroughInputRule: () => ae3,
    strikethroughKeymap: () => L5,
    strikethroughSchema: () => T5,
    tableCellSchema: () => M6,
    tableEditingPlugin: () => Ie3,
    tableHeaderSchema: () => I3,
    tableKeymap: () => j5,
    tableRowSchema: () => R5,
    tableSchema: () => S7,
    toggleStrikethroughCommand: () => H5,
    wrapInTaskListInputRule: () => Ae3
  });

  // node_modules/prosemirror-tables/dist/index.js
  var readFromCache;
  var addToCache;
  if (typeof WeakMap != "undefined") {
    let cache2 = /* @__PURE__ */ new WeakMap();
    readFromCache = (key) => cache2.get(key);
    addToCache = (key, value) => {
      cache2.set(key, value);
      return value;
    };
  } else {
    const cache2 = [];
    const cacheSize = 10;
    let cachePos = 0;
    readFromCache = (key) => {
      for (let i3 = 0; i3 < cache2.length; i3 += 2)
        if (cache2[i3] == key)
          return cache2[i3 + 1];
    };
    addToCache = (key, value) => {
      if (cachePos == cacheSize)
        cachePos = 0;
      cache2[cachePos++] = key;
      return cache2[cachePos++] = value;
    };
  }
  var TableMap = class {
    constructor(width, height, map6, problems) {
      this.width = width;
      this.height = height;
      this.map = map6;
      this.problems = problems;
    }
    // Find the dimensions of the cell at the given position.
    findCell(pos) {
      for (let i3 = 0; i3 < this.map.length; i3++) {
        const curPos = this.map[i3];
        if (curPos != pos)
          continue;
        const left = i3 % this.width;
        const top2 = i3 / this.width | 0;
        let right = left + 1;
        let bottom = top2 + 1;
        for (let j6 = 1; right < this.width && this.map[i3 + j6] == curPos; j6++) {
          right++;
        }
        for (let j6 = 1; bottom < this.height && this.map[i3 + this.width * j6] == curPos; j6++) {
          bottom++;
        }
        return { left, top: top2, right, bottom };
      }
      throw new RangeError(`No cell with offset ${pos} found`);
    }
    // Find the left side of the cell at the given position.
    colCount(pos) {
      for (let i3 = 0; i3 < this.map.length; i3++) {
        if (this.map[i3] == pos) {
          return i3 % this.width;
        }
      }
      throw new RangeError(`No cell with offset ${pos} found`);
    }
    // Find the next cell in the given direction, starting from the cell
    // at `pos`, if any.
    nextCell(pos, axis, dir) {
      const { left, right, top: top2, bottom } = this.findCell(pos);
      if (axis == "horiz") {
        if (dir < 0 ? left == 0 : right == this.width)
          return null;
        return this.map[top2 * this.width + (dir < 0 ? left - 1 : right)];
      } else {
        if (dir < 0 ? top2 == 0 : bottom == this.height)
          return null;
        return this.map[left + this.width * (dir < 0 ? top2 - 1 : bottom)];
      }
    }
    // Get the rectangle spanning the two given cells.
    rectBetween(a2, b4) {
      const {
        left: leftA,
        right: rightA,
        top: topA,
        bottom: bottomA
      } = this.findCell(a2);
      const {
        left: leftB,
        right: rightB,
        top: topB,
        bottom: bottomB
      } = this.findCell(b4);
      return {
        left: Math.min(leftA, leftB),
        top: Math.min(topA, topB),
        right: Math.max(rightA, rightB),
        bottom: Math.max(bottomA, bottomB)
      };
    }
    // Return the position of all cells that have the top left corner in
    // the given rectangle.
    cellsInRect(rect) {
      const result = [];
      const seen = {};
      for (let row = rect.top; row < rect.bottom; row++) {
        for (let col = rect.left; col < rect.right; col++) {
          const index2 = row * this.width + col;
          const pos = this.map[index2];
          if (seen[pos])
            continue;
          seen[pos] = true;
          if (col == rect.left && col && this.map[index2 - 1] == pos || row == rect.top && row && this.map[index2 - this.width] == pos) {
            continue;
          }
          result.push(pos);
        }
      }
      return result;
    }
    // Return the position at which the cell at the given row and column
    // starts, or would start, if a cell started there.
    positionAt(row, col, table) {
      for (let i3 = 0, rowStart = 0; ; i3++) {
        const rowEnd = rowStart + table.child(i3).nodeSize;
        if (i3 == row) {
          let index2 = col + row * this.width;
          const rowEndIndex = (row + 1) * this.width;
          while (index2 < rowEndIndex && this.map[index2] < rowStart)
            index2++;
          return index2 == rowEndIndex ? rowEnd - 1 : this.map[index2];
        }
        rowStart = rowEnd;
      }
    }
    // Find the table map for the given table node.
    static get(table) {
      return readFromCache(table) || addToCache(table, computeMap(table));
    }
  };
  function computeMap(table) {
    if (table.type.spec.tableRole != "table")
      throw new RangeError("Not a table node: " + table.type.name);
    const width = findWidth(table), height = table.childCount;
    const map6 = [];
    let mapPos2 = 0;
    let problems = null;
    const colWidths = [];
    for (let i3 = 0, e3 = width * height; i3 < e3; i3++)
      map6[i3] = 0;
    for (let row = 0, pos = 0; row < height; row++) {
      const rowNode = table.child(row);
      pos++;
      for (let i3 = 0; ; i3++) {
        while (mapPos2 < map6.length && map6[mapPos2] != 0)
          mapPos2++;
        if (i3 == rowNode.childCount)
          break;
        const cellNode = rowNode.child(i3);
        const { colspan, rowspan, colwidth } = cellNode.attrs;
        for (let h3 = 0; h3 < rowspan; h3++) {
          if (h3 + row >= height) {
            (problems || (problems = [])).push({
              type: "overlong_rowspan",
              pos,
              n: rowspan - h3
            });
            break;
          }
          const start = mapPos2 + h3 * width;
          for (let w7 = 0; w7 < colspan; w7++) {
            if (map6[start + w7] == 0)
              map6[start + w7] = pos;
            else
              (problems || (problems = [])).push({
                type: "collision",
                row,
                pos,
                n: colspan - w7
              });
            const colW = colwidth && colwidth[w7];
            if (colW) {
              const widthIndex = (start + w7) % width * 2, prev = colWidths[widthIndex];
              if (prev == null || prev != colW && colWidths[widthIndex + 1] == 1) {
                colWidths[widthIndex] = colW;
                colWidths[widthIndex + 1] = 1;
              } else if (prev == colW) {
                colWidths[widthIndex + 1]++;
              }
            }
          }
        }
        mapPos2 += colspan;
        pos += cellNode.nodeSize;
      }
      const expectedPos = (row + 1) * width;
      let missing = 0;
      while (mapPos2 < expectedPos)
        if (map6[mapPos2++] == 0)
          missing++;
      if (missing)
        (problems || (problems = [])).push({ type: "missing", row, n: missing });
      pos++;
    }
    const tableMap = new TableMap(width, height, map6, problems);
    let badWidths = false;
    for (let i3 = 0; !badWidths && i3 < colWidths.length; i3 += 2)
      if (colWidths[i3] != null && colWidths[i3 + 1] < height)
        badWidths = true;
    if (badWidths)
      findBadColWidths(tableMap, colWidths, table);
    return tableMap;
  }
  function findWidth(table) {
    let width = -1;
    let hasRowSpan = false;
    for (let row = 0; row < table.childCount; row++) {
      const rowNode = table.child(row);
      let rowWidth = 0;
      if (hasRowSpan)
        for (let j6 = 0; j6 < row; j6++) {
          const prevRow = table.child(j6);
          for (let i3 = 0; i3 < prevRow.childCount; i3++) {
            const cell = prevRow.child(i3);
            if (j6 + cell.attrs.rowspan > row)
              rowWidth += cell.attrs.colspan;
          }
        }
      for (let i3 = 0; i3 < rowNode.childCount; i3++) {
        const cell = rowNode.child(i3);
        rowWidth += cell.attrs.colspan;
        if (cell.attrs.rowspan > 1)
          hasRowSpan = true;
      }
      if (width == -1)
        width = rowWidth;
      else if (width != rowWidth)
        width = Math.max(width, rowWidth);
    }
    return width;
  }
  function findBadColWidths(map6, colWidths, table) {
    if (!map6.problems)
      map6.problems = [];
    const seen = {};
    for (let i3 = 0; i3 < map6.map.length; i3++) {
      const pos = map6.map[i3];
      if (seen[pos])
        continue;
      seen[pos] = true;
      const node2 = table.nodeAt(pos);
      if (!node2) {
        throw new RangeError(`No cell with offset ${pos} found`);
      }
      let updated = null;
      const attrs = node2.attrs;
      for (let j6 = 0; j6 < attrs.colspan; j6++) {
        const col = (i3 + j6) % map6.width;
        const colWidth = colWidths[col * 2];
        if (colWidth != null && (!attrs.colwidth || attrs.colwidth[j6] != colWidth))
          (updated || (updated = freshColWidth(attrs)))[j6] = colWidth;
      }
      if (updated)
        map6.problems.unshift({
          type: "colwidth mismatch",
          pos,
          colwidth: updated
        });
    }
  }
  function freshColWidth(attrs) {
    if (attrs.colwidth)
      return attrs.colwidth.slice();
    const result = [];
    for (let i3 = 0; i3 < attrs.colspan; i3++)
      result.push(0);
    return result;
  }
  function getCellAttrs(dom, extraAttrs) {
    if (typeof dom === "string") {
      return {};
    }
    const widthAttr = dom.getAttribute("data-colwidth");
    const widths = widthAttr && /^\d+(,\d+)*$/.test(widthAttr) ? widthAttr.split(",").map((s4) => Number(s4)) : null;
    const colspan = Number(dom.getAttribute("colspan") || 1);
    const result = {
      colspan,
      rowspan: Number(dom.getAttribute("rowspan") || 1),
      colwidth: widths && widths.length == colspan ? widths : null
    };
    for (const prop in extraAttrs) {
      const getter = extraAttrs[prop].getFromDOM;
      const value = getter && getter(dom);
      if (value != null) {
        result[prop] = value;
      }
    }
    return result;
  }
  function setCellAttrs(node2, extraAttrs) {
    const attrs = {};
    if (node2.attrs.colspan != 1)
      attrs.colspan = node2.attrs.colspan;
    if (node2.attrs.rowspan != 1)
      attrs.rowspan = node2.attrs.rowspan;
    if (node2.attrs.colwidth)
      attrs["data-colwidth"] = node2.attrs.colwidth.join(",");
    for (const prop in extraAttrs) {
      const setter = extraAttrs[prop].setDOMAttr;
      if (setter)
        setter(node2.attrs[prop], attrs);
    }
    return attrs;
  }
  function tableNodes(options) {
    const extraAttrs = options.cellAttributes || {};
    const cellAttrs = {
      colspan: { default: 1 },
      rowspan: { default: 1 },
      colwidth: { default: null }
    };
    for (const prop in extraAttrs)
      cellAttrs[prop] = { default: extraAttrs[prop].default };
    return {
      table: {
        content: "table_row+",
        tableRole: "table",
        isolating: true,
        group: options.tableGroup,
        parseDOM: [{ tag: "table" }],
        toDOM() {
          return ["table", ["tbody", 0]];
        }
      },
      table_row: {
        content: "(table_cell | table_header)*",
        tableRole: "row",
        parseDOM: [{ tag: "tr" }],
        toDOM() {
          return ["tr", 0];
        }
      },
      table_cell: {
        content: options.cellContent,
        attrs: cellAttrs,
        tableRole: "cell",
        isolating: true,
        parseDOM: [
          { tag: "td", getAttrs: (dom) => getCellAttrs(dom, extraAttrs) }
        ],
        toDOM(node2) {
          return ["td", setCellAttrs(node2, extraAttrs), 0];
        }
      },
      table_header: {
        content: options.cellContent,
        attrs: cellAttrs,
        tableRole: "header_cell",
        isolating: true,
        parseDOM: [
          { tag: "th", getAttrs: (dom) => getCellAttrs(dom, extraAttrs) }
        ],
        toDOM(node2) {
          return ["th", setCellAttrs(node2, extraAttrs), 0];
        }
      }
    };
  }
  function tableNodeTypes(schema) {
    let result = schema.cached.tableNodeTypes;
    if (!result) {
      result = schema.cached.tableNodeTypes = {};
      for (const name2 in schema.nodes) {
        const type = schema.nodes[name2], role = type.spec.tableRole;
        if (role)
          result[role] = type;
      }
    }
    return result;
  }
  var tableEditingKey = new PluginKey("selectingCells");
  function cellAround($pos) {
    for (let d6 = $pos.depth - 1; d6 > 0; d6--)
      if ($pos.node(d6).type.spec.tableRole == "row")
        return $pos.node(0).resolve($pos.before(d6 + 1));
    return null;
  }
  function isInTable(state) {
    const $head = state.selection.$head;
    for (let d6 = $head.depth; d6 > 0; d6--)
      if ($head.node(d6).type.spec.tableRole == "row")
        return true;
    return false;
  }
  function selectionCell(state) {
    const sel = state.selection;
    if ("$anchorCell" in sel && sel.$anchorCell) {
      return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;
    } else if ("node" in sel && sel.node && sel.node.type.spec.tableRole == "cell") {
      return sel.$anchor;
    }
    const $cell = cellAround(sel.$head) || cellNear(sel.$head);
    if ($cell) {
      return $cell;
    }
    throw new RangeError(`No cell found around position ${sel.head}`);
  }
  function cellNear($pos) {
    for (let after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++) {
      const role = after.type.spec.tableRole;
      if (role == "cell" || role == "header_cell")
        return $pos.doc.resolve(pos);
    }
    for (let before = $pos.nodeBefore, pos = $pos.pos; before; before = before.lastChild, pos--) {
      const role = before.type.spec.tableRole;
      if (role == "cell" || role == "header_cell")
        return $pos.doc.resolve(pos - before.nodeSize);
    }
  }
  function pointsAtCell($pos) {
    return $pos.parent.type.spec.tableRole == "row" && !!$pos.nodeAfter;
  }
  function moveCellForward($pos) {
    return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);
  }
  function inSameTable($cellA, $cellB) {
    return $cellA.depth == $cellB.depth && $cellA.pos >= $cellB.start(-1) && $cellA.pos <= $cellB.end(-1);
  }
  function nextCell($pos, axis, dir) {
    const table = $pos.node(-1);
    const map6 = TableMap.get(table);
    const tableStart = $pos.start(-1);
    const moved = map6.nextCell($pos.pos - tableStart, axis, dir);
    return moved == null ? null : $pos.node(0).resolve(tableStart + moved);
  }
  function removeColSpan(attrs, pos, n5 = 1) {
    const result = __spreadProps(__spreadValues({}, attrs), { colspan: attrs.colspan - n5 });
    if (result.colwidth) {
      result.colwidth = result.colwidth.slice();
      result.colwidth.splice(pos, n5);
      if (!result.colwidth.some((w7) => w7 > 0))
        result.colwidth = null;
    }
    return result;
  }
  function addColSpan(attrs, pos, n5 = 1) {
    const result = __spreadProps(__spreadValues({}, attrs), { colspan: attrs.colspan + n5 });
    if (result.colwidth) {
      result.colwidth = result.colwidth.slice();
      for (let i3 = 0; i3 < n5; i3++)
        result.colwidth.splice(pos, 0, 0);
    }
    return result;
  }
  function columnIsHeader(map6, table, col) {
    const headerCell = tableNodeTypes(table.type.schema).header_cell;
    for (let row = 0; row < map6.height; row++)
      if (table.nodeAt(map6.map[col + row * map6.width]).type != headerCell)
        return false;
    return true;
  }
  var CellSelection = class _CellSelection extends Selection {
    // A table selection is identified by its anchor and head cells. The
    // positions given to this constructor should point _before_ two
    // cells in the same table. They may be the same, to select a single
    // cell.
    constructor($anchorCell, $headCell = $anchorCell) {
      const table = $anchorCell.node(-1);
      const map6 = TableMap.get(table);
      const tableStart = $anchorCell.start(-1);
      const rect = map6.rectBetween(
        $anchorCell.pos - tableStart,
        $headCell.pos - tableStart
      );
      const doc5 = $anchorCell.node(0);
      const cells = map6.cellsInRect(rect).filter((p6) => p6 != $headCell.pos - tableStart);
      cells.unshift($headCell.pos - tableStart);
      const ranges = cells.map((pos) => {
        const cell = table.nodeAt(pos);
        if (!cell) {
          throw RangeError(`No cell with offset ${pos} found`);
        }
        const from2 = tableStart + pos + 1;
        return new SelectionRange2(
          doc5.resolve(from2),
          doc5.resolve(from2 + cell.content.size)
        );
      });
      super(ranges[0].$from, ranges[0].$to, ranges);
      this.$anchorCell = $anchorCell;
      this.$headCell = $headCell;
    }
    map(doc5, mapping) {
      const $anchorCell = doc5.resolve(mapping.map(this.$anchorCell.pos));
      const $headCell = doc5.resolve(mapping.map(this.$headCell.pos));
      if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {
        const tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);
        if (tableChanged && this.isRowSelection())
          return _CellSelection.rowSelection($anchorCell, $headCell);
        else if (tableChanged && this.isColSelection())
          return _CellSelection.colSelection($anchorCell, $headCell);
        else
          return new _CellSelection($anchorCell, $headCell);
      }
      return TextSelection.between($anchorCell, $headCell);
    }
    // Returns a rectangular slice of table rows containing the selected
    // cells.
    content() {
      const table = this.$anchorCell.node(-1);
      const map6 = TableMap.get(table);
      const tableStart = this.$anchorCell.start(-1);
      const rect = map6.rectBetween(
        this.$anchorCell.pos - tableStart,
        this.$headCell.pos - tableStart
      );
      const seen = {};
      const rows = [];
      for (let row = rect.top; row < rect.bottom; row++) {
        const rowContent = [];
        for (let index2 = row * map6.width + rect.left, col = rect.left; col < rect.right; col++, index2++) {
          const pos = map6.map[index2];
          if (seen[pos])
            continue;
          seen[pos] = true;
          const cellRect = map6.findCell(pos);
          let cell = table.nodeAt(pos);
          if (!cell) {
            throw RangeError(`No cell with offset ${pos} found`);
          }
          const extraLeft = rect.left - cellRect.left;
          const extraRight = cellRect.right - rect.right;
          if (extraLeft > 0 || extraRight > 0) {
            let attrs = cell.attrs;
            if (extraLeft > 0) {
              attrs = removeColSpan(attrs, 0, extraLeft);
            }
            if (extraRight > 0) {
              attrs = removeColSpan(
                attrs,
                attrs.colspan - extraRight,
                extraRight
              );
            }
            if (cellRect.left < rect.left) {
              cell = cell.type.createAndFill(attrs);
              if (!cell) {
                throw RangeError(
                  `Could not create cell with attrs ${JSON.stringify(attrs)}`
                );
              }
            } else {
              cell = cell.type.create(attrs, cell.content);
            }
          }
          if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {
            const attrs = __spreadProps(__spreadValues({}, cell.attrs), {
              rowspan: Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top)
            });
            if (cellRect.top < rect.top) {
              cell = cell.type.createAndFill(attrs);
            } else {
              cell = cell.type.create(attrs, cell.content);
            }
          }
          rowContent.push(cell);
        }
        rows.push(table.child(row).copy(Fragment.from(rowContent)));
      }
      const fragment = this.isColSelection() && this.isRowSelection() ? table : rows;
      return new Slice(Fragment.from(fragment), 1, 1);
    }
    replace(tr, content4 = Slice.empty) {
      const mapFrom = tr.steps.length, ranges = this.ranges;
      for (let i3 = 0; i3 < ranges.length; i3++) {
        const { $from, $to } = ranges[i3], mapping = tr.mapping.slice(mapFrom);
        tr.replace(
          mapping.map($from.pos),
          mapping.map($to.pos),
          i3 ? Slice.empty : content4
        );
      }
      const sel = Selection.findFrom(
        tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)),
        -1
      );
      if (sel)
        tr.setSelection(sel);
    }
    replaceWith(tr, node2) {
      this.replace(tr, new Slice(Fragment.from(node2), 0, 0));
    }
    forEachCell(f3) {
      const table = this.$anchorCell.node(-1);
      const map6 = TableMap.get(table);
      const tableStart = this.$anchorCell.start(-1);
      const cells = map6.cellsInRect(
        map6.rectBetween(
          this.$anchorCell.pos - tableStart,
          this.$headCell.pos - tableStart
        )
      );
      for (let i3 = 0; i3 < cells.length; i3++) {
        f3(table.nodeAt(cells[i3]), tableStart + cells[i3]);
      }
    }
    // True if this selection goes all the way from the top to the
    // bottom of the table.
    isColSelection() {
      const anchorTop = this.$anchorCell.index(-1);
      const headTop = this.$headCell.index(-1);
      if (Math.min(anchorTop, headTop) > 0)
        return false;
      const anchorBottom = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan;
      const headBottom = headTop + this.$headCell.nodeAfter.attrs.rowspan;
      return Math.max(anchorBottom, headBottom) == this.$headCell.node(-1).childCount;
    }
    // Returns the smallest column selection that covers the given anchor
    // and head cell.
    static colSelection($anchorCell, $headCell = $anchorCell) {
      const table = $anchorCell.node(-1);
      const map6 = TableMap.get(table);
      const tableStart = $anchorCell.start(-1);
      const anchorRect = map6.findCell($anchorCell.pos - tableStart);
      const headRect = map6.findCell($headCell.pos - tableStart);
      const doc5 = $anchorCell.node(0);
      if (anchorRect.top <= headRect.top) {
        if (anchorRect.top > 0)
          $anchorCell = doc5.resolve(tableStart + map6.map[anchorRect.left]);
        if (headRect.bottom < map6.height)
          $headCell = doc5.resolve(
            tableStart + map6.map[map6.width * (map6.height - 1) + headRect.right - 1]
          );
      } else {
        if (headRect.top > 0)
          $headCell = doc5.resolve(tableStart + map6.map[headRect.left]);
        if (anchorRect.bottom < map6.height)
          $anchorCell = doc5.resolve(
            tableStart + map6.map[map6.width * (map6.height - 1) + anchorRect.right - 1]
          );
      }
      return new _CellSelection($anchorCell, $headCell);
    }
    // True if this selection goes all the way from the left to the
    // right of the table.
    isRowSelection() {
      const table = this.$anchorCell.node(-1);
      const map6 = TableMap.get(table);
      const tableStart = this.$anchorCell.start(-1);
      const anchorLeft = map6.colCount(this.$anchorCell.pos - tableStart);
      const headLeft = map6.colCount(this.$headCell.pos - tableStart);
      if (Math.min(anchorLeft, headLeft) > 0)
        return false;
      const anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan;
      const headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;
      return Math.max(anchorRight, headRight) == map6.width;
    }
    eq(other) {
      return other instanceof _CellSelection && other.$anchorCell.pos == this.$anchorCell.pos && other.$headCell.pos == this.$headCell.pos;
    }
    // Returns the smallest row selection that covers the given anchor
    // and head cell.
    static rowSelection($anchorCell, $headCell = $anchorCell) {
      const table = $anchorCell.node(-1);
      const map6 = TableMap.get(table);
      const tableStart = $anchorCell.start(-1);
      const anchorRect = map6.findCell($anchorCell.pos - tableStart);
      const headRect = map6.findCell($headCell.pos - tableStart);
      const doc5 = $anchorCell.node(0);
      if (anchorRect.left <= headRect.left) {
        if (anchorRect.left > 0)
          $anchorCell = doc5.resolve(
            tableStart + map6.map[anchorRect.top * map6.width]
          );
        if (headRect.right < map6.width)
          $headCell = doc5.resolve(
            tableStart + map6.map[map6.width * (headRect.top + 1) - 1]
          );
      } else {
        if (headRect.left > 0)
          $headCell = doc5.resolve(tableStart + map6.map[headRect.top * map6.width]);
        if (anchorRect.right < map6.width)
          $anchorCell = doc5.resolve(
            tableStart + map6.map[map6.width * (anchorRect.top + 1) - 1]
          );
      }
      return new _CellSelection($anchorCell, $headCell);
    }
    toJSON() {
      return {
        type: "cell",
        anchor: this.$anchorCell.pos,
        head: this.$headCell.pos
      };
    }
    static fromJSON(doc5, json) {
      return new _CellSelection(doc5.resolve(json.anchor), doc5.resolve(json.head));
    }
    static create(doc5, anchorCell, headCell = anchorCell) {
      return new _CellSelection(doc5.resolve(anchorCell), doc5.resolve(headCell));
    }
    getBookmark() {
      return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);
    }
  };
  CellSelection.prototype.visible = false;
  Selection.jsonID("cell", CellSelection);
  var CellBookmark = class _CellBookmark {
    constructor(anchor, head) {
      this.anchor = anchor;
      this.head = head;
    }
    map(mapping) {
      return new _CellBookmark(mapping.map(this.anchor), mapping.map(this.head));
    }
    resolve(doc5) {
      const $anchorCell = doc5.resolve(this.anchor), $headCell = doc5.resolve(this.head);
      if ($anchorCell.parent.type.spec.tableRole == "row" && $headCell.parent.type.spec.tableRole == "row" && $anchorCell.index() < $anchorCell.parent.childCount && $headCell.index() < $headCell.parent.childCount && inSameTable($anchorCell, $headCell))
        return new CellSelection($anchorCell, $headCell);
      else
        return Selection.near($headCell, 1);
    }
  };
  function drawCellSelection(state) {
    if (!(state.selection instanceof CellSelection))
      return null;
    const cells = [];
    state.selection.forEachCell((node2, pos) => {
      cells.push(
        Decoration2.node(pos, pos + node2.nodeSize, { class: "selectedCell" })
      );
    });
    return DecorationSet.create(state.doc, cells);
  }
  function isCellBoundarySelection({ $from, $to }) {
    if ($from.pos == $to.pos || $from.pos < $from.pos - 6)
      return false;
    let afterFrom = $from.pos;
    let beforeTo = $to.pos;
    let depth2 = $from.depth;
    for (; depth2 >= 0; depth2--, afterFrom++)
      if ($from.after(depth2 + 1) < $from.end(depth2))
        break;
    for (let d6 = $to.depth; d6 >= 0; d6--, beforeTo--)
      if ($to.before(d6 + 1) > $to.start(d6))
        break;
    return afterFrom == beforeTo && /row|table/.test($from.node(depth2).type.spec.tableRole);
  }
  function isTextSelectionAcrossCells({ $from, $to }) {
    let fromCellBoundaryNode;
    let toCellBoundaryNode;
    for (let i3 = $from.depth; i3 > 0; i3--) {
      const node2 = $from.node(i3);
      if (node2.type.spec.tableRole === "cell" || node2.type.spec.tableRole === "header_cell") {
        fromCellBoundaryNode = node2;
        break;
      }
    }
    for (let i3 = $to.depth; i3 > 0; i3--) {
      const node2 = $to.node(i3);
      if (node2.type.spec.tableRole === "cell" || node2.type.spec.tableRole === "header_cell") {
        toCellBoundaryNode = node2;
        break;
      }
    }
    return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;
  }
  function normalizeSelection(state, tr, allowTableNodeSelection) {
    const sel = (tr || state).selection;
    const doc5 = (tr || state).doc;
    let normalize3;
    let role;
    if (sel instanceof NodeSelection && (role = sel.node.type.spec.tableRole)) {
      if (role == "cell" || role == "header_cell") {
        normalize3 = CellSelection.create(doc5, sel.from);
      } else if (role == "row") {
        const $cell = doc5.resolve(sel.from + 1);
        normalize3 = CellSelection.rowSelection($cell, $cell);
      } else if (!allowTableNodeSelection) {
        const map6 = TableMap.get(sel.node);
        const start = sel.from + 1;
        const lastCell = start + map6.map[map6.width * map6.height - 1];
        normalize3 = CellSelection.create(doc5, start + 1, lastCell);
      }
    } else if (sel instanceof TextSelection && isCellBoundarySelection(sel)) {
      normalize3 = TextSelection.create(doc5, sel.from);
    } else if (sel instanceof TextSelection && isTextSelectionAcrossCells(sel)) {
      normalize3 = TextSelection.create(doc5, sel.$from.start(), sel.$from.end());
    }
    if (normalize3)
      (tr || (tr = state.tr)).setSelection(normalize3);
    return tr;
  }
  var fixTablesKey = new PluginKey("fix-tables");
  function changedDescendants(old, cur2, offset, f3) {
    const oldSize = old.childCount, curSize = cur2.childCount;
    outer:
      for (let i3 = 0, j6 = 0; i3 < curSize; i3++) {
        const child = cur2.child(i3);
        for (let scan = j6, e3 = Math.min(oldSize, i3 + 3); scan < e3; scan++) {
          if (old.child(scan) == child) {
            j6 = scan + 1;
            offset += child.nodeSize;
            continue outer;
          }
        }
        f3(child, offset);
        if (j6 < oldSize && old.child(j6).sameMarkup(child))
          changedDescendants(old.child(j6), child, offset + 1, f3);
        else
          child.nodesBetween(0, child.content.size, f3, offset + 1);
        offset += child.nodeSize;
      }
  }
  function fixTables(state, oldState) {
    let tr;
    const check = (node2, pos) => {
      if (node2.type.spec.tableRole == "table")
        tr = fixTable(state, node2, pos, tr);
    };
    if (!oldState)
      state.doc.descendants(check);
    else if (oldState.doc != state.doc)
      changedDescendants(oldState.doc, state.doc, 0, check);
    return tr;
  }
  function fixTable(state, table, tablePos, tr) {
    const map6 = TableMap.get(table);
    if (!map6.problems)
      return tr;
    if (!tr)
      tr = state.tr;
    const mustAdd = [];
    for (let i3 = 0; i3 < map6.height; i3++)
      mustAdd.push(0);
    for (let i3 = 0; i3 < map6.problems.length; i3++) {
      const prob = map6.problems[i3];
      if (prob.type == "collision") {
        const cell = table.nodeAt(prob.pos);
        if (!cell)
          continue;
        const attrs = cell.attrs;
        for (let j6 = 0; j6 < attrs.rowspan; j6++)
          mustAdd[prob.row + j6] += prob.n;
        tr.setNodeMarkup(
          tr.mapping.map(tablePos + 1 + prob.pos),
          null,
          removeColSpan(attrs, attrs.colspan - prob.n, prob.n)
        );
      } else if (prob.type == "missing") {
        mustAdd[prob.row] += prob.n;
      } else if (prob.type == "overlong_rowspan") {
        const cell = table.nodeAt(prob.pos);
        if (!cell)
          continue;
        tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, __spreadProps(__spreadValues({}, cell.attrs), {
          rowspan: cell.attrs.rowspan - prob.n
        }));
      } else if (prob.type == "colwidth mismatch") {
        const cell = table.nodeAt(prob.pos);
        if (!cell)
          continue;
        tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, __spreadProps(__spreadValues({}, cell.attrs), {
          colwidth: prob.colwidth
        }));
      }
    }
    let first, last;
    for (let i3 = 0; i3 < mustAdd.length; i3++)
      if (mustAdd[i3]) {
        if (first == null)
          first = i3;
        last = i3;
      }
    for (let i3 = 0, pos = tablePos + 1; i3 < map6.height; i3++) {
      const row = table.child(i3);
      const end = pos + row.nodeSize;
      const add2 = mustAdd[i3];
      if (add2 > 0) {
        let role = "cell";
        if (row.firstChild) {
          role = row.firstChild.type.spec.tableRole;
        }
        const nodes = [];
        for (let j6 = 0; j6 < add2; j6++) {
          const node2 = tableNodeTypes(state.schema)[role].createAndFill();
          if (node2)
            nodes.push(node2);
        }
        const side = (i3 == 0 || first == i3 - 1) && last == i3 ? pos + 1 : end - 1;
        tr.insert(tr.mapping.map(side), nodes);
      }
      pos = end;
    }
    return tr.setMeta(fixTablesKey, { fixTables: true });
  }
  function pastedCells(slice2) {
    if (!slice2.size)
      return null;
    let { content: content4, openStart, openEnd } = slice2;
    while (content4.childCount == 1 && (openStart > 0 && openEnd > 0 || content4.child(0).type.spec.tableRole == "table")) {
      openStart--;
      openEnd--;
      content4 = content4.child(0).content;
    }
    const first = content4.child(0);
    const role = first.type.spec.tableRole;
    const schema = first.type.schema, rows = [];
    if (role == "row") {
      for (let i3 = 0; i3 < content4.childCount; i3++) {
        let cells = content4.child(i3).content;
        const left = i3 ? 0 : Math.max(0, openStart - 1);
        const right = i3 < content4.childCount - 1 ? 0 : Math.max(0, openEnd - 1);
        if (left || right)
          cells = fitSlice(
            tableNodeTypes(schema).row,
            new Slice(cells, left, right)
          ).content;
        rows.push(cells);
      }
    } else if (role == "cell" || role == "header_cell") {
      rows.push(
        openStart || openEnd ? fitSlice(
          tableNodeTypes(schema).row,
          new Slice(content4, openStart, openEnd)
        ).content : content4
      );
    } else {
      return null;
    }
    return ensureRectangular(schema, rows);
  }
  function ensureRectangular(schema, rows) {
    const widths = [];
    for (let i3 = 0; i3 < rows.length; i3++) {
      const row = rows[i3];
      for (let j6 = row.childCount - 1; j6 >= 0; j6--) {
        const { rowspan, colspan } = row.child(j6).attrs;
        for (let r4 = i3; r4 < i3 + rowspan; r4++)
          widths[r4] = (widths[r4] || 0) + colspan;
      }
    }
    let width = 0;
    for (let r4 = 0; r4 < widths.length; r4++)
      width = Math.max(width, widths[r4]);
    for (let r4 = 0; r4 < widths.length; r4++) {
      if (r4 >= rows.length)
        rows.push(Fragment.empty);
      if (widths[r4] < width) {
        const empty4 = tableNodeTypes(schema).cell.createAndFill();
        const cells = [];
        for (let i3 = widths[r4]; i3 < width; i3++) {
          cells.push(empty4);
        }
        rows[r4] = rows[r4].append(Fragment.from(cells));
      }
    }
    return { height: rows.length, width, rows };
  }
  function fitSlice(nodeType, slice2) {
    const node2 = nodeType.createAndFill();
    const tr = new Transform(node2).replace(0, node2.content.size, slice2);
    return tr.doc;
  }
  function clipCells({ width, height, rows }, newWidth, newHeight) {
    if (width != newWidth) {
      const added = [];
      const newRows = [];
      for (let row = 0; row < rows.length; row++) {
        const frag = rows[row], cells = [];
        for (let col = added[row] || 0, i3 = 0; col < newWidth; i3++) {
          let cell = frag.child(i3 % frag.childCount);
          if (col + cell.attrs.colspan > newWidth)
            cell = cell.type.createChecked(
              removeColSpan(
                cell.attrs,
                cell.attrs.colspan,
                col + cell.attrs.colspan - newWidth
              ),
              cell.content
            );
          cells.push(cell);
          col += cell.attrs.colspan;
          for (let j6 = 1; j6 < cell.attrs.rowspan; j6++)
            added[row + j6] = (added[row + j6] || 0) + cell.attrs.colspan;
        }
        newRows.push(Fragment.from(cells));
      }
      rows = newRows;
      width = newWidth;
    }
    if (height != newHeight) {
      const newRows = [];
      for (let row = 0, i3 = 0; row < newHeight; row++, i3++) {
        const cells = [], source = rows[i3 % height];
        for (let j6 = 0; j6 < source.childCount; j6++) {
          let cell = source.child(j6);
          if (row + cell.attrs.rowspan > newHeight)
            cell = cell.type.create(
              __spreadProps(__spreadValues({}, cell.attrs), {
                rowspan: Math.max(1, newHeight - cell.attrs.rowspan)
              }),
              cell.content
            );
          cells.push(cell);
        }
        newRows.push(Fragment.from(cells));
      }
      rows = newRows;
      height = newHeight;
    }
    return { width, height, rows };
  }
  function growTable(tr, map6, table, start, width, height, mapFrom) {
    const schema = tr.doc.type.schema;
    const types2 = tableNodeTypes(schema);
    let empty4;
    let emptyHead;
    if (width > map6.width) {
      for (let row = 0, rowEnd = 0; row < map6.height; row++) {
        const rowNode = table.child(row);
        rowEnd += rowNode.nodeSize;
        const cells = [];
        let add2;
        if (rowNode.lastChild == null || rowNode.lastChild.type == types2.cell)
          add2 = empty4 || (empty4 = types2.cell.createAndFill());
        else
          add2 = emptyHead || (emptyHead = types2.header_cell.createAndFill());
        for (let i3 = map6.width; i3 < width; i3++)
          cells.push(add2);
        tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);
      }
    }
    if (height > map6.height) {
      const cells = [];
      for (let i3 = 0, start2 = (map6.height - 1) * map6.width; i3 < Math.max(map6.width, width); i3++) {
        const header = i3 >= map6.width ? false : table.nodeAt(map6.map[start2 + i3]).type == types2.header_cell;
        cells.push(
          header ? emptyHead || (emptyHead = types2.header_cell.createAndFill()) : empty4 || (empty4 = types2.cell.createAndFill())
        );
      }
      const emptyRow = types2.row.create(null, Fragment.from(cells)), rows = [];
      for (let i3 = map6.height; i3 < height; i3++)
        rows.push(emptyRow);
      tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);
    }
    return !!(empty4 || emptyHead);
  }
  function isolateHorizontal(tr, map6, table, start, left, right, top2, mapFrom) {
    if (top2 == 0 || top2 == map6.height)
      return false;
    let found2 = false;
    for (let col = left; col < right; col++) {
      const index2 = top2 * map6.width + col, pos = map6.map[index2];
      if (map6.map[index2 - map6.width] == pos) {
        found2 = true;
        const cell = table.nodeAt(pos);
        const { top: cellTop, left: cellLeft } = map6.findCell(pos);
        tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, __spreadProps(__spreadValues({}, cell.attrs), {
          rowspan: top2 - cellTop
        }));
        tr.insert(
          tr.mapping.slice(mapFrom).map(map6.positionAt(top2, cellLeft, table)),
          cell.type.createAndFill(__spreadProps(__spreadValues({}, cell.attrs), {
            rowspan: cellTop + cell.attrs.rowspan - top2
          }))
        );
        col += cell.attrs.colspan - 1;
      }
    }
    return found2;
  }
  function isolateVertical(tr, map6, table, start, top2, bottom, left, mapFrom) {
    if (left == 0 || left == map6.width)
      return false;
    let found2 = false;
    for (let row = top2; row < bottom; row++) {
      const index2 = row * map6.width + left, pos = map6.map[index2];
      if (map6.map[index2 - 1] == pos) {
        found2 = true;
        const cell = table.nodeAt(pos);
        const cellLeft = map6.colCount(pos);
        const updatePos = tr.mapping.slice(mapFrom).map(pos + start);
        tr.setNodeMarkup(
          updatePos,
          null,
          removeColSpan(
            cell.attrs,
            left - cellLeft,
            cell.attrs.colspan - (left - cellLeft)
          )
        );
        tr.insert(
          updatePos + cell.nodeSize,
          cell.type.createAndFill(
            removeColSpan(cell.attrs, 0, left - cellLeft)
          )
        );
        row += cell.attrs.rowspan - 1;
      }
    }
    return found2;
  }
  function insertCells(state, dispatch, tableStart, rect, cells) {
    let table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc;
    if (!table) {
      throw new Error("No table found");
    }
    let map6 = TableMap.get(table);
    const { top: top2, left } = rect;
    const right = left + cells.width, bottom = top2 + cells.height;
    const tr = state.tr;
    let mapFrom = 0;
    function recomp() {
      table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;
      if (!table) {
        throw new Error("No table found");
      }
      map6 = TableMap.get(table);
      mapFrom = tr.mapping.maps.length;
    }
    if (growTable(tr, map6, table, tableStart, right, bottom, mapFrom))
      recomp();
    if (isolateHorizontal(tr, map6, table, tableStart, left, right, top2, mapFrom))
      recomp();
    if (isolateHorizontal(tr, map6, table, tableStart, left, right, bottom, mapFrom))
      recomp();
    if (isolateVertical(tr, map6, table, tableStart, top2, bottom, left, mapFrom))
      recomp();
    if (isolateVertical(tr, map6, table, tableStart, top2, bottom, right, mapFrom))
      recomp();
    for (let row = top2; row < bottom; row++) {
      const from2 = map6.positionAt(row, left, table), to = map6.positionAt(row, right, table);
      tr.replace(
        tr.mapping.slice(mapFrom).map(from2 + tableStart),
        tr.mapping.slice(mapFrom).map(to + tableStart),
        new Slice(cells.rows[row - top2], 0, 0)
      );
    }
    recomp();
    tr.setSelection(
      new CellSelection(
        tr.doc.resolve(tableStart + map6.positionAt(top2, left, table)),
        tr.doc.resolve(tableStart + map6.positionAt(bottom - 1, right - 1, table))
      )
    );
    dispatch(tr);
  }
  var handleKeyDown = keydownHandler({
    ArrowLeft: arrow("horiz", -1),
    ArrowRight: arrow("horiz", 1),
    ArrowUp: arrow("vert", -1),
    ArrowDown: arrow("vert", 1),
    "Shift-ArrowLeft": shiftArrow("horiz", -1),
    "Shift-ArrowRight": shiftArrow("horiz", 1),
    "Shift-ArrowUp": shiftArrow("vert", -1),
    "Shift-ArrowDown": shiftArrow("vert", 1),
    Backspace: deleteCellSelection,
    "Mod-Backspace": deleteCellSelection,
    Delete: deleteCellSelection,
    "Mod-Delete": deleteCellSelection
  });
  function maybeSetSelection(state, dispatch, selection) {
    if (selection.eq(state.selection))
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(selection).scrollIntoView());
    return true;
  }
  function arrow(axis, dir) {
    return (state, dispatch, view) => {
      if (!view)
        return false;
      const sel = state.selection;
      if (sel instanceof CellSelection) {
        return maybeSetSelection(
          state,
          dispatch,
          Selection.near(sel.$headCell, dir)
        );
      }
      if (axis != "horiz" && !sel.empty)
        return false;
      const end = atEndOfCell(view, axis, dir);
      if (end == null)
        return false;
      if (axis == "horiz") {
        return maybeSetSelection(
          state,
          dispatch,
          Selection.near(state.doc.resolve(sel.head + dir), dir)
        );
      } else {
        const $cell = state.doc.resolve(end);
        const $next = nextCell($cell, axis, dir);
        let newSel;
        if ($next)
          newSel = Selection.near($next, 1);
        else if (dir < 0)
          newSel = Selection.near(state.doc.resolve($cell.before(-1)), -1);
        else
          newSel = Selection.near(state.doc.resolve($cell.after(-1)), 1);
        return maybeSetSelection(state, dispatch, newSel);
      }
    };
  }
  function shiftArrow(axis, dir) {
    return (state, dispatch, view) => {
      if (!view)
        return false;
      const sel = state.selection;
      let cellSel;
      if (sel instanceof CellSelection) {
        cellSel = sel;
      } else {
        const end = atEndOfCell(view, axis, dir);
        if (end == null)
          return false;
        cellSel = new CellSelection(state.doc.resolve(end));
      }
      const $head = nextCell(cellSel.$headCell, axis, dir);
      if (!$head)
        return false;
      return maybeSetSelection(
        state,
        dispatch,
        new CellSelection(cellSel.$anchorCell, $head)
      );
    };
  }
  function deleteCellSelection(state, dispatch) {
    const sel = state.selection;
    if (!(sel instanceof CellSelection))
      return false;
    if (dispatch) {
      const tr = state.tr;
      const baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;
      sel.forEachCell((cell, pos) => {
        if (!cell.content.eq(baseContent))
          tr.replace(
            tr.mapping.map(pos + 1),
            tr.mapping.map(pos + cell.nodeSize - 1),
            new Slice(baseContent, 0, 0)
          );
      });
      if (tr.docChanged)
        dispatch(tr);
    }
    return true;
  }
  function handleTripleClick2(view, pos) {
    const doc5 = view.state.doc, $cell = cellAround(doc5.resolve(pos));
    if (!$cell)
      return false;
    view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));
    return true;
  }
  function handlePaste(view, _3, slice2) {
    if (!isInTable(view.state))
      return false;
    let cells = pastedCells(slice2);
    const sel = view.state.selection;
    if (sel instanceof CellSelection) {
      if (!cells)
        cells = {
          width: 1,
          height: 1,
          rows: [
            Fragment.from(
              fitSlice(tableNodeTypes(view.state.schema).cell, slice2)
            )
          ]
        };
      const table = sel.$anchorCell.node(-1);
      const start = sel.$anchorCell.start(-1);
      const rect = TableMap.get(table).rectBetween(
        sel.$anchorCell.pos - start,
        sel.$headCell.pos - start
      );
      cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);
      insertCells(view.state, view.dispatch, start, rect, cells);
      return true;
    } else if (cells) {
      const $cell = selectionCell(view.state);
      const start = $cell.start(-1);
      insertCells(
        view.state,
        view.dispatch,
        start,
        TableMap.get($cell.node(-1)).findCell($cell.pos - start),
        cells
      );
      return true;
    } else {
      return false;
    }
  }
  function handleMouseDown(view, startEvent) {
    var _a2;
    if (startEvent.ctrlKey || startEvent.metaKey)
      return;
    const startDOMCell = domInCell(view, startEvent.target);
    let $anchor;
    if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {
      setCellSelection(view.state.selection.$anchorCell, startEvent);
      startEvent.preventDefault();
    } else if (startEvent.shiftKey && startDOMCell && ($anchor = cellAround(view.state.selection.$anchor)) != null && ((_a2 = cellUnderMouse(view, startEvent)) == null ? void 0 : _a2.pos) != $anchor.pos) {
      setCellSelection($anchor, startEvent);
      startEvent.preventDefault();
    } else if (!startDOMCell) {
      return;
    }
    function setCellSelection($anchor2, event) {
      let $head = cellUnderMouse(view, event);
      const starting = tableEditingKey.getState(view.state) == null;
      if (!$head || !inSameTable($anchor2, $head)) {
        if (starting)
          $head = $anchor2;
        else
          return;
      }
      const selection = new CellSelection($anchor2, $head);
      if (starting || !view.state.selection.eq(selection)) {
        const tr = view.state.tr.setSelection(selection);
        if (starting)
          tr.setMeta(tableEditingKey, $anchor2.pos);
        view.dispatch(tr);
      }
    }
    function stop() {
      view.root.removeEventListener("mouseup", stop);
      view.root.removeEventListener("dragstart", stop);
      view.root.removeEventListener("mousemove", move);
      if (tableEditingKey.getState(view.state) != null)
        view.dispatch(view.state.tr.setMeta(tableEditingKey, -1));
    }
    function move(_event) {
      const event = _event;
      const anchor = tableEditingKey.getState(view.state);
      let $anchor2;
      if (anchor != null) {
        $anchor2 = view.state.doc.resolve(anchor);
      } else if (domInCell(view, event.target) != startDOMCell) {
        $anchor2 = cellUnderMouse(view, startEvent);
        if (!$anchor2)
          return stop();
      }
      if ($anchor2)
        setCellSelection($anchor2, event);
    }
    view.root.addEventListener("mouseup", stop);
    view.root.addEventListener("dragstart", stop);
    view.root.addEventListener("mousemove", move);
  }
  function atEndOfCell(view, axis, dir) {
    if (!(view.state.selection instanceof TextSelection))
      return null;
    const { $head } = view.state.selection;
    for (let d6 = $head.depth - 1; d6 >= 0; d6--) {
      const parent = $head.node(d6), index2 = dir < 0 ? $head.index(d6) : $head.indexAfter(d6);
      if (index2 != (dir < 0 ? 0 : parent.childCount))
        return null;
      if (parent.type.spec.tableRole == "cell" || parent.type.spec.tableRole == "header_cell") {
        const cellPos = $head.before(d6);
        const dirStr = axis == "vert" ? dir > 0 ? "down" : "up" : dir > 0 ? "right" : "left";
        return view.endOfTextblock(dirStr) ? cellPos : null;
      }
    }
    return null;
  }
  function domInCell(view, dom) {
    for (; dom && dom != view.dom; dom = dom.parentNode) {
      if (dom.nodeName == "TD" || dom.nodeName == "TH") {
        return dom;
      }
    }
    return null;
  }
  function cellUnderMouse(view, event) {
    const mousePos = view.posAtCoords({
      left: event.clientX,
      top: event.clientY
    });
    if (!mousePos)
      return null;
    return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;
  }
  var TableView = class {
    constructor(node2, cellMinWidth) {
      this.node = node2;
      this.cellMinWidth = cellMinWidth;
      this.dom = document.createElement("div");
      this.dom.className = "tableWrapper";
      this.table = this.dom.appendChild(document.createElement("table"));
      this.colgroup = this.table.appendChild(document.createElement("colgroup"));
      updateColumnsOnResize(node2, this.colgroup, this.table, cellMinWidth);
      this.contentDOM = this.table.appendChild(document.createElement("tbody"));
    }
    update(node2) {
      if (node2.type != this.node.type)
        return false;
      this.node = node2;
      updateColumnsOnResize(node2, this.colgroup, this.table, this.cellMinWidth);
      return true;
    }
    ignoreMutation(record) {
      return record.type == "attributes" && (record.target == this.table || this.colgroup.contains(record.target));
    }
  };
  function updateColumnsOnResize(node2, colgroup, table, cellMinWidth, overrideCol, overrideValue) {
    var _a2;
    let totalWidth = 0;
    let fixedWidth = true;
    let nextDOM = colgroup.firstChild;
    const row = node2.firstChild;
    if (!row)
      return;
    for (let i3 = 0, col = 0; i3 < row.childCount; i3++) {
      const { colspan, colwidth } = row.child(i3).attrs;
      for (let j6 = 0; j6 < colspan; j6++, col++) {
        const hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j6];
        const cssWidth = hasWidth ? hasWidth + "px" : "";
        totalWidth += hasWidth || cellMinWidth;
        if (!hasWidth)
          fixedWidth = false;
        if (!nextDOM) {
          colgroup.appendChild(document.createElement("col")).style.width = cssWidth;
        } else {
          if (nextDOM.style.width != cssWidth)
            nextDOM.style.width = cssWidth;
          nextDOM = nextDOM.nextSibling;
        }
      }
    }
    while (nextDOM) {
      const after = nextDOM.nextSibling;
      (_a2 = nextDOM.parentNode) == null ? void 0 : _a2.removeChild(nextDOM);
      nextDOM = after;
    }
    if (fixedWidth) {
      table.style.width = totalWidth + "px";
      table.style.minWidth = "";
    } else {
      table.style.width = "";
      table.style.minWidth = totalWidth + "px";
    }
  }
  var columnResizingPluginKey = new PluginKey(
    "tableColumnResizing"
  );
  function columnResizing({
    handleWidth = 5,
    cellMinWidth = 25,
    View = TableView,
    lastColumnResizable = true
  } = {}) {
    const plugin2 = new Plugin({
      key: columnResizingPluginKey,
      state: {
        init(_3, state) {
          plugin2.spec.props.nodeViews[tableNodeTypes(state.schema).table.name] = (node2, view) => new View(node2, cellMinWidth, view);
          return new ResizeState(-1, false);
        },
        apply(tr, prev) {
          return prev.apply(tr);
        }
      },
      props: {
        attributes: (state) => {
          const pluginState = columnResizingPluginKey.getState(state);
          return pluginState && pluginState.activeHandle > -1 ? { class: "resize-cursor" } : {};
        },
        handleDOMEvents: {
          mousemove: (view, event) => {
            handleMouseMove(
              view,
              event,
              handleWidth,
              cellMinWidth,
              lastColumnResizable
            );
          },
          mouseleave: (view) => {
            handleMouseLeave(view);
          },
          mousedown: (view, event) => {
            handleMouseDown2(view, event, cellMinWidth);
          }
        },
        decorations: (state) => {
          const pluginState = columnResizingPluginKey.getState(state);
          if (pluginState && pluginState.activeHandle > -1) {
            return handleDecorations(state, pluginState.activeHandle);
          }
        },
        nodeViews: {}
      }
    });
    return plugin2;
  }
  var ResizeState = class _ResizeState {
    constructor(activeHandle, dragging) {
      this.activeHandle = activeHandle;
      this.dragging = dragging;
    }
    apply(tr) {
      const state = this;
      const action = tr.getMeta(columnResizingPluginKey);
      if (action && action.setHandle != null)
        return new _ResizeState(action.setHandle, false);
      if (action && action.setDragging !== void 0)
        return new _ResizeState(state.activeHandle, action.setDragging);
      if (state.activeHandle > -1 && tr.docChanged) {
        let handle2 = tr.mapping.map(state.activeHandle, -1);
        if (!pointsAtCell(tr.doc.resolve(handle2))) {
          handle2 = -1;
        }
        return new _ResizeState(handle2, state.dragging);
      }
      return state;
    }
  };
  function handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable) {
    const pluginState = columnResizingPluginKey.getState(view.state);
    if (!pluginState)
      return;
    if (!pluginState.dragging) {
      const target = domCellAround(event.target);
      let cell = -1;
      if (target) {
        const { left, right } = target.getBoundingClientRect();
        if (event.clientX - left <= handleWidth)
          cell = edgeCell(view, event, "left", handleWidth);
        else if (right - event.clientX <= handleWidth)
          cell = edgeCell(view, event, "right", handleWidth);
      }
      if (cell != pluginState.activeHandle) {
        if (!lastColumnResizable && cell !== -1) {
          const $cell = view.state.doc.resolve(cell);
          const table = $cell.node(-1);
          const map6 = TableMap.get(table);
          const tableStart = $cell.start(-1);
          const col = map6.colCount($cell.pos - tableStart) + $cell.nodeAfter.attrs.colspan - 1;
          if (col == map6.width - 1) {
            return;
          }
        }
        updateHandle(view, cell);
      }
    }
  }
  function handleMouseLeave(view) {
    const pluginState = columnResizingPluginKey.getState(view.state);
    if (pluginState && pluginState.activeHandle > -1 && !pluginState.dragging)
      updateHandle(view, -1);
  }
  function handleMouseDown2(view, event, cellMinWidth) {
    var _a2;
    const win = (_a2 = view.dom.ownerDocument.defaultView) != null ? _a2 : window;
    const pluginState = columnResizingPluginKey.getState(view.state);
    if (!pluginState || pluginState.activeHandle == -1 || pluginState.dragging)
      return false;
    const cell = view.state.doc.nodeAt(pluginState.activeHandle);
    const width = currentColWidth(view, pluginState.activeHandle, cell.attrs);
    view.dispatch(
      view.state.tr.setMeta(columnResizingPluginKey, {
        setDragging: { startX: event.clientX, startWidth: width }
      })
    );
    function finish(event2) {
      win.removeEventListener("mouseup", finish);
      win.removeEventListener("mousemove", move);
      const pluginState2 = columnResizingPluginKey.getState(view.state);
      if (pluginState2 == null ? void 0 : pluginState2.dragging) {
        updateColumnWidth(
          view,
          pluginState2.activeHandle,
          draggedWidth(pluginState2.dragging, event2, cellMinWidth)
        );
        view.dispatch(
          view.state.tr.setMeta(columnResizingPluginKey, { setDragging: null })
        );
      }
    }
    function move(event2) {
      if (!event2.which)
        return finish(event2);
      const pluginState2 = columnResizingPluginKey.getState(view.state);
      if (!pluginState2)
        return;
      if (pluginState2.dragging) {
        const dragged = draggedWidth(pluginState2.dragging, event2, cellMinWidth);
        displayColumnWidth(view, pluginState2.activeHandle, dragged, cellMinWidth);
      }
    }
    win.addEventListener("mouseup", finish);
    win.addEventListener("mousemove", move);
    event.preventDefault();
    return true;
  }
  function currentColWidth(view, cellPos, { colspan, colwidth }) {
    const width = colwidth && colwidth[colwidth.length - 1];
    if (width)
      return width;
    const dom = view.domAtPos(cellPos);
    const node2 = dom.node.childNodes[dom.offset];
    let domWidth = node2.offsetWidth, parts = colspan;
    if (colwidth) {
      for (let i3 = 0; i3 < colspan; i3++)
        if (colwidth[i3]) {
          domWidth -= colwidth[i3];
          parts--;
        }
    }
    return domWidth / parts;
  }
  function domCellAround(target) {
    while (target && target.nodeName != "TD" && target.nodeName != "TH")
      target = target.classList && target.classList.contains("ProseMirror") ? null : target.parentNode;
    return target;
  }
  function edgeCell(view, event, side, handleWidth) {
    const offset = side == "right" ? -handleWidth : handleWidth;
    const found2 = view.posAtCoords({
      left: event.clientX + offset,
      top: event.clientY
    });
    if (!found2)
      return -1;
    const { pos } = found2;
    const $cell = cellAround(view.state.doc.resolve(pos));
    if (!$cell)
      return -1;
    if (side == "right")
      return $cell.pos;
    const map6 = TableMap.get($cell.node(-1)), start = $cell.start(-1);
    const index2 = map6.map.indexOf($cell.pos - start);
    return index2 % map6.width == 0 ? -1 : start + map6.map[index2 - 1];
  }
  function draggedWidth(dragging, event, cellMinWidth) {
    const offset = event.clientX - dragging.startX;
    return Math.max(cellMinWidth, dragging.startWidth + offset);
  }
  function updateHandle(view, value) {
    view.dispatch(
      view.state.tr.setMeta(columnResizingPluginKey, { setHandle: value })
    );
  }
  function updateColumnWidth(view, cell, width) {
    const $cell = view.state.doc.resolve(cell);
    const table = $cell.node(-1), map6 = TableMap.get(table), start = $cell.start(-1);
    const col = map6.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
    const tr = view.state.tr;
    for (let row = 0; row < map6.height; row++) {
      const mapIndex = row * map6.width + col;
      if (row && map6.map[mapIndex] == map6.map[mapIndex - map6.width])
        continue;
      const pos = map6.map[mapIndex];
      const attrs = table.nodeAt(pos).attrs;
      const index2 = attrs.colspan == 1 ? 0 : col - map6.colCount(pos);
      if (attrs.colwidth && attrs.colwidth[index2] == width)
        continue;
      const colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);
      colwidth[index2] = width;
      tr.setNodeMarkup(start + pos, null, __spreadProps(__spreadValues({}, attrs), { colwidth }));
    }
    if (tr.docChanged)
      view.dispatch(tr);
  }
  function displayColumnWidth(view, cell, width, cellMinWidth) {
    const $cell = view.state.doc.resolve(cell);
    const table = $cell.node(-1), start = $cell.start(-1);
    const col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;
    let dom = view.domAtPos($cell.start(-1)).node;
    while (dom && dom.nodeName != "TABLE") {
      dom = dom.parentNode;
    }
    if (!dom)
      return;
    updateColumnsOnResize(
      table,
      dom.firstChild,
      dom,
      cellMinWidth,
      col,
      width
    );
  }
  function zeroes(n5) {
    return Array(n5).fill(0);
  }
  function handleDecorations(state, cell) {
    const decorations2 = [];
    const $cell = state.doc.resolve(cell);
    const table = $cell.node(-1);
    if (!table) {
      return DecorationSet.empty;
    }
    const map6 = TableMap.get(table);
    const start = $cell.start(-1);
    const col = map6.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan;
    for (let row = 0; row < map6.height; row++) {
      const index2 = col + row * map6.width - 1;
      if ((col == map6.width || map6.map[index2] != map6.map[index2 + 1]) && (row == 0 || map6.map[index2] != map6.map[index2 - map6.width])) {
        const cellPos = map6.map[index2];
        const pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;
        const dom = document.createElement("div");
        dom.className = "column-resize-handle";
        decorations2.push(Decoration2.widget(pos, dom));
      }
    }
    return DecorationSet.create(state.doc, decorations2);
  }
  function selectedRect(state) {
    const sel = state.selection;
    const $pos = selectionCell(state);
    const table = $pos.node(-1);
    const tableStart = $pos.start(-1);
    const map6 = TableMap.get(table);
    const rect = sel instanceof CellSelection ? map6.rectBetween(
      sel.$anchorCell.pos - tableStart,
      sel.$headCell.pos - tableStart
    ) : map6.findCell($pos.pos - tableStart);
    return __spreadProps(__spreadValues({}, rect), { tableStart, map: map6, table });
  }
  function addColumn(tr, { map: map6, tableStart, table }, col) {
    let refColumn = col > 0 ? -1 : 0;
    if (columnIsHeader(map6, table, col + refColumn)) {
      refColumn = col == 0 || col == map6.width ? null : 0;
    }
    for (let row = 0; row < map6.height; row++) {
      const index2 = row * map6.width + col;
      if (col > 0 && col < map6.width && map6.map[index2 - 1] == map6.map[index2]) {
        const pos = map6.map[index2];
        const cell = table.nodeAt(pos);
        tr.setNodeMarkup(
          tr.mapping.map(tableStart + pos),
          null,
          addColSpan(cell.attrs, col - map6.colCount(pos))
        );
        row += cell.attrs.rowspan - 1;
      } else {
        const type = refColumn == null ? tableNodeTypes(table.type.schema).cell : table.nodeAt(map6.map[index2 + refColumn]).type;
        const pos = map6.positionAt(row, col, table);
        tr.insert(tr.mapping.map(tableStart + pos), type.createAndFill());
      }
    }
    return tr;
  }
  function addColumnBefore(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const rect = selectedRect(state);
      dispatch(addColumn(state.tr, rect, rect.left));
    }
    return true;
  }
  function addColumnAfter(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const rect = selectedRect(state);
      dispatch(addColumn(state.tr, rect, rect.right));
    }
    return true;
  }
  function removeColumn(tr, { map: map6, table, tableStart }, col) {
    const mapStart = tr.mapping.maps.length;
    for (let row = 0; row < map6.height; ) {
      const index2 = row * map6.width + col;
      const pos = map6.map[index2];
      const cell = table.nodeAt(pos);
      const attrs = cell.attrs;
      if (col > 0 && map6.map[index2 - 1] == pos || col < map6.width - 1 && map6.map[index2 + 1] == pos) {
        tr.setNodeMarkup(
          tr.mapping.slice(mapStart).map(tableStart + pos),
          null,
          removeColSpan(attrs, col - map6.colCount(pos))
        );
      } else {
        const start = tr.mapping.slice(mapStart).map(tableStart + pos);
        tr.delete(start, start + cell.nodeSize);
      }
      row += attrs.rowspan;
    }
  }
  function deleteColumn(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const rect = selectedRect(state);
      const tr = state.tr;
      if (rect.left == 0 && rect.right == rect.map.width)
        return false;
      for (let i3 = rect.right - 1; ; i3--) {
        removeColumn(tr, rect, i3);
        if (i3 == rect.left)
          break;
        const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;
        if (!table) {
          throw RangeError("No table found");
        }
        rect.table = table;
        rect.map = TableMap.get(table);
      }
      dispatch(tr);
    }
    return true;
  }
  function removeRow(tr, { map: map6, table, tableStart }, row) {
    let rowPos = 0;
    for (let i3 = 0; i3 < row; i3++)
      rowPos += table.child(i3).nodeSize;
    const nextRow = rowPos + table.child(row).nodeSize;
    const mapFrom = tr.mapping.maps.length;
    tr.delete(rowPos + tableStart, nextRow + tableStart);
    const seen = /* @__PURE__ */ new Set();
    for (let col = 0, index2 = row * map6.width; col < map6.width; col++, index2++) {
      const pos = map6.map[index2];
      if (seen.has(pos))
        continue;
      seen.add(pos);
      if (row > 0 && pos == map6.map[index2 - map6.width]) {
        const attrs = table.nodeAt(pos).attrs;
        tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, __spreadProps(__spreadValues({}, attrs), {
          rowspan: attrs.rowspan - 1
        }));
        col += attrs.colspan - 1;
      } else if (row < map6.height && pos == map6.map[index2 + map6.width]) {
        const cell = table.nodeAt(pos);
        const attrs = cell.attrs;
        const copy2 = cell.type.create(
          __spreadProps(__spreadValues({}, attrs), { rowspan: cell.attrs.rowspan - 1 }),
          cell.content
        );
        const newPos = map6.positionAt(row + 1, col, table);
        tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy2);
        col += attrs.colspan - 1;
      }
    }
  }
  function deleteRow(state, dispatch) {
    if (!isInTable(state))
      return false;
    if (dispatch) {
      const rect = selectedRect(state), tr = state.tr;
      if (rect.top == 0 && rect.bottom == rect.map.height)
        return false;
      for (let i3 = rect.bottom - 1; ; i3--) {
        removeRow(tr, rect, i3);
        if (i3 == rect.top)
          break;
        const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;
        if (!table) {
          throw RangeError("No table found");
        }
        rect.table = table;
        rect.map = TableMap.get(rect.table);
      }
      dispatch(tr);
    }
    return true;
  }
  function setCellAttr(name2, value) {
    return function(state, dispatch) {
      if (!isInTable(state))
        return false;
      const $cell = selectionCell(state);
      if ($cell.nodeAfter.attrs[name2] === value)
        return false;
      if (dispatch) {
        const tr = state.tr;
        if (state.selection instanceof CellSelection)
          state.selection.forEachCell((node2, pos) => {
            if (node2.attrs[name2] !== value)
              tr.setNodeMarkup(pos, null, __spreadProps(__spreadValues({}, node2.attrs), {
                [name2]: value
              }));
          });
        else
          tr.setNodeMarkup($cell.pos, null, __spreadProps(__spreadValues({}, $cell.nodeAfter.attrs), {
            [name2]: value
          }));
        dispatch(tr);
      }
      return true;
    };
  }
  function deprecated_toggleHeader(type) {
    return function(state, dispatch) {
      if (!isInTable(state))
        return false;
      if (dispatch) {
        const types2 = tableNodeTypes(state.schema);
        const rect = selectedRect(state), tr = state.tr;
        const cells = rect.map.cellsInRect(
          type == "column" ? {
            left: rect.left,
            top: 0,
            right: rect.right,
            bottom: rect.map.height
          } : type == "row" ? {
            left: 0,
            top: rect.top,
            right: rect.map.width,
            bottom: rect.bottom
          } : rect
        );
        const nodes = cells.map((pos) => rect.table.nodeAt(pos));
        for (let i3 = 0; i3 < cells.length; i3++)
          if (nodes[i3].type == types2.header_cell)
            tr.setNodeMarkup(
              rect.tableStart + cells[i3],
              types2.cell,
              nodes[i3].attrs
            );
        if (tr.steps.length == 0)
          for (let i3 = 0; i3 < cells.length; i3++)
            tr.setNodeMarkup(
              rect.tableStart + cells[i3],
              types2.header_cell,
              nodes[i3].attrs
            );
        dispatch(tr);
      }
      return true;
    };
  }
  function isHeaderEnabledByType(type, rect, types2) {
    const cellPositions = rect.map.cellsInRect({
      left: 0,
      top: 0,
      right: type == "row" ? rect.map.width : 1,
      bottom: type == "column" ? rect.map.height : 1
    });
    for (let i3 = 0; i3 < cellPositions.length; i3++) {
      const cell = rect.table.nodeAt(cellPositions[i3]);
      if (cell && cell.type !== types2.header_cell) {
        return false;
      }
    }
    return true;
  }
  function toggleHeader(type, options) {
    options = options || { useDeprecatedLogic: false };
    if (options.useDeprecatedLogic)
      return deprecated_toggleHeader(type);
    return function(state, dispatch) {
      if (!isInTable(state))
        return false;
      if (dispatch) {
        const types2 = tableNodeTypes(state.schema);
        const rect = selectedRect(state), tr = state.tr;
        const isHeaderRowEnabled = isHeaderEnabledByType("row", rect, types2);
        const isHeaderColumnEnabled = isHeaderEnabledByType(
          "column",
          rect,
          types2
        );
        const isHeaderEnabled = type === "column" ? isHeaderRowEnabled : type === "row" ? isHeaderColumnEnabled : false;
        const selectionStartsAt = isHeaderEnabled ? 1 : 0;
        const cellsRect = type == "column" ? {
          left: 0,
          top: selectionStartsAt,
          right: 1,
          bottom: rect.map.height
        } : type == "row" ? {
          left: selectionStartsAt,
          top: 0,
          right: rect.map.width,
          bottom: 1
        } : rect;
        const newType = type == "column" ? isHeaderColumnEnabled ? types2.cell : types2.header_cell : type == "row" ? isHeaderRowEnabled ? types2.cell : types2.header_cell : types2.cell;
        rect.map.cellsInRect(cellsRect).forEach((relativeCellPos) => {
          const cellPos = relativeCellPos + rect.tableStart;
          const cell = tr.doc.nodeAt(cellPos);
          if (cell) {
            tr.setNodeMarkup(cellPos, newType, cell.attrs);
          }
        });
        dispatch(tr);
      }
      return true;
    };
  }
  var toggleHeaderRow = toggleHeader("row", {
    useDeprecatedLogic: true
  });
  var toggleHeaderColumn = toggleHeader("column", {
    useDeprecatedLogic: true
  });
  var toggleHeaderCell = toggleHeader("cell", {
    useDeprecatedLogic: true
  });
  function findNextCell($cell, dir) {
    if (dir < 0) {
      const before = $cell.nodeBefore;
      if (before)
        return $cell.pos - before.nodeSize;
      for (let row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--) {
        const rowNode = $cell.node(-1).child(row);
        const lastChild = rowNode.lastChild;
        if (lastChild) {
          return rowEnd - 1 - lastChild.nodeSize;
        }
        rowEnd -= rowNode.nodeSize;
      }
    } else {
      if ($cell.index() < $cell.parent.childCount - 1) {
        return $cell.pos + $cell.nodeAfter.nodeSize;
      }
      const table = $cell.node(-1);
      for (let row = $cell.indexAfter(-1), rowStart = $cell.after(); row < table.childCount; row++) {
        const rowNode = table.child(row);
        if (rowNode.childCount)
          return rowStart + 1;
        rowStart += rowNode.nodeSize;
      }
    }
    return null;
  }
  function goToNextCell(direction) {
    return function(state, dispatch) {
      if (!isInTable(state))
        return false;
      const cell = findNextCell(selectionCell(state), direction);
      if (cell == null)
        return false;
      if (dispatch) {
        const $cell = state.doc.resolve(cell);
        dispatch(
          state.tr.setSelection(TextSelection.between($cell, moveCellForward($cell))).scrollIntoView()
        );
      }
      return true;
    };
  }
  function deleteTable(state, dispatch) {
    const $pos = state.selection.$anchor;
    for (let d6 = $pos.depth; d6 > 0; d6--) {
      const node2 = $pos.node(d6);
      if (node2.type.spec.tableRole == "table") {
        if (dispatch)
          dispatch(
            state.tr.delete($pos.before(d6), $pos.after(d6)).scrollIntoView()
          );
        return true;
      }
    }
    return false;
  }
  function tableEditing({
    allowTableNodeSelection = false
  } = {}) {
    return new Plugin({
      key: tableEditingKey,
      // This piece of state is used to remember when a mouse-drag
      // cell-selection is happening, so that it can continue even as
      // transactions (which might move its anchor cell) come in.
      state: {
        init() {
          return null;
        },
        apply(tr, cur2) {
          const set = tr.getMeta(tableEditingKey);
          if (set != null)
            return set == -1 ? null : set;
          if (cur2 == null || !tr.docChanged)
            return cur2;
          const { deleted, pos } = tr.mapping.mapResult(cur2);
          return deleted ? null : pos;
        }
      },
      props: {
        decorations: drawCellSelection,
        handleDOMEvents: {
          mousedown: handleMouseDown
        },
        createSelectionBetween(view) {
          return tableEditingKey.getState(view.state) != null ? view.state.selection : null;
        },
        handleTripleClick: handleTripleClick2,
        handleKeyDown,
        handlePaste
      },
      appendTransaction(_3, oldState, state) {
        return normalizeSelection(
          state,
          fixTables(state, oldState),
          allowTableNodeSelection
        );
      }
    });
  }

  // node_modules/ccount/index.js
  function ccount(value, character) {
    const source = String(value);
    if (typeof character !== "string") {
      throw new TypeError("Expected character");
    }
    let count = 0;
    let index2 = source.indexOf(character);
    while (index2 !== -1) {
      count++;
      index2 = source.indexOf(character, index2 + character.length);
    }
    return count;
  }

  // node_modules/mdast-util-find-and-replace/lib/index.js
  function findAndReplace(tree, list4, options) {
    const settings = options || {};
    const ignored = convert(settings.ignore || []);
    const pairs = toPairs(list4);
    let pairIndex = -1;
    while (++pairIndex < pairs.length) {
      visitParents(tree, "text", visitor);
    }
    function visitor(node2, parents) {
      let index2 = -1;
      let grandparent;
      while (++index2 < parents.length) {
        const parent = parents[index2];
        const siblings = grandparent ? grandparent.children : void 0;
        if (ignored(
          parent,
          siblings ? siblings.indexOf(parent) : void 0,
          grandparent
        )) {
          return;
        }
        grandparent = parent;
      }
      if (grandparent) {
        return handler(node2, parents);
      }
    }
    function handler(node2, parents) {
      const parent = parents[parents.length - 1];
      const find2 = pairs[pairIndex][0];
      const replace3 = pairs[pairIndex][1];
      let start = 0;
      const siblings = parent.children;
      const index2 = siblings.indexOf(node2);
      let change = false;
      let nodes = [];
      find2.lastIndex = 0;
      let match = find2.exec(node2.value);
      while (match) {
        const position2 = match.index;
        const matchObject = {
          index: match.index,
          input: match.input,
          stack: [...parents, node2]
        };
        let value = replace3(...match, matchObject);
        if (typeof value === "string") {
          value = value.length > 0 ? { type: "text", value } : void 0;
        }
        if (value === false) {
          find2.lastIndex = position2 + 1;
        } else {
          if (start !== position2) {
            nodes.push({
              type: "text",
              value: node2.value.slice(start, position2)
            });
          }
          if (Array.isArray(value)) {
            nodes.push(...value);
          } else if (value) {
            nodes.push(value);
          }
          start = position2 + match[0].length;
          change = true;
        }
        if (!find2.global) {
          break;
        }
        match = find2.exec(node2.value);
      }
      if (change) {
        if (start < node2.value.length) {
          nodes.push({ type: "text", value: node2.value.slice(start) });
        }
        parent.children.splice(index2, 1, ...nodes);
      } else {
        nodes = [node2];
      }
      return index2 + nodes.length;
    }
  }
  function toPairs(tupleOrList) {
    const result = [];
    if (!Array.isArray(tupleOrList)) {
      throw new TypeError("Expected find and replace tuple or list of tuples");
    }
    const list4 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
    let index2 = -1;
    while (++index2 < list4.length) {
      const tuple = list4[index2];
      result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
    }
    return result;
  }
  function toExpression(find2) {
    return typeof find2 === "string" ? new RegExp(escapeStringRegexp(find2), "g") : find2;
  }
  function toFunction(replace3) {
    return typeof replace3 === "function" ? replace3 : function() {
      return replace3;
    };
  }

  // node_modules/mdast-util-gfm-autolink-literal/lib/index.js
  var inConstruct = "phrasing";
  var notInConstruct = ["autolink", "link", "image", "label"];
  function gfmAutolinkLiteralFromMarkdown() {
    return {
      transforms: [transformGfmAutolinkLiterals],
      enter: {
        literalAutolink: enterLiteralAutolink,
        literalAutolinkEmail: enterLiteralAutolinkValue,
        literalAutolinkHttp: enterLiteralAutolinkValue,
        literalAutolinkWww: enterLiteralAutolinkValue
      },
      exit: {
        literalAutolink: exitLiteralAutolink,
        literalAutolinkEmail: exitLiteralAutolinkEmail,
        literalAutolinkHttp: exitLiteralAutolinkHttp,
        literalAutolinkWww: exitLiteralAutolinkWww
      }
    };
  }
  function gfmAutolinkLiteralToMarkdown() {
    return {
      unsafe: [
        {
          character: "@",
          before: "[+\\-.\\w]",
          after: "[\\-.\\w]",
          inConstruct,
          notInConstruct
        },
        {
          character: ".",
          before: "[Ww]",
          after: "[\\-.\\w]",
          inConstruct,
          notInConstruct
        },
        {
          character: ":",
          before: "[ps]",
          after: "\\/",
          inConstruct,
          notInConstruct
        }
      ]
    };
  }
  function enterLiteralAutolink(token) {
    this.enter({ type: "link", title: null, url: "", children: [] }, token);
  }
  function enterLiteralAutolinkValue(token) {
    this.config.enter.autolinkProtocol.call(this, token);
  }
  function exitLiteralAutolinkHttp(token) {
    this.config.exit.autolinkProtocol.call(this, token);
  }
  function exitLiteralAutolinkWww(token) {
    this.config.exit.data.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2.type === "link");
    node2.url = "http://" + this.sliceSerialize(token);
  }
  function exitLiteralAutolinkEmail(token) {
    this.config.exit.autolinkEmail.call(this, token);
  }
  function exitLiteralAutolink(token) {
    this.exit(token);
  }
  function transformGfmAutolinkLiterals(tree) {
    findAndReplace(
      tree,
      [
        [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
        [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
      ],
      { ignore: ["link", "linkReference"] }
    );
  }
  function findUrl(_3, protocol, domain2, path3, match) {
    let prefix = "";
    if (!previous2(match)) {
      return false;
    }
    if (/^w/i.test(protocol)) {
      domain2 = protocol + domain2;
      protocol = "";
      prefix = "http://";
    }
    if (!isCorrectDomain(domain2)) {
      return false;
    }
    const parts = splitUrl(domain2 + path3);
    if (!parts[0])
      return false;
    const result = {
      type: "link",
      title: null,
      url: prefix + protocol + parts[0],
      children: [{ type: "text", value: protocol + parts[0] }]
    };
    if (parts[1]) {
      return [result, { type: "text", value: parts[1] }];
    }
    return result;
  }
  function findEmail(_3, atext, label, match) {
    if (
      // Not an expected previous character.
      !previous2(match, true) || // Label ends in not allowed character.
      /[-\d_]$/.test(label)
    ) {
      return false;
    }
    return {
      type: "link",
      title: null,
      url: "mailto:" + atext + "@" + label,
      children: [{ type: "text", value: atext + "@" + label }]
    };
  }
  function isCorrectDomain(domain2) {
    const parts = domain2.split(".");
    if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
      return false;
    }
    return true;
  }
  function splitUrl(url) {
    const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
    if (!trailExec) {
      return [url, void 0];
    }
    url = url.slice(0, trailExec.index);
    let trail2 = trailExec[0];
    let closingParenIndex = trail2.indexOf(")");
    const openingParens = ccount(url, "(");
    let closingParens = ccount(url, ")");
    while (closingParenIndex !== -1 && openingParens > closingParens) {
      url += trail2.slice(0, closingParenIndex + 1);
      trail2 = trail2.slice(closingParenIndex + 1);
      closingParenIndex = trail2.indexOf(")");
      closingParens++;
    }
    return [url, trail2];
  }
  function previous2(match, email) {
    const code3 = match.input.charCodeAt(match.index - 1);
    return (match.index === 0 || unicodeWhitespace(code3) || unicodePunctuation(code3)) && (!email || code3 !== 47);
  }

  // node_modules/mdast-util-gfm-footnote/lib/index.js
  footnoteReference.peek = footnoteReferencePeek;
  function gfmFootnoteFromMarkdown() {
    return {
      enter: {
        gfmFootnoteDefinition: enterFootnoteDefinition,
        gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
        gfmFootnoteCall: enterFootnoteCall,
        gfmFootnoteCallString: enterFootnoteCallString
      },
      exit: {
        gfmFootnoteDefinition: exitFootnoteDefinition,
        gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
        gfmFootnoteCall: exitFootnoteCall,
        gfmFootnoteCallString: exitFootnoteCallString
      }
    };
  }
  function gfmFootnoteToMarkdown() {
    return {
      // This is on by default already.
      unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
      handlers: { footnoteDefinition, footnoteReference }
    };
  }
  function enterFootnoteDefinition(token) {
    this.enter(
      { type: "footnoteDefinition", identifier: "", label: "", children: [] },
      token
    );
  }
  function enterFootnoteDefinitionLabelString() {
    this.buffer();
  }
  function exitFootnoteDefinitionLabelString(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2.type === "footnoteDefinition");
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function exitFootnoteDefinition(token) {
    this.exit(token);
  }
  function enterFootnoteCall(token) {
    this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
  }
  function enterFootnoteCallString() {
    this.buffer();
  }
  function exitFootnoteCallString(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2.type === "footnoteReference");
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function exitFootnoteCall(token) {
    this.exit(token);
  }
  function footnoteReference(node2, _3, state, info) {
    const tracker = state.createTracker(info);
    let value = tracker.move("[^");
    const exit3 = state.enter("footnoteReference");
    const subexit = state.enter("reference");
    value += tracker.move(
      state.safe(state.associationId(node2), __spreadProps(__spreadValues({}, tracker.current()), {
        before: value,
        after: "]"
      }))
    );
    subexit();
    exit3();
    value += tracker.move("]");
    return value;
  }
  function footnoteReferencePeek() {
    return "[";
  }
  function footnoteDefinition(node2, _3, state, info) {
    const tracker = state.createTracker(info);
    let value = tracker.move("[^");
    const exit3 = state.enter("footnoteDefinition");
    const subexit = state.enter("label");
    value += tracker.move(
      state.safe(state.associationId(node2), __spreadProps(__spreadValues({}, tracker.current()), {
        before: value,
        after: "]"
      }))
    );
    subexit();
    value += tracker.move(
      "]:" + (node2.children && node2.children.length > 0 ? " " : "")
    );
    tracker.shift(4);
    value += tracker.move(
      state.indentLines(state.containerFlow(node2, tracker.current()), map5)
    );
    exit3();
    return value;
  }
  function map5(line, index2, blank) {
    if (index2 === 0) {
      return line;
    }
    return (blank ? "" : "    ") + line;
  }

  // node_modules/mdast-util-gfm-strikethrough/lib/index.js
  var constructsWithoutStrikethrough = [
    "autolink",
    "destinationLiteral",
    "destinationRaw",
    "reference",
    "titleQuote",
    "titleApostrophe"
  ];
  handleDelete.peek = peekDelete;
  function gfmStrikethroughFromMarkdown() {
    return {
      canContainEols: ["delete"],
      enter: { strikethrough: enterStrikethrough },
      exit: { strikethrough: exitStrikethrough }
    };
  }
  function gfmStrikethroughToMarkdown() {
    return {
      unsafe: [
        {
          character: "~",
          inConstruct: "phrasing",
          notInConstruct: constructsWithoutStrikethrough
        }
      ],
      handlers: { delete: handleDelete }
    };
  }
  function enterStrikethrough(token) {
    this.enter({ type: "delete", children: [] }, token);
  }
  function exitStrikethrough(token) {
    this.exit(token);
  }
  function handleDelete(node2, _3, state, info) {
    const tracker = state.createTracker(info);
    const exit3 = state.enter("strikethrough");
    let value = tracker.move("~~");
    value += state.containerPhrasing(node2, __spreadProps(__spreadValues({}, tracker.current()), {
      before: value,
      after: "~"
    }));
    value += tracker.move("~~");
    exit3();
    return value;
  }
  function peekDelete() {
    return "~";
  }

  // node_modules/markdown-table/index.js
  function markdownTable(table, options = {}) {
    const align = (options.align || []).concat();
    const stringLength = options.stringLength || defaultStringLength;
    const alignments = [];
    const cellMatrix = [];
    const sizeMatrix = [];
    const longestCellByColumn = [];
    let mostCellsPerRow = 0;
    let rowIndex = -1;
    while (++rowIndex < table.length) {
      const row2 = [];
      const sizes2 = [];
      let columnIndex2 = -1;
      if (table[rowIndex].length > mostCellsPerRow) {
        mostCellsPerRow = table[rowIndex].length;
      }
      while (++columnIndex2 < table[rowIndex].length) {
        const cell = serialize(table[rowIndex][columnIndex2]);
        if (options.alignDelimiters !== false) {
          const size = stringLength(cell);
          sizes2[columnIndex2] = size;
          if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
            longestCellByColumn[columnIndex2] = size;
          }
        }
        row2.push(cell);
      }
      cellMatrix[rowIndex] = row2;
      sizeMatrix[rowIndex] = sizes2;
    }
    let columnIndex = -1;
    if (typeof align === "object" && "length" in align) {
      while (++columnIndex < mostCellsPerRow) {
        alignments[columnIndex] = toAlignment(align[columnIndex]);
      }
    } else {
      const code3 = toAlignment(align);
      while (++columnIndex < mostCellsPerRow) {
        alignments[columnIndex] = code3;
      }
    }
    columnIndex = -1;
    const row = [];
    const sizes = [];
    while (++columnIndex < mostCellsPerRow) {
      const code3 = alignments[columnIndex];
      let before = "";
      let after = "";
      if (code3 === 99) {
        before = ":";
        after = ":";
      } else if (code3 === 108) {
        before = ":";
      } else if (code3 === 114) {
        after = ":";
      }
      let size = options.alignDelimiters === false ? 1 : Math.max(
        1,
        longestCellByColumn[columnIndex] - before.length - after.length
      );
      const cell = before + "-".repeat(size) + after;
      if (options.alignDelimiters !== false) {
        size = before.length + size + after.length;
        if (size > longestCellByColumn[columnIndex]) {
          longestCellByColumn[columnIndex] = size;
        }
        sizes[columnIndex] = size;
      }
      row[columnIndex] = cell;
    }
    cellMatrix.splice(1, 0, row);
    sizeMatrix.splice(1, 0, sizes);
    rowIndex = -1;
    const lines = [];
    while (++rowIndex < cellMatrix.length) {
      const row2 = cellMatrix[rowIndex];
      const sizes2 = sizeMatrix[rowIndex];
      columnIndex = -1;
      const line = [];
      while (++columnIndex < mostCellsPerRow) {
        const cell = row2[columnIndex] || "";
        let before = "";
        let after = "";
        if (options.alignDelimiters !== false) {
          const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
          const code3 = alignments[columnIndex];
          if (code3 === 114) {
            before = " ".repeat(size);
          } else if (code3 === 99) {
            if (size % 2) {
              before = " ".repeat(size / 2 + 0.5);
              after = " ".repeat(size / 2 - 0.5);
            } else {
              before = " ".repeat(size / 2);
              after = before;
            }
          } else {
            after = " ".repeat(size);
          }
        }
        if (options.delimiterStart !== false && !columnIndex) {
          line.push("|");
        }
        if (options.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
        // empty: there will be a closing space.
        !(options.alignDelimiters === false && cell === "") && (options.delimiterStart !== false || columnIndex)) {
          line.push(" ");
        }
        if (options.alignDelimiters !== false) {
          line.push(before);
        }
        line.push(cell);
        if (options.alignDelimiters !== false) {
          line.push(after);
        }
        if (options.padding !== false) {
          line.push(" ");
        }
        if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
          line.push("|");
        }
      }
      lines.push(
        options.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
      );
    }
    return lines.join("\n");
  }
  function serialize(value) {
    return value === null || value === void 0 ? "" : String(value);
  }
  function defaultStringLength(value) {
    return value.length;
  }
  function toAlignment(value) {
    const code3 = typeof value === "string" ? value.codePointAt(0) : 0;
    return code3 === 67 || code3 === 99 ? 99 : code3 === 76 || code3 === 108 ? 108 : code3 === 82 || code3 === 114 ? 114 : 0;
  }

  // node_modules/mdast-util-gfm-table/lib/index.js
  function gfmTableFromMarkdown() {
    return {
      enter: {
        table: enterTable,
        tableData: enterCell,
        tableHeader: enterCell,
        tableRow: enterRow
      },
      exit: {
        codeText: exitCodeText,
        table: exitTable,
        tableData: exit2,
        tableHeader: exit2,
        tableRow: exit2
      }
    };
  }
  function enterTable(token) {
    const align = token._align;
    ok2(align, "expected `_align` on table");
    this.enter(
      {
        type: "table",
        align: align.map(function(d6) {
          return d6 === "none" ? null : d6;
        }),
        children: []
      },
      token
    );
    this.data.inTable = true;
  }
  function exitTable(token) {
    this.exit(token);
    this.data.inTable = void 0;
  }
  function enterRow(token) {
    this.enter({ type: "tableRow", children: [] }, token);
  }
  function exit2(token) {
    this.exit(token);
  }
  function enterCell(token) {
    this.enter({ type: "tableCell", children: [] }, token);
  }
  function exitCodeText(token) {
    let value = this.resume();
    if (this.data.inTable) {
      value = value.replace(/\\([\\|])/g, replace2);
    }
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2.type === "inlineCode");
    node2.value = value;
    this.exit(token);
  }
  function replace2($0, $1) {
    return $1 === "|" ? $1 : $0;
  }
  function gfmTableToMarkdown(options) {
    const settings = options || {};
    const padding = settings.tableCellPadding;
    const alignDelimiters = settings.tablePipeAlign;
    const stringLength = settings.stringLength;
    const around = padding ? " " : "|";
    return {
      unsafe: [
        { character: "\r", inConstruct: "tableCell" },
        { character: "\n", inConstruct: "tableCell" },
        // A pipe, when followed by a tab or space (padding), or a dash or colon
        // (unpadded delimiter row), could result in a table.
        { atBreak: true, character: "|", after: "[	 :-]" },
        // A pipe in a cell must be encoded.
        { character: "|", inConstruct: "tableCell" },
        // A colon must be followed by a dash, in which case it could start a
        // delimiter row.
        { atBreak: true, character: ":", after: "-" },
        // A delimiter row can also start with a dash, when followed by more
        // dashes, a colon, or a pipe.
        // This is a stricter version than the built in check for lists, thematic
        // breaks, and setex heading underlines though:
        // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
        { atBreak: true, character: "-", after: "[:|-]" }
      ],
      handlers: {
        inlineCode: inlineCodeWithTable,
        table: handleTable,
        tableCell: handleTableCell,
        tableRow: handleTableRow
      }
    };
    function handleTable(node2, _3, state, info) {
      return serializeData(handleTableAsData(node2, state, info), node2.align);
    }
    function handleTableRow(node2, _3, state, info) {
      const row = handleTableRowAsData(node2, state, info);
      const value = serializeData([row]);
      return value.slice(0, value.indexOf("\n"));
    }
    function handleTableCell(node2, _3, state, info) {
      const exit3 = state.enter("tableCell");
      const subexit = state.enter("phrasing");
      const value = state.containerPhrasing(node2, __spreadProps(__spreadValues({}, info), {
        before: around,
        after: around
      }));
      subexit();
      exit3();
      return value;
    }
    function serializeData(matrix, align) {
      return markdownTable(matrix, {
        align,
        // @ts-expect-error: `markdown-table` types should support `null`.
        alignDelimiters,
        // @ts-expect-error: `markdown-table` types should support `null`.
        padding,
        // @ts-expect-error: `markdown-table` types should support `null`.
        stringLength
      });
    }
    function handleTableAsData(node2, state, info) {
      const children = node2.children;
      let index2 = -1;
      const result = [];
      const subexit = state.enter("table");
      while (++index2 < children.length) {
        result[index2] = handleTableRowAsData(children[index2], state, info);
      }
      subexit();
      return result;
    }
    function handleTableRowAsData(node2, state, info) {
      const children = node2.children;
      let index2 = -1;
      const result = [];
      const subexit = state.enter("tableRow");
      while (++index2 < children.length) {
        result[index2] = handleTableCell(children[index2], node2, state, info);
      }
      subexit();
      return result;
    }
    function inlineCodeWithTable(node2, parent, state) {
      let value = handle.inlineCode(node2, parent, state);
      if (state.stack.includes("tableCell")) {
        value = value.replace(/\|/g, "\\$&");
      }
      return value;
    }
  }

  // node_modules/mdast-util-gfm-task-list-item/lib/index.js
  function gfmTaskListItemFromMarkdown() {
    return {
      exit: {
        taskListCheckValueChecked: exitCheck,
        taskListCheckValueUnchecked: exitCheck,
        paragraph: exitParagraphWithTaskListItem
      }
    };
  }
  function gfmTaskListItemToMarkdown() {
    return {
      unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
      handlers: { listItem: listItemWithTaskListItem }
    };
  }
  function exitCheck(token) {
    const node2 = this.stack[this.stack.length - 2];
    ok2(node2.type === "listItem");
    node2.checked = token.type === "taskListCheckValueChecked";
  }
  function exitParagraphWithTaskListItem(token) {
    const parent = this.stack[this.stack.length - 2];
    if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
      const node2 = this.stack[this.stack.length - 1];
      ok2(node2.type === "paragraph");
      const head = node2.children[0];
      if (head && head.type === "text") {
        const siblings = parent.children;
        let index2 = -1;
        let firstParaghraph;
        while (++index2 < siblings.length) {
          const sibling = siblings[index2];
          if (sibling.type === "paragraph") {
            firstParaghraph = sibling;
            break;
          }
        }
        if (firstParaghraph === node2) {
          head.value = head.value.slice(1);
          if (head.value.length === 0) {
            node2.children.shift();
          } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
            head.position.start.column++;
            head.position.start.offset++;
            node2.position.start = Object.assign({}, head.position.start);
          }
        }
      }
    }
    this.exit(token);
  }
  function listItemWithTaskListItem(node2, parent, state, info) {
    const head = node2.children[0];
    const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
    const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
    const tracker = state.createTracker(info);
    if (checkable) {
      tracker.move(checkbox);
    }
    let value = handle.listItem(node2, parent, state, __spreadValues(__spreadValues({}, info), tracker.current()));
    if (checkable) {
      value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
    }
    return value;
    function check($0) {
      return $0 + checkbox;
    }
  }

  // node_modules/mdast-util-gfm/lib/index.js
  function gfmFromMarkdown() {
    return [
      gfmAutolinkLiteralFromMarkdown(),
      gfmFootnoteFromMarkdown(),
      gfmStrikethroughFromMarkdown(),
      gfmTableFromMarkdown(),
      gfmTaskListItemFromMarkdown()
    ];
  }
  function gfmToMarkdown(options) {
    return {
      extensions: [
        gfmAutolinkLiteralToMarkdown(),
        gfmFootnoteToMarkdown(),
        gfmStrikethroughToMarkdown(),
        gfmTableToMarkdown(options),
        gfmTaskListItemToMarkdown()
      ]
    };
  }

  // node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
  var wwwPrefix = {
    tokenize: tokenizeWwwPrefix,
    partial: true
  };
  var domain = {
    tokenize: tokenizeDomain,
    partial: true
  };
  var path2 = {
    tokenize: tokenizePath,
    partial: true
  };
  var trail = {
    tokenize: tokenizeTrail,
    partial: true
  };
  var emailDomainDotTrail = {
    tokenize: tokenizeEmailDomainDotTrail,
    partial: true
  };
  var wwwAutolink = {
    tokenize: tokenizeWwwAutolink,
    previous: previousWww
  };
  var protocolAutolink = {
    tokenize: tokenizeProtocolAutolink,
    previous: previousProtocol
  };
  var emailAutolink = {
    tokenize: tokenizeEmailAutolink,
    previous: previousEmail
  };
  var text4 = {};
  function gfmAutolinkLiteral() {
    return {
      text: text4
    };
  }
  var code2 = 48;
  while (code2 < 123) {
    text4[code2] = emailAutolink;
    code2++;
    if (code2 === 58)
      code2 = 65;
    else if (code2 === 91)
      code2 = 97;
  }
  text4[43] = emailAutolink;
  text4[45] = emailAutolink;
  text4[46] = emailAutolink;
  text4[95] = emailAutolink;
  text4[72] = [emailAutolink, protocolAutolink];
  text4[104] = [emailAutolink, protocolAutolink];
  text4[87] = [emailAutolink, wwwAutolink];
  text4[119] = [emailAutolink, wwwAutolink];
  function tokenizeEmailAutolink(effects, ok3, nok) {
    const self2 = this;
    let dot;
    let data;
    return start;
    function start(code3) {
      if (!gfmAtext(code3) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
        return nok(code3);
      }
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkEmail");
      return atext(code3);
    }
    function atext(code3) {
      if (gfmAtext(code3)) {
        effects.consume(code3);
        return atext;
      }
      if (code3 === 64) {
        effects.consume(code3);
        return emailDomain;
      }
      return nok(code3);
    }
    function emailDomain(code3) {
      if (code3 === 46) {
        return effects.check(
          emailDomainDotTrail,
          emailDomainAfter,
          emailDomainDot
        )(code3);
      }
      if (code3 === 45 || code3 === 95 || asciiAlphanumeric(code3)) {
        data = true;
        effects.consume(code3);
        return emailDomain;
      }
      return emailDomainAfter(code3);
    }
    function emailDomainDot(code3) {
      effects.consume(code3);
      dot = true;
      return emailDomain;
    }
    function emailDomainAfter(code3) {
      if (data && dot && asciiAlpha(self2.previous)) {
        effects.exit("literalAutolinkEmail");
        effects.exit("literalAutolink");
        return ok3(code3);
      }
      return nok(code3);
    }
  }
  function tokenizeWwwAutolink(effects, ok3, nok) {
    const self2 = this;
    return wwwStart;
    function wwwStart(code3) {
      if (code3 !== 87 && code3 !== 119 || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
        return nok(code3);
      }
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkWww");
      return effects.check(
        wwwPrefix,
        effects.attempt(domain, effects.attempt(path2, wwwAfter), nok),
        nok
      )(code3);
    }
    function wwwAfter(code3) {
      effects.exit("literalAutolinkWww");
      effects.exit("literalAutolink");
      return ok3(code3);
    }
  }
  function tokenizeProtocolAutolink(effects, ok3, nok) {
    const self2 = this;
    let buffer = "";
    let seen = false;
    return protocolStart;
    function protocolStart(code3) {
      if ((code3 === 72 || code3 === 104) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
        effects.enter("literalAutolink");
        effects.enter("literalAutolinkHttp");
        buffer += String.fromCodePoint(code3);
        effects.consume(code3);
        return protocolPrefixInside;
      }
      return nok(code3);
    }
    function protocolPrefixInside(code3) {
      if (asciiAlpha(code3) && buffer.length < 5) {
        buffer += String.fromCodePoint(code3);
        effects.consume(code3);
        return protocolPrefixInside;
      }
      if (code3 === 58) {
        const protocol = buffer.toLowerCase();
        if (protocol === "http" || protocol === "https") {
          effects.consume(code3);
          return protocolSlashesInside;
        }
      }
      return nok(code3);
    }
    function protocolSlashesInside(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        if (seen) {
          return afterProtocol;
        }
        seen = true;
        return protocolSlashesInside;
      }
      return nok(code3);
    }
    function afterProtocol(code3) {
      return code3 === null || asciiControl(code3) || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3) || unicodePunctuation(code3) ? nok(code3) : effects.attempt(domain, effects.attempt(path2, protocolAfter), nok)(code3);
    }
    function protocolAfter(code3) {
      effects.exit("literalAutolinkHttp");
      effects.exit("literalAutolink");
      return ok3(code3);
    }
  }
  function tokenizeWwwPrefix(effects, ok3, nok) {
    let size = 0;
    return wwwPrefixInside;
    function wwwPrefixInside(code3) {
      if ((code3 === 87 || code3 === 119) && size < 3) {
        size++;
        effects.consume(code3);
        return wwwPrefixInside;
      }
      if (code3 === 46 && size === 3) {
        effects.consume(code3);
        return wwwPrefixAfter;
      }
      return nok(code3);
    }
    function wwwPrefixAfter(code3) {
      return code3 === null ? nok(code3) : ok3(code3);
    }
  }
  function tokenizeDomain(effects, ok3, nok) {
    let underscoreInLastSegment;
    let underscoreInLastLastSegment;
    let seen;
    return domainInside;
    function domainInside(code3) {
      if (code3 === 46 || code3 === 95) {
        return effects.check(trail, domainAfter, domainAtPunctuation)(code3);
      }
      if (code3 === null || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3) || code3 !== 45 && unicodePunctuation(code3)) {
        return domainAfter(code3);
      }
      seen = true;
      effects.consume(code3);
      return domainInside;
    }
    function domainAtPunctuation(code3) {
      if (code3 === 95) {
        underscoreInLastSegment = true;
      } else {
        underscoreInLastLastSegment = underscoreInLastSegment;
        underscoreInLastSegment = void 0;
      }
      effects.consume(code3);
      return domainInside;
    }
    function domainAfter(code3) {
      if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
        return nok(code3);
      }
      return ok3(code3);
    }
  }
  function tokenizePath(effects, ok3) {
    let sizeOpen = 0;
    let sizeClose = 0;
    return pathInside;
    function pathInside(code3) {
      if (code3 === 40) {
        sizeOpen++;
        effects.consume(code3);
        return pathInside;
      }
      if (code3 === 41 && sizeClose < sizeOpen) {
        return pathAtPunctuation(code3);
      }
      if (code3 === 33 || code3 === 34 || code3 === 38 || code3 === 39 || code3 === 41 || code3 === 42 || code3 === 44 || code3 === 46 || code3 === 58 || code3 === 59 || code3 === 60 || code3 === 63 || code3 === 93 || code3 === 95 || code3 === 126) {
        return effects.check(trail, ok3, pathAtPunctuation)(code3);
      }
      if (code3 === null || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
        return ok3(code3);
      }
      effects.consume(code3);
      return pathInside;
    }
    function pathAtPunctuation(code3) {
      if (code3 === 41) {
        sizeClose++;
      }
      effects.consume(code3);
      return pathInside;
    }
  }
  function tokenizeTrail(effects, ok3, nok) {
    return trail2;
    function trail2(code3) {
      if (code3 === 33 || code3 === 34 || code3 === 39 || code3 === 41 || code3 === 42 || code3 === 44 || code3 === 46 || code3 === 58 || code3 === 59 || code3 === 63 || code3 === 95 || code3 === 126) {
        effects.consume(code3);
        return trail2;
      }
      if (code3 === 38) {
        effects.consume(code3);
        return trailCharRefStart;
      }
      if (code3 === 93) {
        effects.consume(code3);
        return trailBracketAfter;
      }
      if (
        // `<` is an end.
        code3 === 60 || // So is whitespace.
        code3 === null || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)
      ) {
        return ok3(code3);
      }
      return nok(code3);
    }
    function trailBracketAfter(code3) {
      if (code3 === null || code3 === 40 || code3 === 91 || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
        return ok3(code3);
      }
      return trail2(code3);
    }
    function trailCharRefStart(code3) {
      return asciiAlpha(code3) ? trailCharRefInside(code3) : nok(code3);
    }
    function trailCharRefInside(code3) {
      if (code3 === 59) {
        effects.consume(code3);
        return trail2;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return trailCharRefInside;
      }
      return nok(code3);
    }
  }
  function tokenizeEmailDomainDotTrail(effects, ok3, nok) {
    return start;
    function start(code3) {
      effects.consume(code3);
      return after;
    }
    function after(code3) {
      return asciiAlphanumeric(code3) ? nok(code3) : ok3(code3);
    }
  }
  function previousWww(code3) {
    return code3 === null || code3 === 40 || code3 === 42 || code3 === 95 || code3 === 91 || code3 === 93 || code3 === 126 || markdownLineEndingOrSpace(code3);
  }
  function previousProtocol(code3) {
    return !asciiAlpha(code3);
  }
  function previousEmail(code3) {
    return !(code3 === 47 || gfmAtext(code3));
  }
  function gfmAtext(code3) {
    return code3 === 43 || code3 === 45 || code3 === 46 || code3 === 95 || asciiAlphanumeric(code3);
  }
  function previousUnbalanced(events) {
    let index2 = events.length;
    let result = false;
    while (index2--) {
      const token = events[index2][1];
      if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
        result = true;
        break;
      }
      if (token._gfmAutolinkLiteralWalkedInto) {
        result = false;
        break;
      }
    }
    if (events.length > 0 && !result) {
      events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
    }
    return result;
  }

  // node_modules/micromark-extension-gfm-footnote/lib/syntax.js
  var indent = {
    tokenize: tokenizeIndent2,
    partial: true
  };
  function gfmFootnote() {
    return {
      document: {
        [91]: {
          tokenize: tokenizeDefinitionStart,
          continuation: {
            tokenize: tokenizeDefinitionContinuation
          },
          exit: gfmFootnoteDefinitionEnd
        }
      },
      text: {
        [91]: {
          tokenize: tokenizeGfmFootnoteCall
        },
        [93]: {
          add: "after",
          tokenize: tokenizePotentialGfmFootnoteCall,
          resolveTo: resolveToPotentialGfmFootnoteCall
        }
      }
    };
  }
  function tokenizePotentialGfmFootnoteCall(effects, ok3, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
    let labelStart;
    while (index2--) {
      const token = self2.events[index2][1];
      if (token.type === "labelImage") {
        labelStart = token;
        break;
      }
      if (token.type === "gfmFootnoteCall" || token.type === "labelLink" || token.type === "label" || token.type === "image" || token.type === "link") {
        break;
      }
    }
    return start;
    function start(code3) {
      if (!labelStart || !labelStart._balanced) {
        return nok(code3);
      }
      const id2 = normalizeIdentifier(
        self2.sliceSerialize({
          start: labelStart.end,
          end: self2.now()
        })
      );
      if (id2.codePointAt(0) !== 94 || !defined.includes(id2.slice(1))) {
        return nok(code3);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallLabelMarker");
      return ok3(code3);
    }
  }
  function resolveToPotentialGfmFootnoteCall(events, context) {
    let index2 = events.length;
    let labelStart;
    while (index2--) {
      if (events[index2][1].type === "labelImage" && events[index2][0] === "enter") {
        labelStart = events[index2][1];
        break;
      }
    }
    events[index2 + 1][1].type = "data";
    events[index2 + 3][1].type = "gfmFootnoteCallLabelMarker";
    const call = {
      type: "gfmFootnoteCall",
      start: Object.assign({}, events[index2 + 3][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const marker = {
      type: "gfmFootnoteCallMarker",
      start: Object.assign({}, events[index2 + 3][1].end),
      end: Object.assign({}, events[index2 + 3][1].end)
    };
    marker.end.column++;
    marker.end.offset++;
    marker.end._bufferIndex++;
    const string4 = {
      type: "gfmFootnoteCallString",
      start: Object.assign({}, marker.end),
      end: Object.assign({}, events[events.length - 1][1].start)
    };
    const chunk = {
      type: "chunkString",
      contentType: "string",
      start: Object.assign({}, string4.start),
      end: Object.assign({}, string4.end)
    };
    const replacement = [
      // Take the `labelImageMarker` (now `data`, the `!`)
      events[index2 + 1],
      events[index2 + 2],
      ["enter", call, context],
      // The `[`
      events[index2 + 3],
      events[index2 + 4],
      // The `^`.
      ["enter", marker, context],
      ["exit", marker, context],
      // Everything in between.
      ["enter", string4, context],
      ["enter", chunk, context],
      ["exit", chunk, context],
      ["exit", string4, context],
      // The ending (`]`, properly parsed and labelled).
      events[events.length - 2],
      events[events.length - 1],
      ["exit", call, context]
    ];
    events.splice(index2, events.length - index2 + 1, ...replacement);
    return events;
  }
  function tokenizeGfmFootnoteCall(effects, ok3, nok) {
    const self2 = this;
    const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
    let size = 0;
    let data;
    return start;
    function start(code3) {
      effects.enter("gfmFootnoteCall");
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallLabelMarker");
      return callStart;
    }
    function callStart(code3) {
      if (code3 !== 94)
        return nok(code3);
      effects.enter("gfmFootnoteCallMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallMarker");
      effects.enter("gfmFootnoteCallString");
      effects.enter("chunkString").contentType = "string";
      return callData;
    }
    function callData(code3) {
      if (
        // Too long.
        size > 999 || // Closing brace with nothing.
        code3 === 93 && !data || // Space or tab is not supported by GFM for some reason.
        // `\n` and `[` not being supported makes sense.
        code3 === null || code3 === 91 || markdownLineEndingOrSpace(code3)
      ) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.exit("chunkString");
        const token = effects.exit("gfmFootnoteCallString");
        if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
          return nok(code3);
        }
        effects.enter("gfmFootnoteCallLabelMarker");
        effects.consume(code3);
        effects.exit("gfmFootnoteCallLabelMarker");
        effects.exit("gfmFootnoteCall");
        return ok3;
      }
      if (!markdownLineEndingOrSpace(code3)) {
        data = true;
      }
      size++;
      effects.consume(code3);
      return code3 === 92 ? callEscape : callData;
    }
    function callEscape(code3) {
      if (code3 === 91 || code3 === 92 || code3 === 93) {
        effects.consume(code3);
        size++;
        return callData;
      }
      return callData(code3);
    }
  }
  function tokenizeDefinitionStart(effects, ok3, nok) {
    const self2 = this;
    const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
    let identifier;
    let size = 0;
    let data;
    return start;
    function start(code3) {
      effects.enter("gfmFootnoteDefinition")._container = true;
      effects.enter("gfmFootnoteDefinitionLabel");
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      return labelAtMarker;
    }
    function labelAtMarker(code3) {
      if (code3 === 94) {
        effects.enter("gfmFootnoteDefinitionMarker");
        effects.consume(code3);
        effects.exit("gfmFootnoteDefinitionMarker");
        effects.enter("gfmFootnoteDefinitionLabelString");
        effects.enter("chunkString").contentType = "string";
        return labelInside;
      }
      return nok(code3);
    }
    function labelInside(code3) {
      if (
        // Too long.
        size > 999 || // Closing brace with nothing.
        code3 === 93 && !data || // Space or tab is not supported by GFM for some reason.
        // `\n` and `[` not being supported makes sense.
        code3 === null || code3 === 91 || markdownLineEndingOrSpace(code3)
      ) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.exit("chunkString");
        const token = effects.exit("gfmFootnoteDefinitionLabelString");
        identifier = normalizeIdentifier(self2.sliceSerialize(token));
        effects.enter("gfmFootnoteDefinitionLabelMarker");
        effects.consume(code3);
        effects.exit("gfmFootnoteDefinitionLabelMarker");
        effects.exit("gfmFootnoteDefinitionLabel");
        return labelAfter;
      }
      if (!markdownLineEndingOrSpace(code3)) {
        data = true;
      }
      size++;
      effects.consume(code3);
      return code3 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code3) {
      if (code3 === 91 || code3 === 92 || code3 === 93) {
        effects.consume(code3);
        size++;
        return labelInside;
      }
      return labelInside(code3);
    }
    function labelAfter(code3) {
      if (code3 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code3);
        effects.exit("definitionMarker");
        if (!defined.includes(identifier)) {
          defined.push(identifier);
        }
        return factorySpace(
          effects,
          whitespaceAfter,
          "gfmFootnoteDefinitionWhitespace"
        );
      }
      return nok(code3);
    }
    function whitespaceAfter(code3) {
      return ok3(code3);
    }
  }
  function tokenizeDefinitionContinuation(effects, ok3, nok) {
    return effects.check(blankLine, ok3, effects.attempt(indent, ok3, nok));
  }
  function gfmFootnoteDefinitionEnd(effects) {
    effects.exit("gfmFootnoteDefinition");
  }
  function tokenizeIndent2(effects, ok3, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "gfmFootnoteDefinitionIndent",
      4 + 1
    );
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok3(code3) : nok(code3);
    }
  }

  // node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js
  function gfmStrikethrough(options) {
    const options_ = options || {};
    let single = options_.singleTilde;
    const tokenizer = {
      tokenize: tokenizeStrikethrough,
      resolveAll: resolveAllStrikethrough
    };
    if (single === null || single === void 0) {
      single = true;
    }
    return {
      text: {
        [126]: tokenizer
      },
      insideSpan: {
        null: [tokenizer]
      },
      attentionMarkers: {
        null: [126]
      }
    };
    function resolveAllStrikethrough(events, context) {
      let index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][0] === "enter" && events[index2][1].type === "strikethroughSequenceTemporary" && events[index2][1]._close) {
          let open = index2;
          while (open--) {
            if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
            events[index2][1].end.offset - events[index2][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
              events[index2][1].type = "strikethroughSequence";
              events[open][1].type = "strikethroughSequence";
              const strikethrough = {
                type: "strikethrough",
                start: Object.assign({}, events[open][1].start),
                end: Object.assign({}, events[index2][1].end)
              };
              const text5 = {
                type: "strikethroughText",
                start: Object.assign({}, events[open][1].end),
                end: Object.assign({}, events[index2][1].start)
              };
              const nextEvents = [
                ["enter", strikethrough, context],
                ["enter", events[open][1], context],
                ["exit", events[open][1], context],
                ["enter", text5, context]
              ];
              const insideSpan2 = context.parser.constructs.insideSpan.null;
              if (insideSpan2) {
                splice(
                  nextEvents,
                  nextEvents.length,
                  0,
                  resolveAll(insideSpan2, events.slice(open + 1, index2), context)
                );
              }
              splice(nextEvents, nextEvents.length, 0, [
                ["exit", text5, context],
                ["enter", events[index2][1], context],
                ["exit", events[index2][1], context],
                ["exit", strikethrough, context]
              ]);
              splice(events, open - 1, index2 - open + 3, nextEvents);
              index2 = open + nextEvents.length - 2;
              break;
            }
          }
        }
      }
      index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][1].type === "strikethroughSequenceTemporary") {
          events[index2][1].type = "data";
        }
      }
      return events;
    }
    function tokenizeStrikethrough(effects, ok3, nok) {
      const previous3 = this.previous;
      const events = this.events;
      let size = 0;
      return start;
      function start(code3) {
        if (previous3 === 126 && events[events.length - 1][1].type !== "characterEscape") {
          return nok(code3);
        }
        effects.enter("strikethroughSequenceTemporary");
        return more(code3);
      }
      function more(code3) {
        const before = classifyCharacter(previous3);
        if (code3 === 126) {
          if (size > 1)
            return nok(code3);
          effects.consume(code3);
          size++;
          return more;
        }
        if (size < 2 && !single)
          return nok(code3);
        const token = effects.exit("strikethroughSequenceTemporary");
        const after = classifyCharacter(code3);
        token._open = !after || after === 2 && Boolean(before);
        token._close = !before || before === 2 && Boolean(after);
        return ok3(code3);
      }
    }
  }

  // node_modules/micromark-extension-gfm-table/lib/edit-map.js
  var EditMap = class {
    /**
     * Create a new edit map.
     */
    constructor() {
      this.map = [];
    }
    /**
     * Create an edit: a remove and/or add at a certain place.
     *
     * @param {number} index
     * @param {number} remove
     * @param {Array<Event>} add
     * @returns {undefined}
     */
    add(index2, remove2, add2) {
      addImpl(this, index2, remove2, add2);
    }
    // To do: add this when moving to `micromark`.
    // /**
    //  * Create an edit: but insert `add` before existing additions.
    //  *
    //  * @param {number} index
    //  * @param {number} remove
    //  * @param {Array<Event>} add
    //  * @returns {undefined}
    //  */
    // addBefore(index, remove, add) {
    //   addImpl(this, index, remove, add, true)
    // }
    /**
     * Done, change the events.
     *
     * @param {Array<Event>} events
     * @returns {undefined}
     */
    consume(events) {
      this.map.sort(function(a2, b4) {
        return a2[0] - b4[0];
      });
      if (this.map.length === 0) {
        return;
      }
      let index2 = this.map.length;
      const vecs = [];
      while (index2 > 0) {
        index2 -= 1;
        vecs.push(
          events.slice(this.map[index2][0] + this.map[index2][1]),
          this.map[index2][2]
        );
        events.length = this.map[index2][0];
      }
      vecs.push([...events]);
      events.length = 0;
      let slice2 = vecs.pop();
      while (slice2) {
        events.push(...slice2);
        slice2 = vecs.pop();
      }
      this.map.length = 0;
    }
  };
  function addImpl(editMap, at4, remove2, add2) {
    let index2 = 0;
    if (remove2 === 0 && add2.length === 0) {
      return;
    }
    while (index2 < editMap.map.length) {
      if (editMap.map[index2][0] === at4) {
        editMap.map[index2][1] += remove2;
        editMap.map[index2][2].push(...add2);
        return;
      }
      index2 += 1;
    }
    editMap.map.push([at4, remove2, add2]);
  }

  // node_modules/micromark-extension-gfm-table/lib/infer.js
  function gfmTableAlign(events, index2) {
    let inDelimiterRow = false;
    const align = [];
    while (index2 < events.length) {
      const event = events[index2];
      if (inDelimiterRow) {
        if (event[0] === "enter") {
          if (event[1].type === "tableContent") {
            align.push(
              events[index2 + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
            );
          }
        } else if (event[1].type === "tableContent") {
          if (events[index2 - 1][1].type === "tableDelimiterMarker") {
            const alignIndex = align.length - 1;
            align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
          }
        } else if (event[1].type === "tableDelimiterRow") {
          break;
        }
      } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
        inDelimiterRow = true;
      }
      index2 += 1;
    }
    return align;
  }

  // node_modules/micromark-extension-gfm-table/lib/syntax.js
  function gfmTable() {
    return {
      flow: {
        null: {
          tokenize: tokenizeTable,
          resolveAll: resolveTable
        }
      }
    };
  }
  function tokenizeTable(effects, ok3, nok) {
    const self2 = this;
    let size = 0;
    let sizeB = 0;
    let seen;
    return start;
    function start(code3) {
      let index2 = self2.events.length - 1;
      while (index2 > -1) {
        const type = self2.events[index2][1].type;
        if (type === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
        type === "linePrefix")
          index2--;
        else
          break;
      }
      const tail = index2 > -1 ? self2.events[index2][1].type : null;
      const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
      if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
        return nok(code3);
      }
      return next(code3);
    }
    function headRowBefore(code3) {
      effects.enter("tableHead");
      effects.enter("tableRow");
      return headRowStart(code3);
    }
    function headRowStart(code3) {
      if (code3 === 124) {
        return headRowBreak(code3);
      }
      seen = true;
      sizeB += 1;
      return headRowBreak(code3);
    }
    function headRowBreak(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        if (sizeB > 1) {
          sizeB = 0;
          self2.interrupt = true;
          effects.exit("tableRow");
          effects.enter("lineEnding");
          effects.consume(code3);
          effects.exit("lineEnding");
          return headDelimiterStart;
        }
        return nok(code3);
      }
      if (markdownSpace(code3)) {
        return factorySpace(effects, headRowBreak, "whitespace")(code3);
      }
      sizeB += 1;
      if (seen) {
        seen = false;
        size += 1;
      }
      if (code3 === 124) {
        effects.enter("tableCellDivider");
        effects.consume(code3);
        effects.exit("tableCellDivider");
        seen = true;
        return headRowBreak;
      }
      effects.enter("data");
      return headRowData(code3);
    }
    function headRowData(code3) {
      if (code3 === null || code3 === 124 || markdownLineEndingOrSpace(code3)) {
        effects.exit("data");
        return headRowBreak(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? headRowEscape : headRowData;
    }
    function headRowEscape(code3) {
      if (code3 === 92 || code3 === 124) {
        effects.consume(code3);
        return headRowData;
      }
      return headRowData(code3);
    }
    function headDelimiterStart(code3) {
      self2.interrupt = false;
      if (self2.parser.lazy[self2.now().line]) {
        return nok(code3);
      }
      effects.enter("tableDelimiterRow");
      seen = false;
      if (markdownSpace(code3)) {
        return factorySpace(
          effects,
          headDelimiterBefore,
          "linePrefix",
          self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
        )(code3);
      }
      return headDelimiterBefore(code3);
    }
    function headDelimiterBefore(code3) {
      if (code3 === 45 || code3 === 58) {
        return headDelimiterValueBefore(code3);
      }
      if (code3 === 124) {
        seen = true;
        effects.enter("tableCellDivider");
        effects.consume(code3);
        effects.exit("tableCellDivider");
        return headDelimiterCellBefore;
      }
      return headDelimiterNok(code3);
    }
    function headDelimiterCellBefore(code3) {
      if (markdownSpace(code3)) {
        return factorySpace(effects, headDelimiterValueBefore, "whitespace")(code3);
      }
      return headDelimiterValueBefore(code3);
    }
    function headDelimiterValueBefore(code3) {
      if (code3 === 58) {
        sizeB += 1;
        seen = true;
        effects.enter("tableDelimiterMarker");
        effects.consume(code3);
        effects.exit("tableDelimiterMarker");
        return headDelimiterLeftAlignmentAfter;
      }
      if (code3 === 45) {
        sizeB += 1;
        return headDelimiterLeftAlignmentAfter(code3);
      }
      if (code3 === null || markdownLineEnding(code3)) {
        return headDelimiterCellAfter(code3);
      }
      return headDelimiterNok(code3);
    }
    function headDelimiterLeftAlignmentAfter(code3) {
      if (code3 === 45) {
        effects.enter("tableDelimiterFiller");
        return headDelimiterFiller(code3);
      }
      return headDelimiterNok(code3);
    }
    function headDelimiterFiller(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return headDelimiterFiller;
      }
      if (code3 === 58) {
        seen = true;
        effects.exit("tableDelimiterFiller");
        effects.enter("tableDelimiterMarker");
        effects.consume(code3);
        effects.exit("tableDelimiterMarker");
        return headDelimiterRightAlignmentAfter;
      }
      effects.exit("tableDelimiterFiller");
      return headDelimiterRightAlignmentAfter(code3);
    }
    function headDelimiterRightAlignmentAfter(code3) {
      if (markdownSpace(code3)) {
        return factorySpace(effects, headDelimiterCellAfter, "whitespace")(code3);
      }
      return headDelimiterCellAfter(code3);
    }
    function headDelimiterCellAfter(code3) {
      if (code3 === 124) {
        return headDelimiterBefore(code3);
      }
      if (code3 === null || markdownLineEnding(code3)) {
        if (!seen || size !== sizeB) {
          return headDelimiterNok(code3);
        }
        effects.exit("tableDelimiterRow");
        effects.exit("tableHead");
        return ok3(code3);
      }
      return headDelimiterNok(code3);
    }
    function headDelimiterNok(code3) {
      return nok(code3);
    }
    function bodyRowStart(code3) {
      effects.enter("tableRow");
      return bodyRowBreak(code3);
    }
    function bodyRowBreak(code3) {
      if (code3 === 124) {
        effects.enter("tableCellDivider");
        effects.consume(code3);
        effects.exit("tableCellDivider");
        return bodyRowBreak;
      }
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("tableRow");
        return ok3(code3);
      }
      if (markdownSpace(code3)) {
        return factorySpace(effects, bodyRowBreak, "whitespace")(code3);
      }
      effects.enter("data");
      return bodyRowData(code3);
    }
    function bodyRowData(code3) {
      if (code3 === null || code3 === 124 || markdownLineEndingOrSpace(code3)) {
        effects.exit("data");
        return bodyRowBreak(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? bodyRowEscape : bodyRowData;
    }
    function bodyRowEscape(code3) {
      if (code3 === 92 || code3 === 124) {
        effects.consume(code3);
        return bodyRowData;
      }
      return bodyRowData(code3);
    }
  }
  function resolveTable(events, context) {
    let index2 = -1;
    let inFirstCellAwaitingPipe = true;
    let rowKind = 0;
    let lastCell = [0, 0, 0, 0];
    let cell = [0, 0, 0, 0];
    let afterHeadAwaitingFirstBodyRow = false;
    let lastTableEnd = 0;
    let currentTable;
    let currentBody;
    let currentCell;
    const map6 = new EditMap();
    while (++index2 < events.length) {
      const event = events[index2];
      const token = event[1];
      if (event[0] === "enter") {
        if (token.type === "tableHead") {
          afterHeadAwaitingFirstBodyRow = false;
          if (lastTableEnd !== 0) {
            flushTableEnd(map6, context, lastTableEnd, currentTable, currentBody);
            currentBody = void 0;
            lastTableEnd = 0;
          }
          currentTable = {
            type: "table",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map6.add(index2, 0, [["enter", currentTable, context]]);
        } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
          inFirstCellAwaitingPipe = true;
          currentCell = void 0;
          lastCell = [0, 0, 0, 0];
          cell = [0, index2 + 1, 0, 0];
          if (afterHeadAwaitingFirstBodyRow) {
            afterHeadAwaitingFirstBodyRow = false;
            currentBody = {
              type: "tableBody",
              start: Object.assign({}, token.start),
              // Note: correct end is set later.
              end: Object.assign({}, token.end)
            };
            map6.add(index2, 0, [["enter", currentBody, context]]);
          }
          rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
        } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
          inFirstCellAwaitingPipe = false;
          if (cell[2] === 0) {
            if (lastCell[1] !== 0) {
              cell[0] = cell[1];
              currentCell = flushCell(
                map6,
                context,
                lastCell,
                rowKind,
                void 0,
                currentCell
              );
              lastCell = [0, 0, 0, 0];
            }
            cell[2] = index2;
          }
        } else if (token.type === "tableCellDivider") {
          if (inFirstCellAwaitingPipe) {
            inFirstCellAwaitingPipe = false;
          } else {
            if (lastCell[1] !== 0) {
              cell[0] = cell[1];
              currentCell = flushCell(
                map6,
                context,
                lastCell,
                rowKind,
                void 0,
                currentCell
              );
            }
            lastCell = cell;
            cell = [lastCell[1], index2, 0, 0];
          }
        }
      } else if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = true;
        lastTableEnd = index2;
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        lastTableEnd = index2;
        if (lastCell[1] !== 0) {
          cell[0] = cell[1];
          currentCell = flushCell(
            map6,
            context,
            lastCell,
            rowKind,
            index2,
            currentCell
          );
        } else if (cell[1] !== 0) {
          currentCell = flushCell(map6, context, cell, rowKind, index2, currentCell);
        }
        rowKind = 0;
      } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        cell[3] = index2;
      }
    }
    if (lastTableEnd !== 0) {
      flushTableEnd(map6, context, lastTableEnd, currentTable, currentBody);
    }
    map6.consume(context.events);
    index2 = -1;
    while (++index2 < context.events.length) {
      const event = context.events[index2];
      if (event[0] === "enter" && event[1].type === "table") {
        event[1]._align = gfmTableAlign(context.events, index2);
      }
    }
    return events;
  }
  function flushCell(map6, context, range, rowKind, rowEnd, previousCell) {
    const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
    const valueName = "tableContent";
    if (range[0] !== 0) {
      previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
      map6.add(range[0], 0, [["exit", previousCell, context]]);
    }
    const now = getPoint(context.events, range[1]);
    previousCell = {
      type: groupName,
      start: Object.assign({}, now),
      // Note: correct end is set later.
      end: Object.assign({}, now)
    };
    map6.add(range[1], 0, [["enter", previousCell, context]]);
    if (range[2] !== 0) {
      const relatedStart = getPoint(context.events, range[2]);
      const relatedEnd = getPoint(context.events, range[3]);
      const valueToken = {
        type: valueName,
        start: Object.assign({}, relatedStart),
        end: Object.assign({}, relatedEnd)
      };
      map6.add(range[2], 0, [["enter", valueToken, context]]);
      if (rowKind !== 2) {
        const start = context.events[range[2]];
        const end = context.events[range[3]];
        start[1].end = Object.assign({}, end[1].end);
        start[1].type = "chunkText";
        start[1].contentType = "text";
        if (range[3] > range[2] + 1) {
          const a2 = range[2] + 1;
          const b4 = range[3] - range[2] - 1;
          map6.add(a2, b4, []);
        }
      }
      map6.add(range[3] + 1, 0, [["exit", valueToken, context]]);
    }
    if (rowEnd !== void 0) {
      previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
      map6.add(rowEnd, 0, [["exit", previousCell, context]]);
      previousCell = void 0;
    }
    return previousCell;
  }
  function flushTableEnd(map6, context, index2, table, tableBody) {
    const exits = [];
    const related = getPoint(context.events, index2);
    if (tableBody) {
      tableBody.end = Object.assign({}, related);
      exits.push(["exit", tableBody, context]);
    }
    table.end = Object.assign({}, related);
    exits.push(["exit", table, context]);
    map6.add(index2 + 1, 0, exits);
  }
  function getPoint(events, index2) {
    const event = events[index2];
    const side = event[0] === "enter" ? "start" : "end";
    return event[1][side];
  }

  // node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js
  var tasklistCheck = {
    tokenize: tokenizeTasklistCheck
  };
  function gfmTaskListItem() {
    return {
      text: {
        [91]: tasklistCheck
      }
    };
  }
  function tokenizeTasklistCheck(effects, ok3, nok) {
    const self2 = this;
    return open;
    function open(code3) {
      if (
        // Exit if there’s stuff before.
        self2.previous !== null || // Exit if not in the first content that is the first child of a list
        // item.
        !self2._gfmTasklistFirstContentOfListItem
      ) {
        return nok(code3);
      }
      effects.enter("taskListCheck");
      effects.enter("taskListCheckMarker");
      effects.consume(code3);
      effects.exit("taskListCheckMarker");
      return inside2;
    }
    function inside2(code3) {
      if (markdownLineEndingOrSpace(code3)) {
        effects.enter("taskListCheckValueUnchecked");
        effects.consume(code3);
        effects.exit("taskListCheckValueUnchecked");
        return close2;
      }
      if (code3 === 88 || code3 === 120) {
        effects.enter("taskListCheckValueChecked");
        effects.consume(code3);
        effects.exit("taskListCheckValueChecked");
        return close2;
      }
      return nok(code3);
    }
    function close2(code3) {
      if (code3 === 93) {
        effects.enter("taskListCheckMarker");
        effects.consume(code3);
        effects.exit("taskListCheckMarker");
        effects.exit("taskListCheck");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      if (markdownLineEnding(code3)) {
        return ok3(code3);
      }
      if (markdownSpace(code3)) {
        return effects.check(
          {
            tokenize: spaceThenNonSpace
          },
          ok3,
          nok
        )(code3);
      }
      return nok(code3);
    }
  }
  function spaceThenNonSpace(effects, ok3, nok) {
    return factorySpace(effects, after, "whitespace");
    function after(code3) {
      return code3 === null ? nok(code3) : ok3(code3);
    }
  }

  // node_modules/micromark-extension-gfm/index.js
  function gfm(options) {
    return combineExtensions([
      gfmAutolinkLiteral(),
      gfmFootnote(),
      gfmStrikethrough(options),
      gfmTable(),
      gfmTaskListItem()
    ]);
  }

  // node_modules/remark-gfm/lib/index.js
  var emptyOptions2 = {};
  function remarkGfm(options) {
    const self2 = (
      /** @type {Processor} */
      this
    );
    const settings = options || emptyOptions2;
    const data = self2.data();
    const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
    const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
    const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
    micromarkExtensions.push(gfm(settings));
    fromMarkdownExtensions.push(gfmFromMarkdown());
    toMarkdownExtensions.push(gfmToMarkdown(settings));
  }

  // node_modules/@milkdown/preset-gfm/lib/index.es.js
  function d5(e3, t4) {
    return Object.assign(e3, {
      meta: __spreadValues({
        package: "@milkdown/preset-gfm"
      }, t4)
    }), e3;
  }
  var K4 = we2("strike_through");
  d5(K4, {
    displayName: "Attr<strikethrough>",
    group: "Strikethrough"
  });
  var T5 = ye2("strike_through", (e3) => ({
    parseDOM: [
      { tag: "del" },
      { style: "text-decoration", getAttrs: (t4) => t4 === "line-through" }
    ],
    toDOM: (t4) => ["del", e3.get(K4.key)(t4)],
    parseMarkdown: {
      match: (t4) => t4.type === "delete",
      runner: (t4, n5, o2) => {
        t4.openMark(o2), t4.next(n5.children), t4.closeMark(o2);
      }
    },
    toMarkdown: {
      match: (t4) => t4.type.name === "strike_through",
      runner: (t4, n5) => {
        t4.withMark(n5, "delete");
      }
    }
  }));
  d5(T5.mark, {
    displayName: "MarkSchema<strikethrough>",
    group: "Strikethrough"
  });
  d5(T5.ctx, {
    displayName: "MarkSchemaCtx<strikethrough>",
    group: "Strikethrough"
  });
  var H5 = re2("ToggleStrikeThrough", (e3) => () => toggleMark(T5.type(e3)));
  d5(H5, {
    displayName: "Command<ToggleStrikethrough>",
    group: "Strikethrough"
  });
  var ae3 = oe2((e3) => markRule(/~([^~]+)~$/, T5.type(e3)));
  d5(ae3, {
    displayName: "InputRule<strikethrough>",
    group: "Strikethrough"
  });
  var L5 = ge2("strikeThroughKeymap", {
    ToggleStrikethrough: {
      shortcuts: "Mod-Alt-x",
      command: (e3) => {
        const t4 = e3.get(je);
        return () => t4.call(H5.key);
      }
    }
  });
  d5(L5.ctx, {
    displayName: "KeymapCtx<strikethrough>",
    group: "Strikethrough"
  });
  d5(L5.shortcuts, {
    displayName: "Keymap<strikethrough>",
    group: "Strikethrough"
  });
  function se3(e3, t4 = 3, n5 = 3) {
    const o2 = Array(n5).fill(0).map(() => M6.type(e3).createAndFill()), l5 = Array(n5).fill(0).map(() => I3.type(e3).createAndFill()), r4 = Array(t4).fill(0).map((s4, c5) => R5.type(e3).create(null, c5 === 0 ? l5 : o2));
    return S7.type(e3).create(null, r4);
  }
  function w6(e3) {
    return findParentNode((t4) => t4.type.spec.tableRole === "table")(e3);
  }
  function b3(e3, t4) {
    const n5 = w6(t4);
    if (!n5)
      return;
    const o2 = TableMap.get(n5.node);
    if (!(e3 < 0 || e3 >= o2.width))
      return o2.cellsInRect({ left: e3, right: e3 + 1, top: 0, bottom: o2.height }).map((l5) => {
        const r4 = n5.node.nodeAt(l5);
        if (!r4)
          return;
        const s4 = l5 + n5.start;
        return {
          pos: s4,
          start: s4 + 1,
          node: r4
        };
      }).filter((l5) => l5 != null);
  }
  function C5(e3, t4) {
    const n5 = w6(t4);
    if (!n5)
      return;
    const o2 = TableMap.get(n5.node);
    if (!(e3 < 0 || e3 >= o2.height))
      return o2.cellsInRect({ left: 0, right: o2.width, top: e3, bottom: e3 + 1 }).map((l5) => {
        const r4 = n5.node.nodeAt(l5);
        if (!r4)
          return;
        const s4 = l5 + n5.start;
        return {
          pos: s4,
          start: s4 + 1,
          node: r4
        };
      }).filter((l5) => l5 != null);
  }
  function Je(e3) {
    const t4 = w6(e3);
    if (!t4)
      return;
    const n5 = TableMap.get(t4.node);
    return n5.cellsInRect({
      left: 0,
      right: n5.width,
      top: 0,
      bottom: n5.height
    }).map((l5) => {
      const r4 = t4.node.nodeAt(l5), s4 = l5 + t4.start;
      return { pos: s4, start: s4 + 1, node: r4 };
    });
  }
  function Qe(e3) {
    const t4 = Je(e3.selection);
    if (t4 && t4[0]) {
      const n5 = e3.doc.resolve(t4[0].pos), o2 = t4[t4.length - 1];
      if (o2) {
        const l5 = e3.doc.resolve(o2.pos);
        return cloneTr(e3.setSelection(new CellSelection(l5, n5)));
      }
    }
    return e3;
  }
  function ce3(e3, t4, { map: n5, tableStart: o2, table: l5 }, r4) {
    const s4 = Array(r4).fill(0).reduce((i3, m4, a2) => i3 + l5.child(a2).nodeSize, o2), c5 = Array(n5.width).fill(0).map((i3, m4) => {
      const a2 = l5.nodeAt(n5.map[m4]);
      return M6.type(e3).createAndFill({ alignment: a2 == null ? void 0 : a2.attrs.alignment });
    });
    return t4.insert(s4, R5.type(e3).create(null, c5)), t4;
  }
  function ie7(e3) {
    return (t4) => (n5) => {
      const o2 = w6(n5.selection), l5 = e3 === "row";
      if (o2) {
        const r4 = TableMap.get(o2.node);
        if (t4 >= 0 && t4 < (l5 ? r4.height : r4.width)) {
          const s4 = r4.positionAt(
            l5 ? t4 : r4.height - 1,
            l5 ? r4.width - 1 : t4,
            o2.node
          ), c5 = n5.doc.resolve(o2.start + s4), i3 = l5 ? CellSelection.rowSelection : CellSelection.colSelection, m4 = r4.positionAt(l5 ? t4 : 0, l5 ? 0 : t4, o2.node), a2 = n5.doc.resolve(o2.start + m4);
          return cloneTr(n5.setSelection(i3(c5, a2)));
        }
      }
      return n5;
    };
  }
  var Ye = ie7("row");
  var et = ie7("col");
  function q6(e3) {
    return e3[0].map((t4, n5) => e3.map((o2) => o2[n5]));
  }
  function de2(e3, t4) {
    const n5 = [], o2 = TableMap.get(e3);
    for (let r4 = 0; r4 < o2.height; r4++) {
      const s4 = e3.child(r4), c5 = [];
      for (let i3 = 0; i3 < o2.width; i3++) {
        if (!t4[r4][i3])
          continue;
        const m4 = o2.map[r4 * o2.width + i3], a2 = t4[r4][i3], p6 = e3.nodeAt(m4).type.createChecked(
          Object.assign({}, a2.attrs),
          a2.content,
          a2.marks
        );
        c5.push(p6);
      }
      n5.push(s4.type.createChecked(s4.attrs, c5, s4.marks));
    }
    return e3.type.createChecked(
      e3.attrs,
      n5,
      e3.marks
    );
  }
  function me3(e3) {
    const t4 = TableMap.get(e3), n5 = [];
    for (let o2 = 0; o2 < t4.height; o2++) {
      const l5 = [], r4 = {};
      for (let s4 = 0; s4 < t4.width; s4++) {
        const c5 = t4.map[o2 * t4.width + s4], i3 = e3.nodeAt(c5), m4 = t4.findCell(c5);
        if (r4[c5] || m4.top !== o2) {
          l5.push(null);
          continue;
        }
        r4[c5] = true, l5.push(i3);
      }
      n5.push(l5);
    }
    return n5;
  }
  function ue4(e3, t4, n5, o2) {
    const l5 = t4[0] > n5[0] ? -1 : 1, r4 = e3.splice(t4[0], t4.length), s4 = r4.length % 2 === 0 ? 1 : 0;
    let c5;
    return o2 === -1 && l5 === 1 ? c5 = n5[0] - 1 : o2 === 1 && l5 === -1 ? c5 = n5[n5.length - 1] - s4 + 1 : c5 = l5 === -1 ? n5[0] : n5[n5.length - 1] - s4, e3.splice(c5, 0, ...r4), e3;
  }
  function tt(e3, t4, n5, o2) {
    let l5 = q6(me3(e3.node));
    return l5 = ue4(l5, t4, n5, o2), l5 = q6(l5), de2(e3.node, l5);
  }
  function ot3(e3, t4, n5, o2) {
    let l5 = me3(e3.node);
    return l5 = ue4(l5, t4, n5, o2), de2(e3.node, l5);
  }
  function J5(e3, t4) {
    let n5 = e3, o2 = e3;
    for (let a2 = e3; a2 >= 0; a2--) {
      const u5 = b3(a2, t4.selection);
      u5 && u5.forEach((p6) => {
        const f3 = p6.node.attrs.colspan + a2 - 1;
        f3 >= n5 && (n5 = a2), f3 > o2 && (o2 = f3);
      });
    }
    for (let a2 = e3; a2 <= o2; a2++) {
      const u5 = b3(a2, t4.selection);
      u5 && u5.forEach((p6) => {
        const f3 = p6.node.attrs.colspan + a2 - 1;
        p6.node.attrs.colspan > 1 && f3 > o2 && (o2 = f3);
      });
    }
    const l5 = [];
    for (let a2 = n5; a2 <= o2; a2++) {
      const u5 = b3(a2, t4.selection);
      u5 && u5.length && l5.push(a2);
    }
    n5 = l5[0], o2 = l5[l5.length - 1];
    const r4 = b3(n5, t4.selection), s4 = C5(0, t4.selection), c5 = t4.doc.resolve(
      r4[r4.length - 1].pos
    );
    let i3;
    for (let a2 = o2; a2 >= n5; a2--) {
      const u5 = b3(a2, t4.selection);
      if (u5 && u5.length) {
        for (let p6 = s4.length - 1; p6 >= 0; p6--)
          if (s4[p6].pos === u5[0].pos) {
            i3 = u5[0];
            break;
          }
        if (i3)
          break;
      }
    }
    const m4 = t4.doc.resolve(i3.pos);
    return { $anchor: c5, $head: m4, indexes: l5 };
  }
  function Q4(e3, t4) {
    let n5 = e3, o2 = e3;
    for (let a2 = e3; a2 >= 0; a2--)
      C5(a2, t4.selection).forEach((p6) => {
        const f3 = p6.node.attrs.rowspan + a2 - 1;
        f3 >= n5 && (n5 = a2), f3 > o2 && (o2 = f3);
      });
    for (let a2 = e3; a2 <= o2; a2++)
      C5(a2, t4.selection).forEach((p6) => {
        const f3 = p6.node.attrs.rowspan + a2 - 1;
        p6.node.attrs.rowspan > 1 && f3 > o2 && (o2 = f3);
      });
    const l5 = [];
    for (let a2 = n5; a2 <= o2; a2++) {
      const u5 = C5(a2, t4.selection);
      u5 && u5.length && l5.push(a2);
    }
    n5 = l5[0], o2 = l5[l5.length - 1];
    const r4 = C5(n5, t4.selection), s4 = b3(0, t4.selection), c5 = t4.doc.resolve(r4[r4.length - 1].pos);
    let i3;
    for (let a2 = o2; a2 >= n5; a2--) {
      const u5 = C5(a2, t4.selection);
      if (u5 && u5.length) {
        for (let p6 = s4.length - 1; p6 >= 0; p6--)
          if (s4[p6].pos === u5[0].pos) {
            i3 = u5[0];
            break;
          }
        if (i3)
          break;
      }
    }
    const m4 = t4.doc.resolve(i3.pos);
    return { $anchor: c5, $head: m4, indexes: l5 };
  }
  function nt2(e3, t4, n5, o2 = true) {
    const l5 = w6(e3.selection);
    if (!l5)
      return e3;
    const { indexes: r4 } = J5(t4, e3), { indexes: s4 } = J5(n5, e3);
    if (r4.includes(n5))
      return e3;
    const c5 = tt(
      l5,
      r4,
      s4,
      0
    ), i3 = cloneTr(e3).replaceWith(
      l5.pos,
      l5.pos + l5.node.nodeSize,
      c5
    );
    if (!o2)
      return i3;
    const m4 = TableMap.get(c5), a2 = l5.start, u5 = n5, p6 = m4.positionAt(m4.height - 1, u5, c5), f3 = i3.doc.resolve(a2 + p6), $3 = CellSelection.colSelection, P5 = m4.positionAt(0, u5, c5), _3 = i3.doc.resolve(a2 + P5);
    return i3.setSelection($3(f3, _3));
  }
  function lt4(e3, t4, n5, o2 = true) {
    const l5 = w6(e3.selection);
    if (!l5)
      return e3;
    const { indexes: r4 } = Q4(t4, e3), { indexes: s4 } = Q4(n5, e3);
    if (r4.includes(n5))
      return e3;
    const c5 = ot3(
      l5,
      r4,
      s4,
      0
    ), i3 = cloneTr(e3).replaceWith(
      l5.pos,
      l5.pos + l5.node.nodeSize,
      c5
    );
    if (!o2)
      return i3;
    const m4 = TableMap.get(c5), a2 = l5.start, u5 = n5, p6 = m4.positionAt(u5, m4.width - 1, c5), f3 = i3.doc.resolve(a2 + p6), $3 = CellSelection.rowSelection, P5 = m4.positionAt(u5, 0, c5), _3 = i3.doc.resolve(a2 + P5);
    return i3.setSelection($3(f3, _3));
  }
  var v3 = tableNodes({
    tableGroup: "block",
    cellContent: "paragraph",
    cellAttributes: {
      alignment: {
        default: "left",
        getFromDOM: (e3) => e3.style.textAlign || "left",
        setDOMAttr: (e3, t4) => {
          t4.style = `text-align: ${e3 || "left"}`;
        }
      }
    }
  });
  var S7 = fe2("table", () => __spreadProps(__spreadValues({}, v3.table), {
    parseMarkdown: {
      match: (e3) => e3.type === "table",
      runner: (e3, t4, n5) => {
        const o2 = t4.align, l5 = t4.children.map((r4, s4) => __spreadProps(__spreadValues({}, r4), {
          align: o2,
          isHeader: s4 === 0
        }));
        e3.openNode(n5), e3.next(l5), e3.closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "table",
      runner: (e3, t4) => {
        var l5;
        const n5 = (l5 = t4.content.firstChild) == null ? void 0 : l5.content;
        if (!n5)
          return;
        const o2 = [];
        n5.forEach((r4) => {
          o2.push(r4.attrs.alignment);
        }), e3.openNode("table", void 0, { align: o2 }), e3.next(t4.content), e3.closeNode();
      }
    }
  }));
  d5(S7.node, {
    displayName: "NodeSchema<table>",
    group: "Table"
  });
  d5(S7.ctx, {
    displayName: "NodeSchemaCtx<table>",
    group: "Table"
  });
  var R5 = fe2("table_row", () => __spreadProps(__spreadValues({}, v3.table_row), {
    parseMarkdown: {
      match: (e3) => e3.type === "tableRow",
      runner: (e3, t4, n5) => {
        const o2 = t4.align, l5 = t4.children.map((r4, s4) => __spreadProps(__spreadValues({}, r4), {
          align: o2[s4],
          isHeader: t4.isHeader
        }));
        e3.openNode(n5), e3.next(l5), e3.closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "table_row",
      runner: (e3, t4) => {
        e3.openNode("tableRow"), e3.next(t4.content), e3.closeNode();
      }
    }
  }));
  d5(R5.node, {
    displayName: "NodeSchema<tableRow>",
    group: "Table"
  });
  d5(R5.ctx, {
    displayName: "NodeSchemaCtx<tableRow>",
    group: "Table"
  });
  var M6 = fe2("table_cell", () => __spreadProps(__spreadValues({}, v3.table_cell), {
    parseMarkdown: {
      match: (e3) => e3.type === "tableCell" && !e3.isHeader,
      runner: (e3, t4, n5) => {
        const o2 = t4.align;
        e3.openNode(n5, { alignment: o2 }).openNode(e3.schema.nodes.paragraph).next(t4.children).closeNode().closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "table_cell",
      runner: (e3, t4) => {
        e3.openNode("tableCell").next(t4.content).closeNode();
      }
    }
  }));
  d5(M6.node, {
    displayName: "NodeSchema<tableCell>",
    group: "Table"
  });
  d5(M6.ctx, {
    displayName: "NodeSchemaCtx<tableCell>",
    group: "Table"
  });
  var I3 = fe2("table_header", () => __spreadProps(__spreadValues({}, v3.table_header), {
    parseMarkdown: {
      match: (e3) => e3.type === "tableCell" && !!e3.isHeader,
      runner: (e3, t4, n5) => {
        const o2 = t4.align;
        e3.openNode(n5, { alignment: o2 }), e3.openNode(e3.schema.nodes.paragraph), e3.next(t4.children), e3.closeNode(), e3.closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === "table_header",
      runner: (e3, t4) => {
        e3.openNode("tableCell"), e3.next(t4.content), e3.closeNode();
      }
    }
  }));
  d5(I3.node, {
    displayName: "NodeSchema<tableHeader>",
    group: "Table"
  });
  d5(I3.ctx, {
    displayName: "NodeSchemaCtx<tableHeader>",
    group: "Table"
  });
  var pe3 = oe2((e3) => new InputRule(
    new RegExp("^\\|(?<col>\\d+)[xX](?<row>\\d+)\\|\\s$"),
    (t4, n5, o2, l5) => {
      var i3, m4;
      const r4 = t4.doc.resolve(o2);
      if (!r4.node(-1).canReplaceWith(r4.index(-1), r4.indexAfter(-1), S7.type(e3)))
        return null;
      const s4 = se3(
        e3,
        Number((i3 = n5.groups) == null ? void 0 : i3.row),
        Number((m4 = n5.groups) == null ? void 0 : m4.col)
      ), c5 = t4.tr.replaceRangeWith(o2, l5, s4);
      return c5.setSelection(TextSelection.create(c5.doc, o2 + 3)).scrollIntoView();
    }
  ));
  d5(pe3, {
    displayName: "InputRule<insertTableInputRule>",
    group: "Table"
  });
  var W5 = re2("GoToPrevTableCell", () => () => goToNextCell(-1));
  d5(W5, {
    displayName: "Command<goToPrevTableCellCommand>",
    group: "Table"
  });
  var G4 = re2("GoToNextTableCell", () => () => goToNextCell(1));
  d5(G4, {
    displayName: "Command<goToNextTableCellCommand>",
    group: "Table"
  });
  var z4 = re2("BreakTable", (e3) => () => (t4, n5) => {
    if (!isInTable(t4))
      return false;
    const { $head: o2 } = t4.selection, l5 = o2.after(), r4 = t4.tr.replaceWith(l5, l5, w5.type(e3).createAndFill());
    return r4.setSelection(Selection.near(r4.doc.resolve(l5), 1)).scrollIntoView(), n5 == null || n5(r4), true;
  });
  d5(z4, {
    displayName: "Command<breakTableCommand>",
    group: "Table"
  });
  var fe4 = re2("InsertTable", (e3) => ({ row: t4, col: n5 } = {}) => (o2, l5) => {
    const { selection: r4, tr: s4 } = o2, { from: c5 } = r4, i3 = se3(e3, t4, n5), m4 = s4.replaceSelectionWith(i3), a2 = Selection.findFrom(m4.doc.resolve(c5), 1, true);
    return a2 && m4.setSelection(a2), l5 == null || l5(m4), true;
  });
  d5(fe4, {
    displayName: "Command<insertTableCommand>",
    group: "Table"
  });
  var he3 = re2("MoveRow", () => ({ from: e3, to: t4 } = {}) => (n5, o2) => {
    const { tr: l5 } = n5;
    return !!(o2 == null ? void 0 : o2(lt4(l5, e3 != null ? e3 : 0, t4 != null ? t4 : 0, true)));
  });
  d5(he3, {
    displayName: "Command<moveRowCommand>",
    group: "Table"
  });
  var ge4 = re2("MoveCol", () => ({ from: e3, to: t4 } = {}) => (n5, o2) => {
    const { tr: l5 } = n5;
    return !!(o2 == null ? void 0 : o2(nt2(l5, e3 != null ? e3 : 0, t4 != null ? t4 : 0, true)));
  });
  d5(ge4, {
    displayName: "Command<moveColCommand>",
    group: "Table"
  });
  var be2 = re2("SelectRow", () => (e3 = 0) => (t4, n5) => {
    const { tr: o2 } = t4;
    return !!(n5 == null ? void 0 : n5(Ye(e3)(o2)));
  });
  d5(be2, {
    displayName: "Command<selectRowCommand>",
    group: "Table"
  });
  var Ce4 = re2("SelectCol", () => (e3 = 0) => (t4, n5) => {
    const { tr: o2 } = t4;
    return !!(n5 == null ? void 0 : n5(et(e3)(o2)));
  });
  d5(Ce4, {
    displayName: "Command<selectColCommand>",
    group: "Table"
  });
  var ye4 = re2("SelectTable", () => () => (e3, t4) => {
    const { tr: n5 } = e3;
    return !!(t4 == null ? void 0 : t4(Qe(n5)));
  });
  d5(ye4, {
    displayName: "Command<selectTableCommand>",
    group: "Table"
  });
  var ke4 = re2("DeleteSelectedCells", () => () => (e3, t4) => {
    const { selection: n5 } = e3;
    if (!(n5 instanceof CellSelection))
      return false;
    const o2 = n5.isRowSelection(), l5 = n5.isColSelection();
    return o2 && l5 ? deleteTable(e3, t4) : l5 ? deleteColumn(e3, t4) : deleteRow(e3, t4);
  });
  d5(ke4, {
    displayName: "Command<deleteSelectedCellsCommand>",
    group: "Table"
  });
  var we4 = re2("AddColBefore", () => () => addColumnBefore);
  d5(we4, {
    displayName: "Command<addColBeforeCommand>",
    group: "Table"
  });
  var Ne3 = re2("AddColAfter", () => () => addColumnAfter);
  d5(Ne3, {
    displayName: "Command<addColAfterCommand>",
    group: "Table"
  });
  var Te3 = re2("AddRowBefore", (e3) => () => (t4, n5) => {
    if (!isInTable(t4))
      return false;
    if (n5) {
      const o2 = selectedRect(t4);
      n5(ce3(e3, t4.tr, o2, o2.top));
    }
    return true;
  });
  d5(Te3, {
    displayName: "Command<addRowBeforeCommand>",
    group: "Table"
  });
  var Se2 = re2("AddRowAfter", (e3) => () => (t4, n5) => {
    if (!isInTable(t4))
      return false;
    if (n5) {
      const o2 = selectedRect(t4);
      n5(ce3(e3, t4.tr, o2, o2.bottom));
    }
    return true;
  });
  d5(Se2, {
    displayName: "Command<addRowAfterCommand>",
    group: "Table"
  });
  var Re2 = re2("SetAlign", () => (e3 = "left") => setCellAttr("alignment", e3));
  d5(Re2, {
    displayName: "Command<setAlignCommand>",
    group: "Table"
  });
  var j5 = ge2("tableKeymap", {
    NextCell: {
      shortcuts: ["Mod-]", "Tab"],
      command: (e3) => {
        const t4 = e3.get(je);
        return () => t4.call(G4.key);
      }
    },
    PrevCell: {
      shortcuts: ["Mod-[", "Shift-Tab"],
      command: (e3) => {
        const t4 = e3.get(je);
        return () => t4.call(W5.key);
      }
    },
    ExitTable: {
      shortcuts: ["Mod-Enter"],
      command: (e3) => {
        const t4 = e3.get(je);
        return () => t4.call(z4.key);
      }
    }
  });
  d5(j5.ctx, {
    displayName: "KeymapCtx<table>",
    group: "Table"
  });
  d5(j5.shortcuts, {
    displayName: "Keymap<table>",
    group: "Table"
  });
  var E4 = "footnote_definition";
  var Y2 = "footnoteDefinition";
  var Z4 = fe2("footnote_definition", () => ({
    group: "block",
    content: "block+",
    defining: true,
    attrs: {
      label: {
        default: ""
      }
    },
    parseDOM: [
      {
        tag: `dl[data-type="${E4}"]`,
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return {
            label: e3.dataset.label
          };
        },
        contentElement: "dd"
      }
    ],
    toDOM: (e3) => {
      const t4 = e3.attrs.label;
      return [
        "dl",
        {
          // TODO: add a prosemirror plugin to sync label on change
          "data-label": t4,
          "data-type": E4
        },
        ["dt", t4],
        ["dd", 0]
      ];
    },
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === Y2,
      runner: (e3, t4, n5) => {
        e3.openNode(n5, {
          label: t4.label
        }).next(t4.children).closeNode();
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === E4,
      runner: (e3, t4) => {
        e3.openNode(Y2, void 0, {
          label: t4.attrs.label,
          identifier: t4.attrs.label
        }).next(t4.content).closeNode();
      }
    }
  }));
  d5(Z4.ctx, {
    displayName: "NodeSchemaCtx<footnodeDef>",
    group: "footnote"
  });
  d5(Z4.node, {
    displayName: "NodeSchema<footnodeDef>",
    group: "footnote"
  });
  var D3 = "footnote_reference";
  var V3 = fe2("footnote_reference", () => ({
    group: "inline",
    inline: true,
    atom: true,
    attrs: {
      label: {
        default: ""
      }
    },
    parseDOM: [
      {
        tag: `sup[data-type="${D3}"]`,
        getAttrs: (e3) => {
          if (!(e3 instanceof HTMLElement))
            throw S(e3);
          return {
            label: e3.dataset.label
          };
        }
      }
    ],
    toDOM: (e3) => {
      const t4 = e3.attrs.label;
      return [
        "sup",
        {
          // TODO: add a prosemirror plugin to sync label on change
          "data-label": t4,
          "data-type": D3
        },
        t4
      ];
    },
    parseMarkdown: {
      match: ({ type: e3 }) => e3 === "footnoteReference",
      runner: (e3, t4, n5) => {
        e3.addNode(n5, {
          label: t4.label
        });
      }
    },
    toMarkdown: {
      match: (e3) => e3.type.name === D3,
      runner: (e3, t4) => {
        e3.addNode("footnoteReference", void 0, void 0, {
          label: t4.attrs.label,
          identifier: t4.attrs.label
        });
      }
    }
  }));
  d5(V3.ctx, {
    displayName: "NodeSchemaCtx<footnodeRef>",
    group: "footnote"
  });
  d5(V3.node, {
    displayName: "NodeSchema<footnodeRef>",
    group: "footnote"
  });
  var Me3 = M5.extendSchema((e3) => (t4) => {
    const n5 = e3(t4);
    return __spreadProps(__spreadValues({}, n5), {
      attrs: __spreadProps(__spreadValues({}, n5.attrs), {
        checked: {
          default: null
        }
      }),
      parseDOM: [
        {
          tag: 'li[data-item-type="task"]',
          getAttrs: (o2) => {
            if (!(o2 instanceof HTMLElement))
              throw S(o2);
            return {
              label: o2.dataset.label,
              listType: o2.dataset["list-type"],
              spread: o2.dataset.spread,
              checked: o2.dataset.checked ? o2.dataset.checked === "true" : null
            };
          }
        },
        ...(n5 == null ? void 0 : n5.parseDOM) || []
      ],
      toDOM: (o2) => n5.toDOM && o2.attrs.checked == null ? n5.toDOM(o2) : [
        "li",
        {
          "data-item-type": "task",
          "data-label": o2.attrs.label,
          "data-list-type": o2.attrs.listType,
          "data-spread": o2.attrs.spread,
          "data-checked": o2.attrs.checked
        },
        0
      ],
      parseMarkdown: {
        match: ({ type: o2 }) => o2 === "listItem",
        runner: (o2, l5, r4) => {
          if (l5.checked == null) {
            n5.parseMarkdown.runner(o2, l5, r4);
            return;
          }
          const s4 = l5.label != null ? `${l5.label}.` : "\u2022", c5 = l5.checked != null ? !!l5.checked : null, i3 = l5.label != null ? "ordered" : "bullet", m4 = l5.spread != null ? `${l5.spread}` : "true";
          o2.openNode(r4, { label: s4, listType: i3, spread: m4, checked: c5 }), o2.next(l5.children), o2.closeNode();
        }
      },
      toMarkdown: {
        match: (o2) => o2.type.name === "list_item",
        runner: (o2, l5) => {
          if (l5.attrs.checked == null) {
            n5.toMarkdown.runner(o2, l5);
            return;
          }
          const r4 = l5.attrs.label, s4 = l5.attrs.listType, c5 = l5.attrs.spread === "true", i3 = l5.attrs.checked;
          o2.openNode("listItem", void 0, { label: r4, listType: s4, spread: c5, checked: i3 }), o2.next(l5.content), o2.closeNode();
        }
      }
    });
  });
  d5(Me3, {
    displayName: "NodeSchema<listItem>",
    group: "ListItem"
  });
  var Ae3 = oe2(() => new InputRule(new RegExp("^\\[(?<checked>\\s|x)\\]\\s$"), (e3, t4, n5, o2) => {
    var a2;
    const l5 = e3.doc.resolve(n5);
    let r4 = 0, s4 = l5.node(r4);
    for (; s4 && s4.type.name !== "list_item"; )
      r4--, s4 = l5.node(r4);
    if (!s4 || s4.attrs.checked != null)
      return null;
    const c5 = ((a2 = t4.groups) == null ? void 0 : a2.checked) === "x", i3 = l5.before(r4), m4 = e3.tr;
    return m4.deleteRange(n5, o2).setNodeMarkup(i3, void 0, __spreadProps(__spreadValues({}, s4.attrs), { checked: c5 })), m4;
  }));
  d5(Ae3, {
    displayName: "InputRule<wrapInTaskListInputRule>",
    group: "ListItem"
  });
  var rt = [
    L5,
    j5
  ].flat();
  var at3 = [
    pe3,
    Ae3
  ];
  var st2 = [
    ae3
  ];
  var xe2 = ue2((e3) => {
    const t4 = new PluginKey("MILKDOWN_AUTO_INSERT_ZERO_SPACE"), n5 = (l5) => l5.type === w5.type(e3), o2 = (l5) => n5(l5) && l5.nodeSize === 2;
    return new Plugin({
      key: t4,
      props: {
        handleDOMEvents: {
          compositionstart(l5) {
            const { state: r4, dispatch: s4 } = l5, { tr: c5, selection: i3 } = r4, { $from: m4 } = i3;
            return browser2.safari && isInTable(r4) && i3.empty && o2(m4.parent) && s4(c5.insertText("\u2060", m4.start())), false;
          },
          compositionend(l5) {
            const { state: r4, dispatch: s4 } = l5, { tr: c5, selection: i3 } = r4, { $from: m4 } = i3;
            return browser2.safari && isInTable(r4) && i3.empty && n5(m4.parent) && m4.parent.textContent.startsWith("\u2060") && s4(c5.delete(m4.start(), m4.start() + 1)), false;
          }
        }
      }
    });
  });
  d5(xe2, {
    displayName: "Prose<autoInsertZeroSpaceInTablePlugin>",
    group: "Prose"
  });
  var ve3 = ue2(() => columnResizing({}));
  d5(ve3, {
    displayName: "Prose<columnResizingPlugin>",
    group: "Prose"
  });
  var Ie3 = ue2(() => tableEditing());
  d5(Ie3, {
    displayName: "Prose<tableEditingPlugin>",
    group: "Prose"
  });
  var U4 = ke2("remarkGFM", () => remarkGfm);
  d5(U4.plugin, {
    displayName: "Remark<remarkGFMPlugin>",
    group: "Remark"
  });
  d5(U4.options, {
    displayName: "RemarkConfig<remarkGFMPlugin>",
    group: "Remark"
  });
  var ct3 = [
    xe2,
    ve3,
    Ie3,
    U4
  ].flat();
  var it2 = [
    Me3,
    S7,
    R5,
    I3,
    M6,
    Z4,
    V3,
    K4,
    T5
  ].flat();
  var dt3 = [
    G4,
    W5,
    z4,
    fe4,
    he3,
    ge4,
    be2,
    Ce4,
    ye4,
    ke4,
    Te3,
    Se2,
    we4,
    Ne3,
    Re2,
    H5
  ];
  var wt = [it2, at3, st2, rt, ct3, dt3].flat();

  // node_modules/@milkdown/theme-nord/lib/index.es.js
  var index_es_exports7 = {};
  __export(index_es_exports7, {
    nord: () => c4
  });

  // node_modules/clsx/dist/clsx.mjs
  function r3(e3) {
    var t4, f3, n5 = "";
    if ("string" == typeof e3 || "number" == typeof e3)
      n5 += e3;
    else if ("object" == typeof e3)
      if (Array.isArray(e3)) {
        var o2 = e3.length;
        for (t4 = 0; t4 < o2; t4++)
          e3[t4] && (f3 = r3(e3[t4])) && (n5 && (n5 += " "), n5 += f3);
      } else
        for (f3 in e3)
          e3[f3] && (n5 && (n5 += " "), n5 += f3);
    return n5;
  }
  function clsx() {
    for (var e3, t4, f3 = 0, n5 = "", o2 = arguments.length; f3 < o2; f3++)
      (e3 = arguments[f3]) && (t4 = r3(e3)) && (n5 && (n5 += " "), n5 += t4);
    return n5;
  }
  var clsx_default = clsx;

  // node_modules/@milkdown/theme-nord/lib/index.es.js
  function c4(e3) {
    e3.update(ae, (r4) => {
      const o2 = r4.attributes;
      return __spreadProps(__spreadValues({}, r4), {
        attributes: (n5) => {
          const t4 = typeof o2 == "function" ? o2(n5) : o2;
          return __spreadProps(__spreadValues({}, t4), {
            class: clsx_default("prose dark:prose-invert outline-none", (t4 == null ? void 0 : t4.class) || "", "milkdown-theme-nord")
          });
        }
      });
    });
  }

  // package.json
  var version = "0.10.6";
  var dependencies = {
    "@codemirror/lang-javascript": "^6.2.1",
    "@milkdown/core": "^7.3.5",
    "@milkdown/plugin-history": "^7.3.5",
    "@milkdown/plugin-indent": "^7.3.5",
    "@milkdown/plugin-listener": "^7.3.5",
    "@milkdown/plugin-trailing": "^7.3.5",
    "@milkdown/preset-commonmark": "^7.3.5",
    "@milkdown/preset-gfm": "^7.3.5",
    "@milkdown/prose": "^7.3.5",
    "@milkdown/theme-nord": "^7.3.5",
    "@milkdown/utils": "^7.3.5",
    "@types/node": "^20.11.30",
    codemirror: "^6.0.1",
    esbuild: "^0.20.2"
  };

  // lib/index.js
  var exports = {
    version,
    codemirror: dist_exports8,
    "@codemirror/autocomplete": dist_exports4,
    "@codemirror/commands": dist_exports5,
    "@codemirror/lang-javascript": dist_exports6,
    "@codemirror/language": dist_exports3,
    "@codemirror/search": dist_exports7,
    "@codemirror/state": dist_exports,
    "@codemirror/view": dist_exports2,
    "@milkdown/core": index_es_exports,
    "@milkdown/plugin-history": index_es_exports2,
    "@milkdown/plugin-indent": index_es_exports3,
    "@milkdown/plugin-trailing": index_es_exports4,
    "@milkdown/preset-commonmark": index_es_exports5,
    "@milkdown/preset-gfm": index_es_exports6,
    "@milkdown/theme-nord": index_es_exports7
  };
  for (const pkg in dependencies) {
    if (exports[pkg]) {
      exports[pkg].version = dependencies[pkg];
    }
  }
  if (typeof globalThis !== "undefined" && globalThis)
    globalThis.exports = exports;
  if (typeof self !== "undefined" && self)
    self.exports = exports;
  if (typeof window !== "undefined" && window)
    window.exports = exports;
  var lib_default = exports;
})();
//# sourceMappingURL=libs.js.map
